<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[2019计划]]></title>
      <url>http://arvon.top/2019/02/12/2019%E8%AE%A1%E5%88%92/</url>
      <content type="html"><![CDATA[<p>读书写字asdfs</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[阿里云AutoScaling实践]]></title>
      <url>http://arvon.top/2018/12/19/Ali%E4%BA%91AutoScaling%E5%AE%9E%E8%B7%B5/</url>
      <content type="html"><![CDATA[<h3 id="标题设置"><a href="#标题设置" class="headerlink" title="标题设置"></a>标题设置</h3><p>xxx</p>
<p><img src="sx" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Docker方式下Bitbucket及confluence和jira的迁移]]></title>
      <url>http://arvon.top/2018/11/29/Docker%E6%96%B9%E5%BC%8F%E4%B8%8BBitbucket%E5%8F%8AConfluence%E5%92%8CJira%E8%BF%81%E7%A7%BB%E6%96%87%E6%A1%A3/</url>
      <content type="html"><![CDATA[<p>之前写过使用Docker部署Confluence、Jira、Bitbucket的文档，由于宿主服务器硬件有点跟不上了，所以前端时间进行了这些服务的迁移。这里先介绍Confluence及Jira的迁移过程。简单介绍下做的事情<br><strong>迁移思路：</strong></p>
<blockquote>
<ul>
<li>按照原来搭建方法在新宿主机上新建相同的容器（注意控制版本，可以用指定的版本来替代image的latest标签）</li>
<li>将备份的数据导入新的容器中</li>
</ul>
</blockquote>
<p>这里面最容易出问题的就是备份数据是否是完全完整的，比如Jira的附件及插件、Bitbucket代码是可以导入等，当然许多官方会有相关的提示，不过并没有提供更详尽的解决过程，这里算一个补充吧。<br>PS：Atlassian的这几个服务都是有自动备份功能的，所以也不需要过多干涉，后面的还原数据操作，Jira和Confluence都是用的应用自己的备份，备份路径也是官方Docker的路径（这个就根据实际情况拿到备份就行了）。还有本来想贴几个图可能会更直观，不过七牛的图床域名被回收了，之后应该会用<a href="https://github.com/Chevereto/Chevereto-Free" target="_blank" rel="external">【chevreto】</a>，有时间了整一整。<br><a id="more"></a></p>
<h3 id="创建Mysql容器"><a href="#创建Mysql容器" class="headerlink" title="创建Mysql容器"></a>创建Mysql容器</h3><ul>
<li><p>启动容器<br>先说一下为什么用Mysql，因为刚开始只是有一个Jira的需求，然后选用DB的时候感觉Mysql相对Postsql更易于操作维护，就选了这个，这导致了后面Confluence的DB问题，不过都顺利解决了。Docker启动新容器的命令如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">docker run --name mysql</div><div class="line">           -p 3306:3306 \</div><div class="line">           -v /data/mysql/data:/var/lib/mysql \</div><div class="line">           <span class="_">-e</span> MYSQL_ROOT_PASSWORD=root \</div><div class="line">           -idt docker.io/mysql:5.7.21 \</div><div class="line">           --character-set-server=utf8 \</div><div class="line">           --collation-server=utf8_bin \</div><div class="line">           --character-set-server=utf8 \</div><div class="line">           --collation-server=utf8_bin \</div><div class="line">           --max_allowed_packet=512M   \</div><div class="line">           --innodb_log_file_size=2GB</div></pre></td></tr></table></figure>
<p>注意Mysql启动时候的参数，不注意这个后面会有好多个坑。<br>使用Mysql的要求 =&gt;<a href="https://confluence.atlassian.com/doc/database-setup-for-mysql-128747.html" target="_blank" rel="external">【Confluence的文档】</a><br>修改建议 =&gt;<a href="https://confluence.atlassian.com/confkb/mysqlsyntaxerrorexception-row-size-too-large-658735905.html" target="_blank" rel="external">【Confluence的建议】</a><br>关于参数的解释 =&gt; <a href="https://blog.csdn.net/kai404/article/details/80242262" target="_blank" rel="external">【CSDN上的一篇博客】</a></p>
</li>
<li><p>Mysql容器的配置<br>登入Mysql进行DB和用户的创建</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">mysql&gt; CREATE DATABASE jira_db CHARACTER SET utf8 COLLATE utf8_bin;</div><div class="line">mysql&gt; grant ALL PRIVILEGES on jira_db.* to jira_user@<span class="string">"%"</span> Identified by <span class="string">"jira_pass"</span>;</div><div class="line">mysql&gt; CREATE DATABASE confluence CHARACTER SET utf8 COLLATE utf8_bin;</div><div class="line">mysql&gt; grant ALL PRIVILEGES on confluence.* to confluence_user@<span class="string">"%"</span> Identified by <span class="string">"confluence_pass"</span>;</div><div class="line"><span class="comment">#mysql&gt; grant SELECT on *.* to backup_user@"%" Identified by "backup_user";</span></div><div class="line"><span class="comment">#mysql&gt; grant ALL PRIVILEGES on *.* to sa_user@"%" Identified by "sa_user";</span></div><div class="line">mysql&gt; flush privileges;</div><div class="line"><span class="comment">#set global max_allowed_packet=1073741824;  当导入时有可能是这个值过小，可以临时进行调整。</span></div></pre></td></tr></table></figure>
</li>
<li><p>Mysql容器的检查<br>登入Mysql对配置进行检查</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">docker <span class="built_in">exec</span> -it mysql /bin/bash <span class="comment">#进入mysql容器</span></div><div class="line">mysql&gt; show global variables; 展示所有配置</div><div class="line">mysql&gt; show engine innodb status\G;  查看innodb装填</div><div class="line">mysql&gt; show variables like <span class="string">'character%'</span>; 查看字符集设置</div><div class="line">mysql&gt; show variables like <span class="string">'innodb_log_file%'</span>;查看innodb_log_file设置</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="新建Jira容器并还原数据"><a href="#新建Jira容器并还原数据" class="headerlink" title="新建Jira容器并还原数据"></a>新建Jira容器并还原数据</h3><ul>
<li><p>启动Jira容器<br>先启动容器，不做其他操作</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run -p 18080:8080 -dit --name jira docker.io/cptactionhank/atlassian-jira:7.8.2</div></pre></td></tr></table></figure>
</li>
<li><p>原数据导出<br>注意权限，也可以在导入操作进行权限的修改。另外官方备份的数据并不包括附件及插件等，具体可参照<a href="https://confluence.atlassian.com/adminjiraserver078/backing-up-data-947189268.html" target="_blank" rel="external">【官方说明】</a></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#导出Jira应用数据</span></div><div class="line">docker cp jira_v1:/var/atlassian/jira/<span class="built_in">export</span>/2018-Nov-18--1058.zip ./</div><div class="line">chown -R daemon.daemon 2018-Nov-18--1058.zip</div><div class="line"><span class="comment">#导出Jira附件</span></div><div class="line">docker <span class="built_in">exec</span> -it jira_v1 /bin/bash</div><div class="line">&gt; <span class="built_in">cd</span> /var/atlassian/jira/</div><div class="line">&gt; tar czvf jira_data_20181118.tar.gz /data/</div><div class="line">docker cp /var/atlassian/jira/jira_data_20181118.tar.gz ./</div><div class="line"><span class="comment">#导出插件</span></div><div class="line">docker cp jira_v1:/var/atlassian/jira/jira_plugins_20181118.tar.gz ./</div></pre></td></tr></table></figure>
</li>
<li><p>将备份数据导入指定目录</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#导入Jira应用数据</span></div><div class="line">docker cp 2018-Nov-18--1058.zip jira:/var/atlassian/jira/import/</div><div class="line">chown -R daemon.daemon 2018-Nov-18--1058.zip</div><div class="line"><span class="comment">#导入附件</span></div><div class="line">scp old-host:/tmp/jira_data_20181118.tar.gz ./jira_data_20181118.tar.gz</div><div class="line">chown daemon.daemon jira_data_20181118.tar.gz</div><div class="line">docker cp jira_data_20181118.tar.gz  jira:/var/atlassian/jira/</div><div class="line"><span class="comment">#导入插件</span></div><div class="line">docker cp jira_v1:/var/atlassian/jira/jira_plugins_20181118.tar.gz ./</div><div class="line">scp old-host:/tmp/jira_plugins_20181118.tar.gz ./</div><div class="line">docker cp jira_plugins_20181118.tar.gz jira:var/atlassian/jira/</div></pre></td></tr></table></figure>
</li>
<li><p>Jira初始化<br>在完成数据导入后，就可以登录<code>http://your_host:18080</code>，按照提示进行授权码的购买或输入。然后在最后的步骤会让选择是作为新的服务器还是从备份恢复，选择从备份恢复即可。提示还是很到位的，注意权限，权限不对的话数据导入会报错，在Jira的log里会有体现。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker logs <span class="_">-f</span> jira <span class="comment">#追踪jira的log输出</span></div></pre></td></tr></table></figure>
<p>没有问题的话，Jira就恢复完成了，另外还有下一步的参数优化，因为官方设置的JVM默认值偏低，所以最好提前调整了。</p>
</li>
<li><p>Jira的参数优化<br>其实容器启动的时候也可以指定，不过这个后续可能还会变动，直接修改便于维护就这样了，这个根据实际使用情况修改吧</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">docker <span class="built_in">exec</span> -it -u root jira /bin/bash</div><div class="line"><span class="comment">#进入容器后执行以下命令</span></div><div class="line">sed -i <span class="string">'s@JVM_MINIMUM_MEMORY=.*@JVM_MINIMUM_MEMORY="1024m"@'</span> /opt/atlassian/jira/bin/setenv.sh</div><div class="line">sed -i <span class="string">'s@JVM_MAXIMUM_MEMORY=.*@JVM_MAXIMUM_MEMORY="2048m"@'</span> /opt/atlassian/jira/bin/setenv.sh</div><div class="line"><span class="comment">#修改完之后，退出容器然后重启Jira容器即可</span></div><div class="line">docker restart jira</div></pre></td></tr></table></figure>
<p>OK，完成了Jira的迁移还原操作</p>
</li>
</ul>
<h3 id="新建Confluence容器并还原数据"><a href="#新建Confluence容器并还原数据" class="headerlink" title="新建Confluence容器并还原数据"></a>新建Confluence容器并还原数据</h3><ul>
<li><p>启动Confluence容器</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run -v /data/confluence:/var/atlassian/application-data/confluence --name=<span class="string">"confluence"</span> <span class="_">-d</span> -p 8090:8090 -p 8091:8091 confluence-oracle-jdk:v6.8.1</div></pre></td></tr></table></figure>
</li>
<li><p>Confluence原数据导出<br>因为这个数据目录是直接挂在出来的，备份路径在<code>/data/confluence/backups/backup-2018_11_18.zip</code>（根据挂在路径的不同略有差异）</p>
</li>
</ul>
<ul>
<li><p>Confluence数据导入</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">scp old-host:/data/confluence/backups/backup-2018_11_18.zip ./</div><div class="line">mv backup-2018_11_18.zip /data/confluence/restore/</div><div class="line">chown daemon.daemon /data/confluence/restore/backup-2018_11_18.zip</div></pre></td></tr></table></figure>
</li>
<li><p>Confluence初始化<br>访问<code>http://your_host:8090</code>,根据提示进行设置，需要注意连接DB的设置需要指定连接Mysql的参数,选择JDBC的方式，如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">jdbc:mysql://your_host:3306/confluence?sessionVariables=tx_isolation=&apos;READ-COMMITTED&apos;&amp;useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf8</div></pre></td></tr></table></figure>
<p>然后就可以正常使用了，跟Jira一样，JVM的参数也可以调整，不然的话，一段时间后可能内存就不够用了</p>
</li>
<li><p>Confluence启动参数修改</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">docker <span class="built_in">exec</span> -it -u root confluence /bin/bash</div><div class="line"><span class="comment">#进入Confluence容器后，执行以下命令</span></div><div class="line">sed -i <span class="string">'s@CATALINA_OPTS="-Xms.*@CATALINA_OPTS="-Xms4096m -Xms4096m $&#123;JVM_SUPPORT_RECOMMENDED_ARGS&#125; -Dconfluence.home=$&#123;CONFLUENCE_HOME&#125; -XX:+UseG1GC $&#123;CATALINA_OPTS&#125;"@'</span>  /opt/atlassian/confluence/bin/setenv.sh</div><div class="line"><span class="comment">#修改完参数后重启即可</span></div><div class="line">docker restart  confluence</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="新建Bitbucket容器并还原数据"><a href="#新建Bitbucket容器并还原数据" class="headerlink" title="新建Bitbucket容器并还原数据"></a>新建Bitbucket容器并还原数据</h3><p>Bitbucket的迁移采用了相对暴力的方式，可以参照<a href="https://confluence.atlassian.com/bitbucketserver/migrating-bitbucket-server-to-another-server-776640406.html" target="_blank" rel="external">【官方迁移向导】</a></p>
<ul>
<li><p>Bitbucket使用的是Docker-compose的方式进行部署的，如下</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="attr">postgresql:</span></div><div class="line"><span class="attr">  image:</span> <span class="string">sameersbn/postgresql:9.4-3</span></div><div class="line"><span class="attr">  environment:</span></div><div class="line"><span class="bullet">    -</span> <span class="string">DB_USER=bitbucket</span></div><div class="line"><span class="bullet">    -</span> <span class="string">DB_PASS=bitbucket_pass</span></div><div class="line"><span class="bullet">    -</span> <span class="string">DB_NAME=bitbucket</span></div><div class="line"><span class="attr">  volumes:</span></div><div class="line"><span class="bullet">    -</span> <span class="string">/srv/docker/bitbucket/postgresql:/var/lib/postgresql</span></div><div class="line"><span class="attr">bitbucket:</span></div><div class="line"><span class="attr">  image:</span> <span class="string">atlassian/bitbucket-server:5.0</span></div><div class="line"><span class="attr">  links:</span></div><div class="line"><span class="attr">    - postgresql:</span><span class="string">postgresql</span></div><div class="line"><span class="attr">  ports:</span></div><div class="line"><span class="bullet">    -</span> <span class="string">"80:7990"</span></div><div class="line"><span class="bullet">    -</span> <span class="string">"7999:7999"</span></div><div class="line"><span class="attr">  environment:</span></div><div class="line"><span class="bullet">    -</span> <span class="string">'BITBUCKET_PROXY_NAME='</span></div><div class="line"><span class="bullet">    -</span> <span class="string">'BITBUCKET_PROXY_PORT='</span></div><div class="line"><span class="bullet">    -</span> <span class="string">'BITBUCKET_PROXY_SCHEME='</span></div><div class="line"><span class="bullet">    -</span> <span class="string">'BITBUCKET_DELAYED_START='</span></div><div class="line"><span class="attr">  volumes:</span></div><div class="line"><span class="bullet">    -</span> <span class="string">/srv/docker/bitbucket/app-data:/var/atlassian/application-data/bitbucket</span></div></pre></td></tr></table></figure>
</li>
<li><p>导出数据<br>先停止原服务，防止迁移过程中有数据的读写变化</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#从上一步可以看出是直接原来的数据目录直接全部拿过来了</span></div><div class="line">tar czvf bitbucket_20181118.tar.gz  /srv/docker/bitbucket/</div><div class="line">bitbucket_20181118.tar.gz</div></pre></td></tr></table></figure>
</li>
<li><p>将备份数据放入挂载目录</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tar xvf bitbucket_20181118.tar.gz</div></pre></td></tr></table></figure>
</li>
<li><p>启动Bitbucket</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker-compose up <span class="_">-d</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="补充点"><a href="#补充点" class="headerlink" title="补充点"></a>补充点</h3><p>所有迁移完成后，由于机器IP域名等可能会变化，所以应用间的联通性需要重新建立，这就牵涉使用问题了，不赘述了。以后有其他操作及坑再同步。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Docker方式安装Jumpserver]]></title>
      <url>http://arvon.top/2018/11/27/Docker%E6%96%B9%E5%BC%8F%E5%AE%89%E8%A3%85Jumpserver/</url>
      <content type="html"><![CDATA[<p>之前有自己手动封装过Jumpserver的Docker镜像，既然官方发布的有Docker那就使用官方的。不过官方的是DockerAllinone模式，推荐使用外置DB及Reids。所以这里就再弄一个用。如官方所述需要注意Mysql的编码问题，另外还有一个关于Docker的volume小瑕疵，其他的就没有什么问题了。官方链接放在最后需要的自取，另外以下代码在我的<a href="https://github.com/Gourds/docker-image/tree/master/Service/jumpserver" target="_blank" rel="external">【github】</a>上都有。</p>
<a id="more"></a>
<h3 id="开箱即用"><a href="#开箱即用" class="headerlink" title="开箱即用"></a>开箱即用</h3><blockquote>
<p>准备工作</p>
<ul>
<li>my.cnf (指定Mysql的启动配置)</li>
<li>docker-compose.yml （编排配置）</li>
</ul>
</blockquote>
<p><strong>Mysql配置文件</strong><br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="string">[mysqld]</span></div><div class="line"><span class="string">character-set-server</span> <span class="string">=</span> <span class="string">utf8</span></div><div class="line"><span class="string">collation-server</span> <span class="string">=</span> <span class="string">utf8_unicode_ci</span></div><div class="line"><span class="string">skip-character-set-client-handshake</span></div></pre></td></tr></table></figure></p>
<p><strong>使用的docker-compose如下</strong><br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="attr">version:</span> <span class="string">'3'</span></div><div class="line"></div><div class="line"><span class="attr">services:</span></div><div class="line"><span class="attr">  db:</span></div><div class="line"><span class="attr">    image:</span> <span class="attr">mysql:5.7.23</span></div><div class="line"><span class="attr">    restart:</span> <span class="string">always</span></div><div class="line"><span class="attr">    container_name:</span> <span class="string">"mysql_jms"</span></div><div class="line"><span class="attr">    environment:</span></div><div class="line"><span class="attr">      MYSQL_ROOT_PASSWORD:</span> <span class="number">123456</span></div><div class="line"><span class="attr">      MYSQL_DATABASE:</span> <span class="string">jumpserver</span></div><div class="line"><span class="attr">      MYSQL_USER:</span> <span class="string">jumpserver</span></div><div class="line"><span class="attr">      MYSQL_PASSWORD:</span> <span class="number">123456</span></div><div class="line"><span class="attr">    ports:</span></div><div class="line"><span class="bullet">      -</span> <span class="number">3306</span><span class="string">:3306</span></div><div class="line"><span class="attr">    volumes:</span></div><div class="line"><span class="bullet">      -</span> <span class="string">/data/jumpserver-data/mysql:/var/lib/mysql</span></div><div class="line"><span class="bullet">      -</span> <span class="string">/data/docker-app/jms/my.cnf:/etc/mysql/conf.d/custom.cnf</span></div><div class="line"><span class="attr">    networks:</span></div><div class="line"><span class="bullet">      -</span> <span class="string">"jumpservernet"</span></div><div class="line"><span class="attr">  redis:</span></div><div class="line"><span class="attr">    image:</span> <span class="attr">redis:3</span></div><div class="line"><span class="attr">    container_name:</span> <span class="string">"redis_jms"</span></div><div class="line"><span class="attr">    restart:</span> <span class="string">always</span></div><div class="line"><span class="attr">    ports:</span></div><div class="line"><span class="bullet">      -</span> <span class="number">6379</span><span class="string">:6379</span></div><div class="line"><span class="attr">    volumes:</span></div><div class="line"><span class="bullet">      -</span> <span class="string">/data/jumpserver-data/redis:/data</span></div><div class="line"><span class="attr">    networks:</span></div><div class="line"><span class="bullet">      -</span> <span class="string">"jumpservernet"</span></div><div class="line"><span class="attr">  jumpserver:</span></div><div class="line"><span class="attr">    image:</span> <span class="string">wojiushixiaobai/jumpserver:1.4.3</span></div><div class="line"><span class="attr">    container_name:</span> <span class="string">"jms_v1.4.3"</span></div><div class="line"><span class="attr">    restart:</span> <span class="string">always</span></div><div class="line"><span class="attr">    depends_on:</span></div><div class="line"><span class="bullet">      -</span> <span class="string">db</span></div><div class="line"><span class="bullet">      -</span> <span class="string">redis</span></div><div class="line"><span class="attr">    environment:</span></div><div class="line"><span class="attr">      DB_ENGINE:</span> <span class="string">mysql</span></div><div class="line"><span class="attr">      DB_HOST:</span> <span class="string">db</span></div><div class="line"><span class="attr">      DB_PORT:</span> <span class="number">3306</span></div><div class="line"><span class="attr">      DB_USER:</span> <span class="string">jumpserver</span></div><div class="line"><span class="attr">      DB_PASSWORD:</span> <span class="number">123456</span></div><div class="line"><span class="attr">      DB_NAME:</span> <span class="string">jumpserver</span></div><div class="line"><span class="attr">      REDIS_HOST:</span> <span class="string">redis</span></div><div class="line"><span class="attr">      REDIS_PORT:</span> <span class="number">6379</span></div><div class="line"><span class="attr">    ports:</span></div><div class="line"><span class="bullet">      -</span> <span class="number">8080</span><span class="string">:80</span></div><div class="line"><span class="bullet">      -</span> <span class="number">2222</span><span class="string">:2222</span></div><div class="line"><span class="attr">    volumes:</span></div><div class="line"><span class="bullet">      -</span> <span class="string">/data/jumpserver-data/jms_data/jms:/opt/jumpserver/data</span></div><div class="line"><span class="bullet">      -</span> <span class="string">/data/jumpserver-data/jms_data/coco_keys:/opt/coco/keys</span></div><div class="line"><span class="bullet">      -</span> <span class="string">/data/jumpserver-data/jms_data/guacamole:/config/guacamole/keys</span></div><div class="line"><span class="bullet">      -</span> <span class="string">/data/jumpserver-data/jms_data/mysql:/var/lib/mysql</span></div><div class="line"><span class="attr">    networks:</span></div><div class="line"><span class="bullet">      -</span> <span class="string">"jumpservernet"</span></div><div class="line"></div><div class="line"><span class="attr">networks:</span></div><div class="line"><span class="attr">  jumpservernet:</span></div><div class="line"><span class="attr">    driver:</span> <span class="string">bridge</span></div></pre></td></tr></table></figure></p>
<h3 id="故障排查"><a href="#故障排查" class="headerlink" title="故障排查"></a>故障排查</h3><ul>
<li><p>mysql问题(确认mysql编码正确)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">mysql&gt; show variables like &apos;character%&apos;;</div><div class="line">+--------------------------+----------------------------+</div><div class="line">| Variable_name            | Value                      |</div><div class="line">+--------------------------+----------------------------+</div><div class="line">| character_set_client     | utf8                       |</div><div class="line">| character_set_connection | utf8                       |</div><div class="line">| character_set_database   | utf8                       |</div><div class="line">| character_set_filesystem | binary                     |</div><div class="line">| character_set_results    | utf8                       |</div><div class="line">| character_set_server     | utf8                       |</div><div class="line">| character_set_system     | utf8                       |</div><div class="line">| character_sets_dir       | /usr/share/mysql/charsets/ |</div><div class="line">+--------------------------+----------------------------+</div><div class="line">8 rows in set (0.01 sec)</div></pre></td></tr></table></figure>
</li>
<li><p>Docker的volume问题<br>如果不将docker定义的volume挂载出来，测试阶段会多出很多无用的volume，按照上面的配置就没问题，下面贴一个可以方便删除指定volume的命令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker volume ls | grep <span class="built_in">local</span> |awk <span class="string">'&#123;print $2&#125;'</span> |xargs docker volume rm</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul>
<li><a href="https://github.com/jumpserver/jumpserver" target="_blank" rel="external">Jumpserver官网</a></li>
<li><a href="https://github.com/jumpserver/Dockerfile" target="_blank" rel="external">官方Dockerfile</a></li>
<li><a href="http://docs.jumpserver.org/zh/docs/dockerinstall.html" target="_blank" rel="external">官方docker安装推荐</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[博客迁移至阿里云]]></title>
      <url>http://arvon.top/2018/10/30/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB%E8%87%B3%E9%98%BF%E9%87%8C%E4%BA%91/</url>
      <content type="html"><![CDATA[<p>之前博客使用的是搬瓦工的机器，感觉访问速度受限，刚好阿里云有活动，就决定迁移到阿里。鉴于之前一直没有一个好用的评论系统，迁移到阿里后进行了备案，开始使用畅言评论系统。<br>另外考虑到备份问题，也对部署方式进行了更新。</p>
<a id="more"></a>
<p>迁移前：</p>
<blockquote>
<p>之前Blog的部署方式是：Hexo + VPS（git-hook） + Nginx（proxy）的形式，图床使用的七牛云。</p>
</blockquote>
<p>迁移后：</p>
<blockquote>
<p>本地Hexo将Blog文件提交到Github<br>然后通过Github的Webhooks功能通知Ali服务器，服务器进行Git pull操作<br>Nginx使用Docker的方式</p>
</blockquote>
<p>接收Github通知需要一个HTTP服务器，没必要用太重的web框架，所以就自己写了一个简单的<a href="https://github.com/Gourds/daily-scripts/blob/master/python-scripts/tools_github_hook.py" target="_blank" rel="external">【代码地址】</a>，如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># Requier: pip install GitPython</span></div><div class="line"><span class="comment"># http://note.qidong.name/2018/01/gitpython/</span></div><div class="line"><span class="keyword">import</span> socket</div><div class="line"><span class="keyword">import</span> threading</div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> git</div><div class="line"><span class="keyword">import</span> time</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">init_socket</span><span class="params">()</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, HOST_NAME, HOST_PORT, MAX_CLIENT)</span>:</span></div><div class="line">        self.host_name = HOST_NAME</div><div class="line">        self.host_port = HOST_PORT</div><div class="line">        self.ss = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</div><div class="line">        self.ss.bind((HOST_NAME, HOST_PORT))</div><div class="line">        self.ss.listen(MAX_CLIENT)</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self, REMOTE_PATH, LOCAL_PATH)</span>:</span></div><div class="line">        res_ok = <span class="string">'HTTP/1.1 200 OK\nContent-Type:text/html\nServer:myserver\n\nHello, Gourds!'</span></div><div class="line">        res_xx = <span class="string">'HTTP/1.1 404 OK\nContent-Type:text/html\nServer:myserver\n\nFriend!'</span></div><div class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">            sock, addr = self.ss.accept()</div><div class="line">            <span class="keyword">print</span> sock, addr</div><div class="line">            request = sock.recv(<span class="number">1024</span>)</div><div class="line">            method = request.split(<span class="string">' '</span>)[<span class="number">0</span>]</div><div class="line">            src = request.split(<span class="string">' '</span>)[<span class="number">1</span>]</div><div class="line">            <span class="keyword">print</span> method, src</div><div class="line">            <span class="keyword">if</span> method == <span class="string">'POST'</span>:</div><div class="line">                <span class="keyword">if</span> src == <span class="string">'/hook/push'</span>:</div><div class="line">                    content = res_ok</div><div class="line">                    <span class="keyword">if</span> len(os.listdir(LOCAL_PATH)) &lt;= <span class="number">1</span>:</div><div class="line">                        git.Repo.clone_from(url=REMOTE_PATH, to_path=LOCAL_PATH)</div><div class="line">                        <span class="keyword">print</span> <span class="string">"Run clone command"</span></div><div class="line">                    <span class="keyword">else</span>:</div><div class="line">                        gp = git.cmd.Git(LOCAL_PATH)</div><div class="line">                        gp.pull()</div><div class="line">                        <span class="keyword">print</span> <span class="string">"Run pull command"</span></div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    content = res_xx</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                content = res_xx</div><div class="line">            <span class="keyword">print</span> content</div><div class="line">            sock.sendall(content)</div><div class="line">            <span class="keyword">print</span> request</div><div class="line">            sock.close()</div><div class="line">            time.sleep(<span class="number">60</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    my_app = init_socket(<span class="string">""</span>, <span class="number">18080</span>, <span class="number">5</span>)</div><div class="line">    my_app.run(<span class="string">'git@project.git'</span>, <span class="string">'/path/to/nginx/'</span>)</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CentOS7安装配置supervisor]]></title>
      <url>http://arvon.top/2018/08/30/CentOS7%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEsupervisor/</url>
      <content type="html"><![CDATA[<p>之前一直用AWS的服务，使用的也是AWS官方提供的系统镜像，感觉挺好使的，所以centos7的版本用的不多。最近刚好需要使用腾讯云，记录一下supervisor的安装配置，不管简单与否，好久没写博客了还是记录一下吧。<br><img src="http://img.arvon.top:80/images/2019/08/12/20010101-emoticon-27.jpg" alt=""></p>
<a id="more"></a>
<hr>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul>
<li><p><strong>Env：</strong></p>
<blockquote>
<ul>
<li>OS: <code>CentOS Linux release 7.4.1708 (Core)</code></li>
<li>Python: <code>Python 2.7.5</code></li>
<li>Pip: <code>pip 8.1.2 from /usr/lib/python2.7/site-packages (python 2.7)</code></li>
</ul>
</blockquote>
</li>
<li><p><strong>Install supervisor with pip</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">yum install python-pip <span class="comment">#8.1.2-6.el7</span></div><div class="line">pip install supervisor <span class="comment">#meld3-1.0.2 supervisor-3.3.4</span></div><div class="line">supervisord -v</div><div class="line"><span class="comment">#Install supervisor</span></div><div class="line">mkdir /etc/supervisor</div><div class="line">echo_supervisord_conf  &gt; /etc/supervisor/supervisord.conf</div><div class="line">cat /etc/supervisor/supervisord.conf |egrep -v <span class="string">"^$|^;"</span></div><div class="line"><span class="comment">#Create supervisor config file</span></div></pre></td></tr></table></figure>
</li>
<li><p><strong>Support systemd</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">systemctl --version <span class="comment">#systemd 219</span></div><div class="line"><span class="comment">#Support systemd</span></div><div class="line">wget https://raw.githubusercontent.com/zokeber/supervisor-systemd/master/etc/systemd/system/supervisord.service -O /etc/systemd/system/supervisord.service</div><div class="line"><span class="comment">#Download systemd config for supervisor.</span></div><div class="line"><span class="comment">#https://github.com/Supervisor/initscripts</span></div><div class="line">systemctl status supervisord</div><div class="line"><span class="comment">#Now can use systemctl command to manage supervisor service</span></div><div class="line">systemctl start supervisord <span class="comment">#&#123;start|stop|restart|reload&#125;</span></div><div class="line"><span class="comment">#Start service</span></div><div class="line">systemctl list-unit-files | grep supervisor</div><div class="line"><span class="comment">#检查所有服务开机启动状态并过滤指定服务</span></div><div class="line">systemctl <span class="built_in">enable</span> supervisord</div><div class="line"><span class="comment">#添加服务到开机自启动</span></div><div class="line">systemctl is-enabled supervisord</div><div class="line"><span class="comment">#查询指定服务开机启动状态</span></div></pre></td></tr></table></figure>
</li>
<li><p><strong>Tip:</strong> <code>supervisord.service</code>文件如下</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="section">[Unit]</span></div><div class="line"><span class="attr">Description</span>=Supervisor process control system for UNIX</div><div class="line"><span class="attr">Documentation</span>=http://supervisord.org</div><div class="line"><span class="attr">After</span>=network.target</div><div class="line"><span class="section">[Service]</span></div><div class="line"><span class="attr">ExecStart</span>=/usr/bin/supervisord -n -c /etc/supervisor/supervisord.conf</div><div class="line"><span class="attr">ExecStop</span>=/usr/bin/supervisorctl <span class="variable">$OPTIONS</span> shutdown</div><div class="line"><span class="attr">ExecReload</span>=/usr/bin/supervisorctl <span class="variable">$OPTIONS</span> reload</div><div class="line"><span class="attr">KillMode</span>=process</div><div class="line"><span class="attr">Restart</span>=<span class="literal">on</span>-failure</div><div class="line"><span class="attr">RestartSec</span>=<span class="number">50</span>s</div><div class="line"><span class="section">[Install]</span></div><div class="line"><span class="attr">WantedBy</span>=multi-user.target</div></pre></td></tr></table></figure>
</li>
<li><p><strong>Tip：</strong> 主配置<code>/etc/supervisor/supervisord.conf</code>示例(参考Flowsnow的博客及官方文档)<a href="https://github.com/Gourds/daily-scripts/blob/master/ansible-playbook/roles/supervisor/templates/supervisord.conf.j2" target="_blank" rel="external">【<strong>附：</strong>我的配置】</a></p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="section">[unix_http_server]</span></div><div class="line"><span class="attr">file</span> = /tmp/supervisor.sock ;socket文件路径</div><div class="line"><span class="comment">;chmod=0700                 ; socket 文件 模式 (默认 0700)</span></div><div class="line"><span class="comment">;chown=nobody:nogroup       ; socket file uid:gid owner</span></div><div class="line"><span class="comment">;username=user              ; 使用supervisorctl连接的用户,默认没有用户</span></div><div class="line"><span class="comment">;password=123               ; 使用supervisorctl连接的用户密码,默认没有密码</span></div><div class="line"><span class="comment">;</span></div><div class="line"><span class="section">[inet_http_server]</span></div><div class="line"><span class="attr">port</span> = <span class="number">172.21</span>.<span class="number">0.4</span>:<span class="number">9001</span> ;Web Server和远程的supervisorctl配置，默认关闭</div><div class="line"><span class="attr">username</span> = user123 ;登录用户，默认没有</div><div class="line"><span class="attr">password</span> = password123 ;用于登录密码，默认没有</div><div class="line"><span class="comment">;</span></div><div class="line"><span class="section">[supervisord]</span></div><div class="line"><span class="attr">logfile</span> = /tmp/supervisord.log ;supervisord进程的日志路径</div><div class="line"><span class="attr">logfile_maxbytes</span> = <span class="number">100</span>MB ;supervisor单个日志的大小，默认为<span class="number">50</span>M</div><div class="line"><span class="attr">logfile_backups</span> = <span class="number">20</span> ;日志文件的个数，默认为<span class="number">10</span>个</div><div class="line"><span class="attr">loglevel</span> = info ;日志级别，默认info &#123;trace|info|warn|debug&#125;</div><div class="line"><span class="attr">pidfile</span> = /tmp/supervisord.pid ;supervisor的pid文件路径</div><div class="line"><span class="attr">nodaemon</span> = <span class="literal">false</span> ;默认为<span class="literal">false</span>在后台运行，改为<span class="literal">true</span>即在前台运行</div><div class="line"><span class="attr">minfds</span> = <span class="number">20000</span> ;系统最少有的空闲文件描述符，低于这个值supervisor不会启动，另外跟最大文件句柄数相关</div><div class="line"><span class="attr">minprocs</span> = <span class="number">200</span> ;最小可用的进程描述符，低于这个值supervisor将不会正常启动</div><div class="line"><span class="comment">;</span></div><div class="line"><span class="section">[rpcinterface:supervisor]</span></div><div class="line"><span class="comment">;supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface</span></div><div class="line"><span class="comment">;给XML_RPC用的，要使用supervisord或者web server必须要开启</span></div><div class="line"><span class="section">[supervisorctl]</span></div><div class="line"><span class="attr">serverurl</span> = unix:///tmp/supervisor.sock ;supervisorctl本地连接supervisord，使用本地UNIX socke</div><div class="line"><span class="comment">;</span></div><div class="line"><span class="section">[program:theprogramname]</span>      <span class="comment">; 指定管理服务的名称</span></div><div class="line"><span class="attr">command</span>=/bin/tail -f  /etc/fstab            ; 要执行的进程，可以带参数，不能是守护进程</div><div class="line"><span class="comment">;process_name=%(program_name)s ; numprocs参数为1时，就不用管这个参数 默认值%(program_name)s也就是上面的那个program冒号后面的名字</span></div><div class="line"><span class="comment">;numprocs=1                    ; 启动进程的数目。当不为1时，就是进程池的概念，默认为1</span></div><div class="line"><span class="attr">directory</span>=/tmp                ; 进程运行前，会前切换到这个目录</div><div class="line"><span class="attr">autostart</span>=<span class="literal">true</span>                ; 设置为<span class="literal">true</span> 子进程将在supervisord启动后被自动启动，默认为<span class="literal">true</span></div><div class="line"><span class="attr">startretries</span>=<span class="number">3</span>                ; 进程启动失败后，最大尝试启动的次数 当超过<span class="number">3</span>次后，supervisor将把此进程的状态置为FAIL</div><div class="line"><span class="attr">autorestart</span>=unexpected        ; 设置子进程挂掉后自动重启的情况，有三个选项，<span class="literal">false</span>,unexpected和<span class="literal">true</span>。默认为unexpected</div><div class="line"><span class="attr">exitcodes</span>=<span class="number">0</span>,<span class="number">2</span>                 ; 注意和上面的的autorestart=unexpected对应 exitcodes里面的定义的退出码是expected的。</div><div class="line"><span class="attr">stopsignal</span>=QUIT               ; 进程停止信号，可以为TERM, HUP, INT, QUIT, KILL, USR1, or USR2等信号 默认为TERM 当用设定的信号去杀掉进程，退出码会被认为是expected</div><div class="line"><span class="attr">stopwaitsecs</span>=<span class="number">10</span>               ; 这个是当我们向子进程发送stopsignal信号后，到系统返回信息给supervisord，所等待的最大时间。 超过这个时间，supervisord会向该子进程发送一个强制kill的信号(默认<span class="number">10</span>秒)</div><div class="line"><span class="comment">;stopasgroup=false             ; 这个东西主要用于，supervisord管理的子进程，这个子进程本身还有子进程 那么我们如果仅仅干掉supervisord的子进程的话，子进程的子进程有可能会变成孤儿进程 所以咱们可以设置这个选项，把整个该子进程的整个进程组都干掉  设置为true的话，一般killasgroup也会被设置为true 该选项发送的是stop信号(def false)</span></div><div class="line"><span class="comment">;killasgroup=false             ; 这个和上面的stopasgroup类似，不过发送的是kill信号(def false)</span></div><div class="line"><span class="attr">user</span>=chrism                   ; 如果supervisord是root启动，我们在这里设置这个非root用户，可以用来管理该program 默认不设置</div><div class="line"><span class="comment">;redirect_stderr=true          ; 为true，则stderr的日志会被写入stdout日志文件中 (default false)</span></div><div class="line"><span class="attr">stdout_logfile</span>=/a/path        ; 子进程的stdout的日志路径，可以指定路径，AUTO，none等三个选项 设置为none的话，将没有日志产生。设置为AUTO的话，将随机找一个地方成日志文件，而且当supervisord重新启动的时候，以前的日志文件会被清空。当 redirect_stderr=<span class="literal">true</span>的时候，sterr也会写进这个日志文件</div><div class="line"><span class="attr">stdout_logfile_maxbytes</span>=<span class="number">100</span>MB   ; 日志文件最大大小，和[supervisord]中定义的一样 (default <span class="number">50</span>MB)</div><div class="line"><span class="comment">;stdout_logfile_backups=10     ; 和[supervisord]定义的一样 (0 means none, default 10)</span></div><div class="line"><span class="comment">;stdout_capture_maxbytes=1MB   ; 这个东西是设定capture管道的大小，当值不为0的时候，子进程可以从stdout发送信息，而supervisor可以根据信息，发送相应的event  (default 0)</span></div><div class="line"><span class="comment">;stdout_events_enabled=false   ; 为ture的时候，当子进程由stdout向文件描述符中写日志的时候，将触发supervisord发送PROCESS_LOG_STDOUT类型的event(default false)</span></div><div class="line"><span class="attr">stderr_logfile</span>=/a/path        ; 设置stderr写的日志路径，当redirect_stderr=<span class="literal">true</span>。这个就不用设置了，设置了也是白搭。因为它会被写入stdout_logfile的同一个文件中 default AUTO(随便找个地存，supervisord重启被清空)</div><div class="line"><span class="attr">stderr_logfile_maxbytes</span>=<span class="number">1</span>MB   ; max # logfile bytes b4 rotation (default <span class="number">50</span>MB)</div><div class="line"><span class="attr">stderr_logfile_backups</span>=<span class="number">10</span>     ; # of stderr logfile backups (default <span class="number">10</span>)</div><div class="line"><span class="comment">;stderr_capture_maxbytes=1MB   ; number of bytes in 'capturemode' (default 0)</span></div><div class="line"><span class="comment">;stderr_events_enabled=false   ; emit events on stderr writes (default false)</span></div><div class="line"><span class="comment">;environment=A="1",B="2"       ; 这个是该子进程的环境变量，和别的子进程是不共享的</span></div><div class="line"><span class="comment">;serverurl=AUTO                ; override serverurl computation (childutils)</span></div><div class="line"><span class="comment">;</span></div><div class="line"><span class="comment">;[group:thegroupname]          ; 给programs分组，划分到组里面的program。我们就不用一个一个去操作了 我们可以对组名进行统一的操作。 注意：program被划分到组里面之后，就相当于原来的配置从supervisor的配置文件里消失了supervisor只会对组进行管理，而不再会对组里面的单个program进行管理了</span></div><div class="line"><span class="comment">;programs=progname1,progname2  ; 组成员，用逗号分开</span></div><div class="line"><span class="comment">;priority=999                  ; 优先级，相对于组和组之间 (default 999)</span></div><div class="line"><span class="section">[include]</span></div><div class="line"><span class="attr">files</span> = /etc/supervisord/conf.d/*.conf ;包含其他的程序配置文件</div></pre></td></tr></table></figure>
</li>
<li><p><strong>Tip：</strong> 子服务配置<code>/etc/supervisor/conf.d/example1.conf</code>示例(即上面的program配置项可以提取到单独文件)<a href="https://github.com/Gourds/daily-scripts/blob/master/ansible-playbook/roles/supervisor/templates/program_example.j2" target="_blank" rel="external">【<strong>附：</strong>我的配置】</a></p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="section">[program:example1]</span></div><div class="line"><span class="attr">command</span>=/bin/tail -f <span class="number">121</span></div><div class="line"><span class="attr">directory</span>=/tmp</div><div class="line"><span class="attr">user</span>=arvon</div><div class="line"><span class="attr">stdout_logfile</span>=/tmp/example1.log</div><div class="line"><span class="attr">stdout_logfile_maxbytes</span>=<span class="number">100</span>MB</div><div class="line"><span class="attr">stdout_logfile_backups</span>=<span class="number">10</span></div><div class="line"><span class="attr">redirect_stderr</span>=<span class="literal">true</span></div><div class="line"><span class="attr">autostart</span>=<span class="literal">true</span></div><div class="line"><span class="attr">autorestart</span>=unexpected</div><div class="line"><span class="attr">exitcodes</span>=<span class="number">0</span>,<span class="number">2</span></div><div class="line"><span class="attr">stopsignal</span>=QUIT</div><div class="line"><span class="attr">stopwaitsecs</span>=<span class="number">20</span></div></pre></td></tr></table></figure>
</li>
<li><p><strong>注意点（踩坑）</strong></p>
<blockquote>
<ul>
<li>supervisord中参数minfds和minprocs决定了supervisord进程及其守护的子进程的Max Processes及Max open files，并且这个limit限制不受系统ulimit所影响</li>
<li>supervisord守护的子进程无法在supervisord配置文件中单独修改minfds和minprocs这两个参数。下面红色部分的配置是无效的</li>
</ul>
<p><strong>以上截取自旺仔牛奶Blog的结论</strong></p>
</blockquote>
</li>
</ul>
<h3 id="附：CentOS7与CentOS6对比"><a href="#附：CentOS7与CentOS6对比" class="headerlink" title="附：CentOS7与CentOS6对比"></a>附：CentOS7与CentOS6对比</h3><p>CentOS7并没有在生产环境大量使用，刚好可以利用这次线上测试的机会稍微总结下<br><strong>主要区别大致包含以下几个方面：</strong></p>
<ul>
<li>基础命令</li>
<li>内核版本（2.x和3.x）</li>
<li>文件系统（ext4和xfs）</li>
<li>安全系统（防火墙）</li>
<li>服务管理（service和systemctl）</li>
<li>新增特性（虚拟化、性能管理、身份管理、网络管理等）</li>
</ul>
<blockquote>
<p><strong>建议</strong></p>
<ul>
<li>使用Docker建议使用系统版本&gt;=7.4，7.2印象中之前测试有关于cgroup的坑，另外啰嗦一个下Docker对内核版本的要求是至少3.8;目前官方推荐大于3.10<a href="https://docs.docker.com/engine/docker-overview/#the-underlying-technology" target="_blank" rel="external">【官网地址】</a></li>
<li>看到<a href="https://blog.csdn.net/xu_Melon/article/details/79043898" target="_blank" rel="external">【CSDN上的一篇Blog】</a>里面介绍了一些命令的不同，我也懒得总结了</li>
<li>还是看这个好<a href="https://wiki.centos.org/Manuals/ReleaseNotes" target="_blank" rel="external">【CentOS官方ReleaseNote】</a></li>
</ul>
</blockquote>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="http://supervisord.org/installing.html" target="_blank" rel="external">【Supervisor官方文档】</a><br><a href="http://flowsnow.net/2017/09/25/%E8%AF%A6%E8%A7%A3supervisor%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/" target="_blank" rel="external">【Flowsnow的Blog】</a><br><a href="http://www.madown.com/2017/05/25/supervisor%E4%B8%AD%E7%9A%84minfds%E5%8F%8Aminprocs%E5%8F%82%E6%95%B0%E7%94%A8%E9%80%94/" target="_blank" rel="external">【旺仔牛奶的Blog】</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Elasticsearch使用curator管理index]]></title>
      <url>http://arvon.top/2018/08/01/ES%E4%BD%BF%E7%94%A8curator%E7%AE%A1%E7%90%86index/</url>
      <content type="html"><![CDATA[<p>有个管理ES index的需求，感觉使用curl调用HTTP接口很不方便也不是很科学。在Github上一查，果然有官方提供的工具<code>curator</code>，这个工具不仅仅满足了我简单管理的需要（索引的关闭、打开、段合并、删除等），也为以后的扩展提供了新的解决方案（支持磁盘占用触发）,非常不错。以下记录我的调研测试过程。另外补充一句<code>curator</code>的官方文档十分完备，如喜欢直接阅读官方文档可以直接跳到本文底部，那里有官方文档链接。</p>
<a id="more"></a>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>官方提供了多种安装途径（pip、yum、SourceCode、Docker），支持Unix及Windows平台。由于安装需要python3.x环境且我使用的是AWS的ec2实例，感觉使用源码或yum的方式管理维护不太方便，所以决定使用Docker方式。</p>
<ul>
<li><p>本地环境</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># cat /etc/issue</span></div><div class="line">Amazon Linux AMI release 2017.03</div></pre></td></tr></table></figure>
</li>
<li><p>安装Docker环境&amp;下载源代码</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">yum install docker</div><div class="line">/etc/init.d/docker start</div><div class="line"><span class="comment">#Install and start docker service</span></div><div class="line">mkdir -pv /data/ES-curator&amp;&amp;<span class="built_in">cd</span>  /data/ES-curator</div><div class="line">wget https://github.com/elastic/curator/archive/v5.5.4.zip &amp;&amp; unzip v5.5.4.zip</div><div class="line"><span class="comment">#Download curator source code</span></div></pre></td></tr></table></figure>
</li>
<li><p>简单升级DockerFile</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">FROM python:3.6-alpine3.6 as builder</div><div class="line">RUN apk --no-cache add build-base tar musl-utils openssl-dev</div><div class="line">RUN pip3 install setuptools cx_Freeze==6.0b1 requests-aws4auth boto3</div><div class="line">COPY . .</div><div class="line">RUN ln <span class="_">-s</span> /lib/libc.musl-x86_64.so.1 ldd</div><div class="line">RUN ln <span class="_">-s</span> /lib /lib64</div><div class="line">RUN pip3 install -r requirements.txt</div><div class="line">RUN python3 setup.py build_exe</div><div class="line">FROM alpine:3.6</div><div class="line">ENV CURATOR_CONFIG_HOME /data/curator-config</div><div class="line">RUN apk --no-cache upgrade &amp;&amp; apk --no-cache add ca-certificates  &amp;&amp; \</div><div class="line">    mkdir -p <span class="string">"<span class="variable">$&#123;CURATOR_CONFIG_HOME&#125;</span>"</span></div><div class="line">COPY --from=builder build/exe.linux-x86_64-3.6 /curator/</div><div class="line">VOLUME [<span class="string">"<span class="variable">$&#123;CURATOR_CONFIG_HOME&#125;</span>"</span>]</div><div class="line">USER root:root</div><div class="line">ENTRYPOINT [<span class="string">"/curator/curator"</span>]</div></pre></td></tr></table></figure>
</li>
<li><p>构建Docker镜像</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> curator-5.5.4/ &amp;&amp; docker build -t curator:v5.5.4 .</div><div class="line"><span class="comment">#build docker image from source code</span></div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ul>
<li>配置文件（默认会使用<code>~/.curator/curator.yml</code>，可以手动通过<code>--config</code>参数指定。配置如下，更具体的文档可以查阅<a href="https://www.elastic.co/guide/en/elasticsearch/client/curator/current/configfile.html" target="_blank" rel="external">【官方】</a><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">---</span></div><div class="line"><span class="comment"># Remember, leave a key empty if there is no value.  None will be a string,</span></div><div class="line"><span class="comment"># not a Python "NoneType"</span></div><div class="line"><span class="attr">client:</span></div><div class="line"><span class="attr">  hosts:</span></div><div class="line">  <span class="comment">#填写ES的服务节点，可以只写一个节点，可以写成下面的形式，也可以写成['host1', 'host2]这种形式</span></div><div class="line"><span class="bullet">    -</span> <span class="string">x.x.x.x</span></div><div class="line"><span class="attr">  port:</span> <span class="number">9200</span> <span class="comment">#ES的端口</span></div><div class="line"><span class="attr">  url_prefix:</span> <span class="comment">#默认留空即可，使用域名的时候可以根据需求修改</span></div><div class="line"><span class="attr">  use_ssl:</span> <span class="literal">False</span></div><div class="line"><span class="attr">  certificate:</span></div><div class="line"><span class="attr">  client_cert:</span></div><div class="line"><span class="attr">  client_key:</span></div><div class="line"><span class="attr">  ssl_no_validate:</span> <span class="literal">False</span></div><div class="line"><span class="attr">  http_auth:</span></div><div class="line"><span class="attr">  timeout:</span> <span class="number">30</span></div><div class="line"><span class="attr">  master_only:</span> <span class="literal">False</span></div><div class="line"></div><div class="line"><span class="attr">logging:</span></div><div class="line"><span class="attr">  loglevel:</span> <span class="string">INFO</span> <span class="comment">#记录log的级别</span></div><div class="line"><span class="attr">  logfile:</span> <span class="string">/data/curator-config/log/curator_%Y%m%d.log</span> <span class="comment">#log的输出设置，默认留空</span></div><div class="line"><span class="attr">  logformat:</span> <span class="string">default</span></div><div class="line"><span class="attr">  blacklist:</span> <span class="string">['elasticsearch',</span> <span class="string">'urllib3'</span><span class="string">]</span> <span class="comment">#日志输出屏蔽的列表，按默认即可，这两个相关log输入太影响Debug</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="使用Docker对Index进行管理"><a href="#使用Docker对Index进行管理" class="headerlink" title="使用Docker对Index进行管理"></a>使用Docker对Index进行管理</h4><p>由于直接测试写的文档，也没有什么高深的技术，有兴趣可移步到我的<a href="https://github.com/Gourds/docker-image/tree/master/Service/elasticsearch_curator/cuator_config" target="_blank" rel="external">Github</a>。里面有测试使用的例子（包括打开索引、关闭索引、段合并以及删除索引）</p>
<p>自己写了一个简单的启动脚本，由于比较长也没什么营养，感兴趣的可以看<a href="https://github.com/Gourds/docker-image/blob/master/Service/elasticsearch_curator/cuator_config/curator-manage-index" target="_blank" rel="external">【这里】</a><br>使用我这个脚本，然后再服务器上进行设置定时任务运行,当需要单独执行某个操作时候这种管理方式可能方便些。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#crontab -e</span></div><div class="line">0 3 * * * service curator-manage-index cron</div></pre></td></tr></table></figure></p>
<p><strong>使用命令</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">docker run <span class="_">-d</span> --rm -v /data/ES-curator/curator-config/:/data/curator-config curator:v5.5.4 --config /data/curator-config/curator.yml /data/curator-config/close_index_rule.yml</div><div class="line"><span class="comment">#关闭索引</span></div><div class="line">docker run <span class="_">-d</span> --rm -v /data/ES-curator/curator-config/:/data/curator-config curator:v5.5.4 --config /data/curator-config/curator.yml /data/curator-config/delete_index_rule.yml</div><div class="line"><span class="comment">#删除索引</span></div><div class="line">docker run <span class="_">-d</span> --rm -v /data/ES-curator/curator-config/:/data/curator-config curator:v5.5.4 --config /data/curator-config/curator.yml /data/curator-config/merge_index_rule.yml</div><div class="line"><span class="comment">#段合并</span></div><div class="line">docker run <span class="_">-d</span> --rm -v /data/ES-curator/curator-config/:/data/curator-config curator:v5.5.4 --config /data/curator-config/curator.yml /data/curator-config/open_index_rule.yml</div><div class="line"><span class="comment">#打开索引</span></div></pre></td></tr></table></figure></p>
<hr>
<h3 id="补充配置说明"><a href="#补充配置说明" class="headerlink" title="补充配置说明"></a>补充配置说明</h3><p>上面记录了我使用中需求的具体示例，还有一些配置选项没有进行说明，就简单介绍下curator可以对Index进行哪些操作，以及常见具体操作时的参数选项。</p>
<ul>
<li><a href="https://www.elastic.co/guide/en/elasticsearch/client/curator/current/alias.html" target="_blank" rel="external">【Alias】</a> 这个操作可以通过别名添加或删除索引</li>
<li><a href="https://www.elastic.co/guide/en/elasticsearch/client/curator/current/allocation.html" target="_blank" rel="external">【Allocation】</a>更改选定索引的分片路由分配</li>
<li><a href="https://www.elastic.co/guide/en/elasticsearch/client/curator/current/close.html" target="_blank" rel="external">【Close】</a>关闭选定索引，可以节省内存</li>
<li><a href="https://www.elastic.co/guide/en/elasticsearch/client/curator/current/cluster_routing.html" target="_blank" rel="external">【Cluster Routing】</a>更改选定索引的分片路由分配</li>
<li><a href="https://www.elastic.co/guide/en/elasticsearch/client/curator/current/create_index.html" target="_blank" rel="external">【Create Index】</a>创建索引</li>
<li>[【Delete Index】][6]删除过滤筛选出的索引</li>
<li><a href="https://www.elastic.co/guide/en/elasticsearch/client/curator/current/delete_snapshots.html" target="_blank" rel="external">【DeleteSnapshots】</a>从选定的存储库中删除选定的快照</li>
<li><a href="https://www.elastic.co/guide/en/elasticsearch/client/curator/current/forcemerge.html" target="_blank" rel="external">【forceMerge】</a>将过滤选定的索引按照配置进行强制合并</li>
<li><a href="https://www.elastic.co/guide/en/elasticsearch/client/curator/current/index_settings.html" target="_blank" rel="external">【Index Settings】</a>更新选中的index的设置</li>
<li><a href="https://www.elastic.co/guide/en/elasticsearch/client/curator/current/open.html" target="_blank" rel="external">【Open】</a>打开选定索引</li>
<li><a href="https://www.elastic.co/guide/en/elasticsearch/client/curator/current/reindex.html" target="_blank" rel="external">【Reindex】</a>对index进行重新索引，有很多选项，具体看官网</li>
<li><a href="https://www.elastic.co/guide/en/elasticsearch/client/curator/current/replicas.html" target="_blank" rel="external">【Replicas】</a>此操作将每个shard的副本数设置为count值</li>
<li><a href="https://www.elastic.co/guide/en/elasticsearch/client/curator/current/restore.html" target="_blank" rel="external">【Restore】</a>从快照中恢复index</li>
<li><a href="https://www.elastic.co/guide/en/elasticsearch/client/curator/current/rollover.html" target="_blank" rel="external">【Rollover】</a>对满足任何描述条件的索引使用弹性搜索滚动API创建新索引</li>
<li><a href="https://www.elastic.co/guide/en/elasticsearch/client/curator/current/shrink.html" target="_blank" rel="external">【Shrink】</a>缩小索引，不过需要满足多个条件，具体参照文档</li>
<li><a href="https://www.elastic.co/guide/en/elasticsearch/client/curator/current/snapshot.html" target="_blank" rel="external">【Snapshot】</a>对选定索引创建快照</li>
</ul>
<hr>
<p>[6]:<br><a href="https://www.elastic.co/guide/en/elasticsearch/client/curator/current/delete_indices.html" target="_blank" rel="external">https://www.elastic.co/guide/en/elasticsearch/client/curator/current/delete_indices.html</a></p>
<h4 id="选取Index（Filters）"><a href="#选取Index（Filters）" class="headerlink" title="选取Index（Filters）"></a>选取Index（Filters）</h4><p>使用filters进行筛选需要操作的index。虽然过滤器可以链接，但是每个过滤器都通过隐含的逻辑AND操作链接。如果想从几个不同的模式中匹配，就像用逻辑或运算一样，可以用模式过滤器类型使用正则表达式来匹配。</p>
<p>操作筛选操作分为两部分（索引以及镜像），这里只对Index的过滤选项进行介绍，更多可以参照<a href="https://www.elastic.co/guide/en/elasticsearch/client/curator/current/filters.html" target="_blank" rel="external">【官方】</a></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#支持正则进行多个index的匹配</span></div><div class="line">  filters:</div><div class="line">  - filtertype: pattern</div><div class="line">    kind: regex</div><div class="line">    value: <span class="string">'^(alpha-|bravo-|charlie-).*$'</span></div><div class="line">  - filtertype: age <span class="comment">#按时间进行筛选index</span></div><div class="line">    <span class="built_in">source</span>: creation_date</div><div class="line">    direction: older</div><div class="line">    unit: days</div><div class="line">    unit_count: 3</div></pre></td></tr></table></figure>
<hr>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul>
<li><a href="https://github.com/elastic/curator" target="_blank" rel="external">【Github地址】</a></li>
<li><a href="https://www.elastic.co/guide/en/elasticsearch/client/curator/current/index.html" target="_blank" rel="external">【官方文档】</a></li>
</ul>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Bitbucket实践]]></title>
      <url>http://arvon.top/2018/06/09/Bitbucket%E5%AE%9E%E8%B7%B5/</url>
      <content type="html"><![CDATA[<p>前言：之前使用了Atlassian公司的Confluence和Jira，现在新项目考虑使用Bitbucket做代码仓库，这里记录一下调研实践过程。由于之前的服务是使用docker进行部署的，所以Bitbucket也决定使用docker的方式进行部署。</p>
<blockquote>
<p><strong>update:</strong><br>2018-06-12: 添加备份还原文档，文档在<a href="https://github.com/Gourds/docker-image/tree/master/Service/bitbucket/backup-restore" target="_blank" rel="external">【这里】</a>，就不单独在放Blog了</p>
</blockquote>
<a id="more"></a>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>使用Docker的方式，由于Bitbucket基于性能的考虑不推荐使用mysql(<a href="https://confluence.atlassian.com/bitbucketserver/connecting-bitbucket-server-to-mysql-776640382.html" target="_blank" rel="external">参考</a>)，所以最后根据推荐决定使用PostgreSQL，以下是编写的docker-compose,可以在<a href="https://github.com/Gourds/docker-image/tree/master/Service/bitbucket" target="_blank" rel="external">【Github】</a>进行查看和建议。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">postgresql:</div><div class="line">  image: sameersbn/postgresql:9.4-3</div><div class="line">  environment:</div><div class="line">    - DB_USER=YourUserName</div><div class="line">    - DB_PASS=YourPassword</div><div class="line">    - DB_NAME=YourDatabaseName</div><div class="line">  volumes:</div><div class="line">    - /srv/docker/bitbucket/postgresql:/var/lib/postgresql</div><div class="line">bitbucket:</div><div class="line">  image: atlassian/bitbucket-server:5.0</div><div class="line">  links:</div><div class="line">    - postgresql:postgresql</div><div class="line">  ports:</div><div class="line">    - "80:7990"</div><div class="line">    - "7999:7999"</div><div class="line">  environment:</div><div class="line">    - 'BITBUCKET_PROXY_NAME='</div><div class="line">    - 'BITBUCKET_PROXY_PORT='</div><div class="line">    - 'BITBUCKET_PROXY_SCHEME='</div><div class="line">    - 'BITBUCKET_DELAYED_START='</div><div class="line">  volumes:</div><div class="line">    - /srv/docker/bitbucket/app-data:/var/atlassian/application-data/bitbucket</div></pre></td></tr></table></figure></p>
<h3 id="备份及还原"><a href="#备份及还原" class="headerlink" title="备份及还原"></a>备份及还原</h3><p><code>Bitbucket</code>的备份主要包括两部分</p>
<ul>
<li>家目录：包括仓库数据、日志、插件等，具体参考<a href="https://confluence.atlassian.com/bitbucketserver/bitbucket-server-home-directory-776640890.html" target="_blank" rel="external">【官方说明】</a></li>
<li>数据库：<code>which contains data about pull requests, comments, users, groups, permissions, and so on.</code></li>
</ul>
<p>关于备份官方提供了3种方式</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>不停机备份</th>
<th>自定义备份</th>
<th>客户端备份</th>
</tr>
</thead>
<tbody>
<tr>
<td>概述</td>
<td>使用内部一致性数据库快照和数据块级别文件系统快照进行不停机备份</td>
<td>使用增量备份及云供应商的快照功能</td>
<td>使用外部程序锁定bitbucker服务器实例，并以独立于供应商的格式备份其整个主目录和数据库。使用简单但不适用与高可用环境</td>
</tr>
<tr>
<td>高可用</td>
<td>不影响服务</td>
<td>不可用时间短，只需要几秒钟短暂锁定存储桶就可以创建一致的快照</td>
<td>不可用时间长。bitbucket在整个备份过程中被锁定，这可能需要几分钟或更长时间，特别是在大型组织中</td>
</tr>
<tr>
<td>版本支持</td>
<td>Bitbucket 4.8+</td>
<td>Bitbucket 4.0+ &amp;&amp; Stash 2.12+</td>
<td>Bitbucket 4.0+ &amp;&amp; Stash2.7+</td>
</tr>
<tr>
<td>文档</td>
<td><a href="https://confluence.atlassian.com/bitbucketserver/using-bitbucket-zero-downtime-backup-829920023.html" target="_blank" rel="external">【DOC】</a></td>
<td><a href="https://confluence.atlassian.com/bitbucketserver/using-bitbucket-server-diy-backup-776640056.html" target="_blank" rel="external">【DOC】</a></td>
<td><a href="https://confluence.atlassian.com/bitbucketserver/using-the-bitbucket-server-backup-client-776640064.html" target="_blank" rel="external">【DOC】</a></td>
</tr>
</tbody>
</table>
<h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><p><a href="https://bitbucket.org/atlassian/docker-atlassian-bitbucket-server" target="_blank" rel="external">【官方Docker参考】</a><br><a href="https://confluence.atlassian.com/bitbucketserver/data-recovery-and-backups-776640050.html" target="_blank" rel="external">【官方备份说明】</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Ansible自定义插件获取指定远端配置]]></title>
      <url>http://arvon.top/2018/05/11/Ansible%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8F%92%E4%BB%B6%E8%8E%B7%E5%8F%96%E6%8C%87%E5%AE%9A%E8%BF%9C%E7%AB%AF%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<p><strong>概述:</strong>将ansible部署与变量控制拆分，解决应用与主机的规划问题。其中使用Ansible本地<code>fact</code>实现应用主机规划，使用自定义的Ansible<code>lookup</code>插件来实现从远端获取变量。通过这种方式可以提高ansible代码的利用率和普适性，降低运维的配置管理工作复杂度。可以关注下以下几点</p>
<blockquote>
<ul>
<li>本地git注册文件的目录结构</li>
<li>ansible的local fact与git中注册目录的对应关系</li>
<li>ansible的playbook配置模板与获取fact的配置关系</li>
</ul>
</blockquote>
<p>设计好以上几点可以大幅降低不必要的麻烦，设计的时候最好充分考虑后期扩展问题。</p>
<a id="more"></a>
<h4 id="本地fact的设置与使用"><a href="#本地fact的设置与使用" class="headerlink" title="本地fact的设置与使用"></a>本地fact的设置与使用</h4><p>Ansible支持为某个主机设置fact的机制，可以将一个或多个文件放置在目标主机的<code>/dev/ansible/facts.d</code>目录下。以下形式ansible会自动识别</p>
<blockquote>
<ul>
<li>.ini格式</li>
<li>JSON格式</li>
<li>可以不加参数形式执行，并在标准输出中输出JSON的可执行文件</li>
</ul>
</blockquote>
<p><strong>举个例子</strong></p>
<ul>
<li>本地fact如下<code>/etc/ansible/facts.d/example.fact</code></li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[book]</div><div class="line">title=hello</div><div class="line">author=arvon</div></pre></td></tr></table></figure>
<ul>
<li>在playbook如下使用</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">- name: print local fact</div><div class="line">  debug: msg="Title is &#123;&#123; ansible_local.example.book.title &#125;&#125;"</div></pre></td></tr></table></figure>
<h4 id="通过脚本注册配置到远端etcd"><a href="#通过脚本注册配置到远端etcd" class="headerlink" title="通过脚本注册配置到远端etcd"></a>通过脚本注册配置到远端etcd</h4><p>使用git结合jenkins并调用自定义python脚本进行注册。我这里做的是将git上规划的信息按原有目录结构注册到etcd。其中脚本可以在<a href="https://github.com/Gourds/daily-scripts/blob/master/python-scripts/register-etcd-from-files.py" target="_blank" rel="external">【我的Github】</a>获取。</p>
<ul>
<li>另外通过etcd-view可以方便的查看注册信息，也可以再web上进行手动微调</li>
<li>目前etcd-view还没有提供账户认证机制，可以考虑加一层nginx认证</li>
</ul>
<h4 id="获取etcd上的配置信息"><a href="#获取etcd上的配置信息" class="headerlink" title="获取etcd上的配置信息"></a>获取etcd上的配置信息</h4><p>我这里是通过etcd来进行这些变量的管理，思路就是把每个应用所需的配置变量从远端读取封装为dict，然后通过本地fact与字典获取对应关系，从而做到指定的应用获取指定的配置。</p>
<ul>
<li>自用插件脚本<a href="https://github.com/Gourds/daily-scripts/tree/master/ansible-playbook/lookup_plugins" target="_blank" rel="external">【Github地址】</a></li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="comment">###############################################################################</span></div><div class="line"><span class="comment">#Author: arvon</span></div><div class="line"><span class="comment">#Email: arvon2014@gmail.com</span></div><div class="line"><span class="comment">#Date: 2018/05/05</span></div><div class="line"><span class="comment">#Description: register etcd v3 and used by ansible lookup</span></div><div class="line"><span class="comment">#Notes:</span></div><div class="line"><span class="comment">###############################################################################</span></div><div class="line"><span class="keyword">from</span> ansible.plugins.lookup <span class="keyword">import</span> LookupBase</div><div class="line"><span class="keyword">import</span> etcd3</div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="string">'''</span></div><div class="line">Require and Document</div><div class="line">pip install etcd3</div><div class="line">V3-api: http://python-etcd3.readthedocs.io/en/latest/usage.html</div><div class="line">'''</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Etcd_v3</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, prefix, shardsinfo, ANSIBLE_ETCD_URL, type_module)</span>:</span></div><div class="line">        self.prefix = prefix</div><div class="line">        <span class="comment">#self.version = version</span></div><div class="line">        self.shardsinfo = shardsinfo</div><div class="line">        self.etcd_url = ANSIBLE_ETCD_URL</div><div class="line">        self.port = <span class="number">2379</span></div><div class="line">        self.type_module = type_module</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">gets</span><span class="params">(self)</span>:</span></div><div class="line">        client = etcd3.client(host=self.etcd_url, port=self.port)</div><div class="line">        client.get_prefix()</div><div class="line">        return_dict = &#123;&#125;</div><div class="line">        <span class="keyword">for</span> shardid <span class="keyword">in</span> self.shardsinfo:</div><div class="line">            assign_dict = &#123;&#125;</div><div class="line">            v3_prefix = os.path.join(self.prefix, str(self.shardsinfo[shardid][<span class="string">'gid'</span>]),self.type_module, str(shardid))</div><div class="line">            <span class="comment">#print v3_prefix</span></div><div class="line">            gid = str(self.shardsinfo[shardid][<span class="string">'gid'</span>])</div><div class="line">            <span class="keyword">for</span> v3_kv <span class="keyword">in</span> client.get_prefix(v3_prefix, sort_order=<span class="keyword">None</span>, sort_target=<span class="string">'key'</span>):</div><div class="line">                <span class="comment">#print v3_kv[1].key, v3_kv[0]</span></div><div class="line">                assign_dict[v3_kv[<span class="number">1</span>].key.split(<span class="string">'/'</span>)[<span class="number">-1</span>]] = v3_kv[<span class="number">0</span>]</div><div class="line">            default_prefix = os.path.join(self.prefix, gid, <span class="string">'default'</span>)</div><div class="line">            <span class="keyword">for</span> default_kv <span class="keyword">in</span> client.get_prefix(default_prefix, sort_order=<span class="keyword">None</span>, sort_target=<span class="string">'key'</span>):</div><div class="line">                <span class="comment">#print default_kv[1].key,  default_kv[0]</span></div><div class="line">                assign_dict[default_kv[<span class="number">1</span>].key.split(<span class="string">'/'</span>)[<span class="number">-1</span>]] = default_kv[<span class="number">0</span>]</div><div class="line">            return_dict[shardid] =  assign_dict</div><div class="line">        <span class="keyword">return</span> return_dict</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LookupModule</span><span class="params">(LookupBase)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self, terms, variables, **kwargs)</span>:</span></div><div class="line">        <span class="comment"># validate_certs = kwargs.get('validate_certs', True)</span></div><div class="line">        <span class="keyword">if</span> len(terms) != <span class="number">4</span>:</div><div class="line">            <span class="keyword">raise</span> AnsibleError(<span class="string">"parameter should be 4. prefix, dict of shardsinfo"</span>)</div><div class="line">        etcd = Etcd_v3(terms[<span class="number">0</span>], terms[<span class="number">1</span>], terms[<span class="number">2</span>], terms[<span class="number">3</span>])</div><div class="line">        <span class="keyword">return</span> [etcd.gets()]</div><div class="line"><span class="comment"># Test command</span></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    etcd = Etcd_v3(<span class="string">'root_v3/wpys'</span>, &#123;<span class="string">'15501'</span>:&#123;<span class="string">'gid'</span>:<span class="number">155</span>&#125;&#125;,<span class="string">'10.17.1.32'</span>,<span class="string">'gamex'</span>)</div><div class="line">    a=etcd.gets()</div><div class="line">    <span class="keyword">print</span> (a)</div></pre></td></tr></table></figure>
<ul>
<li>获取执行配置信息</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">- name: Get the contents of subnet mapping file and set it as a fact</div><div class="line">  set_fact:</div><div class="line">     get_etcd_special_keys:  "&#123;&#123; lookup('get_etcdkeys_dict','&#123;&#123; taiyouxi_etcd_prefix &#125;&#125;', '&#123;&#123;ansible_local.dev_gamex.shardsinfo&#125;&#125;', '&#123;&#123; etcd_address &#125;&#125;', '&#123;&#123; etcd_type &#125;&#125;') &#125;&#125;"</div></pre></td></tr></table></figure>
<ul>
<li>使用时的模板配置使用如下</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;% set hostip = ansible_eth0.ipv4.address %&#125;  //set ip</div><div class="line">&#123;% set etcdvalue = item.value %&#125;</div><div class="line">DSN = &#123;&#123;etcdvalue.DSN&#125;&#125;</div></pre></td></tr></table></figure>
<ul>
<li>在playbook中使用获取的配置信息</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">- name: copy chat.toml.j2 into /opt/supervisor/chat/conf</div><div class="line">  template: src=confd/&#123;&#123;type&#125;&#125;/chat.toml.j2  dest="/opt/supervisor/chat/conf/chat.toml"</div><div class="line">  with_dict: '&#123;&#123;get_etcd_special_keys&#125;&#125;'</div></pre></td></tr></table></figure>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="https://docs.ansible.com/ansible/2.5/plugins/lookup.html#plugin-list" target="_blank" rel="external">【Ansible Lookup Plugin List】</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Etcd的v3版本常用操作及可视化]]></title>
      <url>http://arvon.top/2018/04/24/etcd%E7%9A%84v3%E7%89%88%E6%9C%AC%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E5%8F%8A%E5%8F%AF%E8%A7%86%E5%8C%96/</url>
      <content type="html"><![CDATA[<p>简单记录一下<code>Etcd API v3</code>版本的基本操作和可视化<code>WEB UI</code>使用，关于V2的使用可以看我之前的一篇介绍<a href="http://arvon.top/tags/%E8%BF%90%E7%BB%B4%E6%9E%B6%E6%9E%84/">【etcd v2】</a>。Etcd v2 和 v3 本质上是共享同一套 raft 协议代码的两个独立的应用，接口不一样，存储不一样，数据也是互相隔离的。</p>
<blockquote>
<p><strong>V3相对V2的一些主要变化：</strong></p>
<ul>
<li>接口通过grpc提供rpc接口，放弃了v2的http接口。优势是长连接效率提升明显，缺点是使用不如以前方便，尤其对不方便维护长连接的场景。</li>
<li>废弃了原来的目录结构，变成了纯粹的kv，用户可以通过前缀匹配模式模拟目录</li>
<li>内存中不再保存value，同样的内存可以支持存储更多的key</li>
<li>watch机制更稳定，基本上可以通过watch机制实现数据的完全同步</li>
<li>提供了批量操作以及事务机制，用户可以通过批量事务请求来实现Etcd v2的CAS机制（批量事务支持if条件判断）</li>
</ul>
<p><em>–以上摘自王渊命的文章[侵删]</em></p>
</blockquote>
<a id="more"></a>
<h4 id="使用Etcdctl管理"><a href="#使用Etcdctl管理" class="headerlink" title="使用Etcdctl管理"></a>使用Etcdctl管理</h4><p>这里列下我常用的，其他选项可以查看help或者官网说明，链接在最后<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">ETCDCTL_API=3 etcdctl put mykey <span class="string">"this is awesome"</span> <span class="comment">#设置</span></div><div class="line">ETCDCTL_API=3 etcdctl get mykey <span class="comment">#获取</span></div><div class="line">ETCDCTL_API=3 etcdctl del mykey <span class="comment">#删除</span></div><div class="line">ETCDCTL_API=3 etcdctl get <span class="string">""</span> --from-key  <span class="comment">#获取所有的键值</span></div><div class="line">ETCDCTL_API=3 etcdctl get <span class="string">""</span> --from-key --keys-only <span class="comment">#只获取所有的key不含value</span></div><div class="line">ETCDCTL_API=3 etcdctl get <span class="string">""</span> --from-key --keys-only --limit 3 <span class="comment">#获取key只显示3个</span></div><div class="line">ETCDCTL_API=3 etcdctl get --prefix my <span class="comment">#获取所有以my开头的key及对应value</span></div><div class="line">ETCDCTL_API=3 etcdctl del my --prefix <span class="comment">#删除所有以my开头的键值</span></div></pre></td></tr></table></figure></p>
<h4 id="使用HTTP管理"><a href="#使用HTTP管理" class="headerlink" title="使用HTTP管理"></a>使用HTTP管理</h4><p>HTTP接口没有怎么用，请参考<a href="https://github.com/coreos/etcd/blob/master/Documentation/dev-guide/api_reference_v3.md" target="_blank" rel="external">【API】</a>及<a href="https://grpc.io/blog/coreos" target="_blank" rel="external">【grpc官方】</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">curl -L http://localhost:2379/v3alpha/maintenance/status -X POST <span class="_">-d</span> <span class="string">'&#123;&#125;'</span></div><div class="line">curl -L http://localhost:2379/v3alpha/kv/put -X POST <span class="_">-d</span> <span class="string">'&#123;"key": "Zm9v", "value": "YmFy"&#125;'</span></div><div class="line">curl -L http://localhost:2379/v3alpha/kv/range -X POST <span class="_">-d</span> <span class="string">'&#123;"key": "Zm9v"&#125;'</span></div><div class="line">curl -L http://localhost:2379/v3alpha/watch -X POST <span class="_">-d</span> <span class="string">'&#123;"create_request": &#123;"key": "Zm9v"&#125;&#125;'</span></div></pre></td></tr></table></figure></p>
<h4 id="注册脚本"><a href="#注册脚本" class="headerlink" title="注册脚本"></a>注册脚本</h4><p>我提供的这个脚本主要是将本地目录中的文件以递归的形式注册到etcd上（文件内容是key=value有多行）。不贴具体的脚本了，可以从<a href="https://github.com/Gourds/daily-scripts/blob/master/python-scripts/register-etcd-from-files.py" target="_blank" rel="external">【–&gt;这里&lt;–】</a>获取，脚本主要功能如下</p>
<blockquote>
<ol>
<li>Support configuration annotation</li>
<li>Support for registering null values. like “value=”</li>
<li>Support for registration of recursive directories</li>
<li>Add exception capture</li>
<li>Add null file support</li>
<li>Add null dircectory support</li>
<li>Add etcd v3 api support</li>
<li>Support e3w <a href="https://github.com/soyking/e3w" target="_blank" rel="external">https://github.com/soyking/e3w</a></li>
</ol>
</blockquote>
<p>主要说两个问题：</p>
<ul>
<li>在V2中创建目录<br>这个主要使用ETCD的HTTP接口实现，可以直接创建目录，比用key-value的形式要好,V2的可视化，推荐<a href="https://github.com/nikfoundas/etcd-viewer" target="_blank" rel="external">【Etcd-view】</a></li>
<li>在V3中创建目录<br>在V3中本并不存在目录的概念了，但是如果想要使用<a href="https://github.com/soyking/e3w" target="_blank" rel="external">【E3W】</a>实现可视化，需要使用特定的value给目录这个key。如下root_v3是个目录，它下面那个就是特定的value<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@ip ops_user]# ETCDCTL_API=3 etcdctl get root_v3</div><div class="line">root_v3</div><div class="line">etcdv3_dir_$2H#%gRe3*t</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="权限机制"><a href="#权限机制" class="headerlink" title="权限机制"></a>权限机制</h4><p>占位，之后根据需要补充<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> ETCDCTL_API=3</div><div class="line">etcdctl user add root</div><div class="line">etcdctl auth <span class="built_in">enable</span></div><div class="line">etcdctl user list</div><div class="line">ETCDCTL_API=3 etcdctl user add root --endpoints=<span class="string">"https://10.17.1.32:2379"</span></div></pre></td></tr></table></figure></p>
<h4 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h4><p><a href="https://github.com/coreos/etcd/tree/master/etcdctl" target="_blank" rel="external">【Etcd项目地址】</a><br><a href="https://github.com/coreos/etcd/blob/master/Documentation/dev-guide/api_grpc_gateway.md" target="_blank" rel="external">【Etcd API】</a><br><a href="http://www.10tiao.com/html/689/201612/2651576771/2.html" target="_blank" rel="external">【Etcd对比介绍】</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Gitlab迁移升级记录]]></title>
      <url>http://arvon.top/2018/04/21/Gitlab%E8%BF%81%E7%A7%BB%E5%8D%87%E7%BA%A7%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<p>之前写了gitlab的安装文档，目的是为了为迁移做准备，现在记录一下测试迁移的过程。现在需要将编译安装的<code>7.13.4</code>版本的gitlab升级至<code>10.6.0</code>并采用docker的方式运行。经查阅官方Docker<a href="https://hub.docker.com/r/gitlab/gitlab-ce/tags/" target="_blank" rel="external">【版本】</a>是<code>9.5.1-10.7.0</code>。而在Github上<a href="https://github.com/sameersbn/docker-gitlab" target="_blank" rel="external">【sameersbn版本】</a>是<code>v6.1-v10.6.4</code>。另外<br>还有Gitlab的<a href="https://gitlab.com/gitlab-org/gitlab-ce/tree/master/doc/update" target="_blank" rel="external">【官方升级说明】</a>,这个说明里面都是临近的版本升级说明，但并没有介绍大跨度升级的详细内容。最后决定采用github上提供的升级建议。记录说明如下</p>
<a id="more"></a>
<h3 id="迁移升级步骤"><a href="#迁移升级步骤" class="headerlink" title="迁移升级步骤"></a>迁移升级步骤</h3><ul>
<li><p>思路：</p>
<blockquote>
<p><strong>概览：</strong>从7.13.4–&gt;8.0.3–&gt;10.6.0</p>
<p>A. 先迁移至同版本的Docker容器中<br>B. 利用Docker易于部署的特性将Gitlab升级至指定版本<br>C. 使用了<a href="https://github.com/sameersbn/docker-gitlab" target="_blank" rel="external">【sameersbn提供的方法】</a></p>
</blockquote>
</li>
<li><p>拉取Docker版本的<code>7.13.4</code></p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">docker pull sameersbn/gitlab:7.13.4</div><div class="line"><span class="comment">#docker pull sameersbn/gitlab:latest</span></div><div class="line"><span class="built_in">cd</span> docker-gitlab <span class="comment">#获取对应版本docker compose配置</span></div><div class="line">git <span class="built_in">clone</span> https://github.com/sameersbn/docker-gitlab.git</div><div class="line"><span class="comment">#docker build --tag=$USER/gitlab .</span></div></pre></td></tr></table></figure>
</li>
<li><p>使用docker-compose启动gitlab</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">pip install docker-compose</div><div class="line"><span class="comment">#进入docker compose同级目录执行up命令</span></div><div class="line">docker-compose up <span class="_">-d</span></div><div class="line"><span class="comment">#docker-compose down</span></div></pre></td></tr></table></figure>
</li>
<li><p>还原gitlab到7.13.4</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">docker ps <span class="_">-a</span></div><div class="line">cp /gitlab_bak/1523732410_gitlab_backup.tar  /srv/docker/gitlab/gitlab/backups/ <span class="comment">#copy 备份数据到docker里backup目录</span></div><div class="line">docker <span class="built_in">exec</span> -it docker-gitlab_gitlab_1 /bin/bash <span class="comment">#进入容器</span></div><div class="line"><span class="comment">#容器内部使用了supervisor 先停止gitlab服务</span></div><div class="line">supervisor&gt; stop sidekiq</div><div class="line">sidekiq: stopped</div><div class="line">supervisor&gt; stop unicorn</div><div class="line">unicorn: stopped</div><div class="line"><span class="comment">#修改权限</span></div><div class="line">chown -R git.git /home/git/</div><div class="line">chown -R git.git /home/git/data/backups/1525501269_gitlab_backup.tar</div><div class="line">chown -R git.git /var/<span class="built_in">log</span>/gitlab/gitlab-shell/gitlab-shell.log</div><div class="line">su git</div><div class="line"><span class="comment">#</span></div><div class="line">bundle <span class="built_in">exec</span> rake gitlab:check SANITIZE=<span class="literal">true</span> <span class="comment">#确认状态无误，导入需确认API和Running状态为关闭</span></div><div class="line">bundle <span class="built_in">exec</span> rake gitlab:backup:restore RAILS_ENV=production <span class="comment">#还原操作</span></div></pre></td></tr></table></figure>
</li>
<li><p>至此还原已经完成了，开始升级操作</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#每次升级之后做一下备份</span></div><div class="line">sudo -u git -H bundle <span class="built_in">exec</span> rake gitlab:backup:create RAILS_ENV=production</div><div class="line"><span class="comment">#使用compose更新版本</span></div><div class="line">git branch</div><div class="line">git checkout .</div><div class="line">git  clean -df</div><div class="line">git checkout v8.0.3</div><div class="line">mv docker-compose.yml.dist docker-compose.yml</div><div class="line">docker-compose up <span class="_">-d</span></div><div class="line"><span class="comment">#backup again</span></div><div class="line">docker-compose down</div><div class="line">git checkout 10.6.0</div><div class="line">docker-compose up <span class="_">-d</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a>特别说明</h3><p>我这里最后并没有升级至10.6.0，最后决定使用原版本只是迁移到docker有两点需要注意</p>
<ul>
<li><p>1.数据目录权限如果这个有问题会出现能看到repository的commit等信息，却提示repository不存在</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#更改repository所在目录的权限即可</span></div><div class="line">chown -R git.git /home/git/data/repositories</div></pre></td></tr></table></figure>
</li>
<li><p>2.迁移key,将原gitlab的auth key迁移到新gitlab的auth key位置，注意command</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#提示：可以先手动创建一个就知道该如何写这个command了</div><div class="line">原key：/var/opt/gitlab/.ssh/authorized_keys</div><div class="line">command=&quot;/opt/gitlab/embedded/service/gitlab-shell/bin/gitlab-shell key-58&quot;,no-port-forwarding,no-X11-forwarding,no-agent-forwarding,no-pty ssh-rsa A6dKlEgfVl3G16f5v test@bogon</div><div class="line">现key：/home/git/data/.ssh/authorized_keys</div><div class="line">command=&quot;/home/git/gitlab-shell/bin/gitlab-shell key-59&quot;,no-port-forwarding,no-X11-forwarding,no-agent-forwarding,no-pty ssh-rsa A6dKlEgfVl3G16f5v test@bogon</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="官方建议"><a href="#官方建议" class="headerlink" title="官方建议"></a>官方建议</h3><p>官方提供了3种Gitlab的安装方法，根据安装方法的不同需要选取不同的迁移升级策略。三种安装方式分别如下<em>【除了源码安装其他的安装方法在我之前的一篇<a href="http://arvon.top/2018/04/14/Gitlab%E6%90%AD%E5%BB%BA%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/">博客</a>里已经记录了】</em></p>
<ul>
<li>Omnibus Packages</li>
<li>Source installation</li>
<li>Docker installation</li>
</ul>
<p><strong>关于如何还原备份</strong><a href="https://docs.gitlab.com/ee/raketasks/backup_restore.html#restore" target="_blank" rel="external">【文档地址】</a><br>主要参照官方吧，我这里不再详细说了。简单记录一点我看到的<br>从9.1.0版本开始满足以下条件可以实现升级到新版本而不必停止Gitlab服务</p>
<blockquote>
<ul>
<li>只能一次升级一个小版本，如：9.1到9.2，不能9.1到9.3</li>
</ul>
</blockquote>
<p>从9.2.开始备份文件的时间戳发生了变化</p>
<blockquote>
<p>In GitLab 9.2 the timestamp format was changed from EPOCH_YYYY_MM_DD to EPOCH_YYYY_MM_DD_GitLab version, for example 1493107454_2017_04_25 would become 1493107454_2017_04_25_9.1.0</p>
</blockquote>
<p><strong>其他意见</strong></p>
<ul>
<li>采用Omnibus Packages时<a href="https://docs.gitlab.com/omnibus/update/README.html" target="_blank" rel="external">【文档】</a></li>
<li>采用Source installation时<a href="https://docs.gitlab.com/ee/raketasks/backup_restore.html#restore-for-installation-from-source" target="_blank" rel="external">【文档】</a></li>
</ul>
<h3 id="故障排除"><a href="#故障排除" class="headerlink" title="故障排除"></a>故障排除</h3><ul>
<li>官方还原文档<a href="https://docs.gitlab.com/ee/raketasks/backup_restore.html#restore" target="_blank" rel="external">【建议】</a></li>
<li>参考官方<a href="https://docs.gitlab.com/ee/raketasks/backup_restore.html#troubleshooting" target="_blank" rel="external">【Troubleshooting】</a></li>
<li>合理运用命令<code>bundle exec rake gitlab:check SANITIZE=true</code></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Gitlab搭建使用记录]]></title>
      <url>http://arvon.top/2018/04/14/Gitlab%E6%90%AD%E5%BB%BA%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<p>Gitlab有迁移升级的打算，尝试下新版本（10.6.4)顺带记录一下过程。我这里尝试两种安装方法，一种是Omnibus包安装（官方推荐），另一种会尝试Docker。<br>操作之前看一把架构图,图片来自官方,侵删<br><img src="http://img.arvon.top:80/images/2019/08/12/20180413-gitlab-1.jpg" alt="1"></p>
<a id="more"></a>
<h3 id="使用Omnibus安装（centos7）"><a href="#使用Omnibus安装（centos7）" class="headerlink" title="使用Omnibus安装（centos7）"></a>使用Omnibus安装（centos7）</h3><ul>
<li><p>基础环境配置</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">yum install -y curl policycoreutils-python openssh-server</div><div class="line">systemctl <span class="built_in">enable</span> sshd</div><div class="line">systemctl start sshd</div></pre></td></tr></table></figure>
</li>
<li><p>IPtables配置（不需要的话直接跳过）</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">systemctl start firewalld</div><div class="line">firewall-cmd --permanent --add-service=http</div><div class="line">systemctl reload firewalld</div></pre></td></tr></table></figure>
</li>
<li><p>邮件服务器安装及配置（如有自己的邮件服务器跳过postfix安装，直接配置SMTM服务器即可）<br>具体配置就不写了，可以参照廖雪峰的<a href="https://www.liaoxuefeng.com/article/00137387674890099a71c0400504765b89a5fac65728976000" target="_blank" rel="external">【文章】</a></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">yum install postfix</div><div class="line">systemctl <span class="built_in">enable</span> postfix</div><div class="line">sed -i <span class="string">'s/^inet_interfaces = .*/inet_interfaces = 127.0.0.1/g'</span> /etc/postfix/main.cf</div><div class="line"><span class="comment">#if no sed will report an error like "fatal: parameter inet_interfaces: no local interface found for"</span></div><div class="line">systemctl start postfix</div><div class="line"><span class="comment">#config   #使用已有的邮件服务器，这个不写了</span></div><div class="line"><span class="comment">#useradd -m -s /bin/bash arvon #创建邮件用户</span></div><div class="line"><span class="comment">#echo "123456" | passwd --stdin arvon #设置密码</span></div><div class="line"><span class="comment">#telnet localhost 25 #测试主机邮件端口</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="安装gitlab"><a href="#安装gitlab" class="headerlink" title="安装gitlab"></a>安装gitlab</h4><p><strong>添加Gitlab安装源及安装gitlab</strong><br>既然选择了gitlab一部分原因也是因为开源，所以用免费的CE就行，关于<a href="https://www.gitlab.com.cn/products/" target="_blank" rel="external">【CE和EE的区别】</a>另外可以使用国内的镜像源来提升安装速度，如<a href="https://mirror.tuna.tsinghua.edu.cn/help/gitlab-ce/" target="_blank" rel="external">【清华镜像站】</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#curl https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.rpm.sh | sudo bash</span></div><div class="line"><span class="comment">#EXTERNAL_URL="http://193.112.135.23" yum install -y gitlab-ee #IP地址填写期望访问的URL地址</span></div><div class="line">EXTERNAL_URL=<span class="string">"http://193.112.135.23"</span> yum install -y gitlab-ce</div></pre></td></tr></table></figure></p>
<p>这里安装的版本<code>gitlab-ce-10.6.4-ce.0.el7.x86_64</code><br>在RHEL/CentOS上可以新建yum源<code>/etc/yum.repos.d/gitlab-ce.repo</code><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[gitlab-ce]</div><div class="line">name=Gitlab CE Repository</div><div class="line">baseurl=https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el$releasever/</div><div class="line">gpgcheck=0</div><div class="line">enabled=1</div></pre></td></tr></table></figure></p>
<p>安装完成后自己就启动了，十分智能，WEB服务端口默认是<code>80</code>，还是看看安装在哪了都有哪些路径<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@VM_0_11_centos gitlab]# rpm -qa |grep  gitlab-ce |xargs rpm -ql |wc -l</div><div class="line">81091</div><div class="line">[root@VM_0_11_centos gitlab]# rpm -qa |grep  gitlab-ce |xargs rpm -ql |grep /opt/gitlab |wc -l</div><div class="line">81090</div></pre></td></tr></table></figure></p>
<p>可见装了这么多东西，都在<code>/opt/gitlab</code>下</p>
<h4 id="配置gitlab及组件说明"><a href="#配置gitlab及组件说明" class="headerlink" title="配置gitlab及组件说明"></a>配置gitlab及组件说明</h4><ul>
<li><p>配置gitlab<br>访问<code>http://193.112.135.23:80/</code>会提示你重置密码，重置密码后用<code>root</code>和你重置后的密码就可以登录了</p>
</li>
<li><p>Gitlab相关路径</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">/opt/gitlab #Gitlab安装位置</div><div class="line">/etc/gitlab/gitlab.rb #Gitlab主要配置文件</div><div class="line">/var/opt/gitlab/git-data/repositories/ #代码仓库保存位置</div><div class="line">/var/opt/gitlab/backups/ #代码仓库备份位置</div><div class="line">/var/log/gitlab/ #日志位置</div><div class="line">/var/opt/gitlab/postgresql/data/ #postgresql数据及配置目录</div><div class="line">/var/opt/gitlab/redis #Redis配置目录</div><div class="line">/var/opt/gitlab/gitlab-rails/etc/unicorn.rb  #unicorn配置文件</div></pre></td></tr></table></figure>
</li>
<li><p>服务及进程作用</p>
<blockquote>
<ul>
<li><strong>nginx</strong><br>Web服务器,提供Httpweb浏览管理服务</li>
<li><strong>gitlab-shell</strong><br>处理一些git命令什么的</li>
<li><strong>unicorn</strong><br>Gitlab自身的WEB服务器，Ruby Web Server，托管 GitLab Rails 服务。增加 unicorn 的 workers 数量，可以减少应用的响应时间并提高处理并发请求的能力。对于大部分实例，建议的配置：CPU 核心数 + 1 = unicorn workers 数</li>
<li><strong>gitlab-workhorse</strong><br>轻量级别代理服务器，用来处理大的 HTTP 请求，比如文件上传下载如Git Push/Pull ，其它请求会反向代理到 GitLab Rails 应用，即反向代理给后端的 unicorn</li>
<li><strong>gitaly</strong><br>RPC 服务，执行 gitlab-shell 和 gitloab-workhorse 的 git 操作，并向 GitLab web 应用程序提供一个 API，以从 git（例如 title, branches, tags, other meta data）获取属性，并获取 blob（例如 diffs，commits，files）</li>
<li><strong>postgresql</strong><br>使用PostgreSQL必须确认GitLab使用的数据库安装了<code>pg_trgm</code>扩展。 这个扩展需要PostgreSQL使用root用户在GitLab每个数据库里面执行 <code>CREATE EXTENSION pg_trgm;</code>命令</li>
<li><strong>redis</strong><br>Redis 存储每个客户端的sessions和后台任务队列。Redis需求的存储空间很小, 大约每个用户25kB</li>
<li><strong>sidekiq</strong><br>Sidekiq使用多线程处理后台任务（异步）。这个进程启动的时候会使用整个Rails堆栈（200MB+），但是它会在内存泄漏的情况下增加。一个用户非常活跃的服务器上（10,000个活跃用户），Sidekiq进程会占用1GB+的内存</li>
<li><strong>logrotate</strong><br>日志文件管理</li>
</ul>
</blockquote>
</li>
<li><p>Gitlab管理命令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">/opt/gitlab/bin/gitlab-ctl status <span class="comment">#查看状态</span></div><div class="line">/opt/gitlab/bin/gitlab-ctl stop</div><div class="line">/opt/gitlab/bin/gitlab-ctl start</div><div class="line"><span class="comment">#/opt/gitlab/bin/gitlab-ctl show-config #查看当前配置</span></div><div class="line">/opt/gitlab/bin/gitlab-ctl <span class="built_in">help</span> <span class="comment">#获取命令行帮助</span></div><div class="line">cat /opt/gitlab/version-manifest.json | grep build_version <span class="comment">#查看版本</span></div></pre></td></tr></table></figure>
</li>
<li><p>安装及配置完成<br>现在可以在gitlab上创建项目、用户及用户组了。之后就可以正常使用了</p>
</li>
</ul>
<h4 id="附邮件配置"><a href="#附邮件配置" class="headerlink" title="附邮件配置"></a>附邮件配置</h4><p>在主配置文件<code>/etc/gitlab/gitlab.rb</code>如下修改，更详细的配置参考<a href="https://docs.gitlab.com/omnibus/settings/smtp.html#smtp-settings" target="_blank" rel="external">【官方说明】</a><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">gitlab_rails['smtp_enable'] = true</div><div class="line">gitlab_rails['smtp_address'] = "smtp.server"</div><div class="line">gitlab_rails['smtp_port'] = 465</div><div class="line">gitlab_rails['smtp_user_name'] = "smtp user"</div><div class="line">gitlab_rails['smtp_password'] = "smtp password"</div><div class="line">gitlab_rails['smtp_domain'] = "example.com"</div><div class="line">gitlab_rails['smtp_authentication'] = "login"</div><div class="line">gitlab_rails['smtp_enable_starttls_auto'] = true</div><div class="line">gitlab_rails['smtp_openssl_verify_mode'] = 'peer'</div><div class="line"># If your SMTP server does not like the default 'From: gitlab@localhost' you</div><div class="line"># can change the 'From' with this setting.</div><div class="line">gitlab_rails['gitlab_email_from'] = 'gitlab@example.com'</div><div class="line">gitlab_rails['gitlab_email_reply_to'] = 'noreply@example.com'</div></pre></td></tr></table></figure></p>
<p>修改完成后通过命令<code>/opt/gitlab/bin/gitlab-ctl reconfigure</code>使配置生效</p>
<h3 id="使用Docker安装Gitlab"><a href="#使用Docker安装Gitlab" class="headerlink" title="使用Docker安装Gitlab"></a>使用Docker安装Gitlab</h3><p>按照官网来了一遍，主要注意以下3点,更详细可以参考<a href="https://docs.gitlab.com/omnibus/docker/" target="_blank" rel="external">【Docker Install Guide地址】</a>和<a href="https://gitlab.com/gitlab-org/omnibus-gitlab/tree/master/docker" target="_blank" rel="external">【Docker File地址:】 </a></p>
<blockquote>
<ol>
<li>端口配置，可以参照以下命令，注意不要和宿主机冲突</li>
<li>hostname参数,这个hostname类似手动装的那个配置，会在pull库时候用就是上面显示的那个连接</li>
<li>客户端再pull代码的时候命令需要改成<code>git clone ssh://git@host:port/your-project.git</code></li>
</ol>
</blockquote>
<ul>
<li><p>启动命令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">docker run --detach \</div><div class="line">    --hostname 12.13.14.13 \</div><div class="line">    --publish 443:443 --publish 18080:80 --publish 222:22 \</div><div class="line">    --env <span class="string">'GITLAB_PORT=18080'</span> \</div><div class="line">    --env <span class="string">'GITLAB_SHELL_SSH_PORT=222'</span> \</div><div class="line">    --env <span class="string">'GITLAB_SSH_PORT=222'</span> \</div><div class="line">    --name gitlab \</div><div class="line">    --restart always \</div><div class="line">    --volume /srv/gitlab/config:/etc/gitlab \</div><div class="line">    --volume /srv/gitlab/logs:/var/<span class="built_in">log</span>/gitlab \</div><div class="line">    --volume /srv/gitlab/data:/var/opt/gitlab \</div><div class="line">    gitlab/gitlab-ce:latest</div></pre></td></tr></table></figure>
</li>
<li><p>客户端连接命令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> ssh://git@12.13.14.13:222/root/arvon-test.git</div><div class="line">touch demo.txt</div><div class="line">git add .</div><div class="line">git config --global user.email <span class="string">"arvon@gourds.com"</span></div><div class="line">git config --global user.name <span class="string">"arvon"</span></div><div class="line">git commit -m <span class="string">'add test'</span></div><div class="line">git push origin master <span class="comment">#推远端</span></div><div class="line">cat .git/config <span class="comment">#查看git配置</span></div><div class="line">git pull <span class="comment">#拉代码</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Gitlab备份还原（CentOS7）"><a href="#Gitlab备份还原（CentOS7）" class="headerlink" title="Gitlab备份还原（CentOS7）"></a>Gitlab备份还原（CentOS7）</h3><p><strong>关于备份的官方说明</strong></p>
<blockquote>
<p>“You can only restore a backup to exactly the same version and type (CE/EE) of GitLab on which it was created. The best way to migrate your repositories from one server to another is through backup restore.”</p>
</blockquote>
<p><strong>注意点</strong></p>
<blockquote>
<ol>
<li>如果是通过源码安装，需要确保自己安装了rsync服务,可以通过<code>yum install -y rsync</code>安装</li>
<li>备份配置可以在主配置文件<code>/etc/gitlab/gitlab.rb</code>中<code>Backup Settings</code>选项下修改，一般不需修改</li>
<li>推荐备份<code>/etc/gitlab</code>这个目录，如果使用了<code>two-factor</code>至少要备份<code>/etc/gitlab/gitlab-secrets.json</code></li>
<li>注意<code>8.17</code>之后的版本，这个版本<a href="https://docs.gitlab.com/ce/raketasks/backup_restore.html#backup-strategy-option" target="_blank" rel="external">【详情描述】</a>引入了新的备份策略<code>COPY</code>可以解决备份过程中由于数据快速变化而导致备份过程失败这个问题，可以通过<code>gitlab-rake gitlab:backup:create STRATEGY=copy</code>在执行备份的时候指定，不过需要占用额外的1X磁盘。</li>
<li>如果想有选择的备份Project，可以参照<a href="https://docs.gitlab.com/ce/raketasks/backup_restore.html#excluding-specific-directories-from-the-backup" target="_blank" rel="external">【官方说明】</a>配置</li>
<li>使用AWS服务的话推荐使用S3，可以参照<a href="https://docs.gitlab.com/ce/raketasks/backup_restore.html#uploading-backups-to-a-remote-cloud-storage" target="_blank" rel="external">【官方说明】</a>配置</li>
</ol>
</blockquote>
<h4 id="配置备份还原"><a href="#配置备份还原" class="headerlink" title="配置备份还原"></a>配置备份还原</h4><p><strong>配置backup</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sh -c <span class="string">'umask 0077; tar -cf $(date "+etc-gitlab-%s.tar") -C / etc/gitlab'</span></div></pre></td></tr></table></figure></p>
<p><strong>配置restore</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mv /etc/gitlab /etc/gitlab.$(date +%s)</div><div class="line">tar -xf etc-gitlab-1399948539.tar -C /</div><div class="line">/usr/bin/gitlab-ctl reconfigure  <span class="comment">#重新加载配置</span></div></pre></td></tr></table></figure></p>
<h4 id="数据备份还原"><a href="#数据备份还原" class="headerlink" title="数据备份还原"></a>数据备份还原</h4><p><strong>数据备份</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#如果使用Omnibus安装方式</span></div><div class="line">/opt/gitlab/bin/gitlab-rake gitlab:backup:create</div><div class="line"><span class="comment">#如果使用源码安装的话</span></div><div class="line">sudo -u git -H bundle <span class="built_in">exec</span> rake gitlab:backup:create RAILS_ENV=production</div></pre></td></tr></table></figure></p>
<p><strong>另外</strong>如果使用AWS的服务需要将备份传S3那么可以直接再Gitlab的主配置文件进行配置，如何配置可以参照<a href="https://docs.gitlab.com/ce/raketasks/backup_restore.html#using-amazon-s3" target="_blank" rel="external">【官方说明】</a>,里面的<code>bucket</code>参数只能写bucket的名字，不能有二级目录</p>
<p><strong>数据还原</strong><br>将备份的数据文件放的需要还原的Gitlab主机上的备份目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@VM_0_11_centos gitlab]# ls /var/opt/gitlab/backups/</div><div class="line">1523625192_2018_04_13_10.6.4_gitlab_backup.tar</div></pre></td></tr></table></figure></p>
<p>然后停止连接数据库的进程<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">gitlab-ctl stop unicorn</div><div class="line">gitlab-ctl stop sidekiq</div><div class="line">gitlab-ctl status</div></pre></td></tr></table></figure></p>
<p>然后执行还原命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># This command will overwrite the contents of your GitLab database!</span></div><div class="line">gitlab-rake gitlab:backup:restore BACKUP=1523625192_2018_04_13_10.6.4</div><div class="line"><span class="comment">#还原使用备份文件名除去"_gitlab_backup.tar"这个部分</span></div></pre></td></tr></table></figure></p>
<p>如果有必要还原<code>/etc/gitlab/gitlab-secrets.json</code>最后重启Gitlab<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">gitlab-ctl restart</div><div class="line">gitlab-rake gitlab:check SANITIZE=<span class="literal">true</span></div></pre></td></tr></table></figure></p>
<p>还原完成<br>另外如果还原需要降级，以下命令可能会需要</p>
<blockquote>
<p><code>Gitlab</code>历史版本地址<a href="https://packages.gitlab.com/gitlab/gitlab-ce" target="_blank" rel="external">【戳这里】</a><br><code>yum downgrade &quot;下载的旧版本的文件名&quot;</code></p>
</blockquote>
<p><strong>备份脚本</strong><a href="https://github.com/Gourds/daily-scripts/blob/master/shell-scripts/backup_gitlab.sh" target="_blank" rel="external">【获取脚本】</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/usr/bin/env sh</span></div><div class="line">RETVAL=0</div><div class="line">: <span class="variable">$&#123;ConfigBakDir:=/data/backup/gitlab&#125;</span></div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">backup_config</span></span>()&#123;</div><div class="line">    [ <span class="_">-d</span> /etc/gitlab ] || <span class="built_in">exit</span> 4</div><div class="line">    [ <span class="_">-d</span> <span class="variable">$&#123;ConfigBakDir&#125;</span> ] || mkdir -p <span class="variable">$&#123;ConfigBakDir&#125;</span></div><div class="line">    sh -c <span class="string">"cd <span class="variable">$&#123;ConfigBakDir&#125;</span> &amp;&amp; umask 0077 &amp;&amp; tar -cf <span class="variable">$(date "+etc-gitlab-%s_%Y_%m_%d.tar")</span> -C / etc/gitlab"</span></div><div class="line">    RETVAL=$?</div><div class="line">&#125;</div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">backup_data</span></span>()&#123;</div><div class="line">    [ <span class="_">-f</span> `<span class="built_in">which</span> gitlab-rake` ] || <span class="built_in">exit</span> 5</div><div class="line">    gitlab-rake gitlab:backup:create</div><div class="line">    RETVAL=$?</div><div class="line">&#125;</div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">restore_data</span></span>()&#123;</div><div class="line">    [ <span class="_">-f</span> `<span class="built_in">which</span> gitlab-rake` ] &amp;&amp; [ <span class="_">-f</span> `<span class="built_in">which</span> gitlab-ctl` ] || <span class="built_in">exit</span> 6</div><div class="line">    <span class="keyword">if</span> [[ `gitlab-ctl status unicorn |awk <span class="string">'&#123;print $1&#125;'</span> |sed <span class="string">'s/://'</span>` != <span class="string">'run'</span> ]] &amp;&amp; [[ `gitlab-ctl status sidekiq |awk <span class="string">'&#123;print $1&#125;'</span> |sed <span class="string">'s/://'</span>` != <span class="string">'run'</span> ]];<span class="keyword">then</span></div><div class="line">        msg=<span class="string">''</span><span class="string">'Usage: gitlab-rake gitlab:backup:restore BACKUP=1523625192_2018_04_13_10.6.4'</span><span class="string">''</span></div><div class="line">        <span class="built_in">echo</span> <span class="variable">$msg</span></div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="built_in">echo</span> <span class="string">'Please make sure unicorn and sidekiq process have stop ! Now exit'</span></div><div class="line">        <span class="built_in">exit</span> 7</div><div class="line">    <span class="keyword">fi</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">case</span> <span class="variable">$1</span> <span class="keyword">in</span></div><div class="line">    bak-etc)</div><div class="line">    backup_config</div><div class="line">    ;;</div><div class="line">    bak-data)</div><div class="line">    backup_data</div><div class="line">    ;;</div><div class="line">    bak)</div><div class="line">    backup_config</div><div class="line">    backup_data</div><div class="line">    ;;</div><div class="line">    restore)</div><div class="line">    restore_data</div><div class="line">    ;;</div><div class="line">    *)</div><div class="line">    <span class="built_in">echo</span> $<span class="string">"Usage: <span class="variable">$0</span> &#123;bak|bak-etc|bak-data|restore&#125;"</span></div><div class="line">    RETVAL=2</div><div class="line"><span class="keyword">esac</span></div><div class="line"><span class="built_in">exit</span> <span class="variable">$RETVAL</span></div></pre></td></tr></table></figure></p>
<p><strong>存储策略</strong><br>如果想定期删除一段时间前的备份文件，官方配置里已经有现成可配置的地方，在主配置文件<code>/etc/gitlab/gitlab.rb</code>中通过设置以下参数后，然后重新加载配置即可<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># limit backup lifetime to 7 days - 604800 seconds</span></div><div class="line">gitlab_rails[<span class="string">'backup_keep_time'</span>] = 604800</div></pre></td></tr></table></figure></p>
<p><strong>计划任务</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">0 2 * * * /opt/gitlab/bin/gitlab-rake gitlab:backup:create CRON=1</div><div class="line"><span class="comment">#The CRON=1 environment setting tells the backup script to suppress all progress output if there are no errors.This is recommended to reduce cron spam.</span></div></pre></td></tr></table></figure></p>
<h3 id="Docker情况下的备份还原"><a href="#Docker情况下的备份还原" class="headerlink" title="Docker情况下的备份还原"></a>Docker情况下的备份还原</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># backup config</span></div><div class="line">docker <span class="built_in">exec</span> -t &lt;your container name&gt; /bin/sh -c <span class="string">'umask 0077; tar cfz /secret/gitlab/backups/$(date "+etc-gitlab-\%s.tgz") -C / etc/gitlab'</span></div><div class="line"><span class="comment"># backup data</span></div><div class="line">docker <span class="built_in">exec</span> -t &lt;your container name&gt; gitlab-rake gitlab:backup:create</div></pre></td></tr></table></figure>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="https://docs.gitlab.com.cn/ce/administration/index.html" target="_blank" rel="external">【Gitlab官网】</a><br><a href="https://docs.gitlab.com/omnibus/settings/backups.html" target="_blank" rel="external">【官方配置备份还原说明】</a><br><a href="https://docs.gitlab.com/ce/raketasks/backup_restore.html#creating-a-backup-of-the-gitlab-system" target="_blank" rel="external">【官方数据备份还原说明】</a><br><a href="https://gitlab.com/help/raketasks/backup_restore.md" target="_blank" rel="external">【备份还原说明】</a><br><a href="https://github.com/sund/auto-gitlab-backup" target="_blank" rel="external">【备份脚本说明】</a><br><a href="https://blog.mallux.me/2017/02/27/gitlab/" target="_blank" rel="external">【mallux的Blog】</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用Docker搭建Jira和Confluence系统]]></title>
      <url>http://arvon.top/2018/04/14/%E4%BD%BF%E7%94%A8Docker%E6%90%AD%E5%BB%BAJira%E5%92%8CConfluence%E7%B3%BB%E7%BB%9F/</url>
      <content type="html"><![CDATA[<p><strong>整理补个文档：</strong>这周折腾了两天Jira和Confluence，准备用这个来代替现在使用的phabricator，Phabricator这个是开源的，Jira和Confluence时Atlassian公司的商业产品，具体如何选择看公司爱好吧。为简化测试和正式部署使用，采取Docker的方式进行安装部署。这里记录一下安装过程和一些避坑建议。另外多说一句Altlassian公司的产品还都蛮好用的，譬如Sourcetree。以下的脚本在<a href="https://github.com/Gourds/docker-image/tree/master/Service/jira_confluence" target="_blank" rel="external">【Github】</a>上都有</p>
<blockquote>
<p><strong><a href="https://www.atlassian.com/software/jira" target="_blank" rel="external">JIRA</a></strong>是Atlassian公司出品的项目与事务跟踪工具，被广泛应用于缺陷跟踪、客户服务、需求收集、流程审批、任务跟踪、项目跟踪和敏捷管理等工作领域。<br><strong><a href="https://www.atlassian.com/software/confluence" target="_blank" rel="external">Confluence</a></strong>是一个专业的企业知识管理与协同软件，也可以用于构建企业wiki。使用简单，但它强大的编辑和站点管理特征能够帮助团队成员之间共享信息、文档协作、集体讨论，信息推送。<br><strong><a href="https://github.com/phacility/phabricator" target="_blank" rel="external">Phabricator</a></strong>是一套基于Web的软件开发协作工具，一个Web应用用于帮助软件公司构建更好的软件。原是facebook员工开发的可视化代码评审工具,主要功能有CodeReview、代码托管、Bug跟踪、Task管理、Wiki文档等功能。</p>
</blockquote>
<a id="more"></a>
<h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><p><strong>本地实践环境:</strong></p>
<blockquote>
<p>OS：<code>CentOS Linux release 7.2.1511 (Core)</code><br>Docker:<code>v1.13.1</code></p>
</blockquote>
<p><strong>启动Docker并将Docker添加至开机启动</strong></p>
<ul>
<li><p>在Centos7上</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">yum install docker -y</div><div class="line">systemctl <span class="built_in">enable</span> docker.service</div><div class="line">systemctl start docker.service</div></pre></td></tr></table></figure>
</li>
<li><p>在Centos6及Amazon Linux上</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">yum install docker -y</div><div class="line">chkconfig --add docker</div><div class="line">/etc/init.d/docker start</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>Iptables及SELinux设置</strong></p>
<ul>
<li>在Centos7上<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#SELinux disabled</span></div><div class="line">setenforce 0</div><div class="line">sed -i <span class="string">'s/^SELINUX=enforcing/SELINUX=disabled/g'</span> /etc/sysconfig/selinux</div><div class="line">getenforce</div><div class="line"><span class="comment">#Iptables setup</span></div><div class="line">yum install iptables-services</div><div class="line">iptables -I  INPUT -p tcp --dport 3306 -j ACCEPT</div><div class="line">iptables -I  INPUT -p tcp --dport 18080 -j ACCEPT</div><div class="line">iptables -I  INPUT -p tcp --dport 8090 -j ACCEPT</div><div class="line">service iptables save</div><div class="line"><span class="comment">#Other Command(Don't config)</span></div><div class="line"><span class="comment">#systemctl stop firewalld.service</span></div><div class="line"><span class="comment">#systemctl disable firewalld.service</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="安装Myql"><a href="#安装Myql" class="headerlink" title="安装Myql"></a>安装Myql</h3><p>使用官方镜像直接启动容器即可。不过使用Jira和Confluence时需要添加几个mysql启动配置,具体可参考<a href="https://hub.docker.com/_/mysql/" target="_blank" rel="external">【Mysql镜像说明】</a>，<code>packet</code>及<code>log_file_size</code>参数为应用要求防止大文件无法存储，<code>utf8</code>是为了支持中文<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">docker run --name mysql -p 3306:3306 -v /data/mysql/data:/var/lib/mysql <span class="_">-e</span> MYSQL_ROOT_PASSWORD=yourpasswd -idt mysql/mysql-server:latest --character-set-server=utf8 --collation-server=utf8_bin --max_allowed_packet=512M --innodb_log_file_size=2GB</div><div class="line"><span class="comment">#docker run -it --rm docker.io/mysql/mysql-server --verbose --help</span></div><div class="line">docker ps <span class="_">-a</span> <span class="comment">#查看容器状态</span></div><div class="line">docker <span class="built_in">exec</span> -it mysql /bin/bash <span class="comment">#进入容器，PS由于mysql启动后root用户监听localhost所以创建Database时需要进入容器内部</span></div></pre></td></tr></table></figure></p>
<ul>
<li><p>创建Jira数据库</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#mysql&gt; show variables like 'char%';</span></div><div class="line">mysql&gt; CREATE DATABASE jira_db CHARACTER SET utf8 COLLATE utf8_bin;</div><div class="line">mysql&gt; grant ALL PRIVILEGES on jira_db.* to jira_user@<span class="string">"%"</span> Identified by <span class="string">"yourpassword;</span></div><div class="line">mysql&gt; SHOW CREATE DATABASE jira_db;</div><div class="line">mysql&gt; flush privileges;</div></pre></td></tr></table></figure>
</li>
<li><p>创建Confluence数据库</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#mysql&gt; show variables like 'char%';</span></div><div class="line">mysql&gt; create database confluence CHARACTER SET utf8 COLLATE utf8_bin;</div><div class="line">mysql&gt; grant ALL PRIVILEGES on confluence.* to confluence_user@<span class="string">"%"</span> Identified by <span class="string">"yourpassword"</span>;</div><div class="line">mysql&gt; SHOW CREATE DATABASE confluence;</div><div class="line">mysql&gt; flush privileges;</div></pre></td></tr></table></figure>
</li>
<li><p>创建数据库备份用户</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mysql&gt; grant select on *.* to backup_user@<span class="string">"%"</span> Identified by <span class="string">"yourpassword"</span>;</div><div class="line">mysql&gt; flush privileges;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="安装Jira"><a href="#安装Jira" class="headerlink" title="安装Jira"></a>安装Jira</h3><p>使用官方镜像直接启动Jira容器。这个服务没有太多问题，注意端口是否监听正确及相关端口（数据库端口、应用端口）是否放开，这里的端口放开是指本机防火墙，外网防火墙不应放行数据库端口<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">docker run -p 18080:8080 -dit --name jira docker.io/cptactionhank/atlassian-jira</div><div class="line"><span class="comment">#Manage Application</span></div><div class="line">docker ps</div><div class="line">docker <span class="built_in">exec</span> -it jira /bin/bash</div><div class="line">docker stop jira</div><div class="line">docker start jira</div><div class="line">docker logs jira</div><div class="line">docker logs <span class="_">-f</span> jira</div></pre></td></tr></table></figure></p>
<p>在浏览器访问<code>http://host_address:18080</code>跟着提示安装即可。</p>
<h3 id="安装Confluence"><a href="#安装Confluence" class="headerlink" title="安装Confluence"></a>安装Confluence</h3><p>由于Jira使用的是MySQL方便起见Confluence也要用Mysql，但是使用官方镜像会有以下问题</p>
<blockquote>
<p>a.官方的对于PostSQL支持可以,但无法直接连接mysql需要自行安装支持java连接mysql的组件<br>b.中文Office在Confluence的预览查看会出现乱码情况，需要修改confluence连接参数及自行添加中文字体库<br>c.官方使用了不受支持的<code>openjdk</code>，需要更改jdk环境为<code>Oracle JDK</code></p>
</blockquote>
<p>鉴于这种情况使用这个官方镜像就很不理智了，还希望使用docker，只能自己做一个镜像了</p>
<h4 id="制作镜像"><a href="#制作镜像" class="headerlink" title="制作镜像"></a>制作镜像</h4><ul>
<li>准备工作<blockquote>
<ul>
<li><strong>Step 1:</strong> 下载<code>java-mysql</code><br>可以从Mysql官方<a href="https://dev.mysql.com/downloads/file/?id=476197" target="_blank" rel="external">【下载地址】</a>进行下载解压，只需要其中的两个文件，按下面的目录结构存放就可以了<br><strong>Step 2:</strong> 准备中文字体库<br>这个可以从身边现成的windows机器上直接压缩拷贝过来就行了，windows下的字体存放在<code>C:\Windows\Fonts</code>,然后按下面的目录结构存放就可以了，注意这个压缩包需要和我下面目录的一直，不然需要自行更改<code>Dockerfile</code>文件,还有这个压缩包应该是解压完后是<code>Fonts/字体</code>这样的结构。</li>
</ul>
</blockquote>
</li>
<li><p>构建的目录结构</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">├── chinese-win.tar.gz</div><div class="line">├── Dockerfile</div><div class="line">├── entrypoint.sh</div><div class="line">├── java-mysql</div><div class="line">    ├── mysql-connector-java-5.1.46-bin.jar</div><div class="line">    └── mysql-connector-java-5.1.46.jar</div></pre></td></tr></table></figure>
</li>
<li><p>构建文件及启动脚本<br>主构建文件<code>Dockerfile</code>如下</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">FROM anapsix/alpine-java:8_jdk</div><div class="line">LABEL <span class="string">"Author"</span>:<span class="string">"arvon2014@gmail.com"</span> \</div><div class="line">      <span class="string">"Date"</span>:<span class="string">"2018-04-11"</span></div><div class="line">ENV RUN_USER  daemon</div><div class="line">ENV RUN_GROUP daemon</div><div class="line">ENV CONFLUENCE_HOME /var/atlassian/application-data/confluence</div><div class="line">ENV CONFLUENCE_INSTALL_DIR   /opt/atlassian/confluence</div><div class="line"><span class="comment">#</span></div><div class="line">VOLUME [<span class="string">"<span class="variable">$&#123;CONFLUENCE_HOME&#125;</span>"</span>]</div><div class="line"><span class="comment">#</span></div><div class="line">EXPOSE 8090</div><div class="line">EXPOSE 8091</div><div class="line">WORKDIR <span class="variable">$CONFLUENCE_HOME</span></div><div class="line">RUN apk update -qq \</div><div class="line">    &amp;&amp; update-ca-certificates \</div><div class="line">    &amp;&amp; apk add ca-certificates wget curl openssh bash procps openssl perl ttf-dejavu tini\</div><div class="line">    &amp;&amp; rm -rf /var/lib/&#123;apt,dpkg,cache,<span class="built_in">log</span>&#125;/ /tmp/* /var/tmp/* \</div><div class="line">    &amp;&amp; mkdir -p  <span class="variable">$&#123;CONFLUENCE_INSTALL_DIR&#125;</span></div><div class="line">ARG CONFLUENCE_VERSION=6.8.1</div><div class="line">ARG DOWNLOAD_URL=http://www.atlassian.com/software/confluence/downloads/binary/atlassian-confluence-<span class="variable">$&#123;CONFLUENCE_VERSION&#125;</span>.tar.gz</div><div class="line">RUN curl -L --silent                  <span class="variable">$&#123;DOWNLOAD_URL&#125;</span> | tar -xz --strip-components=1 -C <span class="string">"<span class="variable">$CONFLUENCE_INSTALL_DIR</span>"</span></div><div class="line">ADD chinese-win.tar.gz  /usr/share/fonts/</div><div class="line"><span class="comment">#RUN fc-cache -fv</span></div><div class="line"><span class="comment">#ADD atlassian-confluence-6.8.1.tar.gz $CONFLUENCE_INSTALL_DIR/</span></div><div class="line">RUN chown -R <span class="variable">$&#123;RUN_USER&#125;</span>:<span class="variable">$&#123;RUN_GROUP&#125;</span> <span class="variable">$&#123;CONFLUENCE_INSTALL_DIR&#125;</span>/ \</div><div class="line">    &amp;&amp; sed -i <span class="_">-e</span> <span class="string">'s/-Xms\([0-9]\+[kmg]\) -Xmx\([0-9]\+[kmg]\)/-Xms\$&#123;JVM_MINIMUM_MEMORY:=\1&#125; -Xmx\$&#123;JVM_MAXIMUM_MEMORY:=\2&#125; \$&#123;JVM_SUPPORT_RECOMMENDED_ARGS&#125; -Dconfluence.home=\$&#123;CONFLUENCE_HOME&#125;/g'</span> <span class="variable">$&#123;CONFLUENCE_INSTALL_DIR&#125;</span>/bin/setenv.sh \</div><div class="line"><span class="comment">#    &amp;&amp; sed -i -e '/.*-Dconfluence.context.path=.*/a\CATALINA_OPTS="-Dconfluence.document.conversion.fontpath=/usr/share/fonts/Fonts/ $&#123;CATALINA_OPTS&#125;"' $&#123;CONFLUENCE_INSTALL_DIR&#125;/bin/setenv.sh \</span></div><div class="line">    &amp;&amp; sed -i <span class="_">-e</span> <span class="string">'s/port="8090"/port="8090" secure="$&#123;catalinaConnectorSecure&#125;" scheme="$&#123;catalinaConnectorScheme&#125;" proxyName="$&#123;catalinaConnectorProxyName&#125;" proxyPort="$&#123;catalinaConnectorProxyPort&#125;"/'</span> <span class="variable">$&#123;CONFLUENCE_INSTALL_DIR&#125;</span>/conf/server.xml</div><div class="line">COPY entrypoint.sh              /entrypoint.sh</div><div class="line">COPY java-mysql/mysql-connector-java-5.1.46.jar /opt/atlassian/confluence/confluence/WEB-INF/lib/mysql-connector-java-5.1.46.jar</div><div class="line">COPY java-mysql/mysql-connector-java-5.1.46-bin.jar /opt/atlassian/confluence/confluence/WEB-INF/lib/mysql-connector-java-5.1.46-bin.jar</div><div class="line"><span class="comment">#</span></div><div class="line">RUN chown -R <span class="variable">$&#123;RUN_USER&#125;</span>:<span class="variable">$&#123;RUN_GROUP&#125;</span> <span class="variable">$&#123;CONFLUENCE_INSTALL_DIR&#125;</span>/</div><div class="line"><span class="comment">#</span></div><div class="line">CMD [<span class="string">"/entrypoint.sh"</span>, <span class="string">"-fg"</span>]</div><div class="line">ENTRYPOINT [<span class="string">"/sbin/tini"</span>, <span class="string">"--"</span>]</div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment">#CMD tail -f /entrypoint.sh</span></div></pre></td></tr></table></figure>
</li>
<li><p>启动脚本<code>entrypoint.sh</code>如下</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"><span class="built_in">set</span> -euo pipefail</div><div class="line"><span class="comment"># Setup Catalina Opts</span></div><div class="line">: <span class="variable">$&#123;CATALINA_CONNECTOR_PROXYNAME:=&#125;</span></div><div class="line">: <span class="variable">$&#123;CATALINA_CONNECTOR_PROXYPORT:=&#125;</span></div><div class="line">: <span class="variable">$&#123;CATALINA_CONNECTOR_SCHEME:=http&#125;</span></div><div class="line">: <span class="variable">$&#123;CATALINA_CONNECTOR_SECURE:=false&#125;</span></div><div class="line">: <span class="variable">$&#123;CATALINA_OPTS:=&#125;</span></div><div class="line">CATALINA_OPTS=<span class="string">"<span class="variable">$&#123;CATALINA_OPTS&#125;</span> -DcatalinaConnectorProxyName=<span class="variable">$&#123;CATALINA_CONNECTOR_PROXYNAME&#125;</span>"</span></div><div class="line">CATALINA_OPTS=<span class="string">"<span class="variable">$&#123;CATALINA_OPTS&#125;</span> -DcatalinaConnectorProxyPort=<span class="variable">$&#123;CATALINA_CONNECTOR_PROXYPORT&#125;</span>"</span></div><div class="line">CATALINA_OPTS=<span class="string">"<span class="variable">$&#123;CATALINA_OPTS&#125;</span> -DcatalinaConnectorScheme=<span class="variable">$&#123;CATALINA_CONNECTOR_SCHEME&#125;</span>"</span></div><div class="line">CATALINA_OPTS=<span class="string">"<span class="variable">$&#123;CATALINA_OPTS&#125;</span> -DcatalinaConnectorSecure=<span class="variable">$&#123;CATALINA_CONNECTOR_SECURE&#125;</span>"</span></div><div class="line"><span class="built_in">export</span> CATALINA_OPTS</div><div class="line"><span class="comment"># Start Confluence as the correct user</span></div><div class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$&#123;UID&#125;</span>"</span> <span class="_">-eq</span> 0 ]; <span class="keyword">then</span></div><div class="line">    <span class="built_in">echo</span> <span class="string">"User is currently root. Will change directory ownership to <span class="variable">$&#123;RUN_USER&#125;</span>:<span class="variable">$&#123;RUN_GROUP&#125;</span>, then downgrade permission to <span class="variable">$&#123;RUN_USER&#125;</span>"</span></div><div class="line">    PERMISSIONS_SIGNATURE=$(<span class="built_in">stat</span> -c <span class="string">"%u:%U:%a"</span> <span class="string">"<span class="variable">$&#123;CONFLUENCE_HOME&#125;</span>"</span>)</div><div class="line">    EXPECTED_PERMISSIONS=$(id -u <span class="variable">$&#123;RUN_USER&#125;</span>):<span class="variable">$&#123;RUN_USER&#125;</span>:700</div><div class="line">    <span class="keyword">if</span> [ <span class="string">"<span class="variable">$&#123;PERMISSIONS_SIGNATURE&#125;</span>"</span> != <span class="string">"<span class="variable">$&#123;EXPECTED_PERMISSIONS&#125;</span>"</span> ]; <span class="keyword">then</span></div><div class="line">        chmod -R 700 <span class="string">"<span class="variable">$&#123;CONFLUENCE_HOME&#125;</span>"</span> &amp;&amp;</div><div class="line">            chown -R <span class="string">"<span class="variable">$&#123;RUN_USER&#125;</span>:<span class="variable">$&#123;RUN_GROUP&#125;</span>"</span> <span class="string">"<span class="variable">$&#123;CONFLUENCE_HOME&#125;</span>"</span></div><div class="line">    <span class="keyword">fi</span></div><div class="line">    <span class="comment"># Now drop privileges</span></div><div class="line">    <span class="built_in">exec</span> su <span class="_">-s</span> /bin/bash <span class="string">"<span class="variable">$&#123;RUN_USER&#125;</span>"</span> -c <span class="string">"<span class="variable">$CONFLUENCE_INSTALL_DIR</span>/bin/start-confluence.sh <span class="variable">$@</span>"</span></div><div class="line"><span class="keyword">else</span></div><div class="line">    <span class="built_in">exec</span> <span class="string">"<span class="variable">$CONFLUENCE_INSTALL_DIR</span>/bin/start-confluence.sh"</span> <span class="string">"<span class="variable">$@</span>"</span></div><div class="line"><span class="keyword">fi</span></div></pre></td></tr></table></figure>
</li>
<li><p>构建镜像</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ls <span class="comment">#进入dockerfile同级目录</span></div><div class="line">docker build -t confluence-oracle-jdk:v6.8.1 . --no-cache <span class="comment">#构建镜像，这个需要一点时间，建议使用Tmux</span></div><div class="line">docker images <span class="comment">#查看镜像</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="启动Confluence"><a href="#启动Confluence" class="headerlink" title="启动Confluence"></a>启动Confluence</h4><p>主要问题一般会出在构建阶段，如果启动失败可以尝试注释<code>Dockerfile</code>的启动命令，然后进入容器手动调试<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">docker run -v /data/confluence:/var/atlassian/application-data/confluence --name=<span class="string">"confluence"</span> <span class="_">-d</span> -p 8090:8090 -p 8091:8091 confluence-oracle-jdk:v6.8.1 <span class="comment">#调试期间可以加上 --rm参数</span></div><div class="line"><span class="comment">#Manage Confluence</span></div><div class="line">docker ps</div><div class="line">docker <span class="built_in">exec</span> -it confluence /bin/bash</div><div class="line">docker stop confluence</div><div class="line">docker start confluence</div><div class="line">docker logs confluence</div><div class="line">docker logs <span class="_">-f</span> confluence</div></pre></td></tr></table></figure></p>
<p>容器启动后跟Jira一样检查端口和防火墙配置,确认没问题后，在浏览器访问<code>http://host_address:8090</code>跟着提示安装，<strong>注意</strong>在web界面连接数据库的时候需要选择<code>String</code>模式，然后按照如下参数填写,如果没来得及修改，可以在<code>/data/confluence/confluence.cfg.xml</code>这个配置里修改重启。另外如需链接Jira在最后根据提示选择就可以了，别的就没啥了。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">jdbc:mysql://host_address:3306/confluence?sessionVariables=tx_isolation=<span class="string">'READ-COMMITTED'</span>&amp;useSSL=<span class="literal">false</span>&amp;useUnicode=<span class="literal">true</span>&amp;characterEncoding=utf8</div><div class="line"><span class="comment"># Answer：https://confluence.atlassian.com/confkb/confluence-fails-to-start-and-throws-mysql-session-isolation-level-repeatable-read-is-no-longer-supported-error-241568536.html</span></div></pre></td></tr></table></figure></p>
<h3 id="数据备份"><a href="#数据备份" class="headerlink" title="数据备份"></a>数据备份</h3><p>奉上一个拙劣的脚本，还能使就懒的改了,对了在非<code>Amazon Linux</code>上，传S3记得装<code>pip install awscli --upgrade</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#* * 3 * * sh /data/arvon/scripts</span></div><div class="line">ipaddr=<span class="string">'10.0.1.7'</span></div><div class="line">username=<span class="string">'backup_user'</span></div><div class="line">password=<span class="string">'yourpasswd'</span></div><div class="line">dest_dir=<span class="string">'/data/mysql_data_bak'</span></div><div class="line"><span class="comment">###</span></div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">dump_db</span></span>()&#123;</div><div class="line">all_area=`<span class="built_in">echo</span> <span class="string">"show databases"</span> | mysql -h<span class="variable">$&#123;ipaddr&#125;</span> -u<span class="variable">$&#123;username&#125;</span> -p<span class="variable">$&#123;password&#125;</span> |egrep -v <span class="string">"information_schema|mysql|performance_schema|Database|sys"</span>`</div><div class="line">mkdir <span class="variable">$&#123;dest_dir&#125;</span>/`date +%F` -p</div><div class="line"><span class="keyword">for</span> area <span class="keyword">in</span> <span class="variable">$all_area</span>;<span class="keyword">do</span></div><div class="line">    mysqldump -h<span class="variable">$&#123;ipaddr&#125;</span> -u<span class="variable">$&#123;username&#125;</span> -p<span class="variable">$&#123;password&#125;</span> --default-character-set=utf8 --comments=FALSE --tables --no-create-info=FALSE --add-drop-table=TRUE --no-data=FALSE <span class="variable">$&#123;area&#125;</span>  &gt;<span class="variable">$&#123;dest_dir&#125;</span>/`date +%F`/`date +%F`_<span class="variable">$&#123;area&#125;</span>.sql</div><div class="line">    <span class="built_in">cd</span> <span class="variable">$&#123;dest_dir&#125;</span>/`date +%F`  &amp;&amp; tar czvf `date +%F`_<span class="variable">$&#123;area&#125;</span>.sql.tar.gz `date +%F`_<span class="variable">$&#123;area&#125;</span>.sql &amp;&amp; rm -rf `date +%F`_<span class="variable">$&#123;area&#125;</span>.sql</div><div class="line">    <span class="built_in">echo</span> <span class="string">"[`date +%F_%R`] [INFO] Now the `date +%F`_<span class="variable">$&#123;area&#125;</span>.sql have been backuped"</span> &gt;&gt; /var/<span class="built_in">log</span>/mysql_back.log</div><div class="line"><span class="keyword">done</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">load_db</span></span>()&#123;</div><div class="line"><span class="comment">#usage:load_db 2017-05-23</span></div><div class="line">time_want=<span class="variable">$1</span></div><div class="line">mysql -h<span class="variable">$&#123;ipaddr&#125;</span> -u<span class="variable">$&#123;username&#125;</span> -p<span class="variable">$&#123;password&#125;</span> --default-character-set=utf8 --execute=<span class="string">"DROP DATABASE IF EXISTS  <span class="variable">$&#123;area&#125;</span>"</span>;</div><div class="line">mysql -h<span class="variable">$&#123;ipaddr&#125;</span> -u<span class="variable">$&#123;username&#125;</span> -p<span class="variable">$&#123;password&#125;</span> --default-character-set=utf8 --execute=<span class="string">"CREATE DATABASE IF NOT EXISTS  <span class="variable">$&#123;area&#125;</span> DEFAULT CHARACTER SET utf8"</span>;</div><div class="line">mysql -h<span class="variable">$&#123;ipaddr&#125;</span> -u<span class="variable">$&#123;username&#125;</span> -p<span class="variable">$&#123;password&#125;</span> --default-character-set=utf8 --database= <span class="variable">$&#123;area&#125;</span> &lt;<span class="variable">$&#123;dest_dir&#125;</span>/<span class="variable">$&#123;time_want&#125;</span>_<span class="variable">$&#123;area&#125;</span>.sql;</div><div class="line">&#125;</div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">upload_s3</span></span>()&#123;</div><div class="line"><span class="built_in">export</span> AWS_ACCESS_KEY_ID=xxxx</div><div class="line"><span class="built_in">export</span> AWS_SECRET_ACCESS_KEY=xxxx</div><div class="line">aws --region=cn-northwest-1 s3 cp  /data/mysql_data_bak/`date +%F`  s3://itbackups/confluence-jira-mysql/`date +%F`  --recursive</div><div class="line">&#125;</div><div class="line"></div><div class="line">dump_db</div><div class="line">upload_s3</div><div class="line"><span class="comment">#load_db 2017-05-23</span></div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Fluentd使用中遇到的丢数据问题]]></title>
      <url>http://arvon.top/2018/04/11/Fluentd%E4%BD%BF%E7%94%A8%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%A2%E6%95%B0%E6%8D%AE%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>目前遇到的问题主要有3个：两个关于buffer，一个关于connection。下面具体说描述下问题的详细信息及目前我采取的解决措施。先交代下我这里使用的Td-agent架构如下，PS（方便起见以下均将Td-agent简化为TD，关于TD和Fluentd的关系移步我的另一篇<a href="http://arvon.top/2018/02/23/Td-agent%E9%85%8D%E7%BD%AE%E8%AF%B4%E6%98%8E/">Blog</a>）</p>
<p>需要注意： 这里的缓存Buffer设置对0.14.21版本测试生效，亲测0.12.20不生效，具体可到<a href="https://docs.fluentd.org/v1.0/articles/quickstart" target="_blank" rel="external">【Fluentd官网】</a>获取支持。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">graph LR;</div><div class="line">	  A(Td-client)--&gt;F(Td-forward)</div><div class="line">    B(Td-client)--&gt;F(Td-forward)</div><div class="line">    F--&gt;E(Elasticsearch cluster)</div><div class="line">    E--&gt;K(Kibana)</div></pre></td></tr></table></figure>
<a id="more"></a>
<p><strong>Version：</strong></p>
<blockquote>
<p><code>td-agent 0.14.21</code><br><code>ES Version: 5.0.0, Build: 253032b/2016-10-26T04:37:51.531Z, JVM: 1.8.0_121</code> And <code>lucene_version : &quot;6.2.0</code><br><em>Td-agent的es插件版本</em><br><code>elasticsearch (1.0.18)</code><br><code>elasticsearch-api (1.0.18)</code><br><code>elasticsearch-transport (1.0.18)</code><br><code>fluent-plugin-elasticsearch (1.8.0)</code></p>
</blockquote>
<h3 id="Q1：Td-client端的Buffer问题"><a href="#Q1：Td-client端的Buffer问题" class="headerlink" title="Q1：Td-client端的Buffer问题"></a>Q1：Td-client端的Buffer问题</h3><p>这个问题出现次数最多，而且log暴露的问题也是显而易见，主要解决是参数问题</p>
<ul>
<li><p>报错日志</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">  2018-03-16 03:25:19 +0000 [warn]: #0 suppressed same stacktrace</div><div class="line">2018-03-16 03:25:19 +0000 [warn]: #0 failed to write data into buffer by buffer overflow action=:throw_exception</div><div class="line">2018-03-16 03:25:19 +0000 [warn]: #0 emit transaction failed: error_class=Fluent::Plugin::Buffer::BufferOverflowError error=&quot;buffer space has too many data&quot; tag=&quot;logics.5013.205&quot;</div><div class="line">  2018-03-16 03:25:19 +0000 [warn]: #0 suppressed same stacktrace</div><div class="line">2018-03-16 03:25:19 +0000 [warn]: #0 failed to write data into buffer by buffer overflow action=:throw_exception</div><div class="line">2018-03-16 03:25:19 +0000 [warn]: #0 emit transaction failed: error_class=Fluent::Plugin::Buffer::BufferOverflowError error=&quot;buffer space has too many data&quot; tag=&quot;logics.5073.205&quot;</div></pre></td></tr></table></figure>
</li>
<li><p>修改后的配置</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">match</span> <span class="attr">logics.</span>**&gt;</span></div><div class="line">   type forward</div><div class="line">   <span class="tag">&lt;<span class="name">buffer</span>&gt;</span></div><div class="line">     @type file</div><div class="line">     path /var/log/td-agent/buffer/td-gamex-buffer</div><div class="line">     chunk_limit_size 512MB #Default: 8MB (memory) / 256MB (file)</div><div class="line">     total_limit_size 32GB #Default: 512MB (memory) / 64GB (file)</div><div class="line">     chunk_full_threshold 0.9 #flush the chunk when actual size reaches chunk_limit_size * chunk_full_threshold</div><div class="line">     compress text #The option to specify compression of each chunks, during events are buffered</div><div class="line">     flush_mode default</div><div class="line">     flush_interval 15s #Default: 60s</div><div class="line">     flush_thread_count 1 #Default: 1 The number threads used to write chunks in parallel</div><div class="line">     delayed_commit_timeout 60 #The timeout seconds decides that async write operation fails</div><div class="line">     overflow_action throw_exception</div><div class="line">     retry_timeout 10m</div><div class="line">   <span class="tag">&lt;/<span class="name">buffer</span>&gt;</span></div><div class="line">   send_timeout 60s</div><div class="line">   recover_wait 10s</div><div class="line">   heartbeat_interval 1s</div><div class="line">   phi_threshold 16</div><div class="line">   hard_timeout 60s</div><div class="line">   heartbeat_type tcp</div><div class="line">   <span class="tag">&lt;<span class="name">server</span>&gt;</span></div><div class="line">      name logics.shard</div><div class="line">      host tdagent.test.net</div><div class="line">      port 24224</div><div class="line">      weight 1</div><div class="line">   <span class="tag">&lt;/<span class="name">server</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">match</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Q2：Td-forward端的Buffer问题"><a href="#Q2：Td-forward端的Buffer问题" class="headerlink" title="Q2：Td-forward端的Buffer问题"></a>Q2：Td-forward端的Buffer问题</h3><p>正常来说对forward端配置buffer跟client端一样就行了，不过在实际使用中发现按client的配置会报错，如下，从报错来看是路径的问题，经查证是buffer的路径在<code>forest copy</code>的配置类型下，需要区分index来进行缓存，使用<code>${tag}</code>作为buffer存储路径的话就很好的解决了这个问题。类似issues可前往<a href="https://github.com/uken/fluent-plugin-elasticsearch/issues/103" target="_blank" rel="external">【Github】</a>查看</p>
<ul>
<li><p>报错日志</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">2018-04-11 02:24:29 +0000 [error]: #0 Cannot output messages with tag &apos;logics.5022.205&apos;</div><div class="line">2018-04-11 02:24:29 +0000 [error]: #0 failed to configure sub output copy: Other &apos;elasticsearch&apos; plugin already use same buffer path: type = elasticsearch, buffer path = /var/log/td-agent/buffer/td-gamex-buffer</div><div class="line">2018-04-11 02:24:29 +0000 [error]: #0 /opt/td-agent/embedded/lib/ruby/gems/2.1.0/gems/fluentd-0.14.13/lib/fluent/plugin/buf_file.rb:71:in `configure&apos;</div><div class="line">/opt/td-agent/embedded/lib/ruby/gems/2.1.0/gems/fluentd-0.14.13/lib/fluent/plugin/output.rb:305:in `configure&apos;</div><div class="line">/opt/td-agent/embedded/lib/ruby/gems/2.1.0/gems/fluentd-0.14.13/lib/fluent/plugin_helper/inject.rb:104:in `configure&apos;</div><div class="line">/opt/td-agent/embedded/lib/ruby/gems/2.1.0/gems/fluentd-0.14.13/lib/fluent/plugin_helper/event_emitter.rb:73:in `configure&apos;</div><div class="line">/opt/td-agent/embedded/lib/ruby/gems/2.1.0/gems/fluentd-0.14.13/lib/fluent/compat/output.rb:504:in `configure&apos;</div><div class="line">/opt/td-agent/embedded/lib/ruby/gems/2.1.0/gems/fluent-plugin-elasticsearch-1.9.2/lib/fluent/plugin/out_elasticsearch.rb:71:in `configure&apos;</div><div class="line">/opt/td-agent/embedded/lib/ruby/gems/2.1.0/gems/fluentd-0.14.13/lib/fluent/plugin.rb:164:in `configure&apos;</div><div class="line">/opt/td-agent/embedded/lib/ruby/gems/2.1.0/gems/fluentd-0.14.13/lib/fluent/plugin/multi_output.rb:73:in `block in configure&apos;</div><div class="line">/opt/td-agent/embedded/lib/ruby/gems/2.1.0/gems/fluentd-0.14.13/lib/fluent/plugin/multi_output.rb:62:in `each&apos;</div><div class="line">/opt/td-agent/embedded/lib/ruby/gems/2.1.0/gems/fluentd-0.14.13/lib/fluent/plugin/multi_output.rb:62:in `configure&apos;</div><div class="line">/opt/td-agent/embedded/lib/ruby/gems/2.1.0/gems/fluentd-0.14.13/lib/fluent/plugin.rb:164:in `configure&apos;</div><div class="line">/opt/td-agent/embedded/lib/ruby/gems/2.1.0/gems/fluent-plugin-forest-0.3.3/lib/fluent/plugin/out_forest.rb:132:in `block in plant&apos;</div><div class="line">/opt/td-agent/embedded/lib/ruby/gems/2.1.0/gems/fluent-plugin-forest-0.3.3/lib/fluent/plugin/out_forest.rb:128:in `synchronize&apos;</div><div class="line">/opt/td-agent/embedded/lib/ruby/gems/2.1.0/gems/fluent-plugin-forest-0.3.3/lib/fluent/plugin/out_forest.rb:128:in `plant&apos;</div><div class="line">/opt/td-agent/embedded/lib/ruby/gems/2.1.0/gems/fluent-plugin-forest-0.3.3/lib/fluent/plugin/out_forest.rb:169:in `emit&apos;</div><div class="line">/opt/td-agent/embedded/lib/ruby/gems/2.1.0/gems/fluentd-0.14.13/lib/fluent/compat/output.rb:211:in `process&apos;</div><div class="line">/opt/td-agent/embedded/lib/ruby/gems/2.1.0/gems/fluentd-0.14.13/lib/fluent/plugin/bare_output.rb:53:in `emit_sync&apos;</div><div class="line">/opt/td-agent/embedded/lib/ruby/gems/2.1.0/gems/fluentd-0.14.13/lib/fluent/event_router.rb:96:in `emit_stream&apos;</div><div class="line">/opt/td-agent/embedded/lib/ruby/gems/2.1.0/gems/fluentd-0.14.13/lib/fluent/plugin/in_forward.rb:300:in `on_message&apos;</div><div class="line">/opt/td-agent/embedded/lib/ruby/gems/2.1.0/gems/fluentd-0.14.13/lib/fluent/plugin/in_forward.rb:211:in `block in handle_connection&apos;</div><div class="line">/opt/td-agent/embedded/lib/ruby/gems/2.1.0/gems/fluentd-0.14.13/lib/fluent/plugin/in_forward.rb:248:in `call&apos;</div><div class="line">/opt/td-agent/embedded/lib/ruby/gems/2.1.0/gems/fluentd-0.14.13/lib/fluent/plugin/in_forward.rb:248:in `block (3 levels) in read_messages&apos;</div><div class="line">/opt/td-agent/embedded/lib/ruby/gems/2.1.0/gems/fluentd-0.14.13/lib/fluent/plugin/in_forward.rb:247:in `feed_each&apos;</div><div class="line">/opt/td-agent/embedded/lib/ruby/gems/2.1.0/gems/fluentd-0.14.13/lib/fluent/plugin/in_forward.rb:247:in `block (2 levels) in read_messages&apos;</div><div class="line">/opt/td-agent/embedded/lib/ruby/gems/2.1.0/gems/fluentd-0.14.13/lib/fluent/plugin/in_forward.rb:256:in `call&apos;</div><div class="line">/opt/td-agent/embedded/lib/ruby/gems/2.1.0/gems/fluentd-0.14.13/lib/fluent/plugin/in_forward.rb:256:in `block in read_messages&apos;</div><div class="line">/opt/td-agent/embedded/lib/ruby/gems/2.1.0/gems/fluentd-0.14.13/lib/fluent/plugin_helper/server.rb:576:in `call&apos;</div><div class="line">/opt/td-agent/embedded/lib/ruby/gems/2.1.0/gems/fluentd-0.14.13/lib/fluent/plugin_helper/server.rb:576:in `on_read_without_connection&apos;</div><div class="line">/opt/td-agent/embedded/lib/ruby/gems/2.1.0/gems/cool.io-1.4.6/lib/cool.io/io.rb:123:in `on_readable&apos;</div><div class="line">/opt/td-agent/embedded/lib/ruby/gems/2.1.0/gems/cool.io-1.4.6/lib/cool.io/io.rb:186:in `on_readable&apos;</div><div class="line">/opt/td-agent/embedded/lib/ruby/gems/2.1.0/gems/cool.io-1.4.6/lib/cool.io/loop.rb:88:in `run_once&apos;</div><div class="line">/opt/td-agent/embedded/lib/ruby/gems/2.1.0/gems/cool.io-1.4.6/lib/cool.io/loop.rb:88:in `run&apos;</div><div class="line">/opt/td-agent/embedded/lib/ruby/gems/2.1.0/gems/fluentd-0.14.13/lib/fluent/plugin_helper/event_loop.rb:84:in `block in start&apos;</div><div class="line">/opt/td-agent/embedded/lib/ruby/gems/2.1.0/gems/fluentd-0.14.13/lib/fluent/plugin_helper/thread.rb:78:in `block in thread_create&apos;</div></pre></td></tr></table></figure>
</li>
<li><p>解决后的配置</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">match</span> <span class="attr">logics.</span>**&gt;</span></div><div class="line">  type forest</div><div class="line">  subtype copy</div><div class="line">  <span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">store</span>&gt;</span></div><div class="line">      @type elasticsearch</div><div class="line">      <span class="tag">&lt;<span class="name">buffer</span>&gt;</span></div><div class="line">        @type file</div><div class="line">        path /var/log/td-agent/buffer/td-gamex-buffer/$&#123;tag&#125;</div><div class="line">        chunk_limit_size 512MB #Default: 8MB (memory) / 256MB (file)</div><div class="line">        total_limit_size 32GB #Default: 512MB (memory) / 64GB (file)</div><div class="line">        chunk_full_threshold 0.9 #flush the chunk when actual size reaches chunk_limit_size * chunk_full_threshold</div><div class="line">        compress text #The option to specify compression of each chunks, during events are buffered</div><div class="line">        flush_mode default</div><div class="line">        flush_interval 15s #Default: 60s</div><div class="line">        flush_thread_count 1 #Default: 1 The number threads  used to write chunks in parallel</div><div class="line">        delayed_commit_timeout 60 #The timeout seconds decides that async write operation fails</div><div class="line">        overflow_action throw_exception</div><div class="line">        retry_timeout 10m</div><div class="line">      <span class="tag">&lt;/<span class="name">buffer</span>&gt;</span></div><div class="line">      host elasticsearch.test.net</div><div class="line">      port 9200</div><div class="line">      logstash_format true</div><div class="line">      logstash_prefix bilogs</div><div class="line">      logstash_dateformat logics-$&#123;tag_parts[-1]&#125;.%Y.%m.%d</div><div class="line">      time_key time</div><div class="line">      request_timeout 60s</div><div class="line">      reload_connections false</div><div class="line">      reload_on_failure true</div><div class="line">      reconnect_on_error true</div><div class="line">    <span class="tag">&lt;/<span class="name">store</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">match</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Q3：Td-forward端的connection问题"><a href="#Q3：Td-forward端的connection问题" class="headerlink" title="Q3：Td-forward端的connection问题"></a>Q3：Td-forward端的connection问题</h3><p>这个问题主要发生在TD向ES发送数据阶段，起初考虑是ES集群处理能力达到上限，无法分配更对的连接给TD，但是进行Reload之后就正常了，所以这个问题的可能性不大，很可能是TD或者ES在处理连接的逻辑上存在问题，没有正确的关闭或者使用连接。经过查找资料，也找到了一些蛛丝马迹，可供参考的资料也一快带上</p>
<ul>
<li><p>参考资料</p>
<blockquote>
<p>A. <a href="https://github.com/atomita/fluent-plugin-aws-elasticsearch-service/issues/15" target="_blank" rel="external">【Github 关于这个问题的Issues】</a></p>
</blockquote>
</li>
<li><p>报错信息</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">2018-03-21 04:28:19 +0000 [warn]: temporarily failed to flush the buffer. next_retry=2018-03-21 04:28:34 +0000 error_class=&quot;Elasticsearch::Transport::Transport::Error&quot; error=&quot;Cannot get new connection from pool.&quot; plugin_id=&quot;object:3fe6fced399c&quot;</div><div class="line">  2018-03-21 04:28:19 +0000 [warn]: suppressed same stacktrace</div><div class="line">2018-03-21 04:28:35 +0000 [warn]: temporarily failed to flush the buffer. next_retry=2018-03-21 04:29:08 +0000 error_class=&quot;Elasticsearch::Transport::Transport::Error&quot; error=&quot;Cannot get new connection from pool.&quot; plugin_id=&quot;object:3fe6fced399c&quot;</div></pre></td></tr></table></figure>
</li>
<li><p>再说明<br><strong>解决方法：</strong>还是升级吧，升级至1.9.1版本之后该问题消失。<a href="https://github.com/uken/fluent-plugin-elasticsearch/pull/220" target="_blank" rel="external">【关于修复PR信息点这里】</a>在<a href="https://github.com/uken/fluent-plugin-elasticsearch/pull/220/commits/494a68d6b26575e212713b156ab6fe61a7b38733" target="_blank" rel="external">【版本1.9.1 该Release版本时间为2016.12.14】</a>中修复</p>
<blockquote>
<p>目前解决主要涉及以下几个方面</p>
<ul>
<li><code>reload_connections false # defaults to true</code><br>You can tune how the elasticsearch-transport host reloading feature works. By default it will reload the host list from the server every 10,000th request to spread the load. This can be an issue if your Elasticsearch cluster is behind a Reverse Proxy, as Fluentd process may not have direct network access to the Elasticsearch nodes.<br>对于这个参数，我这里ES集群并没有使用代理而是DSN域名</li>
<li><code>reload_on_failure true # defaults to false</code><br>Indicates that the elasticsearch-transport will try to reload the nodes addresses if there is a failure while making the</li>
<li><code>request, this can be useful to quickly remove a dead node from the list of addresses</code><br>这个主要是当请求发生故障时ES-transport将重新加载节点地址，删除死节点，我这里使用的也是true</li>
<li><code>reconnect_on_error true</code><br>Github提到这个有帮助，实测并不好用，问题还是会出现，但频率貌似有减少。</li>
</ul>
</blockquote>
</li>
</ul>
<ul>
<li>目前解决途径<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">match</span> <span class="attr">logics.</span>**&gt;</span></div><div class="line">  type forest</div><div class="line">  subtype copy</div><div class="line">  <span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">store</span>&gt;</span></div><div class="line">      type elasticsearch</div><div class="line">      <span class="tag">&lt;<span class="name">buffer</span>&gt;</span></div><div class="line">        @type file</div><div class="line">        path /var/log/td-agent/buffer/td-gamex-buffer/$&#123;tag&#125;</div><div class="line">        chunk_limit_size 512MB #Default: 8MB (memory) / 256MB (file)</div><div class="line">        total_limit_size 32GB #Default: 512MB (memory) / 64GB (file)</div><div class="line">        chunk_full_threshold 0.9 #flush chunk when size reaches chunk_limit_size * chunk_full_threshold</div><div class="line">        compress text #The option to specify compression of each chunks, during events are buffered</div><div class="line">        flush_mode default</div><div class="line">        flush_interval 15s #Default: 60s</div><div class="line">        flush_thread_count 1 #Default: 1 The number threads used to write chunks in parallel</div><div class="line">        delayed_commit_timeout 60 #The timeout seconds  async write operation fails</div><div class="line">        overflow_action throw_exception</div><div class="line">        retry_timeout 10m</div><div class="line">      <span class="tag">&lt;/<span class="name">buffer</span>&gt;</span></div><div class="line">      host elasticsearch.yingxiong.net</div><div class="line">      port 9200</div><div class="line">      logstash_format true</div><div class="line">      logstash_prefix bilogs</div><div class="line">      logstash_dateformat logics-$&#123;tag_parts[-1]&#125;.%Y.%W</div><div class="line">      time_key time</div><div class="line">      flush_interval 10s</div><div class="line">      request_timeout 15s</div><div class="line">      num_threads 2</div><div class="line">      reload_connections false</div><div class="line">      reload_on_failure true</div><div class="line">      reconnect_on_error true</div><div class="line">    <span class="tag">&lt;/<span class="name">store</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">match</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[即学即用Docker读书笔记]]></title>
      <url>http://arvon.top/2018/04/09/%E5%8D%B3%E5%AD%A6%E5%8D%B3%E7%94%A8Docker%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p><a href="https://book.douban.com/subject/26700648/" target="_blank" rel="external">《即学即用Docker》</a>这本书在手里也有很长时间了，现在补上读书笔记。感觉这书非常适合入门，对没有docker基础的推荐阅读。目前手里还有《Docker经典实例》和《Kubernetes权威指南》等待我的临幸，有时间就争取先来一遍。<br><strong>容器是什么</strong><br>容器不同于VMware或者Xen这种虚拟化系统，是一种完全不同的虚拟化方式，所有容器共用一个内核，而且容器之间的隔离完全在这个内核中实现，这叫做操作系统虚拟化。<br>容器是自成一体的执行环境，所有容器共用宿主机的内核，而且系统中的容器之间是相互隔离的（不强制一定要隔离）。<br>容器的最大优势是高效使用资源，因为不用为了使用各个独立的功能而运行整个操作系统。因为容器共用一个内核，所以隔离执行的任务和底层硬件之间少了一层交互。运行在容器里面的进程只需要使用很少一部分内核，进程在特权模式下进出处理器时不会再调出一个完整的内核。<br><a id="more"></a></p>
<h3 id="命令相关"><a href="#命令相关" class="headerlink" title="命令相关"></a>命令相关</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">docker version</div><div class="line"><span class="comment">#查看docker版本信息</span></div><div class="line">docker info</div><div class="line"><span class="comment">#查看服务器信息</span></div><div class="line">docker run == docker create + docker start</div><div class="line"><span class="comment">#docker run 是两条命令的聚合</span></div><div class="line">docker create --name=<span class="string">"test-service"</span> ubuntu:latest</div><div class="line"><span class="comment">#指定容器名称</span></div><div class="line">docker run <span class="_">-d</span> --name labels <span class="_">-l</span> author=arvon <span class="_">-l</span> tester=Mo  ubuntu:latest sleep 100</div><div class="line">docker ps <span class="_">-a</span> <span class="_">-f</span> label=deployer=arvon</div><div class="line">docker inspect 509531d14f70</div><div class="line"><span class="comment">#指定容器标签、通过ps可以组合标签过滤、通过inspect可以查看所有标注</span></div><div class="line">docker run --rm -it ubuntu:latest /bin/bash</div><div class="line"><span class="comment">#启动一个没有任何特殊配置的容器，rm参数表示退出容器时会删除容器,i参数表示交互，t参数表示启动一个伪tty</span></div><div class="line">docker run -it --hostname=<span class="string">"test.example.com"</span> ubuntu:latest /bin/bash</div><div class="line"><span class="comment">#启动一个主机名为test.example.com的容器</span></div><div class="line">docker run --it --dns=8.8.8.8 --dns=8.8.4.4 --dns-search=example.com --dns-search=example2.com ubuntu:latest /bin/bash</div><div class="line"><span class="comment">#启动一个指定dns的容器，默认会使用宿主机resolv.conf</span></div><div class="line">docker run --it --mac-address=<span class="string">"xx.xx.xx.xx.xx.xx"</span> ubuntu:latest /bin/bash</div><div class="line"><span class="comment">#指定MAC地址，默认会自己计算，尽量别使用这个玩意</span></div><div class="line">docker run --it -v /mnt/data1:/data ubuntu:latest /bin/bash</div><div class="line"><span class="comment">#挂载本地data1到容器/data，不需要容器内预先存在挂载点，会自己创建</span></div><div class="line">docker stop -t 25 mysql</div><div class="line"><span class="comment">#强制停止myql容器，适用于无法正常停止的情况，发送SIGTERM信号，如果25s后容易还没有停止，就发送SIGKILL信号，强制清除容器</span></div><div class="line">docker <span class="built_in">kill</span> mysql</div><div class="line"><span class="comment">#清除容器，跟Linux的Kill命令一样</span></div><div class="line">docker <span class="built_in">kill</span> --signal=USR1 mysql</div><div class="line"><span class="comment">#发送UNIX信号对容器进行管理</span></div><div class="line">docker ps</div><div class="line"><span class="comment">#查看运行中的容器</span></div><div class="line">docker ps <span class="_">-a</span></div><div class="line"><span class="comment">#查看所有容器</span></div><div class="line">docker rm mysql</div><div class="line"><span class="comment">#删除容器</span></div><div class="line">docker images</div><div class="line"><span class="comment">#列出镜像</span></div><div class="line">docker rmi mysql:0.1</div><div class="line"><span class="comment">#删除镜像</span></div><div class="line">docker inspect container_id</div><div class="line"><span class="comment">#查看容器详细信息</span></div><div class="line">docker <span class="built_in">exec</span> -it mysql /bin/bash</div><div class="line"><span class="comment">#进入运行中的容器mysql</span></div><div class="line">docker stats</div><div class="line"><span class="comment">#查看docker容器的运行状态，类似top</span></div></pre></td></tr></table></figure>
<h3 id="关于资源配额"><a href="#关于资源配额" class="headerlink" title="关于资源配额"></a>关于资源配额</h3><p>Docker使用Linux内核中cgroup功能控制Docker容器的可用资源，执行docker create时可以直接配置分配给容器的CPU和内存量。<br>使用<code>docker info</code>可以查看当前docker是否有支持，如不支持需要在内核启动时指定相应的参数，一般来说都是支持的。<br><strong>CPU配额</strong>：cpu配额类似nice，可以看做是对任务优先级的调整<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">docker run -it progrium/stress --cpu 2 --io 1 --vm 2 --vm-bytes 128M --timeout 120s</div><div class="line"><span class="comment">#创建一个容器包含2个cpu密集型1个io密集型和两个占用内存的进程，压测</span></div><div class="line">docker run -it  -c 512  progrium/stress --cpu 2 --io 1 --vm 2 --vm-bytes 128M --timeout 120s</div><div class="line"><span class="comment">#理论上cpu的load会是上一条命令的一般，使用-c参数指定cpu配额，类似nice，默认配额为1024</span></div><div class="line">docker run -it  -c 512  --cpuset=0 progrium/stress --cpu 2 --io 1 --vm 2 --vm-bytes 128M --timeout 120s</div><div class="line"><span class="comment">#创建一个容器--cpuset参数指定在特定cpu上运行，没有这个cpu的话容器启动会报错</span></div></pre></td></tr></table></figure></p>
<p><strong>内存配额</strong>：内存限额是硬性限制，设定限额后容器内存不足会像普通进程一样使用swap<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">docker run -it -m 512m progrium/stress --cpu 2 --io 1 --vm 2 --vm-bytes 128M --timeout 120s</div><div class="line"><span class="comment">#创建一个内存限额512M交换分区限额512的容器,使用-m参数</span></div><div class="line">docker run -it -m 512m --memory-swap= 1024m progrium/stress --cpu 2 --io 1 --vm 2 --vm-bytes 128M --timeout 120s</div><div class="line"><span class="comment">#创建一个内存限额512M交换分区限额1024M的容器，使用--memory-swap单独制定swap，设置为-1则禁用交换空间</span></div></pre></td></tr></table></figure></p>
<p><strong>权限限制：</strong>类似Linux中的ulimit<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">docker run <span class="_">-d</span> --default-ulimit nofile=50:150 --default-ulimit nproc=10:20</div><div class="line"><span class="comment">#告诉docker守护进程每个容器可以打开150个文件，运行20个进程，为硬性限制</span></div></pre></td></tr></table></figure></p>
<h3 id="容器自动重启"><a href="#容器自动重启" class="headerlink" title="容器自动重启"></a>容器自动重启</h3><p><strong>自动重启</strong>：共有三个参数可选</p>
<ul>
<li><code>no</code>: 容器退出不重启</li>
<li><code>always</code>: 不管容器退出码是什么都重启</li>
<li><code>on-failure:3</code>: 在容器退出码不是零的情况下尝试重启3次，3次依然失败的话就放弃重启</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">docker run --restart=on-failure:3 progrium/stress --cpu 2 --io 1 --vm 2 --vm-bytes 128M --timeout 120s</div><div class="line"><span class="comment">#启动一个容器容器退出后尝试重启3次</span></div></pre></td></tr></table></figure>
<h3 id="暂停容器"><a href="#暂停容器" class="headerlink" title="暂停容器"></a>暂停容器</h3><p><strong>暂停容器：</strong> 暂停功能是通过cgroup的冻结程序实现的，暂停容器时容器的内存等状态还在，只是无法提供服务，类似于快照的状态<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">docker pause mysql</div><div class="line"><span class="comment">#暂停容器</span></div><div class="line">dcoker unpause mysql</div><div class="line"><span class="comment">#恢复容器，运行时间从恢复的这一时刻计算</span></div></pre></td></tr></table></figure></p>
<h3 id="镜像存储"><a href="#镜像存储" class="headerlink" title="镜像存储"></a>镜像存储</h3><p><strong>公共注册</strong></p>
<ul>
<li>Docker Hub</li>
<li>Quay.io</li>
</ul>
<p><strong>私有注册</strong></p>
<ul>
<li>docker-registry #支持了S3和Azure</li>
<li>CoreOS Enterprose Registry</li>
<li>Docker Hub Enterprise</li>
</ul>
<h3 id="容器命名空间"><a href="#容器命名空间" class="headerlink" title="容器命名空间"></a>容器命名空间</h3><p><strong>nsenter工具</strong>：Linux内核中的util-linux包里有个nsenter工具，用于进入linux的命令空间，因此可以通过这个工具进入运行在宿主机上的容器（不管这个容器是否有响应）<br><strong>注意：</strong>nsenter命令只能在宿主机上使用，并且需要把容器里顶层进程的PID传递给nsenter，看起来很麻烦的说，不过jpetazzo/nsenter容器有一个方便的脚本docker—enter会让这个过程简单不少<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">docker run --rm -v /usr/<span class="built_in">local</span>/bin:/target jpetazzo/nsenter</div><div class="line"><span class="comment">#安装nsenter工具到/usr/local/bin目录</span></div><div class="line">docker inspect d2c3ce380095 --format &#123;&#123;.State.Pid&#125;&#125;</div><div class="line"><span class="comment">#查看容器的pid</span></div><div class="line">nsenter --target 30302 --mount --uts --ipc --net --pid</div><div class="line"><span class="comment">#进入pid为30302的命名空间</span></div><div class="line">docker-enter 12b57becb46b /bin/bash</div><div class="line"><span class="comment">#使用docker-enter命令相当于上面两条命令的合并，简单多了，主要用这个</span></div></pre></td></tr></table></figure></p>
<h3 id="Docker日志"><a href="#Docker日志" class="headerlink" title="Docker日志"></a>Docker日志</h3><p>在Linux对log处理通常有两种方式，一种是将日志写入本地文件，一种是写入内核缓冲区然后使用dmesg命令读取。而docker提供的方式是使用<code>docker logs</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">docker logs d2c3ce380095</div><div class="line"><span class="comment">#查看容器的全部log</span></div><div class="line">docker logs <span class="_">-f</span> d2c3ce380095</div><div class="line"><span class="comment">#阻塞方式查看log，与Linux中tail -f基本相同</span></div></pre></td></tr></table></figure>
<p>Docker中容器的默认log存储在<code>/var/lib/docker/containers/&lt;your-contain-id&gt;/</code>这个目录下，记录的格式如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&#123;&quot;log&quot;:&quot;[7] 04-08 13:10:00,633 INFO total_commands_processed:3906596\r\n&quot;,&quot;stream&quot;:&quot;stdout&quot;,&quot;time&quot;:&quot;2018-04-08T13:10:00.848081205Z&quot;&#125;</div><div class="line">#log:实际log，stream：log的输出，time：docker守护进程收到log的时间</div></pre></td></tr></table></figure></p>
<p><strong>Tips：</strong>目前大规模部署docker时处理日志的最佳方式是把容器的log直接发送给系统日志syslog，使用这种方式构建容器时需要指定<code>--log-driver=syslog</code>选项</p>
<p>目前解决log问题的思路：</p>
<ul>
<li>让应用直接把日志发给系统日志</li>
<li>在容器里使用进程管理器转发日志（如systemd、upstart、supervisor等）</li>
<li>在容器中运行一个日志中继器，包装容器的stdout和stderr</li>
<li>在服务器中把docker的JSON日志转发给系统日志</li>
</ul>
<p>值得实践的方式：</p>
<ul>
<li>supervisor插件 ==&gt; <a href="https://github.com/newrelic/supervisor-remote-logging" target="_blank" rel="external">github地址【python编写】</a></li>
<li>spotify发布的中继器 ==&gt; <a href="https://github.com/spotify/syslog-redirector" target="_blank" rel="external">github地址【go编写】</a></li>
<li>使用logspout集中处理日志 ==&gt; <a href="https://github.com/gliderlabs/logspout" target="_blank" rel="external">github地址【go编写】</a></li>
</ul>
<h3 id="监控docker"><a href="#监控docker" class="headerlink" title="监控docker"></a>监控docker</h3><p>Docker提供简单的命令来查看一些比较基础的信息，<code>docker stats</code>以及<code>docker events</code>,推荐使用docker的API来对容器进行信息采集和监控，而且结合一些可视化的图表工具会更直观一点。<br><strong>可视化工具推荐</strong>：商业化的就不推荐了只弄开源的东西</p>
<ul>
<li>cAdvisor 【google开发的】<a href="https://github.com/google/cadvisor" target="_blank" rel="external">项目地址</a></li>
<li>Nagios</li>
</ul>
<p><strong>使用cAdvisor</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">docker run \</div><div class="line">  --volume=/:/rootfs:ro \</div><div class="line">  --volume=/var/run:/var/run:rw \</div><div class="line">  --volume=/sys:/sys:ro \</div><div class="line">  --volume=/var/lib/docker/:/var/lib/docker:ro \</div><div class="line">  --volume=/dev/disk/:/dev/disk:ro \</div><div class="line">  --publish=8080:8080 \</div><div class="line">  --detach=<span class="literal">true</span> \</div><div class="line">  --name=cadvisor \</div><div class="line">  google/cadvisor:v0.24.1</div></pre></td></tr></table></figure></p>
<p>访问<code>http://localhost:8080</code>即可查看web页面，很不错。另外还提供了REST API，可以通过这个api在自己的监控系统中轻松的查询众多详细信息,另外我这里使用0.24.1的原因是使用latest版本报错了，现在暂时不想折腾这个，这个0.24.1版本可用。</p>
<h3 id="部署工具介绍"><a href="#部署工具介绍" class="headerlink" title="部署工具介绍"></a>部署工具介绍</h3><p><strong>关于部署</strong>：部署应该满足两个条件</p>
<ul>
<li>可以重复执行，每次部署都做相同的事情</li>
<li>定义应用的配置，保证每次部署都使用相同的配置</li>
</ul>
<p><strong>工具的类别</strong>：</p>
<ul>
<li><p>用于编排和部署，（替代Capistrano、Fabric、shell等）<br>这种工具基本上是在多个Docker守护进程之间采用异步方式协调应用的配置和部署过程，代表有：</p>
<blockquote>
<ul>
<li>New Relic开发的Centurion<a href="https://github.com/newrelic/centurion" target="_blank" rel="external">【Github项目地址】</a></li>
<li>Spotify开发的Helios<a href="https://github.com/spotify/helios" target="_blank" rel="external">【Github项目地址】</a></li>
<li>Ansible为Docker提供的工具<a href="https://www.ansible.com/integrations/containers/docker" target="_blank" rel="external">【官网地址】</a></li>
</ul>
</blockquote>
</li>
<li><p>用于自动调度和集群管理，代替手工操作<br>使用分布式调度程序管理Docker，将整个网络看作是一个大电脑，通过定义一些策略，指明如何运行应用，不需要人为具体操作底层细节。</p>
<blockquote>
<ul>
<li>最早出现在公众视野的是CroeOS退出的Fleet<a href="https://github.com/coreos/fleet" target="_blank" rel="external">【Github项目地址】</a></li>
<li>目前最火的是Google推出的Kubernetes<a href="https://kubernetes.io/" target="_blank" rel="external">【官网地址】</a></li>
<li>最成熟的是由加州伯克利分校研究人员编写的Mesos<a href="http://mesos.apache.org/" target="_blank" rel="external">【官网地址】</a></li>
<li>Docker公司原生的Swarm<a href="https://github.com/docker/swarm" target="_blank" rel="external">【Github项目地址】</a></li>
</ul>
</blockquote>
</li>
</ul>
<h3 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h3><p>虽然容器和系统中其他进程公用一个内核，但看起来每个容器都有自己的文件系统、网络接口、硬盘和其他资源，其实这是一种抽象的处理，在内核中实现这种抽象的方法是使用命名空间，在命名空间中容器认为自己独占所有资源。命名空间实现的是视觉隔离，而且很多情况下实现的是功能的隔离，目的是让容器看起来像是运行在同一个内核之上的虚拟机。目前Linux内核实现的6种命名空间容器都有，如下：</p>
<ul>
<li><p>挂载命名空间</p>
<blockquote>
<p>Docker主要使用这个命名空间让容器看起来有自己完整的文件系统，挂载命名空间与chroot实现类似，不过隔离性更好，而且深入到内核中，以至于<code>mount</code>和<code>unmount</code>系统调用都在命名空间中操作</p>
</blockquote>
</li>
<li><p>UTS命名空间</p>
<blockquote>
<p>UTS命名空间作用在内核上，利用UNIX分时系统给各个容器指定主机名和域名</p>
</blockquote>
</li>
<li><p>IPC命名空间</p>
<blockquote>
<p>这种命名空间把容器的System V进程间通信。消息队列和POSIX消息队列与主机的消息队列隔离开。IPC命名空间负责的进程间通信不是由文件系统资源实现的，而是由共享内存和信号量实现的，而且相互通信的进程在同一容器里。</p>
</blockquote>
</li>
<li><p>PID命名空间</p>
<blockquote>
<p>每个命名空间里的进程都有相对该命名空间而言唯一的PID，如在容器中看的ps和宿主机上看到的ps输出就是完全不同的</p>
</blockquote>
</li>
<li><p>网络命名空间</p>
<blockquote>
<p>这种命名空间为容器提供专用的网络设备和端口等。<code>docker ps</code>命令输出会显示容器绑定的端口，这些端口分别在两个命名空间中。如容器里nginx一般会绑定80端口，其实这个端口在容器所属网络命名空间的网络接口上。这种命名空间让容器看起来像是拥有完全独立的网络栈。</p>
</blockquote>
</li>
<li><p>用户命名空间</p>
<blockquote>
<p>用户命名空间把容器里的用户和用户组与Docker宿主机的用户和用户组隔离开。在容器里和宿主机上看到用户ID不同的原因就是因为有这个用户命名空间。</p>
</blockquote>
</li>
</ul>
<p><strong>补充说明之前的一个例子：</strong>命名空间就是之前可以进入一个已经退出的容器的原因，以下命令就是进入这个容器的所有命名空间</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nsenter --target <span class="variable">$PID</span> --mount --uts --ipc --net --pid</div></pre></td></tr></table></figure>
<h3 id="关于容器安全性"><a href="#关于容器安全性" class="headerlink" title="关于容器安全性"></a>关于容器安全性</h3><p>容器只是运行在Docker宿主机中的一个进程。容器实现的隔离性没有虚拟机实现的强。容器的性能之所以高其中的一个原因就是与宿主机公用一个内核，但是内核中的一切并不都会放在命名空间中，这就是人们认为Docker容器存在的安全隐患之一也是最严重的一个。</p>
<ul>
<li><p>在容器中以非Root用户运行应用</p>
<blockquote>
<p>容器里的root用户其实是系统的root用户，不过容器里的root用户有些额外的限制，禁止了<code>/proc</code>和<code>/sys</code>文件系统中最危险的部分</p>
</blockquote>
</li>
<li><p>使用<code>--privileged=true</code>选项赋予容器更大的权限（尽量不要用这个更不安全）</p>
<blockquote>
<p>有时候容器需要一些更多的权限去做一些事情，如挂载存储、修改网络配置、新建UNIX设备等。不过建议不是必须不要这么做，可以通过<code>--cap-add=NET_ADMIN</code>和<code>--cap-drop</code>结合起来赋予尽可能准确且尽可能少的权限。</p>
</blockquote>
</li>
<li><p>SELinux、AppArmor</p>
<blockquote>
<p>SELinux最初由美国国家安全局开发，目的是精确控制安全。AppArmor的目标与SELinux类似，不过比SELinux简单。Docker会根据所用平台对两者支持其一。这个根据实际需求再研究吧，也算是比较重的一块了。</p>
</blockquote>
</li>
<li><p>Docker守护进程安全性</p>
<blockquote>
<p>保证Docker安全性的基本做法与很多其他网络守护进程一样：加密通信、认证用户。另外最好不要让docker能直接访问互联网。如果需要在网络外部访问Docker宿主机，应该考虑使用VPN或SSH隧道做跳转。</p>
</blockquote>
</li>
</ul>
<h3 id="容器化平台的12要素"><a href="#容器化平台的12要素" class="headerlink" title="容器化平台的12要素"></a>容器化平台的12要素</h3><ul>
<li><p>代码基</p>
<blockquote>
<p>只把一份代码基纳入版本控制</p>
</blockquote>
</li>
<li><p>依赖</p>
<blockquote>
<p>明确声明所需的依赖，并把依赖与周围的环境隔离开</p>
</blockquote>
</li>
<li><p>配置</p>
<blockquote>
<p>在环境变量中存储配置，不在代码基的文件中存储。在创建Dockerfile的时候需要的配置使用环境变量的方式进行传递，在执行容器创建的时候再通过<code>-e</code>参数传入。如让容器使用类似这种配置<code>process.env.ENVIRONMNET</code></p>
</blockquote>
</li>
<li><p>后端服务</p>
<blockquote>
<p>把后端服务当做是附加资源。要在应用中实现优雅的降级方案，而且不能假定资源（如文件系统存储空间）始终可用</p>
</blockquote>
</li>
<li><p>构建、发布、运行</p>
<blockquote>
<p>要严格区分构建和运行步骤，遵守这个流程，每一步自成一体，相互独立有利于缩短反馈循环，尽快解决部署过程中出现的问题</p>
</blockquote>
</li>
<li><p>进程</p>
<blockquote>
<p>以一个或多个无状态的进程运行应用。任何共享数据都要从有状态的后端存储中获取，这么做便于重复部署应用实例，而且不会丢失重要的会话数据。应用不能长时间保存状态，保存状态的时间最好比单次请求并返回响应的时间短，而且越短越好。如果必须保存状态，最好使用远程数据存储，如Redis、PostgreSQL、Memcache，甚至是Amazon的S3服务</p>
</blockquote>
</li>
<li><p>端口绑定</p>
<blockquote>
<p>通过绑定的端口提供服务</p>
</blockquote>
</li>
<li><p>并发</p>
<blockquote>
<p>通过进程模型实现横向扩展</p>
</blockquote>
</li>
<li><p>易用</p>
<blockquote>
<p>加快启动速度，使用优雅的方式关闭，尽量提升健壮性，Docker关闭或者清除容器会向容器发送标准的UNIX信号，因此容器化的应用可以检测这些信号，然后采取合适的方式优雅的关闭服务</p>
</blockquote>
</li>
<li><p>开发环境和生产环境同等重要</p>
<blockquote>
<p>尽量保持开发环境，过度环境和生产环境一致</p>
</blockquote>
</li>
<li><p>日志</p>
<blockquote>
<p>把日志当作事件流，服务本身不应该关心如何转发或者存储日志。事件不能缓冲，要通过流的形式写入标准输出，交给宿主进程处理。</p>
</blockquote>
</li>
<li><p>管理进程</p>
<blockquote>
<p>使用一次性进程执行管理任务。主要观点是绝不要使用随意编写出来的计划任务脚本执行管理和维护任务，而要把这些脚本和相关的功能保存在应用的代码基里。不需要在应用的每个实例中运行，需要执行维护作业时，可以启动一个专门的容器，只执行指定的作业，执行完成后就结束生命周期。</p>
</blockquote>
</li>
</ul>
<h3 id="响应式宣言"><a href="#响应式宣言" class="headerlink" title="响应式宣言"></a>响应式宣言</h3><p>2013年7月，Typesafe公司CTO jonas和几个贡献者完善了这个宣言，根据这个宣言定义，<code>响应式系统</code>应具备四个特点：反应迅速、恢复力强、灵活性高、消息驱动</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用IPsec搭建vpn系统]]></title>
      <url>http://arvon.top/2018/03/31/%E4%BD%BF%E7%94%A8IPsec%E6%90%AD%E5%BB%BAvpn%E7%B3%BB%E7%BB%9F/</url>
      <content type="html"><![CDATA[<p>多机房情况下，有时候需要将跨机房内网打通，现在还是使用ipsec的多。而且相对也比较成熟。IPsec全称ip Security，由两类协议组成，分别为AH协议（Authentication Header）和ESP协议（Encapsulated Security Payload），由于AH协议无法提供数据加密，所有数据在传输时以明文传输，且AH由于提供数据来源确认，所以无法穿越NAT，所以这两种协议中ESP协议应用更广泛一些。VPN只是IPSec的一种应用方式。刚好有空余的机器就简单实验一下。<br><a id="more"></a></p>
<table>
<thead>
<tr>
<th>协议</th>
<th>数据来源确认</th>
<th>数据加密</th>
<th>数据完整性确认</th>
<th>其他</th>
</tr>
</thead>
<tbody>
<tr>
<td>AH</td>
<td>是</td>
<td>否</td>
<td>是</td>
<td>AH常用摘要算法（单向Hash函数）MD5和SHA1</td>
</tr>
<tr>
<td>ESP</td>
<td>否</td>
<td>是</td>
<td>是</td>
<td>ESP通常使用DES、3DES、AES等加密算法实现数据加密，使用MD5或SHA1来实现数据完整性</td>
</tr>
</tbody>
</table>
<h3 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h3><h4 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h4><table>
<thead>
<tr>
<th>Region</th>
<th>Public IP</th>
<th>Private IP</th>
<th>Gateway</th>
</tr>
</thead>
<tbody>
<tr>
<td>CD-Host-A</td>
<td>118.24.48.193</td>
<td>172.27.0.12</td>
<td>172.27.0.1</td>
</tr>
<tr>
<td>CD-Host-B</td>
<td>118.24.49.251</td>
<td>172.27.0.4</td>
<td>172.27.0.1</td>
</tr>
<tr>
<td>GZ-Host-A</td>
<td>193.112.154.165</td>
<td>172.16.0.10</td>
<td>172.16.0.1</td>
</tr>
<tr>
<td>GZ-Host-B</td>
<td>193.112.143.226</td>
<td>172.16.0.16</td>
<td>172.16.0.1</td>
</tr>
</tbody>
</table>
<p><strong>版本信息：</strong><br>规划：其中CD-A和GZ-A这两台机器作为vpn服务器。<br>版本：<code>Linux Libreswan 3.20 (netkey) on 3.10.0-514.26.2.el7.x86_64</code><br>OS:<code>CentOS Linux release 7.2.1511 (Core)</code></p>
<h4 id="安装初始化（主机CD-A）"><a href="#安装初始化（主机CD-A）" class="headerlink" title="安装初始化（主机CD-A）"></a>安装初始化（主机CD-A）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install -y openswan</div></pre></td></tr></table></figure>
<p><strong>系统参数调整</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">cat /etc/sysctl.conf <span class="comment">#修改参数如下</span></div><div class="line">net.ipv4.ip_forward = 1</div><div class="line">net.ipv4.conf.default.rp_filter = 0</div><div class="line">sysctl -p <span class="comment">#执行命令让参数生效</span></div><div class="line">setenforce 0 <span class="comment">#关闭selinux</span></div><div class="line">iptables -nvL <span class="comment">#确认端口开放UDP 500 4500</span></div><div class="line"><span class="comment">#关闭ipmp重定向（是否需要）</span></div><div class="line"><span class="comment">#sysctl -a | egrep "ipv4.*(accept|send)_redirects" | awk -F "=" '&#123;print$1"= 0"&#125;' &gt;&gt; /etc/sysctl.conf</span></div></pre></td></tr></table></figure></p>
<p><strong>主配置如下</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#cat /etc/ipsec.conf</span></div><div class="line"><span class="comment">#version 2</span></div><div class="line">config setup</div><div class="line">	protostack=netkey</div><div class="line">	dumpdir=/var/run/pluto/</div><div class="line">	nat_traversal=yes</div><div class="line">	virtual_private=%v4:10.0.0.0/8,%v4:192.168.0.0/16,%v4:172.16.0.0/12,%v4:25.0.0.0/8,%v4:100.64.0.0/10,%v6:fd00::/8,%v6:fe80::/10</div><div class="line">include /etc/ipsec.d/*.conf</div></pre></td></tr></table></figure></p>
<p><strong>配置key认证</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">echo</span> 0.0.0.0   0.0.0.0 : PSK <span class="string">"arvon.top"</span> &gt; /etc/ipsec.d/cn.secrets<span class="comment">#引号内为key字段</span></div></pre></td></tr></table></figure></p>
<p><strong>关于配置:</strong>可以通过命令<code>man ipsec.conf</code>获得帮助<br><strong>填写连接的配置</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#cat /etc/ipsec.d/cn.conf</span></div><div class="line">conn cn-test</div><div class="line">	ike=3des-sha1</div><div class="line">	authby=secret</div><div class="line">	phase2=esp</div><div class="line">	phase2alg=3des-sha1</div><div class="line">	compress=no</div><div class="line">	pfs=yes</div><div class="line">	<span class="built_in">type</span>=tunnel</div><div class="line">	left=172.27.0.12</div><div class="line">	leftid=118.24.48.193</div><div class="line">	leftsubnet=172.27.0.0/24</div><div class="line">	leftnexthop=%defaultroute</div><div class="line">	right=193.112.154.165</div><div class="line">	rightid=193.112.154.165</div><div class="line">	rightsubnet=172.16.0.0/24</div><div class="line">	rightnexthop=%defaultroute</div><div class="line">	auto=add</div></pre></td></tr></table></figure></p>
<p><strong>启动ipsec</strong><br><strong>Tips：</strong>修改连接配置auto=start，这样就不用每次重启ipsec后手动起连接了<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">systemctl start ipsec</div><div class="line">ipsec auto --up cn-test</div></pre></td></tr></table></figure></p>
<h4 id="安装初始化（主机GZ-A）"><a href="#安装初始化（主机GZ-A）" class="headerlink" title="安装初始化（主机GZ-A）"></a>安装初始化（主机GZ-A）</h4><p><strong>注意：</strong>配置基本可以从CD-A照搬过来，不过由于我这里的环境是云端不同子网，所以连接的配置还需要做一些修改如下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#cat /etc/ipsec.d/cn.conf</span></div><div class="line">conn cn-test</div><div class="line">	ike=3des-sha1</div><div class="line">	authby=secret</div><div class="line">	phase2=esp</div><div class="line">	phase2alg=3des-sha1</div><div class="line">	compress=no</div><div class="line">	pfs=yes</div><div class="line">	<span class="built_in">type</span>=tunnel</div><div class="line">	left=118.24.48.193</div><div class="line">	leftid=118.24.48.193</div><div class="line">	leftsubnet=172.27.0.0/24</div><div class="line">	leftnexthop=%defaultroute</div><div class="line">	right=172.16.0.10</div><div class="line">	rightid=193.112.154.165</div><div class="line">	rightsubnet=172.16.0.0/24</div><div class="line">	rightnexthop=%defaultroute</div><div class="line">	auto=add</div></pre></td></tr></table></figure></p>
<p>此时，两台IPsec server已经联通了，不过是CD-B和GZ-B无法和对端网络联通，并没有达到实验目的，很明显现在主要问题是路由</p>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>Step0: 方便排错<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">route -n <span class="comment">#查看路由</span></div><div class="line">ip rule ls <span class="comment">#查看路由优先级</span></div><div class="line">ip route get 172.27.0.4 <span class="comment">#获取IP地址使用的路由</span></div><div class="line">route add -net 10.0.60.0 netmask 255.255.255.0 gw 10.0.50.1 <span class="comment">#添加路由</span></div><div class="line">route del -net 172.16.0.0 netmask 255.255.255.0 eth0 <span class="comment">#删除路由需要写完整</span></div><div class="line"><span class="comment">#systemctl start firewalld</span></div><div class="line">iptables -t nat -F <span class="comment">#清除防火墙nat规则</span></div><div class="line">iptables -t nat -nvL <span class="comment">#查看防火墙nat规则</span></div><div class="line">tcpdump -n -i eth0 dst 172.27.0.12 <span class="comment">#抓取eth0网卡上目标IP为12的包</span></div><div class="line">tcpdump -n -i eth0 src 172.27.0.12 <span class="comment">#抓取eth0网卡上源IP为12的包</span></div></pre></td></tr></table></figure></p>
<p>Step1：以CD-A为例，当前路由如下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[root@VM_0_12_centos ipsec.d]<span class="comment"># route -n</span></div><div class="line">Kernel IP routing table</div><div class="line">Destination     Gateway         Genmask         Flags Metric Ref    Use Iface</div><div class="line">0.0.0.0         172.27.0.1      0.0.0.0         UG    0      0        0 eth0</div><div class="line">169.254.0.0     0.0.0.0         255.255.0.0     U     1002   0        0 eth0</div><div class="line">172.27.0.0      0.0.0.0         255.255.240.0   U     0      0        0 eth0</div></pre></td></tr></table></figure></p>
<p>Step2: 在内网其他机器添加到VPN的路由<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#在CD-B添加到CD-A的路由</span></div><div class="line">route add -net 172.16.0.0 netmask 255.255.255.0 gw 172.27.0.12</div><div class="line"><span class="comment">#在GZ-B添加到GZ-A的路由</span></div><div class="line">route add -net 172.27.0.0 netmask 255.255.255.0 gw 172.16.0.10</div></pre></td></tr></table></figure></p>
<p>Step3：在vpn网关机器上进行SNAT<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">iptables -t nat -A POSTROUTING <span class="_">-s</span> 172.27.0.0/24 <span class="_">-d</span> 172.16.0.0/24 -j SNAT --to 118.24.48.193</div><div class="line"><span class="comment">#iptables -t nat -A POSTROUTING -s 172.27.0.0/24 -d 172.16.0.0/24 -j RETURN</span></div><div class="line"><span class="comment">#iptables -t nat -A POSTROUTING -s 172.27.0.0/24 -o eth0 -j MASQUERADE</span></div></pre></td></tr></table></figure></p>
<p><strong>最后说一下：</strong>比较容易踩坑的是使用公有云，由于外网网卡并不是直接与内网实例关联的，说以需要其他的途径才可以实现，一般对应服务商都有解决方案，而且关于ipsec连接配置也跟这个有关，具体还需要看一下实际情况。</p>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://github.com/xelerance/Openswan" target="_blank" rel="external">openswan github</a><br><a href="https://github.com/hwdsl2/setup-ipsec-vpn/blob/master/README-zh.md" target="_blank" rel="external">ipsec vpn</a><br><a href="https://segmentfault.com/a/1190000006125737" target="_blank" rel="external">唐霜的vpn教程</a><br><a href="https://docs.ucloud.cn/software/vpn/ipsec" target="_blank" rel="external">ucloud教程</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Kibana使用sentinl报警实践]]></title>
      <url>http://arvon.top/2018/03/15/Kibana%E4%BD%BF%E7%94%A8sentinl%E6%8A%A5%E8%AD%A6%E5%AE%9E%E8%B7%B5/</url>
      <content type="html"><![CDATA[<p><strong>背景介绍：</strong><br>对于Kibana的一些数据我们有时候是想要对某些字段进行持续关注的，这时候通过报警的手段就可以大幅提升对这些信息状态了解的及时性及可靠性。使用<a href="https://github.com/sirensolutions/sentinl" target="_blank" rel="external">Sentinl这个kibana开源插件</a>，就可以帮助我们实现这个功能。这里记录一下我的实践过程，主要是对一些业务数据某些字段进行监控报警。<br><a id="more"></a></p>
<p>环境：</p>
<blockquote>
<p>td-agent 1.0.2<br>elasticsearch 6.2.2<br>kibana 6.2.2</p>
</blockquote>
<h3 id="安装及简要说明"><a href="#安装及简要说明" class="headerlink" title="安装及简要说明"></a>安装及简要说明</h3><ul>
<li><p>安装<br>直接使用命令安装即可</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/share/kibana/bin/kibana-plugin install https://github.com/sirensolutions/sentinl/releases/download/tag-6.2.2/sentinl-v6.2.2.zip</div></pre></td></tr></table></figure>
<p><img src="http://img.arvon.top:80/images/2019/08/12/20180315-sentinl-1.jpg" alt="1"></p>
</li>
<li><p>报警邮件配置<br>修改配置后重启kibana</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#vim /etc/kibana/kibana.yml</span></div><div class="line">sentinl:</div><div class="line">  settings:</div><div class="line">    email:</div><div class="line">      active: <span class="literal">true</span></div><div class="line">      user:  xxx.xxx.cn</div><div class="line">      password: xxx</div><div class="line">      host: smtp.xxx.org</div><div class="line">      ssl: <span class="literal">true</span></div><div class="line">      timeout: 10000</div><div class="line">    report:</div><div class="line">      active: <span class="literal">true</span></div><div class="line">      tmp_path: /tmp/</div></pre></td></tr></table></figure>
</li>
<li><p>配置说明<br>说到配置结合kibana上自带的<code>Dev Tools</code>会对调试非常有帮助，另外推荐使用<a href="https://www.sojson.com/" target="_blank" rel="external">json验证</a>的网站对编写好的input进行重新编排检测，方便查看维护</p>
</li>
</ul>
<p><strong>关于配置项简要说明</strong></p>
<table>
<thead>
<tr>
<th>Type</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>General</td>
<td>包含Title监控的名称及Schedule执行的时间间隔</td>
</tr>
<tr>
<td>INPUT</td>
<td>输入的数据源，可参照下面的例子</td>
</tr>
<tr>
<td>Condition</td>
<td>判断条件<a href="http://sentinl.readthedocs.io/en/latest/HOWTO-Anomaly-Detection/" target="_blank" rel="external">参考官网示例</a></td>
</tr>
<tr>
<td>Transform</td>
<td>How to Adapt or Post-Process data(暂时没有这个需求)</td>
</tr>
<tr>
<td>ACTIONS</td>
<td>条件满足后执行的动作</td>
</tr>
<tr>
<td>Raw</td>
<td>一般不需要配置，这个是对前面的配置生成的json文件，当然你也可以直接编辑这个文件</td>
</tr>
</tbody>
</table>
<p><strong>配置注意点</strong></p>
<blockquote>
<ul>
<li><p><strong>Condition</strong><br>我这里基本使用<code>payload.hits.total</code>，由于不怎么熟悉ES的查询语句，刚开始这里有点迷糊，其实通过Kibana的Dev tools写个ES的查询DSL输出一下结果就明白了</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;script&quot;: &#123;</div><div class="line">    &quot;script&quot;: &quot;payload.hits.total &gt; 1&quot;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">&gt;</div></pre></td></tr></table></figure>
<p>我这里配置的意思是前面INPUT匹配到的log条数大于1就触发action</p>
</li>
<li><strong>ACTIONS</strong><br>我这里使用Email，注意Throttle这个参数如名字所示节流阀，当连续报警在这个范围内时，不会发送邮件，很人性化的一个设计</li>
</ul>
</blockquote>
<h3 id="Input配置示例"><a href="#Input配置示例" class="headerlink" title="Input配置示例"></a>Input配置示例</h3><p><strong>提示：</strong>指定index时可以使用*进行通配匹配，默认不指定index会匹配所有index</p>
<ul>
<li><p>过滤指定index时间戳是最近两小时的log</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"search"</span>: &#123;</div><div class="line">    <span class="string">"request"</span>: &#123;</div><div class="line">      <span class="string">"index"</span>: [</div><div class="line">        <span class="string">"bilogs-logics-105*"</span></div><div class="line">      ],</div><div class="line">      <span class="string">"body"</span>: &#123;</div><div class="line">        <span class="string">"size"</span>: 100,</div><div class="line">        <span class="string">"query"</span>: &#123;</div><div class="line">          <span class="string">"bool"</span>: &#123;</div><div class="line">            <span class="string">"filter"</span>: &#123;</div><div class="line">              <span class="string">"range"</span>: &#123;</div><div class="line">                <span class="string">"@timestamp"</span>: &#123;</div><div class="line">                  <span class="string">"from"</span>: <span class="string">"now-2h"</span></div><div class="line">                &#125;</div><div class="line">              &#125;</div><div class="line">            &#125;</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>过滤指定index最近2小时内不包含gid:101字段的log</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"search"</span>: &#123;</div><div class="line">    <span class="string">"request"</span>: &#123;</div><div class="line">      <span class="string">"index"</span>: [</div><div class="line">        <span class="string">"bilogs-logics-105*"</span></div><div class="line">      ],</div><div class="line">      <span class="string">"body"</span>: &#123;</div><div class="line">        <span class="string">"size"</span>: 100,</div><div class="line">        <span class="string">"query"</span>: &#123;</div><div class="line">          <span class="string">"bool"</span>: &#123;</div><div class="line">            <span class="string">"must_not"</span>: [</div><div class="line">              &#123;</div><div class="line">                <span class="string">"match"</span>: &#123;</div><div class="line">                  <span class="string">"gid"</span>: 101</div><div class="line">                &#125;</div><div class="line">              &#125;</div><div class="line">            ],</div><div class="line">            <span class="string">"filter"</span>: &#123;</div><div class="line">              <span class="string">"range"</span>: &#123;</div><div class="line">                <span class="string">"@timestamp"</span>: &#123;</div><div class="line">                  <span class="string">"from"</span>: <span class="string">"now-2h"</span></div><div class="line">                &#125;</div><div class="line">              &#125;</div><div class="line">            &#125;</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>过滤指定时间范围内指定index中info.VIP为2-10且info.Type字段为VI_HC且info.Value字段小于1000的log</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"search"</span>: &#123;</div><div class="line">    <span class="string">"request"</span>: &#123;</div><div class="line">      <span class="string">"index"</span>: [],</div><div class="line">      <span class="string">"body"</span>: &#123;</div><div class="line">        <span class="string">"size"</span>: 20,</div><div class="line">        <span class="string">"query"</span>: &#123;</div><div class="line">          <span class="string">"bool"</span>: &#123;</div><div class="line">            <span class="string">"must"</span>: [</div><div class="line">              &#123;</div><div class="line">                <span class="string">"range"</span>: &#123;</div><div class="line">                  <span class="string">"info.VIP"</span>: &#123;</div><div class="line">                    <span class="string">"gte"</span>: 2,</div><div class="line">                    <span class="string">"lte"</span>: 10</div><div class="line">                  &#125;</div><div class="line">                &#125;</div><div class="line">              &#125;,</div><div class="line">              &#123;</div><div class="line">                <span class="string">"match"</span>: &#123;</div><div class="line">                  <span class="string">"info.Type"</span>: <span class="string">"VI_HC"</span></div><div class="line">                &#125;</div><div class="line">              &#125;,</div><div class="line">              &#123;</div><div class="line">                <span class="string">"range"</span>: &#123;</div><div class="line">                  <span class="string">"info.Value"</span>: &#123;</div><div class="line">                    <span class="string">"lt"</span>: 1000</div><div class="line">                  &#125;</div><div class="line">                &#125;</div><div class="line">              &#125;,</div><div class="line">              &#123;</div><div class="line">                <span class="string">"range"</span>: &#123;</div><div class="line">                  <span class="string">"@timestamp"</span>: &#123;</div><div class="line">                    <span class="string">"gte"</span>: <span class="string">"2018-03-14T02:42:26.704Z"</span>,</div><div class="line">                    <span class="string">"lte"</span>: <span class="string">"2018-03-14T20:42:26.704Z"</span></div><div class="line">                  &#125;</div><div class="line">                &#125;</div><div class="line">              &#125;</div><div class="line">            ]</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="http://sentinl.readthedocs.io/en/latest/Config-Example/" target="_blank" rel="external">Sentinl 官方文档</a><br><a href="https://es.xiaoleilu.com/010_Intro/30_Tutorial_Search.html" target="_blank" rel="external">Elasticsearch 权威指南</a><br><a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/combining-filters.html" target="_blank" rel="external">Elastic 官方文档</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Docker备份还原简介]]></title>
      <url>http://arvon.top/2018/03/06/Docker%E5%A4%87%E4%BB%BD%E8%BF%98%E5%8E%9F%E7%AE%80%E4%BB%8B/</url>
      <content type="html"><![CDATA[<p>一般而言，使用docker远端镜像仓库的话，基本不需要使用备份还原，但再某些情况下也是需要这些操作的，如对网络受限的主机进行部署或者基于安全考虑对本地仓库进行备份，就需要这些操作，总之Docker的备份还原还是十分简便的，这里也做一下记录。<br><a id="more"></a></p>
<h3 id="备份镜像"><a href="#备份镜像" class="headerlink" title="备份镜像"></a>备份镜像</h3><p>一般迁移时使用，有图可能更直观，如下,可以使用镜像名+TAG，也可以使用镜像ID<br><img src="http://img.arvon.top:80/images/2019/08/12/20180306-docker-1.jpg" alt="docker-1"><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">docker images <span class="comment">#list images</span></div><div class="line">docker <span class="built_in">history</span> d86649f09ddb <span class="comment">#查看这个镜像的历史，如果有需要可以导出之前版本的镜像</span></div><div class="line">docker save -o /data/image_bak.tar docker.taiyouxi.net/ticore/testlink:1.0.1</div><div class="line"><span class="comment">#save usage: docker save -o /down_dir/your_tar_file_name image:TAG</span></div><div class="line"><span class="comment">#OR：docker save image:TAG &gt; /down_dir/your_tar_file_name</span></div></pre></td></tr></table></figure></p>
<h3 id="备份容器"><a href="#备份容器" class="headerlink" title="备份容器"></a>备份容器</h3><p>备份容器跟备份镜像有些细微的差别，首先需要容器commit成为image，如果必要可以对容器的启动配置也进行备份，然后就跟直接对镜像备份一样对新生成的镜像备份即可<br><img src="http://img.arvon.top:80/images/2019/08/12/20180306-docker-2.png" alt="docker-2"><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">docker ps <span class="comment">#list Running container</span></div><div class="line">docker commit <span class="variable">$&#123;CONTAINER ID&#125;</span> new_images_name:version <span class="comment">#将容器提交为镜像</span></div><div class="line">docker rmi image_name:version <span class="comment">#删除某个镜像</span></div></pre></td></tr></table></figure></p>
<p>另外可以备份容器的运行配置<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">docker inspect d7796307dfb7 &gt; /data/bak_container_config.json <span class="comment">#备份配置</span></div><div class="line"><span class="comment">#PS：附送命令</span></div><div class="line">docker inspect --format=<span class="string">'&#123;&#123;range .NetworkSettings.Networks&#125;&#125;&#123;&#123;.IPAddress&#125;&#125;&#123;&#123;end&#125;&#125;'</span> <span class="variable">$INSTANCE_ID</span>  <span class="comment">#获取IP地址</span></div><div class="line">docker inspect --format=<span class="string">'&#123;&#123;range $p, $conf := .NetworkSettings.Ports&#125;&#125; &#123;&#123;$p&#125;&#125; -&gt; &#123;&#123;(index $conf 0).HostPort&#125;&#125; &#123;&#123;end&#125;&#125;'</span> <span class="variable">$INSTANCE_ID</span> <span class="comment">#获取端口映射</span></div></pre></td></tr></table></figure></p>
<h3 id="还原镜像"><a href="#还原镜像" class="headerlink" title="还原镜像"></a>还原镜像</h3><p>还原也十分简单，在具备docker环境并运行docker的主机上，执行导入镜像命令即可<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">docker load -i /data/image_bak.tar</div><div class="line"><span class="comment">#OR</span></div><div class="line">docker load &lt; /data/image_bak.tar</div><div class="line">docker images</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[关于Fluentd使用中filter及ES插件的问题记录]]></title>
      <url>http://arvon.top/2018/03/01/%E5%85%B3%E4%BA%8EFluentd%E4%BD%BF%E7%94%A8%E4%B8%ADfilter%E5%8F%8AES%E6%8F%92%E4%BB%B6%E7%9A%84%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<p><strong>背景介绍：</strong>线上需求将业务log数据清洗后导入kibana，原始log也要一同导入，从服务直接输出两份log肯定是不合理的，所以考虑从fluentd收集的时候进行处理，先将原始数据复制为2份，然后一份直接导入kibana，另一份通过fluentd的filter进行过滤筛选后导入kibana。其中filter遇到无法筛选nested类型数据的问题，升级版本后并更改写法后解决；升级后导致ES的index无法按原来的方法命名的问题，通过更换ES插件解决，具体见以下记录。</p>
<blockquote>
<p>测试环境：<br>OS: Amazon Linux AMI release 2015.03<br>Fluentd: td-agent 0.12.20</p>
</blockquote>
<a id="more"></a>
<h3 id="问题1：filter过滤条件不支持nested"><a href="#问题1：filter过滤条件不支持nested" class="headerlink" title="问题1：filter过滤条件不支持nested"></a>问题1：filter过滤条件不支持nested</h3><h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><ul>
<li><p>原始数据如下<br>需要两个过滤条件<code>type_name</code>以及<code>info.Type</code>（这是一个nested键值）</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"Level"</span>: <span class="string">"Error"</span>,</div><div class="line">    <span class="attr">"logtime"</span>: <span class="number">1519444062811430400</span>,</div><div class="line">    <span class="attr">"@timestamp"</span>: <span class="string">"2018-02-24T03:47:42.811Z"</span>,</div><div class="line">    <span class="attr">"utc8"</span>: <span class="string">"2018-02-24 11:47:42"</span>,</div><div class="line">    <span class="attr">"type_name"</span>: <span class="string">"CostCurrency"</span>,</div><div class="line">    <span class="attr">"gid"</span>: <span class="number">202</span>,</div><div class="line">    <span class="attr">"sid"</span>: <span class="number">3258</span>,</div><div class="line">    <span class="attr">"avatar"</span>: <span class="string">"4"</span>,</div><div class="line">    <span class="attr">"corplvl"</span>: <span class="number">44</span>,</div><div class="line">    <span class="attr">"channel"</span>: <span class="string">"130134001232"</span>,</div><div class="line">    <span class="attr">"info"</span>: &#123;</div><div class="line">        <span class="attr">"Reason"</span>: <span class="string">"AbstractCancelCost"</span>,</div><div class="line">        <span class="attr">"Type"</span>: <span class="string">"VI_HC"</span>,</div><div class="line">        <span class="attr">"Value"</span>: <span class="number">20</span>,</div><div class="line">        <span class="attr">"BefValue"</span>: <span class="number">3139</span>,</div><div class="line">        <span class="attr">"AftValue"</span>: <span class="number">3119</span>,</div><div class="line">        <span class="attr">"VIP"</span>: <span class="number">5</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>首先查找文档找到了<a href="https://docs.fluentd.org/v1.0/articles/filter_grep" target="_blank" rel="external">filter_grep</a>插件<br>经过测试，regexp1是可以的，但regexp2不行，提了<a href="https://github.com/sonots/fluent-plugin-grep/issues/17" target="_blank" rel="external">Issues</a>答复是因为这个插件不支持nested，目前已经被弃用了。测试配置如下  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&lt;match logics.**&gt;</div><div class="line">    @type copy</div><div class="line">    &lt;store&gt;</div><div class="line">        @type elasticsearch</div><div class="line">        ...</div><div class="line">    &lt;/store&gt;</div><div class="line">    &lt;store&gt;</div><div class="line">        @type relabel</div><div class="line">        @label @CostCurrency</div><div class="line">    &lt;/store&gt;</div><div class="line">&lt;/match&gt;</div><div class="line">&lt;label @CostCurrency&gt;</div><div class="line">    &lt;filter logics.**&gt;</div><div class="line">        @type grep</div><div class="line">        regexp1 type_name CostCurrency</div><div class="line">        regexp2 info.Type VI_HC</div><div class="line">    &lt;/filter&gt;</div><div class="line">    &lt;match logics.**&gt;</div><div class="line">        @type elasticsearch</div><div class="line">        ...</div><div class="line">    &lt;/match&gt;</div><div class="line">&lt;/label&gt;</div><div class="line">#td-agent --dry-run -c /etc/td-agent/td-agent.conf  #测试配置文件命令</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><ul>
<li>升级fluentd版本<br>安装版本&gt;=0.14.19  <a href="https://github.com/fluent/fluentd/issues/1578" target="_blank" rel="external">从这个版本作者支持了nested</a><br>升级后修改配置文件如下，就可以支持nested过滤了<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;filter logics.**&gt;</div><div class="line">    @type grep</div><div class="line">    #regexp1 type_name CostCurrency #这个在v0.12版本是可用的</div><div class="line">    &lt;regexp&gt;</div><div class="line">      key type_name</div><div class="line">      pattern CostCurrency</div><div class="line">    &lt;/regexp&gt;</div><div class="line">    &lt;regexp&gt;</div><div class="line">      key $.info.Type</div><div class="line">      pattern ^VI_HC$</div><div class="line">    &lt;/regexp&gt;</div><div class="line">  &lt;/filter&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="问题2：升级v0-14之后无法使用-tag-parts-1-这种方式命名index"><a href="#问题2：升级v0-14之后无法使用-tag-parts-1-这种方式命名index" class="headerlink" title="问题2：升级v0.14之后无法使用${tag_parts[-1]}这种方式命名index"></a>问题2：升级v0.14之后无法使用${tag_parts[-1]}这种方式命名index</h3><h4 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h4><ul>
<li><p>目前环境中client TD发来的数据tag类似part1.xxx.part2,我希望拥有相同part1和part2的使用同一个index，所以有了<a href="https://github.com/uken/fluent-plugin-elasticsearch/issues/370" target="_blank" rel="external">这个需求</a><br>升级版本之后，之前使用的<code>logstash_dateformat logics-${tag_parts[-1]}.%Y.%m.%d</code>这种方式不生效了，经验证，只能使用<code>${tag}</code>这一种方式，但并达不到我需要的效果，经过查证<a href="https://github.com/uken/fluent-plugin-elasticsearch#dynamic-configuration" target="_blank" rel="external">官方文档</a>,使用<code>elasticsearch_dynamic</code>插件替代原来的<code>elasticsearch</code>插件，就可以正常使用了。不过官方警告如下,所以目前考虑是不是需要更改log收集的思路，目前先按这个执行测试，后续有问题再改进</p>
<blockquote>
<p>Please note, this uses Ruby’s eval for every message, so there are performance and security implications.</p>
</blockquote>
</li>
<li><p>升级后配置如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">  &lt;store&gt;</div><div class="line">#    @type elasticsearch</div><div class="line">    @type elasticsearch_dynamic</div><div class="line">    host data1.elasticsearch.qa.net</div><div class="line">    port 9200</div><div class="line">    request_timeout 15s #defaults to 5s</div><div class="line">    reload_connections false</div><div class="line">    reload_on_failure true # defaults to false</div><div class="line">    logstash_format true</div><div class="line">    logstash_prefix bilogs-$&#123;tag_parts[0]&#125;-$&#123;tag_parts[2]&#125;</div><div class="line">    logstash_dateformat %Y.%m.%d</div><div class="line">    time_key time</div><div class="line">  &lt;/store&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="完整配置"><a href="#完整配置" class="headerlink" title="完整配置"></a>完整配置</h3><ul>
<li>完整中转配置<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div></pre></td><td class="code"><pre><div class="line">&lt;source&gt;</div><div class="line">  @type forward</div><div class="line">  #port 24224</div><div class="line">&lt;/source&gt;</div><div class="line">&lt;match debug.**&gt;</div><div class="line">  @type stdout</div><div class="line">&lt;/match&gt;</div><div class="line">&lt;source&gt;</div><div class="line">  @type debug_agent</div><div class="line">  bind 127.0.0.1</div><div class="line">  port 24230</div><div class="line">&lt;/source&gt;</div><div class="line">##################################################################################</div><div class="line">&lt;match logics.**&gt;</div><div class="line">  @type copy</div><div class="line">  #@type forest</div><div class="line">  #subtype copy</div><div class="line">  &lt;store&gt;</div><div class="line">#    @type elasticsearch</div><div class="line">    @type elasticsearch_dynamic</div><div class="line">    host data1.elasticsearch.taiqa.net</div><div class="line">    port 9200</div><div class="line">    request_timeout 15s #defaults to 5s</div><div class="line">    reload_connections false</div><div class="line">    reload_on_failure true # defaults to false</div><div class="line">    logstash_format true</div><div class="line">    logstash_prefix bilogs-$&#123;tag_parts[0]&#125;-$&#123;tag_parts[2]&#125;</div><div class="line">    logstash_dateformat %Y.%m.%d</div><div class="line">    time_key time</div><div class="line">    &lt;buffer&gt;</div><div class="line">      @type file</div><div class="line">      path /var/log/td-agent/buffer/td-gamex-buffer</div><div class="line">      chunk_limit_size 512MB #Default: 8MB (memory) / 256MB (file)</div><div class="line">      total_limit_size 32GB #Default: 512MB (memory) / 64GB (file)</div><div class="line">      chunk_full_threshold 0.9 #output plugin will flush the chunk when actual size reaches chunk_limit_size * chunk_full_threshold</div><div class="line">      compress text #The option to specify compression of each chunks, during events are buffered</div><div class="line">      flush_mode default</div><div class="line">      flush_interval 15s #Default: 60s</div><div class="line">      flush_thread_count 1 #Default: 1 The number of threads of output plugins, which is used to write chunks in parallel</div><div class="line">      delayed_commit_timeout 60 #The timeout seconds until output plugin decides that async write operation fails</div><div class="line">      overflow_action throw_exception</div><div class="line">      retry_timeout 10m</div><div class="line">    &lt;/buffer&gt;</div><div class="line">  &lt;/store&gt;</div><div class="line">  &lt;store&gt;</div><div class="line">    @type relabel</div><div class="line">    @label @CostCurrency</div><div class="line">  &lt;/store&gt;</div><div class="line">&lt;/match&gt;</div><div class="line">&lt;label @CostCurrency&gt;</div><div class="line">  &lt;filter logics.**&gt;</div><div class="line">    @type grep</div><div class="line">    #regexp1 type_name CostCurrency</div><div class="line">    &lt;regexp&gt;</div><div class="line">      key type_name</div><div class="line">      pattern CostCurrency</div><div class="line">    &lt;/regexp&gt;</div><div class="line">    &lt;regexp&gt;</div><div class="line">      key $.info.Type</div><div class="line">      pattern ^VI_HC$</div><div class="line">    &lt;/regexp&gt;</div><div class="line">  &lt;/filter&gt;</div><div class="line">  &lt;match logics.**&gt;</div><div class="line">    @type elasticsearch</div><div class="line">    host data1.elasticsearch.taiqa.net</div><div class="line">    port 9200</div><div class="line">    request_timeout 15s #defaults to 5s</div><div class="line">    reload_connections false</div><div class="line">    reload_on_failure true # defaults to false</div><div class="line">    logstash_format true</div><div class="line">    logstash_prefix cost</div><div class="line">    logstash_dateformat currency-hc.%Y.%m.%d</div><div class="line">    time_key time</div><div class="line">    &lt;buffer&gt;</div><div class="line">      @type file</div><div class="line">      path /var/log/td-agent/buffer/td-cost-buffer</div><div class="line">      chunk_limit_size 512MB #Default: 8MB (memory) / 256MB (file)</div><div class="line">      total_limit_size 32GB #Default: 512MB (memory) / 64GB (file)</div><div class="line">      chunk_full_threshold 0.9 #output plugin will flush the chunk when actual size reaches chunk_limit_size * chunk_full_threshold</div><div class="line">      compress text #The option to specify compression of each chunks, during events are buffered</div><div class="line">      flush_mode default</div><div class="line">      flush_interval 15s #Default: 60s</div><div class="line">      flush_thread_count 1 #Default: 1 The number of threads of output plugins, which is used to write chunks in parallel</div><div class="line">      delayed_commit_timeout 60 #The timeout seconds until output plugin decides that async write operation fails</div><div class="line">      overflow_action throw_exception</div><div class="line">      retry_timeout 10m</div><div class="line">    &lt;/buffer&gt;</div><div class="line">  &lt;/match&gt;</div><div class="line">&lt;/label&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="https://docs.fluentd.org/v1.0/articles/filter_record_transformer" target="_blank" rel="external">关于tag或字段rewrite</a><br><a href="https://github.com/uken/fluent-plugin-elasticsearch#dynamic-configuration" target="_blank" rel="external">ES插件文档</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Td-agent配置说明]]></title>
      <url>http://arvon.top/2018/02/23/Td-agent%E9%85%8D%E7%BD%AE%E8%AF%B4%E6%98%8E/</url>
      <content type="html"><![CDATA[<p><strong>简介：</strong><br>生产环境并没有使用传统ELK,而是使用tdagent来代替Logstash作日志收集。<br>关于td-agent和Fluentd的关系可以引用<a href="https://www.fluentd.org/faqs" target="_blank" rel="external">官网的描述</a>：<code>&quot;In one word, td-agent is a stable distribution package of Fluentd.&quot;</code></p>
<blockquote>
<p>update：2017-05-20 初次修改</p>
</blockquote>
<h3 id="一般架构"><a href="#一般架构" class="headerlink" title="一般架构"></a>一般架构</h3><p><img src="http://img.arvon.top:80/images/2019/08/12/20170911-fluentd-1.jpg" alt="fluentd-1"><br><a id="more"></a></p>
<h3 id="特性记录"><a href="#特性记录" class="headerlink" title="特性记录"></a>特性记录</h3><ul>
<li>版本<br>2017 年 12 月的时候，fluentd 发布了 v1.0 版本，也就是 td-agent v3 版。</li>
<li>性能<br><code>“a regular PC box can handle 18,000 messages/second with a single process.”</code>即一般来说，fluentd 单节点的吞吐量大概是 18w/sec 左右。<br>要想提高性能的话，可以在输出端（match）指定 num_threads 来提高并发，在输入端安装 fluent-plugin-multiprocess 插件来提高 CPU 的利用率（Ruby 也有 GIL 问题）。</li>
</ul>
<h3 id="指令说明"><a href="#指令说明" class="headerlink" title="指令说明"></a>指令说明</h3><table>
<thead>
<tr>
<th>指令</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>source</td>
<td>决定从哪里读取日志，关键字type指定启用插件后配置相关参数</td>
</tr>
<tr>
<td>match</td>
<td>设定当满足指定条件时如何处理日志的方法，在source指令追加的标签(tag)满足match指令的条件时，该日志将被指定插件处理。定义输出的目标，如写入文件，或者发送到指定</td>
</tr>
<tr>
<td>filter</td>
<td>过滤，也即事件处理流水线，可在输入和输出之间运行</td>
</tr>
<tr>
<td>system</td>
<td>系统级别的设置</td>
</tr>
<tr>
<td>label</td>
<td>定义一组操作，实现复用及内部路由</td>
</tr>
<tr>
<td>@include</td>
<td>引入其他文件，和python的import类似</td>
</tr>
</tbody>
</table>
<h4 id="source指令"><a href="#source指令" class="headerlink" title="source指令"></a>source指令</h4><ul>
<li><p>source<br><strong>Tips:</strong>每个 source 指令必须包括 “type” 参数，指定使用那种插件</p>
<blockquote>
<p><font color="#dd0000" size="3"><strong>Routing（路由）</strong></font>：source 把事件提交到 fluentd 的路由引擎中。一个事件由三个实体组成：tag、time 和 record。<br><font color="#dd0000" size="3"><strong>tag</strong></font>：是一个通过 “.” 来分离的字符串（e.g. myapp.access），用作 Fluentd 内部路由引擎的方向<br><font color="#dd0000" size="3"><strong>time</strong></font>：时间字段由输入插件指定，并且必须为 Unix 时间格式。<br><font color="#dd0000" size="3"><strong>record</strong></font>：一个 JSON 对象。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="built_in">source</span>&gt;</div><div class="line">  <span class="built_in">type</span> forward <span class="comment">#使 fluentd 转变为一个 TCP 端点，以接受 TCP 报文，监听24224端口</span></div><div class="line">  port 24224</div><div class="line">&lt;/<span class="built_in">source</span>&gt;</div><div class="line"></div><div class="line">&lt;<span class="built_in">source</span>&gt;</div><div class="line">  @<span class="built_in">type</span> http <span class="comment">#使fluentd转变为一个httpd端点以接受进入的 http 报文,监听7777端口</span></div><div class="line">  port 7777</div><div class="line">&lt;/<span class="built_in">source</span>&gt;</div><div class="line"><span class="comment">#可以使用curl -X POST -d 'json=&#123;"json":"message"&#125;' http://localhost:7777/debug.test测试，可以在/var/log/td-agent/td-agent.log看到输入内容,这个例子中tag就是debug.test，时间就是current time，record就是&#123;"json":"message"&#125;，这个url还可以写成http://localhost:7777/debug.test?json=&#123;"json":"message"&#125;</span></div><div class="line"></div><div class="line">&lt;<span class="built_in">source</span>&gt;</div><div class="line">  <span class="built_in">type</span> tail <span class="comment">#tail方式是 Fluentd 内置的输入方式，其原理是不停地从源文件中获取增量日志，与linx命令tail相似，也可以使用其他输入方式如http、forward等输入，也可以使用输入插件，将 tail 改为相应的插件名称 如： type tail_ex</span></div><div class="line">  format json  <span class="comment">#指定json格式解析，也可使用apache格式（apache为fluentd内置的日志解析器）</span></div><div class="line">  time_key time</div><div class="line">  time_format %N</div><div class="line">  pos_file /var/<span class="built_in">log</span>/td-agent/logics_5001.log.pos <span class="comment">#优化参数（将access_log上次的读取长度写入到该文件，主要保证在fluentd服务宕机重启后能够继续收集，避免日志数据收集丢失，保证数据收集的完整性），注意此文件的权限</span></div><div class="line">  path /opt/supervisor/<span class="built_in">log</span>/logics_shard5001.%d.%m.%Y.log   <span class="comment">#指定收集日志文件的位置</span></div><div class="line">  tag logics.5001.205  <span class="comment">#指定标签，用来对不同的日志进行分类，与match操作相匹配</span></div><div class="line">&lt;/<span class="built_in">source</span>&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="match指令"><a href="#match指令" class="headerlink" title="match指令"></a>match指令</h4><ul>
<li><p>match<br><strong>Tips:</strong> match指令查询匹配tags事件并处理他们。match 命令的最常见用法是将事件输出到其他系统（因此，与 match 命令对应的插件称为 “输出插件”）。 Fluentd 的标准输出插件包括 file 和 forward。每个 match 指令必须包括一个匹配模式和 type 参数。只有与模式匹配的 “tags” 事件才会发送到输出目标（在上面的示例中，只有标记 “myapp.access” 的事件匹配），Fluentd 尝试按照它们在配置文件中出现的顺序，从上到下来进行 “tags” 匹配，如上一条已经匹配那么下面的将不会被匹配 。type 参数指定使用哪种输出插件</p>
<blockquote>
<p><font color="#dd0000" size="3"><strong>*</strong></font>：匹配单个 tag 部分。例：a.<em>，匹配 a.b，但不匹配 a 或者 a.b.c<br><font color="#dd0000" size="3"><strong>**</strong></font>：匹配 0 或 多个 tag 部分。例：a.**，匹配 a、a.b 和 a.b.c<br>{X,Y,Z}：匹配 X、Y 或 Z，其中 X、Y 和 Z 是匹配模式。可以和 </em> 和 ** 模式组合使用<br>当多个模式列在一个 <match> 标签（由一个或多个空格分隔）内时，它匹配任何列出的模式</match></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&lt;match logics.**&gt; <span class="comment">#配置输出数据流的匹配规则及匹配成功后所需要执行的动作，匹配logics标签成功的数据执行转发操作</span></div><div class="line">   <span class="built_in">type</span> forward <span class="comment"># forward模式，转发给其他服务器处理（file类型 会将数据写入到路径文件中）</span></div><div class="line">   send_timeout 60s  <span class="comment">#发送事件日志的超时时间，默认60s</span></div><div class="line">   recover_wait 10s  <span class="comment">#接受服务器故障恢复之前等待时间，默认10s</span></div><div class="line">   heartbeat_interval 1s  <span class="comment">#心跳时间刷新频率</span></div><div class="line">   phi_threshold 16  <span class="comment">#用于检测服务器故障的阈值参数。 默认值为16。</span></div><div class="line">   hard_timeout 60s  <span class="comment">#用于检测服务器故障的硬超时。 默认值等于send_timeout参数。</span></div><div class="line">   heartbeat_type tcp  <span class="comment">#用于心跳的传输协议默认UDP连接，这里为tcp连接方式</span></div><div class="line">   slow_flush_log_threshold 300.0  <span class="comment">#用于检查块冲洗性能的阈值。默认值为20.0秒。注意，参数类型是float，而不是时间。</span></div><div class="line">如果chunk flush需要比这个阈值更长的时间，fluentd日志警告消息如下：2016-12-19 12:00:00 +0000 [warn]：缓冲区刷新花费的时间比slow_flush_log_threshold更长：elapsed_time = 15.0031226690043695 slow_flush_log_threshold = 10.0</div><div class="line">   num_threads 2      <span class="comment">#default 1</span></div><div class="line">   buffer_chunk_limit  16M  <span class="comment">#default 8M</span></div><div class="line">   buffer_queue_limit  256  <span class="comment">#default 256</span></div><div class="line">   flush_interval  5s   <span class="comment">#default 60s</span></div><div class="line">   &lt;server&gt;</div><div class="line">      name logics.shard</div><div class="line">      host tdagent.test.net</div><div class="line">      port 24224</div><div class="line">      weight 1</div><div class="line">   &lt;/server&gt;</div><div class="line">   &lt;secondary&gt;  <span class="comment">#所有服务器不可用时使用的备份策略，这里是直接生成文件到本地目录</span></div><div class="line">      <span class="built_in">type</span> file</div><div class="line">      path /var/<span class="built_in">log</span>/td-agent/logics-forward-failed</div><div class="line">   &lt;/secondary&gt;</div><div class="line">&lt;/match&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="filter指令"><a href="#filter指令" class="headerlink" title="filter指令"></a>filter指令</h4><ul>
<li><p>filter<br><strong>Tips：</strong>“filter” 指令具有与 “match” 相同的语法，但是 filter 可以串联成 pipeline，对数据进行串行处理，最终再交给 match 输出。 使用 fliters，事件流如下：</p>
<blockquote>
<p>下面例子里，filter 获取数据后，调用原生的 @type record_transformer 插件，在事件的 record 里插入了新的字段 host_param，然后再交给 match 输出。<br>filter 匹配顺序与 match 相同，我们应该在 <match> 之前放置 <filter></filter></match></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#Input -&gt; filter 1 -&gt; ... -&gt; filter N -&gt; Output（Match tag）</span></div><div class="line"><span class="comment">### http://this.host:9880/myapp.access?json=&#123;"event":"data"&#125;</span></div><div class="line">&lt;<span class="built_in">source</span>&gt;</div><div class="line">  @<span class="built_in">type</span> http</div><div class="line">  port 9880</div><div class="line">&lt;/<span class="built_in">source</span>&gt;</div><div class="line">&lt;filter myapp.access&gt;</div><div class="line">  @<span class="built_in">type</span> record_transformer</div><div class="line">  &lt;record&gt;</div><div class="line">    host_param <span class="string">"#&#123;Socket.gethostname&#125;"</span></div><div class="line">  &lt;/record&gt;</div><div class="line">&lt;/filter&gt;</div><div class="line">&lt;match myapp.access&gt;</div><div class="line">  @<span class="built_in">type</span> file</div><div class="line">  path /var/<span class="built_in">log</span>/fluent/access</div><div class="line">&lt;/match&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="system指令"><a href="#system指令" class="headerlink" title="system指令"></a>system指令</h4><ul>
<li><p>system<br><strong>Tips:</strong>fluentd的相关设置，也可以在配置文件里设置。包含</p>
<blockquote>
<ul>
<li>log_level</li>
<li>suppress_repeated_stacktrace</li>
<li>emit_error_log_interval</li>
<li>suppress_config_dump</li>
<li>without_source</li>
</ul>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;system&gt;</div><div class="line">  <span class="comment"># equal to -qq option</span></div><div class="line">  log_level error  <span class="comment">#启动配置</span></div><div class="line">  <span class="comment"># equal to --without-source option</span></div><div class="line">  without_source   <span class="comment">#启动配置</span></div><div class="line">  <span class="comment"># ...</span></div><div class="line">  process_name fluentd1  <span class="comment">#服务进程名，可通过ps查看到</span></div><div class="line">&lt;/system&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="label指令"><a href="#label指令" class="headerlink" title="label指令"></a>label指令</h4><ul>
<li>label<br><strong>Tips:</strong>label用于将任务进行分组，方便复杂任务的管理。可以在 source 里指定 @label @<label_name>，这个 source 所触发的事件就会被发送给指定的 label 所包含的任务，而不会被后续的其他任务获取到。用来接收插件通过调用 emit_error_event API 抛出的异常，使用方法和 label 一样，通过设定 就可以接收到相关的异常。<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="built_in">source</span>&gt;</div><div class="line">  @<span class="built_in">type</span> forward</div><div class="line">&lt;/<span class="built_in">source</span>&gt;</div><div class="line">&lt;<span class="built_in">source</span>&gt;</div><div class="line">  <span class="comment">### 这个任务指定了 label 为 @SYSTEM</span></div><div class="line">  <span class="comment">### 会被发送给 &lt;label @SYSTEM&gt;</span></div><div class="line">  <span class="comment">### 而不会被发送给下面紧跟的 filter 和 match</span></div><div class="line">  @<span class="built_in">type</span> tail</div><div class="line">  @label @SYSTEM</div><div class="line">&lt;/<span class="built_in">source</span>&gt;</div><div class="line">&lt;filter access.**&gt;</div><div class="line">  @<span class="built_in">type</span> record_transformer</div><div class="line">  &lt;record&gt;</div><div class="line">    <span class="comment"># ...</span></div><div class="line">  &lt;/record&gt;</div><div class="line">&lt;/filter&gt;</div><div class="line">&lt;match **&gt;</div><div class="line">  @<span class="built_in">type</span> elasticsearch</div><div class="line">  <span class="comment"># ...</span></div><div class="line">&lt;/match&gt;</div><div class="line">&lt;label @SYSTEM&gt;</div><div class="line">  <span class="comment">### 将会接收到上面 @type tail 的 source event</span></div><div class="line">  &lt;filter var.log.middleware.**&gt;</div><div class="line">    @<span class="built_in">type</span> grep</div><div class="line">    <span class="comment"># ...</span></div><div class="line">  &lt;/filter&gt;</div><div class="line">  &lt;match **&gt;</div><div class="line">    @<span class="built_in">type</span> s3</div><div class="line">    <span class="comment"># ...</span></div><div class="line">  &lt;/match&gt;</div><div class="line">&lt;/label&gt;</div></pre></td></tr></table></figure>
</label_name></li>
</ul>
<h4 id="include指令"><a href="#include指令" class="headerlink" title="include指令"></a>include指令</h4><ul>
<li>include<br><strong>Tips:</strong>使用include指令可以导入其他独立的配置文件中的指令，这些文件可以使用相对路径、绝对路径及HTTP的URL</li>
</ul>
<h3 id="Fluentd插件"><a href="#Fluentd插件" class="headerlink" title="Fluentd插件"></a>Fluentd插件</h3><p><strong>Tips：</strong>插件有6种类型</p>
<blockquote>
<ul>
<li>input：输入</li>
<li>output：输出</li>
<li>Buffer：缓冲区</li>
<li>filter：过滤器</li>
<li>Parset：解析器</li>
<li>Formatter：格式化器</li>
</ul>
</blockquote>
<h3 id="Fluentd安装"><a href="#Fluentd安装" class="headerlink" title="Fluentd安装"></a>Fluentd安装</h3><ul>
<li>安装步骤<br><strong>Tips:</strong>这里安装的td-agent是fluentd的易安装版本，也是业界流行的的安装版本，<a href="https://www.fluentd.org/download" target="_blank" rel="external">点击查看版本下载页</a><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cat /etc/issue <span class="comment">#这里实验机型为Amazon Linux AMI release 2016.09</span></div><div class="line">curl -L https://toolbelt.treasuredata.com/sh/install-redhat-td-agent2.sh | sh</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="参考说明"><a href="#参考说明" class="headerlink" title="参考说明"></a>参考说明</h3><p><a href="http://www.fluentd.org/plugins" target="_blank" rel="external">Plugins</a></p>
<p>参照：<a href="https://blog.mallux.me/2017/02/04/fluentd/" target="_blank" rel="external">https://blog.mallux.me/2017/02/04/fluentd/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[消息队列介绍及常用MQ对比]]></title>
      <url>http://arvon.top/2018/02/23/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E4%BB%8B%E7%BB%8D%E5%8F%8A%E5%B8%B8%E7%94%A8MQ%E5%AF%B9%E6%AF%94/</url>
      <content type="html"><![CDATA[<h3 id="什么是消息队列"><a href="#什么是消息队列" class="headerlink" title="什么是消息队列"></a>什么是消息队列</h3><p><strong>概述：</strong> 消息队列（Message Queue）一般大家习惯简称为MQ。主要特点为异步处理,也就是说消息的发送者和接收者不需要同时与消息队列交互。消息会保存在队列中，直到接收者取回它。消息队列和信号相比，能够传递更多的信息。与管道相比，消息队列提供了有格式的数据。</p>
<blockquote>
<p><strong>举一个直观的小例子</strong><br>姐姐小红希望弟弟小明多读书，经常拿好书给小明看。之前的方式是先问小明什么时候有空，然后把书给小明送过去，监督小明把书读完。后来两人都觉得太麻烦，就换了一个方式。<br>买了一个书架，小红一有好书就放到书架上，小明看到书架上有书就取着读。这里，书架其实就是一个消息队列，小红就是生产者，小明就是消费者。<br>这样的<strong>好处</strong>是：<br>1.小红想给小明书的时候不必问小明什么时候有时间，直接把书放在书架上就行了，小红和小明的时间都更自由<br>2.小红相信小明的读书自觉和读书能力，不必亲眼观察小明的读书过程，小红只要做一个放书的动作，很节省时间。<br>3.当明天有另一个爱读书的小伙伴小强加入，小红仍旧只需要把书放到书架上，小明和小强从书架上取书即可<br>4.书在书架上，小明读的慢就晚点看完，读的快就早点看完，小明的压力会小点。<br>对应可以总结为：<strong>解耦</strong>、<strong>提速</strong>、<strong>广播</strong>、<strong>削峰</strong><br>相应<strong>缺点</strong>就是：<br>1.引入复杂度<br>2.暂时的不一致性<br><strong>PS：</strong>以上内容引自知乎祁达方<br><a id="more"></a><br><strong>Update:</strong> 2017-12-11 编写</p>
</blockquote>
<h3 id="常见消息队列（MQ）"><a href="#常见消息队列（MQ）" class="headerlink" title="常见消息队列（MQ）"></a>常见消息队列（MQ）</h3><h4 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h4><p>RabbitMQ是使用Erlang编写的一个开源的消息队列，本身支持很多的协议：AMQP，XMPP, SMTP, STOMP，也正因如此，它非常重量级，更适合于企业级的开发。同时实现了Broker构架，这意味着消息在发送给客户端时先在中心队列排队。对路由，负 载均衡或者数据持久化都有很好的支持。</p>
<h4 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h4><p>Redis是一个基于Key-Value对的NoSQL数据库，开发维护很活跃。虽然它是一个Key-Value数据库存储系统，但它本身支持MQ功能， 所以完全可以当做一个轻量级的队列服务来使用。对于RabbitMQ和Redis的入队和出队操作，各执行100万次，每10万次记录一次执行时间。测试 数据分为128Bytes、512Bytes、1K和10K四个不同大小的数据。实验表明：入队时，当数据比较小时Redis的性能要高于 RabbitMQ，而如果数据大小超过了10K，Redis则慢的无法忍受；出队时，无论数据大小，Redis都表现出非常好的性能，而RabbitMQ 的出队性能则远低于Redis。</p>
<h4 id="Kafka-Jafka"><a href="#Kafka-Jafka" class="headerlink" title="Kafka/Jafka"></a>Kafka/Jafka</h4><p>Kafka是Apache下的一个子项目，是一个高性能跨语言分布式Publish/Subscribe消息队列系统，而Jafka是在Kafka之上孵 化而来的，即Kafka的一个升级版。具有以下特性：快速持久化，可以在O(1)的系统开销下进行消息持久化；高吞吐，在一台普通的服务器上既可以达到 10W/s的吞吐速率；完全的分布式系统，Broker、Producer、Consumer都原生自动支持分布式，自动实现复杂均衡；支持Hadoop 数据并行加载，对于像Hadoop的一样的日志数据和离线分析系统，但又要求实时处理的限制，这是一个可行的解决方案。Kafka通过Hadoop的并行 加载机制来统一了在线和离线的消息处理。Apache Kafka相对于ActiveMQ是一个非常轻量级的消息系统，除了性能非常好之外，还是一个工作良好的分布式系统。</p>
<h4 id="ZeroMQ"><a href="#ZeroMQ" class="headerlink" title="ZeroMQ"></a>ZeroMQ</h4><p>ZeroMQ号称最快的消息队列系统，尤其针对大吞吐量的需求场景。ZMQ能够实现RabbitMQ不擅长的高级/复杂的队列，但是开发人员需要自己组合 多种技术框架，技术上的复杂度是对这MQ能够应用成功的挑战。ZeroMQ具有一个独特的非中间件的模式，你不需要安装和运行一个消息服务器或中间件，因 为你的应用程序将扮演了这个服务角色。你只需要简单的引用ZeroMQ程序库，可以使用NuGet安装，然后你就可以愉快的在应用程序之间发送消息了。但 是ZeroMQ仅提供非持久性的队列，也就是说如果down机，数据将会丢失。其中，Twitter的Storm中默认使用ZeroMQ作为数据流的传 输。</p>
<h4 id="ActiveMQ"><a href="#ActiveMQ" class="headerlink" title="ActiveMQ"></a>ActiveMQ</h4><p>ActiveMQ是Apache下的一个子项目。 类似于ZeroMQ，它能够以代理人和点对点的技术实现队列。同时类似于RabbitMQ，它少量代码就可以高效地实现高级应用场景。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Jenkins使用GitSubmodule实现代码库调用]]></title>
      <url>http://arvon.top/2017/11/29/Jenkins%E4%BD%BF%E7%94%A8GitSubmodule%E5%AE%9E%E7%8E%B0%E4%BB%A3%E7%A0%81%E5%BA%93%E8%B0%83%E7%94%A8/</url>
      <content type="html"><![CDATA[<p><strong>背景：</strong>在实际项目构建中有时会用到调用其他代码库的情况，例如调用公共代码库和基础代码库，此时就可以用git submodule这个模块实现这个需求，git submodule可以将一个git仓库以目录的方式作为另一个git仓库的子目录。Jenkins用来做项目的持续集成，如果使用了Git Submodule,每次Jenkins更新版本库的时候还需要更新submodule的内容。<br><a id="more"></a></p>
<h3 id="Jenkis中的使用方法"><a href="#Jenkis中的使用方法" class="headerlink" title="Jenkis中的使用方法"></a>Jenkis中的使用方法</h3><ul>
<li><p>版本需求<br><strong>注意：</strong>使用此功能，需要Jenkins的部分插件达到指定版本，我的版本如下：</p>
<blockquote>
<ul>
<li>Git clent plugin == 2.6.0</li>
<li>Git Plugin == 3.6.4</li>
<li>Credentials Plugin == 2.1.16</li>
<li>SSH Credentials Plugin  == 1.13</li>
</ul>
</blockquote>
</li>
<li><p>安装以上版本或更高版本插件<br>安装完成后需要重启Jenkins，此时就可以使用了</p>
</li>
<li><p>在Jenkins上设置<br><img src="http://img.arvon.top:80/images/2019/08/12/20171129-jenkins-1.jpg" alt="20171129-jenkins-1"><br>其中User credentials from default remote of parent repository意思是Git Submodule的repository会使用和主repository一样的验证，就是主repository使用的身份，低版本不会有这个勾选项，还会报错。</p>
</li>
</ul>
<h3 id="升级插件的方法"><a href="#升级插件的方法" class="headerlink" title="升级插件的方法"></a>升级插件的方法</h3><ul>
<li><p>1.使用Jenins默认方法<br>进入Jenkins管理页面即 Jenkins–&gt;插件管理–&gt;高级  如下：<br><img src="http://img.arvon.top:80/images/2019/08/12/20171129-jenkins-2.jpg" alt="20171129-jenkins-2"><br>Jenkins默认更新的URL为<code>http://updates.jenkins-ci.org/experimental/update-center.json</code> ，但是由于网络问题推荐使用<code>http://mirror.xmission.com/jenkins/updates/experimental/update-center.json</code>,另外有条件也可以使用这个页面上面的网络代理选项</p>
</li>
<li><p>2.直接下载插件通过web页面进行上传<br>依然在Jenkins的管理页面高级中，通过自己下载，然后上传即可，部分插件安装后需要重启Jenkins生效</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">https://wiki.jenkins.io/display/JENKINS/Git+Plugin</div><div class="line"><span class="comment">#git 3.6.4</span></div><div class="line">https://wiki.jenkins.io/display/JENKINS/Git+Client+Plugin</div><div class="line"><span class="comment">#git-client 2.6.0</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="关于报错"><a href="#关于报错" class="headerlink" title="关于报错"></a>关于报错</h3><ul>
<li><p>1.Permission报错</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">FATAL: Command &quot;git submodule update --init --recursive&quot; returned status code 128:</div><div class="line">stdout:</div><div class="line">stderr: Cloning into &apos;plxxm/pxxx&apos;...</div><div class="line">Permission denied (publickey).</div><div class="line">fatal: Could not read from remote repository.</div><div class="line">Please make sure you have the correct access rights</div><div class="line">and the repository exists.</div><div class="line">fatal: clone of &apos;git@xxx.net:platform/planx.git&apos; into submodule path &apos;plxxm/pxxx&apos; failed</div><div class="line">hudson.plugins.git.GitException: Command &quot;git submodule update --init --recursive&quot; returned status code 128:</div><div class="line">stdout:</div><div class="line">stderr: Cloning into &apos;plxxm/pxxx&apos;...</div><div class="line">Permission denied (publickey).</div><div class="line">fatal: Could not read from remote repository.</div><div class="line">Please make sure you have the correct access rights</div><div class="line">and the repository exists.</div></pre></td></tr></table></figure>
<p><strong>原因：</strong>git submodule使用的是ssh方式管理repository,没有找到可以使用的ssh key做submodule的身份认证。按上面的方法升级Git插件版本后，就可以通过和主版本库一样的Credentials进行代码获取了</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[collectd使用exec模块进行自定义监控]]></title>
      <url>http://arvon.top/2017/11/28/collectd%E4%BD%BF%E7%94%A8exec%E6%A8%A1%E5%9D%97%E8%BF%9B%E8%A1%8C%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9B%91%E6%8E%A7/</url>
      <content type="html"><![CDATA[<p>使用Grafana进行服务监控的明显优点就是监控出图漂亮，而且拥有丰富的插件，可以直接监控系统资源和负荷信息以及常见的服务进程状态，不过还是会有一些场景直接使用模块是不太容易进行监控的，这个时候更适合使用编写脚本进行数据收集和监控，而<strong>exec</strong>模块就可以满足这样的需求，下面就列举一个小栗子。<br><a id="more"></a></p>
<h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ul>
<li><p>开启exec模块(/etc/collectd.conf)<br>开启exec模块并指定自定义脚本位置</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;Plugin <span class="built_in">exec</span>&gt;</div><div class="line"><span class="comment">#   Exec "user:group" "/path/to/exec"</span></div><div class="line">    Exec <span class="string">"ec2-user:ec2-user"</span> <span class="string">"/opt/collectd/plugin/check_notice.sh"</span></div><div class="line"><span class="comment">#   NotificationExec "user:group" "/path/to/exec"</span></div><div class="line">&lt;/Plugin&gt;</div><div class="line">LoadPlugin <span class="built_in">exec</span></div></pre></td></tr></table></figure>
</li>
<li><p>自定义脚本</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">HOSTNAME=<span class="string">"<span class="variable">$&#123;COLLECTD_HOSTNAME:-vpc1-208-jenkins&#125;</span>"</span></div><div class="line">INTERVAL=<span class="string">"<span class="variable">$&#123;COLLECTD_INTERVAL:-10&#125;</span>"</span></div><div class="line"></div><div class="line"><span class="keyword">while</span> sleep <span class="string">"<span class="variable">$INTERVAL</span>"</span>; <span class="keyword">do</span></div><div class="line">  RES=$(curl <span class="_">-s</span> http://1.2.3.4:8083/notice/v1/getnotice?gid=5\&amp;version=4.0.500 |grep Endpoint |wc <span class="_">-l</span>)</div><div class="line">  <span class="built_in">echo</span> <span class="string">"PUTVAL \"<span class="variable">$HOSTNAME</span>/health/gauge-notice\" interval=<span class="variable">$INTERVAL</span> N:<span class="variable">$RES</span>"</span></div><div class="line"><span class="keyword">done</span></div><div class="line"><span class="comment">#$HOSTNAME/health/gauge-notice对应下面的</span></div><div class="line"><span class="comment">#&lt;instance-id&gt;/&lt;plugin&gt;-&lt;plugin_instance&gt;/&lt;type&gt;-&lt;type_instance&gt;</span></div><div class="line"><span class="comment">#gauge是表示type的一种，不能自己编着写哦</span></div><div class="line"><span class="comment">#脚本输出如：PUTVAL "vpc1-208-jenkins/health/gauge-notice" interval=10 N:1</span></div></pre></td></tr></table></figure>
</li>
<li><p>在Grafana上添加监控<br><img src="http://img.arvon.top:80/images/2019/08/12/20171128-colletcd-1.png" alt="20171128-colletcd-1"></p>
</li>
</ul>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="https://collectd.org/documentation/manpages/collectd-exec.5.shtml" target="_blank" rel="external">官方介绍</a></li>
<li><a href="https://github.com/collectd/collectd" target="_blank" rel="external">Github地址</a></li>
<li><a href="https://timo.piqiu.me/2013/07/04/graphite%E5%92%8Ccollectd%E4%BB%A5%E5%8F%8A%E8%87%AA%E5%AE%9A%E4%B9%89%E8%84%9A%E6%9C%AC/" target="_blank" rel="external">timo的博客</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Elasticsearch默认fields1000报错解决]]></title>
      <url>http://arvon.top/2017/11/24/Elasticsearch%E9%BB%98%E8%AE%A4fields1000%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3/</url>
      <content type="html"><![CDATA[<p><strong>背景：</strong>由于日志输出调整，ES出现了很多如下的报错，这个issue可以在<a href="https://github.com/elastic/elasticsearch/pull/17357" target="_blank" rel="external">这个github地址找到</a>,另外还有<a href="https://www.elastic.co/guide/en/elasticsearch/reference/5.0/indices-update-settings.html" target="_blank" rel="external">5.0版本关于这个问题的说明</a>。<br>我的ES版本为：5.0.0(直接curl yourip:9200就可以看到)</p>
<blockquote>
<p>This is to prevent mapping explosion when dynamic keys such as UUID are used as field names. index.mapping.total_fields.limit specifies the total number of fields an index can have. An exception will be thrown when the limit is reached. The default limit is 1000. Value 0 means no limit. This setting is runtime adjustable<br><strong>– – – 以上摘自</strong>yanjunh对于该issue的答复<br><a id="more"></a></p>
</blockquote>
<h3 id="报错如下："><a href="#报错如下：" class="headerlink" title="报错如下："></a>报错如下：</h3><ul>
<li>报错信息  <blockquote>
<p>[2017-11-18T00:00:03,102][DEBUG][o.e.a.b.TransportShardBulkAction] [vpc1-ip-1] [bilogs-logics-202.2017.11.17][2] failed to execute bulk item (index) …omitted…java.lang.IllegalArgumentException: Limit of total fields [1000] in index [bilogs-logics-log] has been exceeded</p>
</blockquote>
</li>
</ul>
<h3 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h3><p><strong>说明：</strong>对于已经建立的索引可以通过设置fields进行修复，对于之后的将建立的索引通过设置template进行设置</p>
<ul>
<li><p>对于已经建立的索引</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">curl -XPUT yourEShost:port/your_index_name/_settings <span class="_">-d</span> <span class="string">'&#123;"index.mapping.total_fields.limit": 0&#125;'</span></div><div class="line"><span class="comment">#以上表示对于‘your_index_name’这个索引设置fields为无限制，默认为1000</span></div><div class="line">curl -XPUT 10.0.1.1:9200/*/_settings <span class="_">-d</span> <span class="string">'&#123;"index.mapping.total_fields.limit": 50000&#125;'</span></div><div class="line"><span class="comment">#这个表示对所有index的fields的limit设置为50000</span></div><div class="line">curl 10.0.1.1:9200/_cat/indices/*?pretty</div><div class="line"><span class="comment">#查看所有索引,查看指定索引将*换为索引名称即可</span></div><div class="line">curl -XGET 10.0.1.1:9200/_all/_settings?pretty</div><div class="line"><span class="comment">#查看所有索引的设置</span></div><div class="line">curl 10.0.1.1:9200/bilogs-logics-202.2017.11.21/_settings?pretty</div><div class="line"><span class="comment">#查看单个索引的设置</span></div><div class="line">curl 10.0.1.1:9200/bilogs-logics-202.2017.11.23/_mapping?pretty</div><div class="line"><span class="comment">#查看单个索引的map</span></div></pre></td></tr></table></figure>
</li>
<li><p>对于未创建的索引，可以通过<a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/index-templates.html" target="_blank" rel="external">模板设置</a></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">curl -XPUT <span class="string">'10.0.1.1:9200/_template/all '</span> <span class="_">-d</span> <span class="string">'</span></div><div class="line">&#123;</div><div class="line">  "template": "*",</div><div class="line">  "settings": &#123;</div><div class="line">    "index.mapping.total_fields.limit": 50000,</div><div class="line">    "refresh_interval": "30s"</div><div class="line">  &#125;</div><div class="line">&#125;'</div><div class="line"><span class="comment">#设置template的setting，</span></div><div class="line">curl -XGET 10.33.3.191:9200/_template/*?pretty</div><div class="line"><span class="comment">#查看所有模板的设置，使用了*匹配，如果看指定的模板将*换成对应模板名即可，另外这里可以看到每个模本都有一个"order"字段，这个字段的数值越低，优先级越高，优先级高的模板会覆盖优先级低的模板</span></div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[关于Kafka分布式消息队列]]></title>
      <url>http://arvon.top/2017/11/05/%E5%85%B3%E4%BA%8EKafka%E5%88%86%E5%B8%83%E5%BC%8F%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/</url>
      <content type="html"><![CDATA[<p><strong>背景:</strong> 直接使用EFK进行日志收集，在大规模高压力的情况下Elasticsearch会存在丢数据的情况，现在考虑使用MQ（Message Queue）进行缓冲，达到不丢数据的目的。由于对于日志收集响应速度并不是十分高，并且对日志的可靠性要求较高，最终选择Kafka来充当消息队列而非官方推荐的redis。这里着重进行kafka介绍，之后会整合EFK+kafka的应用落地记录。<br><a id="more"></a></p>
<h3 id="关于Kafka的基本原理"><a href="#关于Kafka的基本原理" class="headerlink" title="关于Kafka的基本原理"></a>关于Kafka的基本原理</h3><h4 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h4><p>  Kafka是由LinkedIn使用Scala开发的一个分布式的消息系统。最初用作LinkedIn的活动流（Activity Stream）和运营数据处理管道（Pipeline），Linkedin于2010年贡献给了Apache基金会并成为顶级开源项目。kafka是一个分布式、分区的、多副本的、多订阅者，基于zookeeper协调的分布式日志系统(也可以当做MQ系统)，常见可以用于web/nginx日志、访问日志，消息服务等等。</p>
<h4 id="基本组成"><a href="#基本组成" class="headerlink" title="基本组成"></a>基本组成</h4><p><strong>Tips：</strong>主要由四部分组成，Topic（话题）、Producer（生产者）、Broker（服务节点）、Consumer（消费者）</p>
<ul>
<li>Broker<blockquote>
<p>已发布的消息保存在一组服务器中，它们被称为代理（Broker）或Kafka集群。组成kafka集群的每个服务器，都称为是Broker。Broker可以容纳多个Topic</p>
</blockquote>
</li>
<li>Topic<blockquote>
<p>是特定类型的消息流。消息是字节的有效负载（Payload），话题是消息的分类名或种子（Feed）名。每条发送到kafka的消息都有一个类别，这个类别就叫做Topic。可以理解为一个消息队列（Message Queue）的名称。（物理上不同 Topic 的消息分开存储，逻辑上一个 Topic 的消息虽然保存于一个或多个 broker 上，但用户只需指定消息的 Topic 即可生产或消费数据而不必关心数据存于何处）。<br><strong>Partition</strong></p>
<ul>
<li>parition是物理上的概念，每个topic包含一个或多个partition，创建topic时可指定parition数量。每个partition对应于一个文件夹，该文件夹下存储该partition的数据和索引文件</li>
<li>partition分区数，控制topic将分片成多少个log。可以显示指定，如果不指定则会使用broker(server.properties)中的num.partitions配置的数量</li>
<li>为了实现扩展性，一个非常大的topic可以分布到多个 broker（即服务器）上，一个topic可以分为多个partition，每个partition是一个有序的队列。</li>
<li>partition中的每条消息都会被分配一个有序的id（offset）。kafka只保证按一个partition中的顺序将消息发给consumer，不保证一个topic的整体 （多个partition间）的顺序。</li>
<li>也就是说，一个topic在集群中可以有多个partition，那么分区的策略是什么？(消息发送到哪个分区上，有两种基本的策略，一是采用Key Hash算法，一是采用Round Robin算法)</li>
</ul>
<p><strong>Offset</strong></p>
<ul>
<li>kafka的存储文件都是按照offset.kafka来命名，用offset做名字的好处是方便查找。例如你想找位于2049的位置，只要找到2048.kafka的文件即可。当然the first offset就是00000000000.kafka</li>
</ul>
</blockquote>
</li>
<li>Producer<blockquote>
<p>消息生产者，就是向kafka broker发消息的客户端。负责发布消息到Kafka broker。</p>
</blockquote>
</li>
<li>Consumer<blockquote>
<p>消息消费者，向 Kafka broker 读取消息的客户端。每个consumer属于一个特定的consuer group（可为每个consumer指定group name，若不指定group name则属于默认的group）。使用consumer high level API时，同一topic的一条消息只能被同一个consumer group内的一个consumer消费，但多个consumer group可同时消费这一消息。<br><strong>Consumer Group</strong></p>
<ul>
<li>每个 Consumer 属于一个特定的 Consumer Group（可为每个 Consumer 指定 group name，若不指定 group name 则属于默认的 group）</li>
<li>消息系统有两类，一是广播，二是订阅发布。广播是把消息发送给所有的消费者；发布订阅是把消息只发送给订阅者。Kafka通过Consumer Group组合实现了这两种机制： 实现一个topic消息广播（发给所有的consumer）和单播（发给任意一个consumer）。一个topic可以有多个Consumer Group。</li>
<li>topic的消息会复制（不是真的复制，是概念上的）到所有的CG，但每个CG只会把消息发给该CG中的一个 consumer（这是实现一个Topic多Consumer的关键点：为一个Topic定义一个CG，CG下定义多个Consumer）。如果需要实现广播，只要每个consumer有一个独立的CG就可以了。要实现单播只要所有的consumer在同一个CG。用CG还可以将consumer进行自由的分组而不需要多次发送消息到不同的topic。</li>
<li>典型的应用场景是，多个Consumer来读取一个Topic(理想情况下是一个Consumer读取Topic的一个Partition）,那么可以让这些Consumer属于同一个Consumer Group即可实现消息的多Consumer并行处理，原理是Kafka将一个消息发布出去后，ConsumerGroup中的Consumers可以通过Round Robin的方式进行消费(Consumers之间的负载均衡使用Zookeeper来实现)</li>
</ul>
</blockquote>
</li>
</ul>
<h3 id="搭建kafka集群"><a href="#搭建kafka集群" class="headerlink" title="搭建kafka集群"></a>搭建kafka集群</h3><blockquote>
<p><strong>Tips：</strong>这里使用的zk及kafka版本如下<br>zookeeper:3.4.10<br>kafka:2.11-0.10.2.0</p>
</blockquote>
<h4 id="安装配置zookeeper"><a href="#安装配置zookeeper" class="headerlink" title="安装配置zookeeper"></a>安装配置zookeeper</h4><ul>
<li><p>Install</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">wget http://mirror.bit.edu.cn/apache/zookeeper/zookeeper-3.4.10/zookeeper-3.4.10.tar.gz</div><div class="line">tar xvf zookeeper-3.4.10.tar.gz</div><div class="line">cp zookeeper-3.4.10 /usr/<span class="built_in">local</span>/zookeeper/ -r</div><div class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/zookeeper/</div><div class="line">cp conf/zoo_sample.cfg conf/zoo.cfg</div><div class="line">mkdir -p /var/zookeeper/data</div><div class="line"><span class="built_in">echo</span> 1 &gt;/var/zookeeper/data/myid</div><div class="line"><span class="comment">#注意，这里要与下面config中server.1的配置一致，此server为10.17.0.112，所以echo 1，同理226这台server就echo 2</span></div></pre></td></tr></table></figure>
</li>
<li><p>Config</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#cat /usr/local/zookeeper/conf/zoo.cfg</span></div><div class="line">tickTime=2000</div><div class="line">initLimit=10</div><div class="line">syncLimit=5</div><div class="line">dataDir=/var/zookeeper/data</div><div class="line">clientPort=2181</div><div class="line">server.1=10.17.0.112:2888:3888</div><div class="line">server.2=10.17.0.226:2888:3888</div><div class="line">server.3=10.17.0.211:2888:3888</div></pre></td></tr></table></figure>
</li>
<li><p>Start</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/zookeeper</div><div class="line">./bin/zkServer.sh start</div><div class="line">./bin/zkServer.sh status</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#cat /etc/rc.d/init.d/zookeeper</span></div><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"><span class="comment">#chkconfig:2345 20 90</span></div><div class="line"><span class="comment">#description:zookeeper</span></div><div class="line"><span class="comment">#processname:zookeeper</span></div><div class="line"><span class="keyword">case</span> <span class="variable">$1</span> <span class="keyword">in</span></div><div class="line">      start) /usr/<span class="built_in">local</span>/zookeeper/bin/zkServer.sh start;;</div><div class="line">      stop) /usr/<span class="built_in">local</span>/zookeeper/bin/zkServer.sh stop;;</div><div class="line">      status) /usr/<span class="built_in">local</span>/zookeeper/bin/zkServer.sh status;;</div><div class="line">      restart) /usr/<span class="built_in">local</span>/zookeeper/bin/zkServer.sh restart;;</div><div class="line">      *)  <span class="built_in">echo</span> <span class="string">"require start|stop|status|restart"</span>;;</div><div class="line"><span class="keyword">esac</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="安装配置kafka"><a href="#安装配置kafka" class="headerlink" title="安装配置kafka"></a>安装配置kafka</h4><ul>
<li><p>Install</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">wget http://mirror.bit.edu.cn/apache/kafka/0.10.2.0/kafka_2.11-0.10.2.0.tgz</div><div class="line">tar xvf kafka_2.11-0.10.2.0.tgz</div><div class="line">cp kafka_2.11-0.10.2.0 /usr/<span class="built_in">local</span>/kafka/ -r</div><div class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/kafka/</div></pre></td></tr></table></figure>
</li>
<li><p>Config（需要改server和consumer配置）</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#cat /usr/local/kafka/config/server.properties |egrep -v "^#|^$"</span></div><div class="line">broker.id=2</div><div class="line"><span class="comment">#唯一值，我这里按zk的serverID进行了配置</span></div><div class="line">listeners = PLAINTEXT://10.17.0.226:9092</div><div class="line"><span class="comment">#这个地方在这个版本及以后需要打开注释填写本机地址，之前的版本需配置host.name</span></div><div class="line">num.network.threads=3</div><div class="line">num.io.threads=8</div><div class="line">socket.send.buffer.bytes=102400</div><div class="line">socket.receive.buffer.bytes=102400</div><div class="line">socket.request.max.bytes=104857600</div><div class="line">log.dirs=/tmp/kafka-logs</div><div class="line">num.partitions=1</div><div class="line">num.recovery.threads.per.data.dir=1</div><div class="line">log.retention.hours=168</div><div class="line">log.segment.bytes=1073741824</div><div class="line">log.retention.check.interval.ms=300000</div><div class="line">zookeeper.connect=10.17.0.112:2181,10.17.0.226:2181,10.17.0.221:2181</div><div class="line"><span class="comment">#这里填写zookeeper的地址，另外消费配置上也需要做对应修改</span></div><div class="line">zookeeper.connection.timeout.ms=6000</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#cat /usr/local/kafka/config/consumer.properties |egrep -v "^#|^$"</span></div><div class="line">zookeeper.connect=10.17.0.112:2181,10.17.0.226:2181,10.17.0.221:2181</div><div class="line">zookeeper.connection.timeout.ms=6000</div><div class="line">group.id=<span class="built_in">test</span>-consumer-group</div></pre></td></tr></table></figure>
</li>
<li><p>Start</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/kafka/</div><div class="line">bin/kafka-server-start.sh config/server.properties &amp;</div><div class="line"><span class="comment">#后台执行，退出终端后终止</span></div><div class="line">bin/kafka-server-start.sh -daemon config/server.properties &amp;</div><div class="line"><span class="comment">#后台执行，退出终端后不终止</span></div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#cat /etc/rc.d/init.d/kafka</span></div><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"><span class="comment">#chkconfig:2345 30 80</span></div><div class="line"><span class="comment">#description:kafka</span></div><div class="line"><span class="comment">#processname:kafka</span></div><div class="line"><span class="keyword">case</span> <span class="variable">$1</span> <span class="keyword">in</span></div><div class="line"> start) /usr/<span class="built_in">local</span>/kafka/bin/kafka-server-start.sh  -daemon /usr/<span class="built_in">local</span>/kafka/config/server.properties &amp;;;</div><div class="line"> stop) /usr/<span class="built_in">local</span>/kafka/bin/kafka-server-stop.sh  /usr/<span class="built_in">local</span>/kafka/config/server.properties;;</div><div class="line"> restart) /usr/<span class="built_in">local</span>/kafka/bin/kafka-server-stop.sh  /usr/<span class="built_in">local</span>/kafka/config/server.properties</div><div class="line">         /usr/<span class="built_in">local</span>/kafka/bin/kafka-server-start.sh  -daemon /usr/<span class="built_in">local</span>/kafka/config/server.properties &amp;</div><div class="line">         ;;</div><div class="line"></div><div class="line"> *)  <span class="built_in">echo</span> <span class="string">"require start|stop|restart"</span>  ;;</div><div class="line"><span class="keyword">esac</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="安装配置kafka监控程序"><a href="#安装配置kafka监控程序" class="headerlink" title="安装配置kafka监控程序"></a>安装配置kafka监控程序</h4><blockquote>
<p><strong>目前常用有三种：</strong><br>Kafka Web Console：监控功能较为全面，可以预览消息，监控Offset、Lag等信息，但存在bug，不建议在生产环境中使用。<br>Kafka Manager：偏向Kafka集群管理，若操作不当，容易导致集群出现故障。对Kafka实时生产和消费消息是通过JMX实现的。没有记录Offset、Lag等信息。<br>KafkaOffsetMonitor：程序一个jar包的形式运行，部署较为方便。只有监控功能，使用起来也较为安全。<br>这里使用第三种KafkaOffsetMonitor</p>
</blockquote>
<ul>
<li><p>install</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">wget https://github.com/quantifind/KafkaOffsetMonitor/releases/download/v0.2.1/KafkaOffsetMonitor-assembly-0.2.1.jar</div><div class="line"><span class="comment">#下载即可</span></div></pre></td></tr></table></figure>
</li>
<li><p>start</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">java -cp KafkaOffsetMonitor-assembly-0.2.1.jar \</div><div class="line">     com.quantifind.kafka.offsetapp.OffsetGetterWeb \</div><div class="line">     --zk 10.17.0.112:2181,10.17.0.226:2181,10.17.0.221:2181 \</div><div class="line">     --port 8089 \</div><div class="line">     --refresh 10.seconds \</div><div class="line">     --retain 2.days &amp;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="常用kafka命令"><a href="#常用kafka命令" class="headerlink" title="常用kafka命令"></a>常用kafka命令</h3><ul>
<li><p>创建及查看Topic</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">bin/kafka-topics.sh --create --zookeeper 10.17.0.211:2181 --replication-factor 3 --partitions 2 --topic prod-test</div><div class="line"><span class="comment">#创建一个名为prod-test的topic，有3个副本（即控制消息保存在3个broker上），2个分区</span></div><div class="line">bin/kafka-topics.sh --list --zookeeper 10.17.0.211:2181</div><div class="line"><span class="comment">#list topic，列出所有topic</span></div><div class="line">bin/kafka-topics.sh --describe --zookeeper 10.17.0.211:2181 --topic prod-test</div><div class="line"><span class="comment">#查看某个topic的具体信息</span></div></pre></td></tr></table></figure>
</li>
<li><p>生产消费数据（可以测试集群搭建是否成功）</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">bin/kafka-console-producer.sh --broker-list 10.17.0.211:9092 --topic prod-test</div><div class="line"><span class="comment">#从控制台向topic生产数据</span></div><div class="line">bin/kafka-console-consumer.sh  --zookeeper 10.17.0.226:2181  --topic prod-test --from-beginning</div><div class="line"><span class="comment">#从控制台消费topic prod-test的数据，可以使用任意集群中的地址进行测试</span></div></pre></td></tr></table></figure>
</li>
<li><p>查看topic某分区偏移量最大（小）值</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">bin/kafka-run-class.sh kafka.tools.GetOffsetShell --topic prod-test  --time -2 --broker-list 10.17.0.211:9092 --partitions 1</div><div class="line"><span class="comment">#查看prod-test这个topic分区1的分组最小偏移值（time -2 表示最小偏移量）</span></div><div class="line">bin/kafka-run-class.sh kafka.tools.GetOffsetShell --topic prod-test  --time -1 --broker-list 10.17.0.211:9092 --partitions 1</div><div class="line"><span class="comment">#查看prod-test这个topic分区0的分组最大偏移值（time -1 表示最大偏移量</span></div></pre></td></tr></table></figure>
</li>
<li><p>增加topic分区数</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">bin/kafka-topics.sh --zookeeper 10.17.0.211:2181  --alter --topic prod-test --partitions 5</div><div class="line"><span class="comment">#增加prod-test的这个topic的分区数到5个（比如之前是3个，就是再增加2个），这个数字只能比现在已有的分区数大。</span></div></pre></td></tr></table></figure>
</li>
<li><p>查看topic消费进度</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#consumer group可以从zk中查看</span></div><div class="line">bin/kafka-run-class.sh kafka.tools.ConsumerOffsetChecker --group console-consumer-50561  --zookeeper 10.17.0.226:2181</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Etcd及相关组件安装配置说明]]></title>
      <url>http://arvon.top/2017/10/13/etcd%E5%8F%8A%E7%9B%B8%E5%85%B3%E7%BB%84%E4%BB%B6%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E8%AF%B4%E6%98%8E/</url>
      <content type="html"><![CDATA[<p><strong>简介：</strong><a href="https://coreos.com/etcd/" target="_blank" rel="external">Etcd</a>是CentOS公司发起的一个开源项目，灵感来自于 ZooKeeper 和 Doozer，它使用Go语言编写，并通过Raft一致性算法处理日志复制以保证强一致性（Raft是一个来自Stanford的新的一致性算法，适用于分布式系统的日志复制，Raft通过选举的方式来实现一致性，在Raft中，任何一个节点都可能成为Leader。），主要用于<strong>共享配置和服务发现</strong>的分布式、一致性的KV存储系统。<br>除了常见的共享配置及服务发现，还可以使用Etcd结合SkyDNS提供<strong>内网域名解析服务</strong>。<br>这里主要涉及etcd安装配置说明、etcd-view安装配置、skydns安装配置</p>
<a id="more"></a>
<blockquote>
<p><strong>优势分析：</strong></p>
<ul>
<li><strong>简单：</strong>基于HTTP+JSON的API，可以直接用curl命令和Pyhton的URL方法轻松测试使用，相比ZK方便运维</li>
<li><strong>可靠：</strong>使用Raft算法保证强一致性，并可靠的实现了分布式，集群具备一定的容错能力。即使集群中出现部分节点故障、网络故障等问题，仍可保证其余大多数节点正确的步进。甚至当更多的节点（一般来说超过集群节点总数的一半）出现故障而导致集群不可用时，依然可以保证节点中的数据不会出现错误的结果。</li>
<li><strong>安全：</strong></li>
<li><strong>快速：</strong>按照官网给出的[Benchmark], 在2CPU，1.8G内存，SSD磁盘这样的配置下，单节点的写性能可以达到16K QPS, 而先写后读也能达到12K QPS。性能相当可观</li>
<li><strong>项目活跃度：</strong>有大量资料，开发社区活跃，对比ZK好特别多。Google的容器集群管理系统Kubernetes、开源PaaS平台Cloud Foundry和CoreOS的Fleet都广泛使用了etcd。</li>
</ul>
<p><strong>原理分析：</strong></p>
<ul>
<li>a.)ETCD使用Raft协议来维护集群内各个节点状态的一致性。简单说，ETCD集群是一个分布式系统，由多个节点相互通信构成整体对外服务，每个节点都存储了完整的数据，并且通过Raft协议保证每个节点维护的数据是一致的。每个ETCD节点都维护了一个状态机，并且，任意时刻至多存在一个有效的主节点。主节点处理所有来自客户端写操作，通过Raft协议保证写操作对状态机的改动会可靠的同步到其他节点。</li>
<li>b.)ETCD工作原理核心部分在于Raft协议,Raft协议主要分为三个部分：选主，日志复制，安全性。</li>
<li><strong>选主：</strong>一组服务节点构成一个集群，并且有一个主节点来对外提供服务。当集群初始化，或者主节点挂掉后，面临一个选主问题。集群中每个节点，任意时刻处于Leader, Follower, Candidate这三个角色之一。当集群初始化时候，每个节点都是Follower角色，当Follower在一定时间内没有收到来自主节点的心跳，会将自己角色改变为Candidate，并发起一次选主投票；当收到包括自己在内超过半数节点赞成后，选举成功；当收到票数不足半数选举失败，或者选举超时。若本轮未选出主节点，将进行下一轮选举（出现这种情况，是由于多个节点同时选举，所有节点均为获得过半选票）。Candidate节点收到来自主节点的信息后，会立即终止选举过程，进入Follower角色。为了避免陷入选主失败循环，每个节点未收到心跳发起选举的时间是一定范围内的随机值，这样能够避免2个节点同时发起选主。</li>
<li><strong>日志复制：</strong>所谓日志复制，是指主节点将每次操作形成日志条目，并持久化到本地磁盘，然后通过网络IO发送给其他节点。其他节点根据日志的逻辑时钟(TERM)和日志编号(INDEX)来判断是否将该日志记录持久化到本地。当主节点收到包括自己在内超过半数节点成功返回，那么认为该日志是可提交的(committed），并将日志输入到状态机，将结果返回给客户端。注意每次选主都会形成一个唯一的TERM编号，相当于逻辑时钟。每一条日志都有全局唯一的编号。</li>
<li><strong>安全性：</strong>Raft在选主逻辑中，对能够成为主的节点加以限制，确保选出的节点已定包含了集群已经提交的所有日志。如果新选出的主节点已经包含了集群所有提交的日志，那就不需要从和其他节点比对数据了。简化了流程，缩短了集群恢复服务的时间。</li>
</ul>
<p><strong>应用场景：</strong></p>
<ul>
<li>配置管理</li>
<li>服务注册发现</li>
<li>选主</li>
<li>应用调度</li>
<li>分布式队列</li>
<li>分布式锁</li>
</ul>
</blockquote>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul>
<li>软件获取地址：<blockquote>
<ul>
<li>Etcd <a href="https://github.com/coreos/etcd/releases/" target="_blank" rel="external">Github地址</a></li>
<li>Etcd-viewer <a href="https://nikfoundas.github.io/etcd-viewer/" target="_blank" rel="external">nikfoundas.github.io</a><br>Need:<ul>
<li>java &gt;= 1.7<a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="external">官网地址</a></li>
<li>maven &gt;= 3.0.5 <a href="http://maven.apache.org/download.cgi" target="_blank" rel="external">官网地址</a></li>
</ul>
</li>
<li>skydns <a href="https://github.com/skynetservices/skydns" target="_blank" rel="external">Gitbub地址</a></li>
</ul>
</blockquote>
</li>
<li>我的安装版本<blockquote>
<ul>
<li><strong>Etcd:</strong><a href="https://github.com/coreos/etcd/releases/download/v3.2.7/etcd-v3.2.7-linux-amd64.tar.gz" target="_blank" rel="external">__V3.2.7</a></li>
<li><strong>Etcd-viewer:</strong><a href="https://github.com/nikfoundas/etcd-viewer/archive/v1.1.zip" target="_blank" rel="external">__V1.1</a><ul>
<li><a href="http://download.oracle.com/otn-pub/java/jdk/8u144-b01/090f390dda5b47b9b721c7dfaa008135/jdk-8u144-linux-x64.rpm" target="_blank" rel="external">JDK1.8</a></li>
<li><a href="http://mirrors.tuna.tsinghua.edu.cn/apache/maven/maven-3/3.5.0/binaries/apache-maven-3.5.0-bin.tar.gz" target="_blank" rel="external">Maven3.5.0</a></li>
</ul>
</li>
<li><strong>sykdns:</strong><a href="http://download.openpkg.org/components/cache/skydns/skydns-20170903.tar.gz" target="_blank" rel="external">__V2.5.3a</a>    </li>
</ul>
</blockquote>
</li>
</ul>
<h4 id="Etcd接口支持"><a href="#Etcd接口支持" class="headerlink" title="Etcd接口支持"></a>Etcd接口支持</h4><ul>
<li>支持HTTP的PUT/GET/DELETE接口</li>
<li>通过http long poll支持WATCH接口（服务注册与发现）</li>
<li>支持key具有TTL属性</li>
<li>CAS（compare and swap）操作</li>
<li>支持多key的事务操作</li>
<li>支持目录操作</li>
</ul>
<h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><ul>
<li><p>启动参数</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"> /usr/<span class="built_in">local</span>/bin/etcd \</div><div class="line">-name ip-10-222-0-218-2 \</div><div class="line">--data-dir /opt/etcd/etcd-data \</div><div class="line">-initial-advertise-peer-urls http://10.222.0.218:12380 \</div><div class="line">-listen-peer-urls http://10.222.0.218:12380 \</div><div class="line">-listen-client-urls http://10.222.0.218:2379,http://127.0.0.1:2379 \</div><div class="line">-advertise-client-urls http://10.222.0.218:2379 \</div><div class="line">-initial-cluster-token etcd-cluster-arvon \</div><div class="line">-initial-cluster ip-10-222-0-218=http://10.222.0.218:12380,ip-10-222-0-218=http://10.222.0.218:2380 \</div><div class="line">-initial-cluster-state new</div></pre></td></tr></table></figure>
</li>
<li><p>常用命令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">etcdctl member list</div><div class="line"><span class="comment">#查看集群状况</span></div><div class="line">etcdctl rm hello</div><div class="line"><span class="comment">#检查集群监控状态</span></div><div class="line">etcdctl <span class="built_in">set</span> <span class="built_in">test</span>-key1 value1</div><div class="line"><span class="comment">#设置一个键值</span></div><div class="line">etcdctl get <span class="built_in">test</span>-key1</div><div class="line"><span class="comment">#获取指定key的value</span></div><div class="line">etcdctl mkdir /dir1/dir2/</div><div class="line">etcdctl mkdir /dir3/</div><div class="line"><span class="comment">#创建一个空目录,可递归创建</span></div><div class="line"><span class="built_in">set</span> /dir4/<span class="built_in">test</span>-key2 value2</div><div class="line"><span class="comment">#跨目录设置key，会自动创建目录</span></div><div class="line">etcdctl get /dir4/<span class="built_in">test</span>-key2</div><div class="line"><span class="comment">#获取目录下的key</span></div><div class="line">etcdctl ls</div><div class="line">etcdctl ls dir1/dir2</div><div class="line"><span class="comment">#查看注册在根目录下的文件（目录及key）</span></div><div class="line">etcdctl rm <span class="built_in">test</span>-key1</div><div class="line"><span class="comment">#删除指定key</span></div><div class="line">etcdctl rmdir dir3</div><div class="line"><span class="comment">#删除指定空目录（只能删除空目录）</span></div><div class="line">etcdctl rm -r  dir1</div><div class="line"><span class="comment">#递归删除指定目录，也能删除key</span></div></pre></td></tr></table></figure>
</li>
<li><p>HTTP接口常用命令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">curl http://10.222.0.80:2379/version</div><div class="line"><span class="comment">#查看版本</span></div><div class="line">curl http://10.222.0.80:2379/v2/members</div><div class="line"><span class="comment">#查看集群节点</span></div><div class="line">curl http://10.222.0.80:2379/v2/stats/store</div><div class="line"><span class="comment">#查看集群运行状态</span></div><div class="line">curl http://10.222.0.80:2379/v2/stats/leader</div><div class="line"><span class="comment">#查看选举的leader</span></div><div class="line">curl http://10.222.0.80:2379/v2/stats/self</div><div class="line"><span class="comment">#查看节点自身信息</span></div><div class="line">curl http://10.222.0.80:2379/v2/keys</div><div class="line"><span class="comment">#查看键</span></div><div class="line">curl -XPUT http://10.222.0.80:2379/v2/keys/<span class="built_in">test</span>-key11 <span class="_">-d</span> value=<span class="string">"value11"</span></div><div class="line">curl -XPUT http://10.222.0.80:2379/v2/keys/dir3/dir33/<span class="built_in">test</span>-key333 <span class="_">-d</span> value=<span class="string">"value333"</span></div><div class="line"><span class="comment">#创建一个键值</span></div><div class="line">curl http://10.222.0.80:2379/v2/keys/cdir1 -XPUT <span class="_">-d</span> dir=<span class="literal">true</span></div><div class="line">curl http://10.222.0.80:2379/v2/keys/cdir2/cdir3 -XPUT <span class="_">-d</span> dir=<span class="literal">true</span></div><div class="line"><span class="comment">#创建一个目录</span></div><div class="line">curl http://10.222.0.80:2379/v2/keys/tvalue1 -XPUT <span class="_">-d</span> value=<span class="string">"t1"</span> <span class="_">-d</span> ttl=10</div><div class="line"><span class="comment">#创建一个带ttl的键值，单位为秒，即10s后此键值自动消失</span></div><div class="line">curl http://10.222.0.80:2379/v2/keys/seqvar -XPOST <span class="_">-d</span> value=<span class="string">"s01"</span></div><div class="line">curl http://10.222.0.80:2379/v2/keys/seqvar -XPOST <span class="_">-d</span> value=<span class="string">"s02"</span></div><div class="line">curl http://10.222.0.80:2379/v2/keys/seqvar -XPOST <span class="_">-d</span> value=<span class="string">"s03"</span></div><div class="line">curl http://10.222.0.80:2379/v2/keys/seqvar</div><div class="line"><span class="comment">#创建有序键值（例如类似DNS轮训注册）</span></div><div class="line">curl http://10.222.0.80:2379/v2/keys/value111 -XDELETE</div><div class="line"><span class="comment">#删除一个键值</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="备份还原策略"><a href="#备份还原策略" class="headerlink" title="备份还原策略"></a>备份还原策略</h3><ul>
<li><p>数据备份</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ps axu | grep etcd|sed <span class="string">"s/ -/\n/g"</span> |grep <span class="string">"data-dir"</span> |awk <span class="string">'&#123;print $2&#125;'</span></div><div class="line"><span class="comment">#获取data目录</span></div><div class="line">etcdctl backup --data-dir=/opt/etcd/etcd-data --backup-dir=/tmp/etcd-backup-`date +%y%m%d%H`</div><div class="line"><span class="comment">#备份数据目录到tmp下</span></div></pre></td></tr></table></figure>
</li>
<li><p>备份还原（单机情况）</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#1. 关闭etcd</span></div><div class="line"><span class="comment">#2. 将备份数据拷贝至datadir</span></div><div class="line"><span class="comment">#3. 启动配置需加上--force-new-cluster参数</span></div><div class="line"><span class="comment">#4. 启动etcd</span></div></pre></td></tr></table></figure>
</li>
<li><p>说明</p>
<blockquote>
<p>1.使用 –force-new-cluster 参数启动Etcd服务。这个参数会重置集群ID和集群的所有成员信息，其中节点的监听地址会被重置为localhost:2379, 表示集群中只有一个节点。</p>
</blockquote>
</li>
</ul>
<h3 id="附录1：结合SkyDNS实现内网域名解析"><a href="#附录1：结合SkyDNS实现内网域名解析" class="headerlink" title="附录1：结合SkyDNS实现内网域名解析"></a>附录1：结合SkyDNS实现内网域名解析</h3><p><strong>说明：</strong>使用skydns+etcd可以搭建一个内网的域名服务，对于业务的部署连接及扩展会非常有帮助。</p>
<blockquote>
<p>设置步骤如下：</p>
<ul>
<li>安装etcd服务</li>
<li>安装skydns服务</li>
<li>初始化skydns服务</li>
<li>修改dhcp选项中的DNS解析地址，或手动修改/etc/resolve.conf</li>
<li>配置完成（附录2中有完整的ansible脚本）</li>
</ul>
</blockquote>
<h3 id="附录2：Ansible脚本"><a href="#附录2：Ansible脚本" class="headerlink" title="附录2：Ansible脚本"></a>附录2：Ansible脚本</h3><p><a href="https://github.com/Arvon2014/A-ops-scripts/tree/master/ansible-playbook/roles/etcd" target="_blank" rel="external">安装部署脚本地址：</a>包括以下</p>
<ul>
<li>安装etcd</li>
<li>安装etcd-view</li>
<li>安装skydns</li>
<li>安装supervisor</li>
</ul>
<h3 id="附录3：参考链接"><a href="#附录3：参考链接" class="headerlink" title="附录3：参考链接"></a>附录3：参考链接</h3><p><a href="https://coreos.com/etcd/" target="_blank" rel="external">Etcd</a><br><a href="http://blog.csdn.net/shukebai/article/details/53464887" target="_blank" rel="external">Etcd不错的图文应用介绍</a><br><a href="http://blog.csdn.net/u010511236/article/details/52386229" target="_blank" rel="external">Etcd常用场景分析</a><br><a href="https://yq.aliyun.com/articles/11035" target="_blank" rel="external">Etcd原理及ZK对比</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Ansible部署NFS服务]]></title>
      <url>http://arvon.top/2017/09/07/Ansible%E9%83%A8%E7%BD%B2NFS%E6%9C%8D%E5%8A%A1/</url>
      <content type="html"><![CDATA[<p>虽然很简单，写的比较low，不过还是记下吧，下次就可以直接拿着用了。很久以前写过一篇如何配置，这个安装基本是把原来的给改成playbook了，附原来<a href="http://arvon.top/2015/10/20/NFS%E6%9C%8D%E5%8A%A1%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2%E8%AE%B0%E5%BD%95/">手动配置</a>的链接。<br>另附官方模块地址：</p>
<blockquote>
<p><a href="http://docs.ansible.com/ansible/latest/mount_module.html" target="_blank" rel="external">http://docs.ansible.com/ansible/latest/mount_module.html</a></p>
</blockquote>
<a id="more"></a>
<h3 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h3><ul>
<li><p>Role目录结构</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">nfs/</div><div class="line">├── nfs-client</div><div class="line">│   ├── defaults</div><div class="line">│   │   └── main.yml</div><div class="line">│   └── tasks</div><div class="line">│       └── main.yml</div><div class="line">└── nfs-server</div><div class="line">    ├── defaults</div><div class="line">    │   └── main.yml</div><div class="line">    ├── tasks</div><div class="line">    │   └── main.yml</div><div class="line">    └── templates</div><div class="line">        └── exports.j2</div></pre></td></tr></table></figure>
</li>
<li><p>export<br><strong>cat nfs/nfs-server/templates/exports.j2</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#/data/nfsd/deploy 192.168.1.2/32(rw,root_squash,all_squash)</span></div><div class="line">/data/ops_nfs/deploy &#123;&#123;ip_range&#125;&#125;(rw,root_squash,all_squash)</div></pre></td></tr></table></figure>
</li>
<li><p>NFS-server<br><strong>cat nfs/nfs-server/tasks/main.yml</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">- name: install nfs pkg</div><div class="line">  yum: name=nfs-utils state=present</div><div class="line"></div><div class="line">- name: <span class="built_in">set</span> starting up with service rpcbind and nfs</div><div class="line">  <span class="built_in">command</span>: chkconfig rpcbind on</div><div class="line"></div><div class="line">- <span class="built_in">command</span>: chkconfig nfs on</div><div class="line"></div><div class="line">- name: create /data/ops_nfs dir</div><div class="line">  file:</div><div class="line">      path: /data/ops_nfs/deploy</div><div class="line">      state: directory</div><div class="line">      owner: nfsnobody</div><div class="line">      group: nfsnobody</div><div class="line">      mode: 0755</div><div class="line"></div><div class="line">- name: modify exports config</div><div class="line">  template: src=exports.j2 dest=/etc/exports</div><div class="line"></div><div class="line">- name: start nfs service</div><div class="line">  service: name=rpcbind state=restarted</div><div class="line"></div><div class="line">- service: name=nfs state=restarted</div><div class="line"></div><div class="line"><span class="comment">#- name: debug rpc result</span></div><div class="line"><span class="comment">#  command: rpcinfo -p</span></div><div class="line"><span class="comment">#  command: exportfs</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h3><ul>
<li>NFS-client<br>  <strong>cat nfs/nfs-client/tasks/main.yml</strong>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">- name: <span class="built_in">set</span> starting up with service rpcbind and nfs</div><div class="line">  <span class="built_in">command</span>: chkconfig rpcbind on</div><div class="line"></div><div class="line">- name: start rpcbind service</div><div class="line">  service: name=rpcbind state=restarted</div><div class="line"></div><div class="line">- name: mount nfs</div><div class="line">  mount:</div><div class="line">    name: /data/deploy</div><div class="line">    src: <span class="string">"&#123;&#123; nfs_server_address &#125;&#125;"</span></div><div class="line">    fstype: nfs4</div><div class="line">    opts: rw</div><div class="line">    fstab: /etc/fstab</div><div class="line">    state: mounted</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h3><ul>
<li>hosts<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[nfs-client]</div><div class="line">192.168.0.1</div><div class="line">192.168.0.2</div><div class="line">192.168.0.3</div><div class="line">[nfs-server]</div><div class="line">192.168.0.3</div><div class="line">[nfs:chidren]</div><div class="line">nfs-client</div><div class="line">nfs-server</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<p>以上</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[vsftp安装配置记录]]></title>
      <url>http://arvon.top/2017/08/13/vsftp%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<p>ftp服务在运维工作中还是十分常用的。下面记录下安装配置过程。关于主动被动原理可以看一下<a href="http://wiki.arvon.top/doku.php?id=ftp" target="_blank" rel="external">我的wiki</a><br>vsftp是一个主打安全的ftp服务，所以配置文件会复杂一些。下面是适用于一般场景的配置，使用虚拟用户进行登录操作，更多定制需要需要自行进行修改。<br><a id="more"></a></p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul>
<li>My Env<blockquote>
<ul>
<li>AWS AMI</li>
<li>YUM Repo: epel</li>
<li>Red Hat Enterprise Linux Server release 7.3 (Maipo)</li>
</ul>
</blockquote>
</li>
<li><p>Check and Install vsftp pkg</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">rpm -q vsftpd</div><div class="line">yum install vsftpd -y</div></pre></td></tr></table></figure>
</li>
<li><p>Stop Firewall and SElinux</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">setenforce 0</div><div class="line"><span class="comment"># forver stop</span></div><div class="line">vi /etc/selinux/config  <span class="comment">#SELINUX=disabled</span></div><div class="line"><span class="comment"># Stop firewall</span></div><div class="line">systemctl stop firewalld.service</div><div class="line">systemctl <span class="built_in">disable</span> firewalld.service</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="配置修改"><a href="#配置修改" class="headerlink" title="配置修改"></a>配置修改</h3><ul>
<li><p>主配置文件修改如下</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">anonymous_enable=No</div><div class="line">local_enable=YES</div><div class="line">allow_writeable_chroot=YES</div><div class="line">write_enable=YES</div><div class="line">local_umask=022</div><div class="line">dirmessage_enable=YES</div><div class="line">xferlog_enable=YES</div><div class="line">connect_from_port_20=YES</div><div class="line">xferlog_std_format=YES</div><div class="line">chroot_local_user=YES</div><div class="line">chroot_list_enable=YES</div><div class="line">listen=YES</div><div class="line">pam_service_name=vsftpd</div><div class="line">userlist_enable=YES</div><div class="line">tcp_wrappers=YES</div><div class="line">listen_port=21</div><div class="line">idle_session_timeout=300</div><div class="line">data_connection_timeout=120</div><div class="line">guest_enable=YES</div><div class="line">guest_username=ftpuser</div><div class="line">user_config_dir=/etc/vsftpd/vuser_conf</div><div class="line">virtual_use_local_privs=YES</div><div class="line">pasv_address=<span class="string">"Your Public IP"</span></div><div class="line">pasv_min_port=10060</div><div class="line">pasv_max_port=10090</div><div class="line">accept_timeout=5</div><div class="line">connect_timeout=5</div></pre></td></tr></table></figure>
</li>
<li><p>添加ftp用户</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">useradd -g root -M <span class="_">-d</span> /data/ftp_server <span class="_">-s</span> /sbin/nologin ftpuser</div><div class="line"><span class="built_in">echo</span> <span class="string">"rPUdeubeKCPwRAhpVt8GWLpG"</span> |passwd --stdin ftpuser</div><div class="line">chown -R ftpuser.root /data/ftp_server/</div></pre></td></tr></table></figure>
</li>
<li><p>Config virture User</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">touch /etc/vsftpd/vuser_passwd</div><div class="line">vi /etc/vsftpd/vuser_passwd</div><div class="line"><span class="comment">#user</span></div><div class="line"><span class="comment">#password</span></div><div class="line">db_load -T -t <span class="built_in">hash</span> <span class="_">-f</span> /etc/vsftpd/vuser_passwd /etc/vsftpd/vuser_passwd.db</div><div class="line">chmod 600 /etc/vsftpd/vuser_passwd.db</div><div class="line">mkdir /etc/vsftpd/vuser_conf</div><div class="line"><span class="built_in">cd</span> /etc/vsftpd/vuser_conf</div><div class="line">touch tai-yunying</div></pre></td></tr></table></figure>
</li>
<li><p>修改pam.d下的ftp配置</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#%PAM-1.0</span></div><div class="line"><span class="comment">#session    optional     pam_keyinit.so    force revoke</span></div><div class="line"><span class="comment">#auth       required    pam_listfile.so item=user sense=deny file=/etc/vsftpd/ftpusers onerr=succeed</span></div><div class="line"><span class="comment">#auth       required    pam_shells.so</span></div><div class="line"><span class="comment">#auth       include     password-auth</span></div><div class="line"><span class="comment">#account    include     password-auth</span></div><div class="line"><span class="comment">#session    required     pam_loginuid.so</span></div><div class="line"><span class="comment">#session    include     password-auth</span></div><div class="line">auth required /lib64/security/pam_userdb.so db=/etc/vsftpd/vuser_passwd</div><div class="line">account required /lib64/security/pam_userdb.so db=/etc/vsftpd/vuser_passwd</div></pre></td></tr></table></figure>
</li>
<li><p>启动服务</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemctl restart vsftpd.service</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="About-Base-Yum"><a href="#About-Base-Yum" class="headerlink" title="About Base Yum"></a>About Base Yum</h3><ul>
<li>Base Yum Repo<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">[base]</div><div class="line">name=CentOS-<span class="variable">$7</span> - Base - 163.com</div><div class="line"><span class="comment">#mirrorlist=http://mirrorlist.centos.org/?release=$7&amp;arch=$basearch&amp;repo=os</span></div><div class="line">baseurl=http://mirrors.163.com/centos/7/os/<span class="variable">$basearch</span>/</div><div class="line">gpgcheck=1</div><div class="line">gpgkey=http://mirrors.163.com/centos/RPM-GPG-KEY-CentOS-7</div><div class="line"></div><div class="line"><span class="comment">#released updates</span></div><div class="line">[updates]</div><div class="line">name=CentOS-<span class="variable">$7</span> - Updates - 163.com</div><div class="line"><span class="comment">#mirrorlist=http://mirrorlist.centos.org/?release=$7&amp;arch=$basearch&amp;repo=updates</span></div><div class="line">baseurl=http://mirrors.163.com/centos/7/updates/<span class="variable">$basearch</span>/</div><div class="line">gpgcheck=1</div><div class="line">gpgkey=http://mirrors.163.com/centos/RPM-GPG-KEY-CentOS-7</div><div class="line"></div><div class="line"><span class="comment">#additional packages that may be useful</span></div><div class="line">[extras]</div><div class="line">name=CentOS-<span class="variable">$7</span> - Extras - 163.com</div><div class="line"><span class="comment">#mirrorlist=http://mirrorlist.centos.org/?release=$7&amp;arch=$basearch&amp;repo=extras</span></div><div class="line">baseurl=http://mirrors.163.com/centos/7/extras/<span class="variable">$basearch</span>/</div><div class="line">gpgcheck=1</div><div class="line">gpgkey=http://mirrors.163.com/centos/RPM-GPG-KEY-CentOS-7</div><div class="line"></div><div class="line"><span class="comment">#additional packages that extend functionality of existing packages</span></div><div class="line">[centosplus]</div><div class="line">name=CentOS-<span class="variable">$7</span> - Plus - 163.com</div><div class="line">baseurl=http://mirrors.163.com/centos/7/centosplus/<span class="variable">$basearch</span>/</div><div class="line">gpgcheck=1</div><div class="line">enabled=0</div><div class="line">gpgkey=http://mirrors.163.com/centos/RPM-GPG-KEY-CentOS-7</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="报错解决"><a href="#报错解决" class="headerlink" title="报错解决"></a>报错解决</h3><ul>
<li>227 Entering Passive Mode<blockquote>
<p><a href="http://wrj1982.blog.51cto.com/1131419/420537" target="_blank" rel="external">http://wrj1982.blog.51cto.com/1131419/420537</a></p>
</blockquote>
</li>
<li>Unit NetworkManager-dispatcher.service has begun starting up.<blockquote>
<p>Jul 28 06:12:45 ip-10-222-0-61.taiyouxi.net dbus[501]: [system] Successfully activated service ‘org.freedesktop.nm_dispatcher’centos7中vsftp的配置文件默认将 listen_ipv6=YES 这一行没有注释掉，而我们目前的网络环境还不支持ipv6，从而导致出现错误无法启动，所以解决方法是将 listen_ipv6=YES更改为：listen_ipv6=NO，或将这一行注释掉</p>
</blockquote>
</li>
<li>被动模式报错<blockquote>
<p>425 Security: Bad IP connecting.<br>解决：修改vsftp服务器端主配置文件，添加字段（原因，被动模式客户端拿到了服务器端的内网地址所以无法建立连接）<br>pasv_address＝61.52.112.30</p>
</blockquote>
</li>
</ul>
<h3 id="配置默认目录说明"><a href="#配置默认目录说明" class="headerlink" title="配置默认目录说明"></a>配置默认目录说明</h3><ul>
<li>配置文件说明<br>|目录文件|    说明|<br>|—|—|—|<br>|/usr/sbin/vsftpd|    VSFTPD的主程序|<br>|/etc/rc.d/init.d/vsftpd|    启动脚本|<br>|/etc/vsftpd/vsftpd.conf|    主配置文件|<br>|/etc/pam.d/vsftpd|    PAM认证文件|<br>|/etc/vsftpd.ftpusers|    禁止使用VSFTPD的用户列表文件|<br>|/etc/vsftpd.user_list|    禁止或允许使用VSFTPD的用户列表文件|<br>|/var/ftp|    匿名用户主目录|<br>|/var/ftp/pub|    匿名用户的下载目录|</li>
</ul>
<h3 id="FTP命令"><a href="#FTP命令" class="headerlink" title="FTP命令"></a>FTP命令</h3><ul>
<li>命令详解<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">ftp&gt; ascii  <span class="comment"># 设定以ASCII方式传送文件(缺省值)</span></div><div class="line">ftp&gt; bell   <span class="comment"># 每完成一次文件传送,报警提示.</span></div><div class="line">ftp&gt; binary <span class="comment"># 设定以二进制方式传送文件.</span></div><div class="line">ftp&gt; <span class="built_in">bye</span>    <span class="comment"># 终止主机FTP进程,并退出FTP管理方式.</span></div><div class="line">ftp&gt; <span class="keyword">case</span> <span class="comment"># 当为ON时,用MGET命令拷贝的文件名到本地机器中,全部转换为小写字母.</span></div><div class="line">ftp&gt; <span class="built_in">cd</span>     <span class="comment"># 同UNIX的CD命令.</span></div><div class="line">ftp&gt; cdup   <span class="comment"># 返回上一级目录.</span></div><div class="line">ftp&gt; chmod  <span class="comment"># 改变远端主机的文件权限.</span></div><div class="line">ftp&gt; close  <span class="comment"># 终止远端的FTP进程,返回到FTP命令状态, 所有的宏定义都被删除.</span></div><div class="line">ftp&gt; delete <span class="comment"># 删除远端主机中的文件.</span></div><div class="line">ftp&gt; dir [remote-directory] [<span class="built_in">local</span>-file] <span class="comment"># 列出当前远端主机目录中的文件.如果有本地文件,就将结果写至本地文件.</span></div><div class="line">ftp&gt; get [remote-file] [<span class="built_in">local</span>-file] <span class="comment"># 从远端主机中传送至本地主机中.</span></div><div class="line">ftp&gt; <span class="built_in">help</span> [<span class="built_in">command</span>] <span class="comment"># 输出命令的解释.</span></div><div class="line">ftp&gt; lcd <span class="comment"># 改变当前本地主机的工作目录,如果缺省,就转到当前用户的HOME目录.</span></div><div class="line">ftp&gt; ls [remote-directory] [<span class="built_in">local</span>-file] <span class="comment"># 同DIR.</span></div><div class="line">ftp&gt; macdef                 <span class="comment"># 定义宏命令.</span></div><div class="line">ftp&gt; mdelete [remote-files] <span class="comment"># 删除一批文件.</span></div><div class="line">ftp&gt; mget [remote-files]    <span class="comment"># 从远端主机接收一批文件至本地主机.</span></div><div class="line">ftp&gt; mkdir directory-name   <span class="comment"># 在远端主机中建立目录.</span></div><div class="line">ftp&gt; mput <span class="built_in">local</span>-files <span class="comment"># 将本地主机中一批文件传送至远端主机.</span></div><div class="line">ftp&gt; open host [port] <span class="comment"># 重新建立一个新的连接.</span></div><div class="line">ftp&gt; prompt           <span class="comment"># 交互提示模式.</span></div><div class="line">ftp&gt; put <span class="built_in">local</span>-file [remote-file] <span class="comment"># 将本地一个文件传送至远端主机中.</span></div><div class="line">ftp&gt; <span class="built_in">pwd</span>  <span class="comment"># 列出当前远端主机目录.</span></div><div class="line">ftp&gt; quit <span class="comment"># 同BYE.</span></div><div class="line">ftp&gt; recv remote-file [<span class="built_in">local</span>-file] <span class="comment"># 同GET.</span></div><div class="line">ftp&gt; rename [from] [to]     <span class="comment"># 改变远端主机中的文件名.</span></div><div class="line">ftp&gt; rmdir directory-name   <span class="comment"># 删除远端主机中的目录.</span></div><div class="line">ftp&gt; send <span class="built_in">local</span>-file [remote-file] <span class="comment"># 同PUT.</span></div><div class="line">ftp&gt; status   <span class="comment"># 显示当前FTP的状态.</span></div><div class="line">ftp&gt; system   <span class="comment"># 显示远端主机系统类型.</span></div><div class="line">ftp&gt; user user-name [password] [account] <span class="comment"># 重新以别的用户名登录远端主机.</span></div><div class="line">ftp&gt; ? [<span class="built_in">command</span>] <span class="comment"># 同HELP. [command]指定需要帮助的命令名称。如果没有指定 command，ftp 将显示全部命令的列表。</span></div><div class="line">ftp&gt; ! <span class="comment"># 从 ftp 子系统退出到外壳。</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="参考连接"><a href="#参考连接" class="headerlink" title="参考连接"></a>参考连接</h3><p><a href="https://segmentfault.com/a/1190000008161400" target="_blank" rel="external">FTP安装配置</a><br><a href="http://pcvc.net/blog/2015/08/09/centos-7-installation-configuration-do-vsftpd-ftp-service/" target="_blank" rel="external">清水的博客</a></p>
<hr>
<p>以上</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Shell编程多线程并发实践]]></title>
      <url>http://arvon.top/2017/08/02/Shell%E7%BC%96%E7%A8%8B%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%B9%B6%E5%8F%91%E5%AE%9E%E8%B7%B5/</url>
      <content type="html"><![CDATA[<p><strong>Tips：</strong>正常来说shell是不具备多线程能力的，也就是说shell本身是按顺序进行执行指令的，并不能并发执行。但是可以换个思路，通过遍历+后台执行的方式进行模拟多线程的方式。但是还有个问题就是如何去控制并发数量，比如你要批量往1w台机器上copy一个文件，如果不设置并发数，估计直接就带宽跑满game over了，不过也有对应的解决方案，往下看吧。</p>
<a id="more"></a>
<h3 id="并发方案模型"><a href="#并发方案模型" class="headerlink" title="并发方案模型"></a>并发方案模型</h3><ul>
<li><p>无并发设置</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"><span class="built_in">echo</span> `date`</div><div class="line"><span class="built_in">echo</span> <span class="string">"-----------Arvon.top Loop Begin-------------"</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `seq 3`;<span class="keyword">do</span></div><div class="line">    sleep 10</div><div class="line">    <span class="built_in">echo</span> <span class="variable">$i</span></div><div class="line">    <span class="built_in">echo</span> `date`</div><div class="line"><span class="keyword">done</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"-----------Arvon.top Loop End-------------"</span></div><div class="line"><span class="built_in">echo</span> `date`</div></pre></td></tr></table></figure>
<blockquote>
<p>输出</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Wed Aug 2 12:53:25 UTC 2017</div><div class="line">-----------Arvon.top Loop Begin-------------</div><div class="line">1</div><div class="line">Wed Aug 2 12:53:35 UTC 2017</div><div class="line">2</div><div class="line">Wed Aug 2 12:53:45 UTC 2017</div><div class="line">3</div><div class="line">Wed Aug 2 12:53:55 UTC 2017</div><div class="line">-----------Arvon.top Loop End-------------</div><div class="line">Wed Aug 2 12:53:55 UTC 2017</div></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>无并发数设置<br><strong>Tips:</strong>敲黑板，注意wait这个指令，需要在如果需要循环体内所有任务执行完成后再执行其他指令，需要在循坏外紧接着加上</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"><span class="built_in">echo</span> `date`</div><div class="line"><span class="built_in">echo</span> <span class="string">"-----------Arvon.top Loop Begin-------------"</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `seq 3`;<span class="keyword">do</span></div><div class="line">&#123;</div><div class="line">    sleep 10</div><div class="line">    <span class="built_in">echo</span> <span class="variable">$i</span></div><div class="line">    <span class="built_in">echo</span> `date`</div><div class="line">&#125;&amp;</div><div class="line"><span class="keyword">done</span></div><div class="line"><span class="built_in">wait</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"-----------Arvon.top Loop End-------------"</span></div><div class="line"><span class="built_in">echo</span> `date`</div></pre></td></tr></table></figure>
<blockquote>
<p>输出</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Wed Aug 2 13:04:34 UTC 2017</div><div class="line">-----------Arvon.top Loop Begin-------------</div><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">Wed Aug 2 13:04:44 UTC 2017</div><div class="line">Wed Aug 2 13:04:44 UTC 2017</div><div class="line">Wed Aug 2 13:04:44 UTC 2017</div><div class="line">-----------Arvon.top Loop End-------------</div><div class="line">Wed Aug 2 13:04:44 UTC 2017</div></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>有并发数设置<br><strong>Tips：</strong>这里需要用到一种特殊的文件名称为<strong>有名管道（FIFO）</strong>，这个具体会另写一篇，注意&amp;6和read这些地方</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"></div><div class="line">server_list=`seq 10`</div><div class="line">thread=3</div><div class="line"></div><div class="line"><span class="comment"># Create FIFO</span></div><div class="line">tmp_fifofile=<span class="string">"/tmp/$$.fifo"</span></div><div class="line">mkfifo <span class="variable">$tmp_fifofile</span></div><div class="line"><span class="built_in">exec</span> 6&lt;&gt; <span class="variable">$tmp_fifofile</span></div><div class="line">rm <span class="variable">$tmp_fifofile</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> ((i=0;i&lt;<span class="variable">$thread</span>;i++)); <span class="keyword">do</span></div><div class="line"><span class="built_in">echo</span></div><div class="line"><span class="keyword">done</span> &gt;&amp; 6</div><div class="line"></div><div class="line"><span class="comment"># user operation</span></div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">user_scripts</span></span>()&#123;</div><div class="line">    sleep 10</div><div class="line">    <span class="built_in">echo</span> `date`</div><div class="line">&#125;</div><div class="line"><span class="built_in">echo</span> `date`</div><div class="line"><span class="built_in">echo</span> <span class="string">"-----------Arvon.top Loop Begin-------------"</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="variable">$&#123;server_list&#125;</span>;<span class="keyword">do</span></div><div class="line"><span class="built_in">read</span> -u6</div><div class="line">&#123;</div><div class="line">    user_scripts</div><div class="line">    <span class="built_in">echo</span> &gt;&amp;6</div><div class="line">&#125;&amp;</div><div class="line"><span class="keyword">done</span> &lt;&amp;6</div><div class="line"><span class="built_in">wait</span></div><div class="line"><span class="built_in">exec</span> 6&gt;&amp;-</div><div class="line"><span class="built_in">echo</span> <span class="string">"-----------Arvon.top Loop End-------------"</span></div><div class="line"><span class="built_in">echo</span> `date`</div></pre></td></tr></table></figure>
<blockquote>
<p>输出</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">Wed Aug 2 14:12:03 UTC 2017</div><div class="line">-----------Arvon.top Loop Begin-------------</div><div class="line">Wed Aug 2 14:12:13 UTC 2017</div><div class="line">Wed Aug 2 14:12:13 UTC 2017</div><div class="line">Wed Aug 2 14:12:13 UTC 2017</div><div class="line">Wed Aug 2 14:12:23 UTC 2017</div><div class="line">Wed Aug 2 14:12:23 UTC 2017</div><div class="line">Wed Aug 2 14:12:23 UTC 2017</div><div class="line">Wed Aug 2 14:12:33 UTC 2017</div><div class="line">Wed Aug 2 14:12:33 UTC 2017</div><div class="line">Wed Aug 2 14:12:33 UTC 2017</div><div class="line">Wed Aug 2 14:12:43 UTC 2017</div><div class="line">-----------Arvon.top Loop End-------------</div><div class="line">Wed Aug 2 14:12:43 UTC 2017</div></pre></td></tr></table></figure>
</blockquote>
</li>
</ul>
<h3 id="实战小栗子"><a href="#实战小栗子" class="headerlink" title="实战小栗子"></a>实战小栗子</h3><ul>
<li><p>例子1：需要</p>
<blockquote>
<ul>
<li>本机上进行并行运行脚本</li>
<li>每次并行需要不同的配置文件</li>
</ul>
</blockquote>
<p><strong>代码如下：</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"></div><div class="line"><span class="comment"># cat server.csv | grep gid &gt; confd/</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `cat server.csv | egrep -v <span class="string">"gid"</span>`;<span class="keyword">do</span></div><div class="line">    sid=`<span class="built_in">echo</span> <span class="variable">$i</span> |awk -F<span class="string">','</span> <span class="string">'&#123;print $2&#125;'</span>`</div><div class="line">    cat server.csv | grep gid &gt; confd/<span class="variable">$&#123;sid&#125;</span>_server.csv</div><div class="line">    <span class="built_in">echo</span> <span class="variable">$i</span> &gt;&gt; confd/<span class="variable">$&#123;sid&#125;</span>_server.csv</div><div class="line">    &#123;</div><div class="line">    <span class="built_in">echo</span> <span class="string">"./tool_refresh_gs -save -config confd/<span class="variable">$&#123;sid&#125;</span>_server.csv  -out <span class="variable">$&#123;sid&#125;</span>"</span></div><div class="line">    <span class="comment">#./tool_refresh_gs -save -config confd/$&#123;sid&#125;_server.csv  -out $&#123;sid&#125;</span></div><div class="line">    &#125;&amp;</div><div class="line"><span class="keyword">done</span></div><div class="line"><span class="built_in">wait</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="不错的"><a href="#不错的" class="headerlink" title="不错的"></a>不错的</h3><p><a href="http://blog.csdn.net/spch2008/article/details/51433353" target="_blank" rel="external">写的很不错</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Rsync服务安装配置记录]]></title>
      <url>http://arvon.top/2017/07/24/Rsync%E6%9C%8D%E5%8A%A1%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<p>关于RSYNC，个人理解传送大量资源文件或较多小文件时适合使用传输，具有数据验证、断点续传、增量传输、差异传输等特性。优于scp及ftp等工具。</p>
<blockquote>
<p>rsync是unix/linux下同步文件的一个高效算法，它能同步更新两处计算机的文件与目录，并适当利用查找文件中的不同块以减少数据传输。rsync中一项与其他大部分类似程序或协定中所未见的重要特性是镜像是只对有变更的部分进行传送。rsync可拷贝／显示目录属性，以及拷贝文件，并可选择性的压缩以及递归拷贝。rsync利用由Andrew Tridgell发明的算法…                                                           </p>
<p>摘自<a href="http://coolshell.cn/articles/7425.html" target="_blank" rel="external">Rsync的核心算法</a></p>
</blockquote>
<a id="more"></a>
<h3 id="服务器端"><a href="#服务器端" class="headerlink" title="服务器端"></a>服务器端</h3><ul>
<li><p>安装服务</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">yum install xinetd -y</div><div class="line">yum install rsync -y</div><div class="line">mkdir /etc/rsyncd</div><div class="line">touch /etc/rsyncd/rsyncd.pwd</div><div class="line">chmod 600 /etc/rsyncd/rsyncd.pwd</div><div class="line"><span class="comment">#创建密码文件并更改权限</span></div><div class="line">touch /etc/rsyncd/rsyncd.motd</div><div class="line"><span class="built_in">echo</span> <span class="string">"---Hello It's Rsync---"</span> &gt; /etc/rsyncd/rsyncd.motd</div><div class="line"><span class="comment">#创建欢迎信息</span></div><div class="line">touch /etc/rsyncd/rsyncd.conf</div><div class="line"><span class="comment">#创建配置文件</span></div></pre></td></tr></table></figure>
</li>
<li><p>配置文件实例</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#vim /etc/rsyncd/rsyncd.conf</span></div><div class="line">pid file = /var/run/rsyncd.pid</div><div class="line">port = 873</div><div class="line"><span class="comment">#address = 192.168.1.11 #监听地址，可不填</span></div><div class="line">uid = root</div><div class="line">gid = root</div><div class="line"><span class="comment">#为避免权限问题，此处使用root，此用户操作的是xinted</span></div><div class="line">use chroot = yes</div><div class="line"><span class="built_in">read</span> only = no</div><div class="line"><span class="comment">#只读选择，只让客户端从服务器上读取文件</span></div><div class="line"><span class="comment">#write only = yes #只写选择，只让客户端到服务器上写入</span></div><div class="line">hosts allow = xxxxxxxx/24</div><div class="line">max connections = 5</div><div class="line">motd file = /etc/rsyncd/rsyncd.motd</div><div class="line"><span class="built_in">log</span> file = /var/<span class="built_in">log</span>/rsync.log</div><div class="line">transfer logging = yes</div><div class="line"><span class="built_in">log</span> format = %t %a %m %f %b</div><div class="line">syslog facility = <span class="built_in">local</span>3</div><div class="line">timeout = 0</div><div class="line"><span class="comment"># 设置为0为无限制，简易为600</span></div><div class="line"><span class="comment">#----Mode rsync---</span></div><div class="line">[binlogshome]</div><div class="line">path = /data/bilogs_S3_haiwai/userinfo_guildinfo_zip/</div><div class="line">list = no</div><div class="line"><span class="comment">#当查看服务器上提供了哪些目录时是否列出来，no比较安全</span></div><div class="line">ignore errors</div><div class="line"><span class="comment">#忽略I/O错误</span></div><div class="line">secrets file = /etc/rsyncd/rsyncd.pwd</div><div class="line"><span class="comment">#exclude = error_log httpd.pid #忽略的文件或目录</span></div><div class="line"><span class="comment">#comment this is my log #本模块注释</span></div></pre></td></tr></table></figure>
</li>
<li><p>编辑密码文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#vim /etc/rsyncd/rsyncd.pwd</span></div><div class="line">arvon123:A35q3FhoXTJ4FRMqm</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="启动Rsync服务"><a href="#启动Rsync服务" class="headerlink" title="启动Rsync服务"></a>启动Rsync服务</h3><ul>
<li><p>命令行启动</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/bin/rsync --daemon --config=/etc/rsyncd/rsyncd.conf</div></pre></td></tr></table></figure>
</li>
<li><p>xinetd方式启动</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#vim /etc/xinetd.d/rsync</span></div><div class="line"><span class="comment">#service rsync</span></div><div class="line"><span class="comment">#&#123;</span></div><div class="line"><span class="comment">#        disable = no</span></div><div class="line"><span class="comment">#        socket_type     = stream</span></div><div class="line"><span class="comment">#        wait            = no</span></div><div class="line"><span class="comment">#        user            = root</span></div><div class="line"><span class="comment">#        server          = /usr/bin/rsync</span></div><div class="line"><span class="comment">#        server_args     = --daemon</span></div><div class="line"><span class="comment">#        log_on_failure  += USERID</span></div><div class="line"><span class="comment">#&#125;</span></div><div class="line">ln <span class="_">-s</span> /etc/rsyncd/rsyncd.conf /etc/rsyncd.conf</div><div class="line"><span class="comment">#xinted 默认会去/etc下查找配置，所以做个软链就可以了</span></div><div class="line">/etc/init.d/xinted start</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="客服端命令"><a href="#客服端命令" class="headerlink" title="客服端命令"></a>客服端命令</h3><ul>
<li>安装rsync命令</li>
<li><p>设置密码文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">echo</span> <span class="string">"A35q3FhoXTJ4FRMqm"</span> &gt;/etc/rsync.password</div></pre></td></tr></table></figure>
</li>
<li><p>同步命令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rsync -avzP arvon123@xxxxxx::binlogshome /data/bilogs_S3_haiwai/ --password-file=/etc/rsync.password</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="常用优化相关"><a href="#常用优化相关" class="headerlink" title="常用优化相关"></a>常用优化相关</h3><ul>
<li>传输大量备份文件<blockquote>
<p>半夜花了一个多小时查看了rsync的文档，发现有一个参数能快速恢复大文件的增量同步，–append。设置–append参数会在增量同步时计算文件大小并直接追加新的数据到文件，这样就省了费IO校验的过程。不过这个参数最好只在源文件和目标文件都不会更改的时候使用比较安全，比如备份的文件。</p>
</blockquote>
</li>
<li>使源目录保存较少文件<blockquote>
<p>这是一个传统优化办法，因为rsync虽然是同步所有文件，但和同步最近更新的文件是一个道理，因此将源服务器上的目录删除，仅仅保持最近更新的文件，文件数量就变得不但很少，而且是稳定的，随着时间推移，这数量也不会涨得很快。但这样做有个缺点，就是rsync不能使用删除模式，如果有文件要删除，可以将其弄成空文件，假如有更严格要求，可以另一个程序来删除。</p>
</blockquote>
</li>
</ul>
<h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><p><a href="http://man.linuxde.net/rsync" target="_blank" rel="external">关于rsync命令</a><br><a href="http://www.cnblogs.com/JohnABC/p/6203524.html" target="_blank" rel="external">John_ABC的博客</a><br><a href="http://blog.csdn.net/onlyForCloud/article/details/46971101" target="_blank" rel="external">传输优化相关</a><br><a href="http://kkkkkk.blog.51cto.com/468162/1194202" target="_blank" rel="external">常见错误处理</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[弱网终端替代工具Mosh]]></title>
      <url>http://arvon.top/2017/07/17/%E5%BC%B1%E7%BD%91%E7%BB%88%E7%AB%AF%E6%9B%BF%E4%BB%A3%E5%B7%A5%E5%85%B7Mosh/</url>
      <content type="html"><![CDATA[<p><strong>应用背景：</strong>当有海外服务器维护需求的时候，常常会遇到使用ssh终端延时高并经常性假死的情况，非常影响维护效率。然后一个能缓解延时假死的小工具就是十分有用的，Mosh正是这样一个工具。Mosh是一个用于从客户端跨互联网连接远程服务器的命令行工具，程序最初由Keith Winstein 编写，用于类Unix的操作系统中，发布于GNU GPL V3协议下，基于UDP方式进行数据传输。<br><a id="more"></a></p>
<p><strong>Mosh的优缺点：</strong></p>
<blockquote>
<p><strong>优点</strong>：<br>1.回话保持（会话的中断不会导致当前正在前端执行的命令中断；会话在中断过后，会自动在当前会话重新连接）<br>2.基本支持全平台（Linux、FreeBSD、Solaris、Mac OS X和Android）<br>3.切换网络/暂时断网后回话自动连接</p>
<p><strong>缺点</strong>：<br>1.需要开启额外UDP端口<br>2.在网络状况良好的状况下不宜使用<br>3.状态同步、维持心跳、协助预测的ACK包都增加了传输的数据量</p>
</blockquote>
<h3 id="Mosh-Server安装配置"><a href="#Mosh-Server安装配置" class="headerlink" title="Mosh Server安装配置"></a>Mosh Server安装配置</h3><p><strong>Tips：</strong>我的环境为aws的ec2，另外需要开放一些UDP端口，官方默认是让开60000-61000端口，生产环境下最好对端口进行更改</p>
<ul>
<li><p>安装环境依赖包</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install -y autoconf automake libtool curl  make g++ unzip  zlib zlib-devel ncurses-devel openssl-devel</div></pre></td></tr></table></figure>
</li>
<li><p>安装protobuf的依赖</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">wget https://github.com/google/protobuf/releases/download/v3.3.0/protobuf-cpp-3.3.0.tar.gz</div><div class="line">tar xvf protobuf-cpp-3.3.0.tar.gz</div><div class="line"><span class="built_in">cd</span> protobuf-cpp-3.3.0</div><div class="line"><span class="comment">#./configure --prefix=/usr/local/protobuf</span></div><div class="line">./configure – prefix=/usr – libdir=/usr/lib64</div><div class="line">make</div><div class="line">make check</div><div class="line">make install</div><div class="line"><span class="comment">#echo "/usr/local/protobuf/lib/" &gt;&gt; /etc/ld.so.conf</span></div><div class="line"><span class="comment">#ldconfig</span></div></pre></td></tr></table></figure>
</li>
<li><p>可能需要</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#export LD_LIBRARY_PATH=/usr/local/protobuf/lib/</span></div><div class="line"><span class="comment">#export LIBRARY_PATH=$LIBRARY_PATH:/usr/local/protobuf/lib/</span></div><div class="line"><span class="comment">#export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig</span></div></pre></td></tr></table></figure>
</li>
<li><p>安装mosh</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">wget https://mosh.org/mosh-1.3.0.tar.gz</div><div class="line">tar xvf mosh-1.3.0.tar.gz</div><div class="line"><span class="built_in">cd</span> mosh-1.3.0</div><div class="line">./autogen.sh</div><div class="line">./configure  --prefix=/usr/<span class="built_in">local</span>/mosh</div><div class="line">make</div><div class="line">make install</div><div class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/usr/<span class="built_in">local</span>/mosh/bin/</div></pre></td></tr></table></figure>
</li>
<li><p>启动mosh server</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 启动进程</span></div><div class="line">/usr/<span class="built_in">local</span>/bin/mosh-server</div><div class="line"><span class="comment">#要确保mosh-server在用户的PATH中，不然连接不上</span></div><div class="line"><span class="comment"># 查看进程是否正常</span></div><div class="line">ps axu | grep mosh</div><div class="line"><span class="comment">#Auser  1866  0.0  0.0 163172  5900 ?        S    02:33   0:00 mosh-server new -c 256 -s -l LANG=zh_CN.UTF-8</span></div><div class="line"><span class="comment">#Auser  2181  0.0  0.0 162612  5184 ?        S    03:25   0:00 mosh-server new -c 256 -s -l LANG=zh_CN.UTF-8</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Mosh-Clinet安装配置"><a href="#Mosh-Clinet安装配置" class="headerlink" title="Mosh Clinet安装配置"></a>Mosh Clinet安装配置</h3><p>支持全平台，我这是mac系统，所以就只写了mac的，如有需要在<a href="https://mosh.org/#getting" target="_blank" rel="external">官方文档处</a>进行查看，做对应的安装</p>
<ul>
<li><p>MacOS客户端</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install mobile-shell</div></pre></td></tr></table></figure>
</li>
<li><p>使用mosh连接服务器</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#我这里是先将本地的公钥写到要连接服务器的authorized_keys文件中</span></div><div class="line">/usr/<span class="built_in">local</span>/bin/mosh  --ssh=<span class="string">"ssh -p 7777 "</span> Auser@arvon.top</div><div class="line"><span class="comment">#我这里由于ssh的默认端口更改了，所以需要指定端口7777</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="https://mosh.org/#getting" target="_blank" rel="external">Mosh官方介绍</a><br><a href="https://github.com/mobile-shell/mosh" target="_blank" rel="external">Github项目Mosh</a><br><a href="https://www.binss.me/blog/using-mosh-to-solve-ssh-delay-problem/" target="_blank" rel="external">BINSITE的blog</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Nginx添加登录认证]]></title>
      <url>http://arvon.top/2017/07/16/Nginx%E6%B7%BB%E5%8A%A0%E7%99%BB%E5%BD%95%E8%AE%A4%E8%AF%81/</url>
      <content type="html"><![CDATA[<p>之前在爆Zabbix漏洞的时候，在未进行漏洞升级修复的情况下，可以先对nginx的web入口加一个认证，这样就能很大程度上降低被黑的风险。同理在使用Nginx代理一些服务的时候，也可以用这种方法进行安全上的加固。做起来比较简单，却行之有效。Nginx上一般使用的认证方式有2种，分别是auth_basic（本机认证）及ngx_http_auth_request_module（第三方认证）<br><a id="more"></a></p>
<h3 id="auth-basic-本机认证-配置"><a href="#auth-basic-本机认证-配置" class="headerlink" title="auth_basic(本机认证)配置"></a>auth_basic(本机认证)配置</h3><ul>
<li><p>如给web服务设置代理nginx配置文件如下</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">        listen       7777;</div><div class="line">        server_name  127.0.0.1;</div><div class="line">        auth_basic <span class="string">"test-web"</span>;</div><div class="line">        auth_basic_user_file /usr/<span class="built_in">local</span>/nginx/testweb.db;</div><div class="line">        location / &#123;</div><div class="line">                   proxy_pass http://11.11.11.5:80;</div><div class="line">                   proxy_set_header Host <span class="variable">$host</span>:<span class="variable">$server_port</span>;</div><div class="line">                   proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</div><div class="line">                   proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</div><div class="line">                   proxy_redirect off;</div><div class="line">          &#125;       <span class="comment">#charset koi8-r;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>创建登录密码文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#可以使用htpasswd，或者使用openssl</span></div><div class="line"> <span class="built_in">printf</span> <span class="string">"taiyouxi:<span class="variable">$(openssl passwd -crypt YourPassword)</span>\n"</span> &gt;/usr/<span class="built_in">local</span>/nginx/testweb.db</div></pre></td></tr></table></figure>
</li>
<li><p>设置说明：</p>
<blockquote>
<p>–<strong>开启认证</strong>–<br>默认值:     auth_basic off;<br>语法:     auth_basic string | off;<br>如使用auth_basic “test-web”;会在弹窗上显示test-web的字样<br>–<strong>密码文件说明</strong>–<br>语法:     auth_basic_user_file file;<br>配置段:     http, server, location, limit_except</p>
</blockquote>
</li>
</ul>
<h3 id="ngx-http-auth-request-module（第三方认证）配置"><a href="#ngx-http-auth-request-module（第三方认证）配置" class="headerlink" title="ngx_http_auth_request_module（第三方认证）配置"></a>ngx_http_auth_request_module（第三方认证）配置</h3><p>由于这个模块并不属于内置模块，默认使用yum安装是不会带这个模块的，可以下载源码重新带上这个模块编译安装。</p>
<ul>
<li><p>原yum默认编译参数查看</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@ip-10-222-0-85 nginx]<span class="comment"># nginx -V</span></div><div class="line"><span class="comment">#结果太多不贴了，就是没有所需的这个模块，所以就再编一个测试</span></div></pre></td></tr></table></figure>
</li>
<li><p>先源码安装nginx</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">yum -y install gcc gcc-c++ make libtool zlib zlib-devel openssl openssl-devel pcre pcre-devel</div><div class="line">wget http://nginx.org/download/nginx-1.10.3.tar.gz</div><div class="line">tar xvf  nginx-1.10.3.tar.gz</div><div class="line">git <span class="built_in">clone</span> git://github.com/perusio/nginx-auth-request-module.git</div><div class="line"><span class="built_in">cd</span> nginx-1.10.3</div><div class="line">./configure --prefix=/usr/<span class="built_in">local</span>/nginx --add-module=../nginx-auth-request-module</div><div class="line">make</div><div class="line">make install</div></pre></td></tr></table></figure>
</li>
<li><p>测试代码</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">        listen       20010;</div><div class="line">        server_name  127.0.0.1;</div><div class="line">        location / &#123;</div><div class="line">            auth_request /auth;</div><div class="line">            proxy_pass http://127.0.0.1:80;</div><div class="line">            proxy_set_header Host <span class="variable">$host</span>:<span class="variable">$server_port</span>;</div><div class="line">            proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</div><div class="line">            proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</div><div class="line">            proxy_redirect off;</div><div class="line">            <span class="comment">#charset koi8-r;</span></div><div class="line">        &#125;</div><div class="line">        location = /auth &#123;</div><div class="line">            proxy_pass http://127.0.0.1:80/passwd/HttpBasicAuthenticate.php;</div><div class="line">            proxy_pass_request_body off;</div><div class="line">            proxy_set_header Content-Length <span class="string">""</span>;</div><div class="line">            proxy_set_header X-Original-URI <span class="variable">$request_uri</span>;</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>php认证代码</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#vim html/passwd/HttpBasicAuthenticate.php</span></div><div class="line">&lt;?php</div><div class="line"></div><div class="line"><span class="keyword">if</span>(isset(<span class="variable">$_SERVER</span>[<span class="string">'PHP_AUTH_USER'</span>], <span class="variable">$_SERVER</span>[<span class="string">'PHP_AUTH_PW'</span>]))&#123;</div><div class="line">    <span class="variable">$username</span> = <span class="variable">$_SERVER</span>[<span class="string">'PHP_AUTH_USER'</span>];</div><div class="line">    <span class="variable">$password</span> = <span class="variable">$_SERVER</span>[<span class="string">'PHP_AUTH_PW'</span>];</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (<span class="variable">$username</span> == <span class="string">'wang'</span> &amp;&amp; <span class="variable">$password</span> == <span class="string">'123456'</span>)&#123;</div><div class="line">        <span class="built_in">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">header(<span class="string">'WWW-Authenticate: Basic realm="Git Server"'</span>);</div><div class="line">header(<span class="string">'HTTP/1.0 401 Unauthorized'</span>);</div><div class="line"></div><div class="line">?&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>说明</p>
<blockquote>
<p>用户访问server 弹出框中输入的用户名、密码保存在 $_SERVER 变量中<br>中间 if 段，只做演示用实际中应该是拿用户输入的用户名、密码跟数据库中的数据做比较<br>参考：<a href="http://www.cnblogs.com/wangxiaoqiangs/p/6184181.html" target="_blank" rel="external">http://www.cnblogs.com/wangxiaoqiangs/p/6184181.html</a></p>
</blockquote>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[AWS-cli操作S3及DynamoDB]]></title>
      <url>http://arvon.top/2017/07/08/AWS-cli%E6%93%8D%E4%BD%9CS3%E5%8F%8ADynamoDB/</url>
      <content type="html"><![CDATA[<blockquote>
<p>AWS的cli还是挺好用的，文档也比较全面，其实看个文档就可以使用，但是我毕竟是我，记下来，减少查询搜索的时间也是挺赚的，不是么。。话说“懒人使世界进步”，其实有个很重要的前提就是你这个懒人做出了可以帮你出色完成原定任务的东西，这时你才有资格懒。很显然，我没有。。。But我一直在实现这个前提的路上前进</p>
</blockquote>
<a id="more"></a>
<h4 id="S3操作"><a href="#S3操作" class="headerlink" title="S3操作"></a>S3操作</h4><p><strong>Tips：</strong>官方文档<a href="http://docs.aws.amazon.com/cli/latest/reference/s3/index.html" target="_blank" rel="external">看这里</a>，好吧，中文<a href="http://docs.aws.amazon.com/zh_cn/AmazonS3/latest/dev/delete-or-empty-bucket.html#delete-bucket" target="_blank" rel="external">看这里</a></p>
<ul>
<li><p>创建bucket</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">aws s3 mb s3://arvon-test-bucket1</div></pre></td></tr></table></figure>
</li>
<li><p>上传文件到bucket</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#上传文件</span></div><div class="line">aws s3 cp README.md  s3://arvon-test-bucket1/</div><div class="line"><span class="comment">#上传目录</span></div><div class="line">aws s3 cp files  s3://arvon-test-bucket1/files --recursive</div></pre></td></tr></table></figure>
</li>
<li><p>删除文件或目录</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#删除文件</span></div><div class="line">aws s3 rm s3://arvon-test-bucket1/README.md</div><div class="line"><span class="comment">#删除目录</span></div><div class="line">aws s3 rm s3://arvon-test-bucket1/files --recursive</div></pre></td></tr></table></figure>
</li>
<li><p>下载文件或目录</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#下载文件</span></div><div class="line">aws s3 cp s3://arvon-test-bucket1/README.md  ./</div><div class="line"><span class="comment">#下载目录</span></div><div class="line">aws --region ap-southeast-1 s3 cp s3://arvon-test-bucket1 ./  --recursive</div></pre></td></tr></table></figure>
</li>
<li><p>删除bucket</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#删除空bucket</span></div><div class="line">aws s3 rb s3://arvon-test-bucket1</div><div class="line"><span class="comment">#删除非空bucket</span></div><div class="line">aws s3 rb s3://arvon-test-bucket1 --force</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="DynamoDB操作"><a href="#DynamoDB操作" class="headerlink" title="DynamoDB操作"></a>DynamoDB操作</h4><p><strong>Tips:</strong>官方文档<a href="http://docs.aws.amazon.com/cli/latest/reference/dynamodb/index.html" target="_blank" rel="external">看这里</a>,为了方便自己记忆就动手实践一遍，顺便记录一下，当然还有<a href="http://docs.aws.amazon.com/zh_cn/amazondynamodb/latest/developerguide/Tools.CLI.html" target="_blank" rel="external">国语版</a></p>
<blockquote>
<p>啰嗦几个点<br>1）创建含排序键的表示，指定key-schema时一定是先指定HASH这个类型再指定RANGE这个，不然一定报错<br>2）如需修改读写容量修改命令最后的provisioned-throughput下面对应值即可<br>3）就是需要提前设置连接服务器的环境变量如key及region，不然需命令行指定</p>
</blockquote>
<ul>
<li><p>创建dynamoDB表<br>创建表<strong>含排序键</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">aws dynamodb create-table --table-name Arvon-test1 --attribute-definitions AttributeName=ArvonMeID,AttributeType=S AttributeName=moid,AttributeType=S --key-schema AttributeName=ArvonMeID,KeyType=HASH AttributeName=moid,KeyType=RANGE --provisioned-throughput ReadCapacityUnits=5,WriteCapacityUnits=5</div></pre></td></tr></table></figure>
<p>创建表<strong>不含排序建</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">aws dynamodb create-table --table-name Arvon-test2 --attribute-definitions  AttributeName=Hello,AttributeType=S  --key-schema  AttributeName=Hello,KeyType=HASH  --provisioned-throughput ReadCapacityUnits=5,WriteCapacityUnits=5</div></pre></td></tr></table></figure>
</li>
<li><p>删除dynamo表</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">aws dynamodb delete-table --table-name Arvon-test1</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://aws.amazon.com/cn/documentation/" target="_blank" rel="external">官方就是好用</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[记ARDB频繁崩溃错误]]></title>
      <url>http://arvon.top/2017/07/07/%E8%AE%B0ARDB%E9%A2%91%E7%B9%81%E5%B4%A9%E6%BA%83%E9%94%99%E8%AF%AF/</url>
      <content type="html"><![CDATA[<p><strong>背景：</strong>在业务规模对db没有高需求的情况下使用redis存储其实是有些浪费的，毕竟内存要比磁盘贵很多。这也就是我们要把部分db从redis迁移到ardb的原因，虽然在上线之前已经做了内网测试以及线上部分db替换测试，但是并未触发ardb的这个bug，其中线上测试了30d，现在分析看来，应该是因为线上替换的这个db压力不高，用户基数小。记录一下，关于ardb可以<a href="https://github.com/yinqiwen/ardb" target="_blank" rel="external">看这里</a><br><a id="more"></a></p>
<h4 id="从崩溃到崩溃"><a href="#从崩溃到崩溃" class="headerlink" title="从崩溃到崩溃"></a>从崩溃到崩溃</h4><ul>
<li>现象：<br>直接dwon掉，ardb的log没有记录</li>
<li>系统日志：<br><strong>在/var/log/message</strong>中有如下日志<blockquote>
<p>kernel: [20758288.642227] rocksdb:bg7[25004]: segfault at 7f370d206e7e ip 0000000000578f46 sp 00007f370fbfde90 error 6 in ardb-server[400000+423000]</p>
</blockquote>
</li>
<li><p>addr2排查：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@ip-10-33-4-xx ardb-0.9.4]<span class="comment"># addr2line -e ./src/ardb-server 0000000000578f46</span></div><div class="line">/opt/ardb/ardb-0.9.4/src/db/rocksdb/rocksdb_engine.cpp:222</div></pre></td></tr></table></figure>
</li>
<li><p>撸源码报错段</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (n &gt; 0 &amp;&amp; NULL != buffer)</div><div class="line">&#123;</div><div class="line">    buffer[n] = 0;</div><div class="line">    LOG_WITH_LEVEL(level, <span class="string">"[RocksDB]%s"</span>, buffer);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>撸代码修改为（rocksdb_engine.cpp:222修改源代码中这个文件的222行）<br><strong>说明：</strong>这个代码经经沟通是一个临界问题，在win下和Linux下表现是不一样的，截取字符串存在问题，下面给出的是修复代码。因我并不懂C++所以理解有限，欢迎更正补充。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (n &gt; 0)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (n &gt;= buf_len)</div><div class="line">    &#123;</div><div class="line">        buffer[buf_len-1] = 0;</div><div class="line">        LOG_WITH_LEVEL(level, <span class="string">"[RocksDB]%s"</span>, buffer);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        buffer[n] = 0;</div><div class="line">        LOG_WITH_LEVEL(level, <span class="string">"[RocksDB]%s"</span>, buffer);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>总结<br>这里我个人说三点对于更换DB的注意事项</p>
<blockquote>
<p>1.数据备份，并需考虑备份数据对于前后DB的可用性，如Redis的备份数据ARDB是否可用，是否备份还原策略可以准确顺利<br>2.对新DB的调研一定要充分。如系统平台、程序版本、底层依赖、bug反馈修复速率<br>3.新DB是否有大量的成功企业实践，实践企业反馈<br>4.回滚至原有DB方案制定、可行性实践及分析<br>5.新DB备份策略</p>
</blockquote>
</li>
</ul>
<h4 id="排查手段"><a href="#排查手段" class="headerlink" title="排查手段"></a>排查手段</h4><p>这里介绍一下Linux下的core dump机制</p>
<blockquote>
<p>1.什么是core dump<br>当程序运行的过程中异常终止或崩溃，操作系统会将程序当时的内存状态记录下来，保存在一个文件中，这种行为就叫做Core Dump（中文有的翻译成“核心转储”)。我们可以认为 core dump 是“内存快照”，但实际上，除了内存信息之外，还有些关键的程序运行状态也会同时 dump 下来，例如寄存器信息（包括程序指针、栈指针等）、内存管理信息、其他处理器和操作系统状态和信息。core dump 对于编程人员诊断和调试程序是非常有帮助的，因为对于有些程序错误是很难重现的，例如指针异常，而 core dump 文件可以再现程序出错时的情景。<br>2.如何产生core dump<br>参考这个吧<a href="http://www.cnblogs.com/hazir/p/linxu_core_dump.html" target="_blank" rel="external">http://www.cnblogs.com/hazir/p/linxu_core_dump.html</a><br>这个链接包含了详细信息，不过为了方便我还是在下面啰嗦一下</p>
</blockquote>
<ul>
<li><p>如何开启core dump</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#立即开启，重启后失效</span></div><div class="line"><span class="built_in">ulimit</span> -c unlimited</div><div class="line"><span class="comment">#修改配置，重启后生效</span></div><div class="line">vim /etc/security/limits.conf   <span class="comment">#添加如下行</span></div><div class="line">*          soft     core   unlimited</div></pre></td></tr></table></figure>
</li>
<li><p>如何查看调试core文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gdb core_demo core_demo.core.24816</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<p>以上，换DB事情蛮大的，还是要慎重再慎重，表示线上频繁崩溃很绝望，记录一下引以为戒。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[open-falcon业务监控实践]]></title>
      <url>http://arvon.top/2017/07/06/open-falcon%E4%B8%9A%E5%8A%A1%E7%9B%91%E6%8E%A7%E5%AE%9E%E8%B7%B5/</url>
      <content type="html"><![CDATA[<p>上一篇已经写了falcon的基础安装配置以及简单的使用说明，现在来记录下一些业务相关的监控如何做，截图居多。心疼流量三秒…其实实现方法都不难，设计一个良好的命名规范以及科学的分组，实际上对监控来说是十分必要的。还有就是要对监控指标的判断做个性化设置，最好就是看图的话一眼就概览全局（要让图清晰直观的反应状况），报警的话做到真实有效人性化。这篇里面只涉及如何对常见服务进行配置。</p>
<blockquote>
<ol>
<li>对于基础监控：cpu、内存、IO、网络适合折线图；而磁盘使用量这些其实设置多维度报警即可（如磁盘使用率&gt;80%且小于20G报警）</li>
<li>对于服务和端口：监控出数字显示服务总数量，服务正常数量、服务异常数量，然后配置报警即可</li>
<li>对于业务监控：对业务指标使用折线图一般都是适用的</li>
</ol>
</blockquote>
<a id="more"></a>
<h3 id="监控自定义服务进程或端口"><a href="#监控自定义服务进程或端口" class="headerlink" title="监控自定义服务进程或端口"></a>监控自定义服务进程或端口</h3><p><strong>Tips：</strong>一般而言，对于某一服务仅监听服务或端口取其一即可，因为一般而言进程挂了端口自然也就down了，这两者是有直接关联的。但也分业务，具体看需求吧</p>
<h4 id="监控端口"><a href="#监控端口" class="headerlink" title="监控端口"></a>监控端口</h4><p><strong>Tips：</strong>端口监控，falcon现在的机制是配置完策略agent才会去采集这些信息。可参考<a href="https://book.open-falcon.org/zh_0_2/usage/proc-port-monitor.html" target="_blank" rel="external">官网说明</a></p>
<ul>
<li>设置端口监控模板<br><img src="http://img.arvon.top:80/images/2019/08/12/20170704-falconuse-1.jpg" alt="falconuse-1"></li>
<li>模板关联至主机组</li>
<li>然后就可以收到报警信息了(这里为测试方便监控了Mysql的3306端口，有值就报警)<br><img src="http://img.arvon.top:80/images/2019/08/12/20170704-falconuse-2.jpg" alt="falconuse-2"></li>
</ul>
<h4 id="监控服务"><a href="#监控服务" class="headerlink" title="监控服务"></a>监控服务</h4><p><strong>Tips：</strong>官方给出两种方案，一种取/proc/$pid/status这里面的name字段，另一种取/proc/$pid/cmdline里的name字段，这里拿mysql举例，个人推荐cmdline，因为name字段很容易重复</p>
<ul>
<li><p>获取两个字段</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">  ps axu | grep mysql</div><div class="line">  <span class="comment">#root      5465  0.0  0.0 113176  1600 ?        S    May18   0:00 /bin/sh /usr/libexec/mysql55/mysqld_safe --datadir=/var/lib/mysql --socket=/var/lib/mysql/mysql.sock --pid-file=/var/run/mysqld/mysqld.pid --basedir=/usr --user=mysql</span></div><div class="line"><span class="comment">#mysql     5658  0.0  1.2 1336076 101032 ?      Sl   May18  27:08 /usr/libexec/mysql55/mysqld --basedir=/usr --datadir=/var/lib/mysql --plugin-dir=/usr/lib64/mysql/plugin --user=mysql --log-error=/var/log/mysqld.log --pid-file=/var/run/mysqld/mysqld.pid --socket=/var/lib/mysql/mysql.sock</span></div><div class="line"><span class="comment">#tai_ops  28522  0.0  0.0 110408   868 pts/0    S+   03:04   0:00 grep mysql</span></div><div class="line">  cat /proc/5465/status  | grep -i name</div><div class="line">  <span class="comment">#Name:	mysqld_safe</span></div><div class="line">  cat /proc/5465/cmdline</div><div class="line">  <span class="comment">#/bin/sh/usr/libexec/mysql55/mysqld_safe--datadir=/var/lib/mysql--socket=/var/lib/mysql/mysql.sock--pid-file=/var/run/mysqld/mysqld.pid--basedir=/usr--user=mysql</span></div><div class="line">  cat /proc/5658/status | grep -i name</div><div class="line">  <span class="comment">#Name:	mysqld</span></div><div class="line">  cat /proc/5658/cmdline</div><div class="line">  <span class="comment">#/usr/libexec/mysql55/mysqld--basedir=/usr--datadir=/var/lib/mysql--plugin-dir=/usr/lib64/mysql/plugin--user=mysql--log-error=/var/log/mysqld.log--pid-file=/var/run/mysqld/m</span></div></pre></td></tr></table></figure>
</li>
<li><p>Dashboard上模板配置<br><img src="http://img.arvon.top:80/images/2019/08/12/20170704-falconuse-3.jpg" alt="falconuse-3"></p>
</li>
<li>报警如下<br><strong>注意：</strong>我测试的host组有3台机器，其中一台是没有mysql的，所以检测不到进程所以就报警了，从这也可以看出，falcon默认是不收集这些数据的，当你写上规则之后它会按这个规则进行抓取不管有没有这个服务，只要你配置了规则，就按这个规则去取数据，取不到或取到报警阈值都会报警<br><img src="http://img.arvon.top:80/images/2019/08/12/20170704-falconuse-4.jpg" alt="falconuse-4"></li>
</ul>
<h3 id="常用服务监控"><a href="#常用服务监控" class="headerlink" title="常用服务监控"></a>常用服务监控</h3><p>Tips：常用服务监控除了官方提供的一些方案也可以自己往transfer接口post自定义的监控数据，不过个人感觉使用crontab的方式收集数据还是挺僵硬的</p>
<h4 id="Redis监控-Ardb监控"><a href="#Redis监控-Ardb监控" class="headerlink" title="Redis监控/Ardb监控"></a>Redis监控/Ardb监控</h4><p>官方提供了<a href="https://book.open-falcon.org/zh_0_2/usage/redis.html" target="_blank" rel="external">两种方案</a>，都在github开源,由于第二种方案目前还不支持redis3.2.0，所以我使用第一种。实际上就是连接到redis然后获取一些redis的info信息，然后用固定的数据格式post给falcon，ardb与redis监控基本相同。</p>
<ul>
<li><p>获取监控脚本<br>需要<strong>特别注意</strong>脚本中redis-cli的命令路径，我就折在这里了</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> https://github.com/iambocai/falcon-monit-scripts.git</div><div class="line">ll /data/falcon_scripts/falcon-monit-scripts/redis/redis-monitor.py</div><div class="line"><span class="comment">#vim redis-monitor.py  修改脚本，主要该host、port、redis-cli的路径</span></div><div class="line"><span class="comment">#设置crontab -e</span></div><div class="line"><span class="comment">#* * * * * python /opt/falcon-agent/scripts/falcon-monit-scripts/redis/redis-monitor.py</span></div></pre></td></tr></table></figure>
</li>
<li><p>web配置如下<br><img src="http://img.arvon.top:80/images/2019/08/12/20170704-falconuse-5.jpg" alt="5"></p>
</li>
<li>出图如下<br><img src="http://img.arvon.top:80/images/2019/08/12/20170704-falconuse-6.jpg" alt="6"></li>
</ul>
<h4 id="Mysql监控"><a href="#Mysql监控" class="headerlink" title="Mysql监控"></a>Mysql监控</h4><p>由于小米官方给出的方案是需要go环境进行的编译的，所以就直接在falcon的server机器上进行编译，然后拿编译的包对mysql机器进行分发部署</p>
<ul>
<li><p>下载并编译监控mysql的脚本源码<br>这里监控连接数据库的用户<strong>必须是root</strong>不然会access deney</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> <span class="variable">$GOPATH</span>/src/github.com/open-falcon</div><div class="line">git <span class="built_in">clone</span> https://github.com/open-falcon/mymon.git</div><div class="line"><span class="built_in">cd</span> mymon</div><div class="line">go get ./...</div><div class="line">go build -o mymon</div><div class="line"><span class="comment">#crontab设置 crontab -e 或直接写配置</span></div><div class="line"><span class="comment">#* * * * * cd $GOPATH/src/github.com/open-falcon/mymon &amp;&amp; ./mymon -c etc/mon.cfg</span></div><div class="line"><span class="comment">#echo '* * * * * cd $GOPATH/src/github.com/open-falcon/mymon &amp;&amp; ./mymon -c etc/mon.cfg' &gt; /etc/cron.d/mymon</span></div><div class="line">tar czvf mysql_monitor.tar.gz mymon etc/</div><div class="line"><span class="comment">#然后去部署这个tar包即可</span></div></pre></td></tr></table></figure>
</li>
<li><p>调试正常后log输出<br>具体监控项、tag等信息都可以通过日志获得，安装文档中有队metric的汇总表</p>
<blockquote>
<p>…<br>{“level”:”debug”,”msg”:”MetaData Metric:Innodb_mutex_spin_waits Endpoint:ip-10-222-0-63 Value:302 CounterType:COUNTER Tags:port=3306 Timestamp:1499389081 Step:60”,”time”:”2017-07-07T00:58:01Z”}<br>{“level”:”debug”,”msg”:”MetaData Metric:Innodb_mutex_spin_rounds Endpoint:ip-10-222-0-63 Value:1780 CounterType:COUNTER Tags:port=3306 Timestamp:1499389081 Step:60”,”time”:”2017-07-07T00:58:01Z”}<br>{“level”:”debug”,”msg”:”MetaData Metric:Innodb_mutex_os_waits Endpoint:ip-10-222-0-63 Value:42 CounterType:COUNTER Tags:port=3306 Timestamp:1499389081 Step:60”,”time”:”2017-07-07T00:58:01Z”}<br>{“level”:”debug”,”msg”:”MetaData Metric:Is_slave Endpoint:ip-10-222-0-63 Value:0 CounterType:GAUGE Tags:port=3306 Timestamp:1499389081 Step:60”,”time”:”2017-07-07T00:58:01Z”}<br>{“level”:”info”,”msg”:”Send response 127.0.0.1:3306: success”,”time”:”2017-07-07T00:58:01Z”}<br>{“level”:”debug”,”msg”:”Send to <a href="http://10.222.0.44:1988/v1/push" target="_blank" rel="external">http://10.222.0.44:1988/v1/push</a>, size: 1”,”time”:”2017-07-07T00:58:01Z”}<br>{“level”:”debug”,”msg”:”MetaData Metric:mysql_alive_local Endpoint:ip-10-222-0-63 Value:1 CounterType:GAUGE Tags:port=3306 Timestamp:1499389081 Step:60”,”time”:”2017-07-07T00:58:01Z”}<br>{“level”:”info”,”msg”:”Alive data response 127.0.0.1:3306: success”,”time”:”2017-07-07T00:58:01Z”}</p>
</blockquote>
</li>
<li>Web配置举例<br><img src="http://img.arvon.top:80/images/2019/08/12/20170704-falconuse-7.jpg" alt="7"></li>
<li>出图如下<br><img src="http://img.arvon.top:80/images/2019/08/12/20170704-falconuse-8.jpg" alt="8"></li>
</ul>
<h4 id="nginx监控"><a href="#nginx监控" class="headerlink" title="nginx监控"></a>nginx监控</h4><p>这个目前没什么需求，就直接先参考<a href="https://github.com/GuyCheung/falcon-ngx_metric" target="_blank" rel="external">小米给出的方案</a>吧,其实都大同小异，有需求的话之后可能会自己写一些业务方面的监控脚本。到时候再共享</p>
<h3 id="关于排错"><a href="#关于排错" class="headerlink" title="关于排错"></a>关于排错</h3><ul>
<li>绘图数据流向及验证<blockquote>
<p>agent-&gt;transfer-&gt;graph-&gt;query-&gt;dashboard<br><strong>可以从 </strong>graph** 的http接口进行验证</p>
</blockquote>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[open-falcon安装部署记录]]></title>
      <url>http://arvon.top/2017/06/29/open-falcon%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<p>监控对运维来说是相当重要的，现在来说falcon确实相对zabbix有一定优势，不过也存在明显短板，优势是架构设计以及一些设计思路很好，就单说模板继承，这个相对zabbix就很有优势，毕竟是已经有了前人的经验，小米之前也是用的zabbix，所以大众常见的zabbix痛点在falcon上基本得到了改善，但falcon的UI真是很难受啊，不过毕竟火起来还不久，又是一个互联网领头企业开源的项目，还是很有前景的，不妨尝试一下，现在只是基本搭建完成，TAG系统和表达式这些还没开始尝试，最近应该还会了解这个，以下是安装配置及简单调试使用过程。<br><a id="more"></a></p>
<h3 id="架构图-来自小米官方-及组件说明"><a href="#架构图-来自小米官方-及组件说明" class="headerlink" title="架构图(来自小米官方)及组件说明"></a>架构图(来自小米官方)及组件说明</h3><p><img src="http://img.arvon.top:80/images/2019/08/12/20170628-openfalcon-4.png" alt="jiagou-4"></p>
<blockquote>
<p><strong>Agent: </strong>部署在目标机器采集机器监控项<br><strong>Transfer： </strong>数据接收端，转发数据到后端Graph和Judge<br><strong>Graph：</strong> 操作rrd文件，存储监控数据<br><strong>Query：</strong>查询各个Graph数据，提供统一http查询接口<br><strong>Dashboard： </strong>查询监控历史趋势图的web端<br><strong>Alarm：</strong>主要负责告警<br><strong>Task： </strong>负责一些定时任务，索引全量更新，垃圾索引清理，自身组件监控</p>
</blockquote>
<h3 id="安装搭建"><a href="#安装搭建" class="headerlink" title="安装搭建"></a>安装搭建</h3><h4 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h4><p><strong>我的版本环境：</strong></p>
<blockquote>
<p><strong>version:</strong> Amazon 2015.03<br><strong>Type:</strong> t2.large<br><strong>Git version:</strong> 2.7.5  (need &gt;= 1.7.5)<br><strong>GO version:</strong> 1.8.3 (need &gt;= 1.6)</p>
</blockquote>
<ul>
<li><p>安装环境</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">yum install -y redis</div><div class="line">yum install -y mysql-server</div><div class="line">yum install -y git</div></pre></td></tr></table></figure>
</li>
<li><p>安装go环境</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> HOME=/home/tai_ops</div><div class="line"><span class="built_in">export</span> WORKSPACE=<span class="variable">$HOME</span>/open-falcon</div><div class="line">go_pkg=<span class="string">'go1.8.3.linux-amd64.tar.gz'</span></div><div class="line"><span class="built_in">cd</span> <span class="variable">$HOME</span></div><div class="line"><span class="built_in">echo</span> <span class="variable">$HOME</span></div><div class="line"><span class="comment">#wget http://dinp.qiniudn.com/go1.4.1.linux-amd64.tar.gz</span></div><div class="line"><span class="comment">#wget https://storage.googleapis.com/golang/$&#123;go_pkg&#125;</span></div><div class="line">tar zxf <span class="variable">$&#123;go_pkg&#125;</span></div><div class="line">mkdir -p <span class="variable">$&#123;WORKSPACE&#125;</span>/src</div><div class="line"><span class="built_in">echo</span> <span class="string">""</span> &gt;&gt; .bashrc</div><div class="line"><span class="built_in">echo</span> <span class="string">'export GOROOT=$HOME/go'</span> &gt;&gt; .bashrc</div><div class="line"><span class="built_in">echo</span> <span class="string">'export GOPATH=$HOME/$&#123;WORKSPACE&#125;'</span> &gt;&gt; .bashrc</div><div class="line"><span class="built_in">echo</span> <span class="string">'export PATH=$GOROOT/bin:$GOPATH/bin:$PATH'</span> &gt;&gt; .bashrc</div><div class="line"><span class="built_in">echo</span> <span class="string">""</span> &gt;&gt; .bashrc</div><div class="line"><span class="built_in">source</span> .bashrc</div></pre></td></tr></table></figure>
</li>
<li><p>下载源码</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mkdir -p <span class="variable">$GOPATH</span>/src/github.com/open-falcon</div><div class="line"><span class="built_in">cd</span> <span class="variable">$GOPATH</span>/src/github.com/open-falcon</div><div class="line">git <span class="built_in">clone</span> --recursive https://github.com/open-falcon/falcon-plus.git</div></pre></td></tr></table></figure>
</li>
<li><p>初始化数据库</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">mysql_host=<span class="string">'localhost'</span></div><div class="line">mysql_user=<span class="string">'root'</span></div><div class="line">mysql_pass=<span class="string">'arvon2014'</span></div><div class="line"><span class="built_in">cd</span> <span class="variable">$GOPATH</span>/src/github.com/open-falcon/falcon-plus/scripts/mysql/db_schema/</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `ls`;<span class="keyword">do</span></div><div class="line">    mysql -h <span class="variable">$&#123;mysql_host&#125;</span> -u<span class="variable">$&#123;mysql_user&#125;</span>  -p<span class="variable">$&#123;mysql_pass&#125;</span> &lt; <span class="variable">$i</span></div><div class="line"><span class="keyword">done</span></div><div class="line"><span class="comment">#mysql -h $&#123;mysql_host&#125; -u$&#123;mysql_user&#125;  -p$&#123;mysql_pass&#125; &lt; db_schema/graph-db-schema.sql</span></div><div class="line"><span class="comment">#mysql -h $&#123;mysql_host&#125; -u$&#123;mysql_user&#125;  -p$&#123;mysql_pass&#125; &lt; db_schema/dashboard-db-schema.sql</span></div><div class="line"><span class="comment">#mysql -h $&#123;mysql_host&#125; -u$&#123;mysql_user&#125;  -p$&#123;mysql_pass&#125; &lt; db_schema/portal-db-schema.sql</span></div><div class="line"><span class="comment">#mysql -h $&#123;mysql_host&#125; -u$&#123;mysql_user&#125;  -p$&#123;mysql_pass&#125; &lt; db_schema/links-db-schema.sql</span></div><div class="line"><span class="comment">#mysql -h $&#123;mysql_host&#125; -u$&#123;mysql_user&#125;  -p$&#123;mysql_pass&#125; &lt; db_schema/uic-db-schema.sql</span></div></pre></td></tr></table></figure>
</li>
<li><p>Build安装包<br>可选是build全部组件还是个别组件,我这里选择了全部build</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> <span class="variable">$GOPATH</span>/src/github.com/open-falcon/falcon-plus/</div><div class="line"><span class="comment"># make all modules</span></div><div class="line">make all</div><div class="line"><span class="comment">## make specified module</span></div><div class="line"><span class="comment">#make agent</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment">## pack all modules</span></div><div class="line">make pack</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="基础组件安装配置"><a href="#基础组件安装配置" class="headerlink" title="基础组件安装配置"></a>基础组件安装配置</h4><ul>
<li><p>解压build安装包到需要的安装路径</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">mkdir -pv /data/tai-falcon</div><div class="line">cp <span class="variable">$GOPATH</span>/src/github.com/open-falcon/falcon-plus/open-falcon-v0.2.0.tar.gz /data</div><div class="line"><span class="built_in">cd</span> /data/</div><div class="line">tar -xvf open-falcon-v0.2.0.tar.gz -C /data/tai-falcon</div></pre></td></tr></table></figure>
</li>
<li><p>调试各个组件<br>主要就是要修改数据库等信息,如下</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># /data/tai-falcon/hbs/config/cfg.json:    "database": "root:arvon2014@tcp(127.0.0.1:3306)/falcon_portal?loc=Local&amp;parseTime=true",</span></div><div class="line"><span class="comment"># /data/tai-falcon/aggregator/config/cfg.json:        "addr": "root:arvon2014@tcp(127.0.0.1:3306)/falcon_portal?loc=Local&amp;parseTime=true",</span></div><div class="line"><span class="comment"># /data/tai-falcon/nodata/config/cfg.json:        "dsn": "root:arvon2014@tcp(127.0.0.1:3306)/falcon_portal?loc=Local&amp;parseTime=true&amp;wait_timeout=604800",</span></div><div class="line"><span class="comment"># /data/tai-falcon/alarm/config/cfg.json:        "addr": "root:arvon2014@tcp(127.0.0.1:3306)/alarms?charset=utf8&amp;loc=Asia%2FChongqing",</span></div><div class="line"><span class="comment"># /data/tai-falcon/api/config/cfg.json:		"faclon_portal": "root:arvon2014@tcp(127.0.0.1:3306)/falcon_portal?charset=utf8&amp;parseTime=True&amp;loc=Local",</span></div><div class="line"><span class="comment"># /data/tai-falcon/api/config/cfg.json:		"graph": "root:arvon2014@tcp(127.0.0.1:3306)/graph?charset=utf8&amp;parseTime=True&amp;loc=Local",</span></div><div class="line"><span class="comment"># /data/tai-falcon/api/config/cfg.json:		"uic": "root:arvon2014@tcp(127.0.0.1:3306)/uic?charset=utf8&amp;parseTime=True&amp;loc=Local",</span></div><div class="line"><span class="comment"># /data/tai-falcon/api/config/cfg.json:		"dashboard": "root:arvon2014@tcp(127.0.0.1:3306)/dashboard?charset=utf8&amp;parseTime=True&amp;loc=Local",</span></div><div class="line"><span class="comment"># /data/tai-falcon/api/config/cfg.json:		"alarms": "root:arvon2014@tcp(127.0.0.1:3306)/alarms?charset=utf8&amp;parseTime=True&amp;loc=Local",</span></div><div class="line"><span class="comment"># /data/tai-falcon/graph/config/cfg.json:        "dsn": "root:arvon2014@tcp(127.0.0.1:3306)/graph?loc=Local&amp;parseTime=true",</span></div></pre></td></tr></table></figure>
<p><strong>推荐启动顺序：</strong>judge &gt; graph &gt; transfer &gt; agent &gt; alarm &gt; api &gt; aggregator &gt; nodata &gt; gateway<br><strong>提示：</strong>主要调试直接看对应模块下的log即可</p>
</li>
</ul>
<h4 id="dashboard安装配置"><a href="#dashboard安装配置" class="headerlink" title="dashboard安装配置"></a>dashboard安装配置</h4><ul>
<li><p>安装开发包</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">pip install virtualenv</div><div class="line">yum install -y python-devel</div><div class="line">yum install -y openldap-devel</div><div class="line">yum install -y mysql-devel</div><div class="line">yum groupinstall <span class="string">"Development tools"</span></div></pre></td></tr></table></figure>
</li>
<li><p>下载dashboard的源码</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> <span class="variable">$HOME</span>/open-falcon</div><div class="line">git <span class="built_in">clone</span> https://github.com/open-falcon/dashboard</div></pre></td></tr></table></figure>
</li>
<li><p>安装环境依赖</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> <span class="variable">$HOME</span>/open-falcon/dashboard/</div><div class="line">virtualenv ./env</div><div class="line">./env/bin/pip install -r pip_requirements.txt</div></pre></td></tr></table></figure>
</li>
<li><p>配置修改</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">vim ./gunicorn.conf</div><div class="line">vim ./rrd/config.py</div><div class="line"><span class="comment">#主要也是修改数据库，也可以修改服务端口</span></div><div class="line">./control start</div></pre></td></tr></table></figure>
</li>
<li><p>访问dashboard测试<br><img src="http://img.arvon.top:80/images/2019/08/12/20170628-openfalcon-1.jpg" alt="dashboard-1"><br>这个没有默认的用户密码，自己注册后即可登录，且注册不会验证邮箱，登录后如下<br><img src="http://img.arvon.top:80/images/2019/08/12/20170628-openfalcon-2.jpg" alt="dashboard-2"></p>
</li>
</ul>
<h4 id="Agent端配置"><a href="#Agent端配置" class="headerlink" title="Agent端配置"></a>Agent端配置</h4><ul>
<li><p>生成agent部署包</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> <span class="variable">$GOPATH</span>/src/github.com/open-falcon/falcon-plus/modules/agent</div><div class="line">./control pack</div><div class="line"><span class="comment">#pack 即可打出agent包，我这里是falcon-agent-5.1.2.tar.gz，然后把这个包部署到需要监控的机器上</span></div></pre></td></tr></table></figure>
</li>
<li><p>配置启动agent</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">mkdir ~/falcon_aget;<span class="built_in">cd</span> ~/falcon_agent</div><div class="line">cp falcon-agent-5.1.2.tar.gz ./</div><div class="line">tar xvf falcon-agent-5.1.2.tar.gz</div><div class="line"><span class="comment">##然后修改配置</span></div><div class="line">cp cfg.example.json cfg.json</div><div class="line"><span class="comment">#vim cfg.jsoon</span></div><div class="line"><span class="comment">#修改heartbeat、transfer的配置地址端口等改为对应配置即可</span></div></pre></td></tr></table></figure>
</li>
<li><p>可以通过浏览器查看上报的监控数据<br><img src="http://img.arvon.top:80/images/2019/08/12/20170628-openfalcon-3.jpg" alt="agent-3"></p>
</li>
</ul>
<h4 id="报警邮件设置（小米规范使用http接口，不过小米也有相应的封装工具，如果二次开发可以自己定制实现方法）"><a href="#报警邮件设置（小米规范使用http接口，不过小米也有相应的封装工具，如果二次开发可以自己定制实现方法）" class="headerlink" title="报警邮件设置（小米规范使用http接口，不过小米也有相应的封装工具，如果二次开发可以自己定制实现方法）"></a>报警邮件设置（小米规范使用http接口，不过小米也有相应的封装工具，如果二次开发可以自己定制实现方法）</h4><ul>
<li>下载邮件封装程序源码<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> <span class="variable">$GOPATH</span>/github.com/open-falcon/</div><div class="line">git <span class="built_in">clone</span> https://github.com/open-falcon/mail-provider.git</div><div class="line"><span class="built_in">cd</span> <span class="variable">$GOPATH</span>/github.com/open-falcon/mail-provider/</div><div class="line"><span class="comment"># 开始build出包</span></div><div class="line">go get ./...</div><div class="line">./control build</div><div class="line">./control pack</div><div class="line"><span class="comment">#测试邮件</span></div><div class="line">curl http://127.0.0.1:4000/sender/mail <span class="_">-d</span> <span class="string">"tos=youremail@126.com&amp;subject='hello'&amp;content='world'"</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="报警配置"><a href="#报警配置" class="headerlink" title="报警配置"></a>报警配置</h3><blockquote>
<p><strong>简要说明：</strong>大概说三种情况</p>
<ol>
<li>正常：创建主机组–&gt;根据主机组创建监控模板–&gt;主机组关联模板</li>
<li>模板继承：在一种的情况下，很可能存在一个主机组里个别机器可能需要的阈值并不一样，这时可以继承这个主机组的通用模板，在此基础上做特别的设置，除此之外的监控项还按这个主机组的通用模板</li>
<li>TAG模式：这种模式可独立于模板模式进行，比较适合监控同个项目或者个别重要业务的场景</li>
</ol>
</blockquote>
<h4 id="设置Hostgroup（主机组）"><a href="#设置Hostgroup（主机组）" class="headerlink" title="设置Hostgroup（主机组）"></a>设置Hostgroup（主机组）</h4><ul>
<li>创建主机组<br><img src="http://img.arvon.top:80/images/2019/08/12/20170628-openfalcon-5.jpg" alt="5"></li>
<li>为主机组添加主机(主机填写hostname主机名即可)<br><img src="http://img.arvon.top:80/images/2019/08/12/20170628-openfalcon-6.jpg" alt="6"></li>
</ul>
<h4 id="设置Templates（模板）"><a href="#设置Templates（模板）" class="headerlink" title="设置Templates（模板）"></a>设置Templates（模板）</h4><ul>
<li>创建模板<br><img src="http://img.arvon.top:80/images/2019/08/12/20170628-openfalcon-7.jpg" alt="7"></li>
<li>设置报警策略<br><img src="http://img.arvon.top:80/images/2019/08/12/20170628-openfalcon-8.jpg" alt="8"></li>
<li>主机组关联模板<br><img src="http://img.arvon.top:80/images/2019/08/12/20170628-openfalcon-9.jpg" alt="9"></li>
</ul>
<h4 id="查看报警"><a href="#查看报警" class="headerlink" title="查看报警"></a>查看报警</h4><ul>
<li>报警<br><img src="http://img.arvon.top:80/images/2019/08/12/20170628-openfalcon-10.jpg" alt="10"></li>
</ul>
<h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><p><a href="https://book.open-falcon.org/zh_0_2/index.html" target="_blank" rel="external">小米官方手册0.2.0</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux启动流程]]></title>
      <url>http://arvon.top/2017/06/25/Linux%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p><img src="http://img.arvon.top:80/images/2019/08/12/20170624-Linuxboot-1.jpg" alt="1"><br><strong>背景故事：</strong>为啥想起来写Linux启动流程了呢，这个呢要从一个月以前说起，蜜汁尴尬~~~。我媳妇用的Ubuntu，然后她需要装很多环境，不知道为何内核老是更新，结果就是后面装东西的时候提示/boot分区空间不足无法安装，但我天真可爱的媳妇不会清呀，然后我就来了，一看简单啊，删呗，凡事总有<strong>BUT</strong>，我觉得这个事情嘛要清就要清彻底，就不rm-rf了，直接卸安装包多清爽，于是乎系统挂了，剁手啊打什么通配符。。。不过总结一下还是对系统层认识不够生动，所以就补一篇日志，万一我最棒的媳妇看到了呢，那就点点点~<br><a id="more"></a></p>
<h3 id="计算机如何启动的"><a href="#计算机如何启动的" class="headerlink" title="计算机如何启动的"></a>计算机如何启动的</h3><p>又看了一遍阮一峰关于这个的文章，觉得自己就先不写了，后续自己再理解着写吧。。时间有限啊，参考<a href="http://www.ruanyifeng.com/blog/2013/02/booting.html" target="_blank" rel="external">计算机是如何启动的</a></p>
<h3 id="系统如何启动的"><a href="#系统如何启动的" class="headerlink" title="系统如何启动的"></a>系统如何启动的</h3><p><strong>说明一下</strong>这些图都是通过搜索引擎抓过来的，并不是我画的。更详细的说明看参考地址里的文章里面写的很好。<br><img src="http://img.arvon.top:80/images/2019/08/12/20170624-Linuxboot-3.png" alt="3"><br><strong>来看看上图</strong>，这个就是Linux系统启动的流程不过比较简略，但要点都在，下张图会更详尽一点，接着看吧<br><img src="http://img.arvon.top:80/images/2019/08/12/20170624-Linuxboot-2.png" alt="2"><br>这张图就更详细点了，不过还有更详尽的，Look下面<br><img src="http://img.arvon.top:80/images/2019/08/12/20170624-Linuxboot-4.jpg" alt="4"><br>嗯，这样就很尴尬了，感觉看图就够了，我也就不啰嗦了，蛮好~~</p>
<h3 id="参考地址"><a href="#参考地址" class="headerlink" title="参考地址"></a>参考地址</h3><p><a href="http://www.ruanyifeng.com/blog/2013/08/linux_boot_process.html" target="_blank" rel="external">阮一峰大牛的网络日志</a><br><a href="http://www.itnpc.com/news/web/1473647313114728.html" target="_blank" rel="external">来自家住海边喜欢浪的文章</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux后台执行执行程序及环境变量优先级]]></title>
      <url>http://arvon.top/2017/06/25/Linux%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C%E7%A8%8B%E5%BA%8F%E5%8F%8A%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E4%BC%98%E5%85%88%E7%BA%A7/</url>
      <content type="html"><![CDATA[<p><strong>背景故事：</strong>为什么写这个呢，因为有次给媳妇弄翻墙的shadows，配完了想让她每次开机就自动运行，然后发现了个事情，就是脚本有输出的时候直接用&amp;是不大好的。还查了下，这可不应该啊，虽然说好久不用这个玩意，不过还是应该掌握的，所以就当记个笔记吧<br><a id="more"></a></p>
<h3 id="关于用户环境变量profile的设置"><a href="#关于用户环境变量profile的设置" class="headerlink" title="关于用户环境变量profile的设置"></a>关于用户环境变量profile的设置</h3><p>登录后首先读取<strong>/etc/profile</strong>这个配置，这个配置是对<strong>所有用户生效的</strong>。然后<strong>依次</strong>寻找以下三个文件，这三个文件定义了对当前用户的配置</p>
<blockquote>
<p>第一个是~/.bash_profile<br>第二个是~/.bash_login<br>第三个是~/.profile<br><strong>高能预警：</strong> 以上三个文件只要有一个存在就<strong>不会</strong>读取后面的文件了，比如有了~/.bash_login就不读取~/.profile了</p>
</blockquote>
<p>另外如果修改了profile的配置，直接修改后对于当前终端是不生效的，一般有两种方法使之生效</p>
<blockquote>
<ol>
<li>source ~/.profile 【这里只是举例子，你修改的是哪个配置就source哪个配置】</li>
<li>退出当前终端再重新打开</li>
</ol>
</blockquote>
<h3 id="关于sudu命令"><a href="#关于sudu命令" class="headerlink" title="关于sudu命令"></a>关于sudu命令</h3><p>当你使用sudo去执行一个程序时，处于安全的考虑，这个程序将在一个新的、最小化的环境中执行，也就是说，诸如PATH这样的环境变量，在sudo命令下已经被重置成默认状态了。所以当一个刚初始化的PATH变量中不包含你所要运行的程序所在的目录，用sudo去执行，你就会得到”command not found”的错误提示。要想改变PATH在sudo会话中的初始值，用文本编辑器打开/etc/sudoers文件，找到”secure_path”一行，当你执行sudo 命令时，”secure_path”中包含的路径将被当做默认PATH变量使用。添加所需要的路径(如 /usr/local/bin）到”secure_path”下,如下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Defaults    secure_path = /sbin:/bin:/usr/sbin:/usr/bin:/usr/<span class="built_in">local</span>/bin</div></pre></td></tr></table></figure></p>
<h3 id="关于export"><a href="#关于export" class="headerlink" title="关于export"></a>关于export</h3><p>使用export可以直接声明环境变量，不过这种方式只对当前终端有效。所以一般在脚本里或测试时会用到这种方式，如果是需要每次登陆都有这些变量的话，还是需要写入全局或用户的配置中去。</p>
<h3 id="关于后台运行脚本或命令"><a href="#关于后台运行脚本或命令" class="headerlink" title="关于后台运行脚本或命令"></a>关于后台运行脚本或命令</h3><p>一般用两种方法，一种是直接command+&amp;，还有种就是nohup command+&amp;。一般来说用第二种的多一点，因为如果脚本有输出的话终端就会被占用，而且关闭终端后台进程会终止；但是第二种会把输出记录在当前目录nohup.out的输出中,而且关闭端口后台进程也不会结束。</p>
<p><strong>看命令吧</strong>，下面通过演示怎么在后台执行这个没用的脚本<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">while</span> <span class="literal">true</span>;<span class="keyword">do</span></div><div class="line">    ehco <span class="string">"Hello world, `date`"</span></div><div class="line">    sleep 2</div><div class="line"><span class="keyword">done</span></div><div class="line"><span class="comment">#named hello.sh</span></div></pre></td></tr></table></figure></p>
<ul>
<li><p>使用&amp;</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sh hello.sh &amp;</div><div class="line"><span class="comment">#像上面这种有输出的，不要用这个，反正不推荐</span></div></pre></td></tr></table></figure>
</li>
<li><p>使用nohup</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nohup sh hello.sh &amp;</div></pre></td></tr></table></figure>
</li>
<li><p>查看后台任务jobs</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">jobs</span></div><div class="line"><span class="comment">#bogon:tmp arvon$ jobs</span></div><div class="line"><span class="comment">#[1]-  Running                 sh xxx.sh &amp;</span></div><div class="line"><span class="comment">#[2]+  Running                 sh ppp.sh &amp;</span></div></pre></td></tr></table></figure>
</li>
<li><p>调出后台任务fg</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">fg</span> %1</div><div class="line"><span class="built_in">fg</span> %2</div></pre></td></tr></table></figure>
</li>
<li><p>使用ctrl+z将前台程序放入后台，此时程序会变为stop</p>
</li>
<li>使用bg将后台暂停的程序启动<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">bogon:tmp arvon$ <span class="built_in">jobs</span></div><div class="line">[1]-  Stopped                 sh xxx.sh</div><div class="line">[2]+  Stopped                 sh ppp.sh</div><div class="line">bogon:tmp arvon$ <span class="built_in">bg</span> %1</div><div class="line">[1]- sh xxx.sh &amp;</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux管理员的瑞士军刀-AWK]]></title>
      <url>http://arvon.top/2017/06/24/Linux%E7%AE%A1%E7%90%86%E5%91%98%E7%9A%84%E7%91%9E%E5%A3%AB%E5%86%9B%E5%88%80-AWK/</url>
      <content type="html"><![CDATA[<p><img src="http://img.arvon.top:80/images/2019/08/12/20170624-awkcommand-1.jpg" alt="1"><br>作为Linux系统管理员的瑞士小军刀，awk的作用是显而易见的，但是一般情况下使用的都是很简单的分割打印，但有时候需要稍微复杂一些的用法，这里进行一下我的总结。其实之前有写过一篇awk的博客，不过写的比较基础，这次作为补充并尽可能覆盖常用用法，之前的地址<a href="http://arvon.top/2015/07/29/awk%E7%94%A8%E6%B3%95%E5%AE%9E%E4%BE%8B/">戳这里</a><br><a id="more"></a></p>
<h4 id="感受一下"><a href="#感受一下" class="headerlink" title="感受一下"></a>感受一下</h4><p>通过一个简单的实例来进行说明，实例数据如下,其他介绍放在后面，毕竟实例比理论来的直观嘛：</p>
<table>
<thead>
<tr>
<th>NumID</th>
<th>Name</th>
<th>Math</th>
<th>English</th>
<th>Chinese</th>
</tr>
</thead>
<tbody>
<tr>
<td>M5</td>
<td>Arvon</td>
<td>13</td>
<td>14</td>
<td>15</td>
</tr>
<tr>
<td>F3</td>
<td>Mo</td>
<td>92</td>
<td>02</td>
<td>26</td>
</tr>
<tr>
<td>F4</td>
<td>Pikachu</td>
<td>52</td>
<td>10</td>
<td>11</td>
</tr>
<tr>
<td>M1</td>
<td>Steavn</td>
<td>1</td>
<td>2</td>
<td>3</td>
</tr>
<tr>
<td>F2</td>
<td>World</td>
<td>4</td>
<td>5</td>
<td>56</td>
</tr>
</tbody>
</table>
<h4 id="鲜活的小栗子"><a href="#鲜活的小栗子" class="headerlink" title="鲜活的小栗子"></a>鲜活的小栗子</h4><ul>
<li><p>基础1：获取姓名和英语成绩</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">awk -F<span class="string">' '</span> <span class="string">'&#123;print $2,$4&#125;'</span> xxx.txt</div></pre></td></tr></table></figure>
</li>
<li><p>基础2：设置输入和输出分隔符的姓名和成绩</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">awk <span class="string">'BEGIN&#123;FS=" ";OFS="---"&#125;&#123;print $2,$4&#125;'</span> xxx.txt</div></pre></td></tr></table></figure>
</li>
<li><p>基础3： 输出行号列数带描述的姓名和成绩</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">awk <span class="string">'BEGIN&#123;FS=" ";OFS="---"&#125;&#123;print "filename:" FILENAME, "lineNum:"NR, "leishu:"NF, $2,$4&#125;'</span> xxx.txt</div></pre></td></tr></table></figure>
</li>
<li><p>基础4：添加Title和结束符并设置输入输出分隔符的例子</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">awk <span class="string">'BEGIN&#123;print "T1","T2","T3","T4"&#125;&#123;FS=" ";OFS="---"&#125;&#123;print "filename:" FILENAME, "lineNum:"NR, "leishu:"NF, $2,$4&#125;END&#123;print "Game Over"&#125;'</span> xxx.txt</div></pre></td></tr></table></figure>
</li>
<li><p>基础5： 带匹配的，例如匹配Arvon并输出成绩</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">awk <span class="string">'BEGIN&#123;FS=" "&#125;/Arvon/&#123;print $0&#125;'</span> xxx.txt</div><div class="line">awk <span class="string">'BEGIN&#123;FS=" "&#125;/M[1-9]/&#123;print $0&#125;'</span> xxx.txt</div><div class="line">awk <span class="string">'BEGIN&#123;FS=" "&#125;/M./&#123;print $0&#125;'</span> xxx.txt</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="嗨嗨的大栗子"><a href="#嗨嗨的大栗子" class="headerlink" title="嗨嗨的大栗子"></a>嗨嗨的大栗子</h4><p><strong>说明一下：</strong>awk的条件是从C语言借鉴而来，反正C我也不会，但awk应该会，关于AWK变成的资料极多，我这里就写一些常用简单的啦~<br><strong>还有还有–&gt;awk工作流程：</strong>先执行BEGIN，然后读取文件，读入有/n换行符分割的一条记录，然后将记录按指定的域分隔符划分域，填充域，$0则表示所有域,$1表示第一个域,$n表示第n个域,随后开始执行模式所对应的动作action。接着开始读入第二条记录······直到所有的记录都读完，最后执行END操作。</p>
<ul>
<li><p>高阶1：行计数累加，获取每个人的成绩总和</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">awk <span class="string">'BEGIN&#123;FS=" "&#125;/M[1-9]|F[1-9]/&#123;print $0,$3+$4+$5&#125;'</span> xxx.txt</div></pre></td></tr></table></figure>
</li>
<li><p>高阶2：列累加，获取所有人每科成绩的总和</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">awk <span class="string">'BEGIN&#123;FS=" "&#125;/F[1-9]|M[1-9]/&#123;sMath=sMath+$3;sEnglish=sEnglish+$4;sChinese=sChinese+$5&#125;END&#123;print sMath,sEnglish,sChinese&#125;'</span> xxx.txt</div></pre></td></tr></table></figure>
</li>
<li><p>高阶3：数据筛选计数，获取数学成绩大于10的人数，并列出是谁</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">awk <span class="string">'BEGIN&#123;renshu=0&#125;&#123;FS=" "&#125;/F[1-9]|M[1-9]/&#123;if ($3&gt;10) &#123;print $0; renshu+=1&#125;&#125;END&#123;print "totleNum:" renshu&#125;'</span> xxx.txt</div></pre></td></tr></table></figure>
</li>
<li><p>高阶5：带过滤筛选的求和，求英语成绩大于等于5的人的各科成绩总和</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">awk <span class="string">'BEGIN&#123;sMath=0;sEng=0;sChi=0&#125;/F[1-9]|M[1-9]/&#123;if($4&gt;=5)&#123;print $0;sMath+=$3;sEng+=$4;sChi+=$5&#125;&#125;END&#123;print "sMath:" sMath, "sEng:" sEng, "sChi:" sChi&#125;'</span> xxx.txt</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h4><ul>
<li>内建变量</li>
<li>Record（记录）:awk从数据文件上读取数据的基本单位，默认内建变量RS为换行<br>如：例子中的“M5    Arvon    13    14    15”就是一条记录</li>
<li>Field（字段）：记录中被分隔开的子字符串，默认内建变量FS为空格<br>如：例子中第一条记录的第一个字符串为M5，第二个为Arvon</li>
</ul>
<h4 id="内建变量"><a href="#内建变量" class="headerlink" title="内建变量"></a>内建变量</h4><table>
<thead>
<tr>
<th>变量名称</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>\$n</td>
<td>当前记录的第n个字段，字段间由FS分隔</td>
</tr>
<tr>
<td>$0</td>
<td>完整的输入记录</td>
</tr>
<tr>
<td>ARGC</td>
<td>命令行参数的数目</td>
</tr>
<tr>
<td>ARGIND</td>
<td>命令行中当前文件的位置(从0开始算)</td>
</tr>
<tr>
<td>ARGV</td>
<td>包含命令行参数的数组</td>
</tr>
<tr>
<td>CONVFMT</td>
<td>数字转换格式(默认值为%.6g)ENVIRON环境变量关联数组</td>
</tr>
<tr>
<td>ERRNO</td>
<td>最后一个系统错误的描述</td>
</tr>
<tr>
<td>FIELDWIDTHS</td>
<td>字段宽度列表(用空格键分隔)</td>
</tr>
<tr>
<td>FILENAME</td>
<td>当前文件名</td>
</tr>
<tr>
<td>FNR</td>
<td>各文件分别计数的行号</td>
</tr>
<tr>
<td>FS</td>
<td>字段分隔符(默认是任何空格)</td>
</tr>
<tr>
<td>IGNORECASE</td>
<td>如果为真，则进行忽略大小写的匹配</td>
</tr>
<tr>
<td>NF</td>
<td>输入字段分割符</td>
</tr>
<tr>
<td>NR</td>
<td>已经读出的记录数，就是行号，从1开始</td>
</tr>
<tr>
<td>OFMT</td>
<td>数字的输出格式(默认值是%.6g)</td>
</tr>
<tr>
<td>OFS</td>
<td>输出记录分隔符（输出换行符），输出时用指定的符号代替换行符</td>
</tr>
<tr>
<td>ORS</td>
<td>输出记录分隔符(默认值是一个换行符)</td>
</tr>
<tr>
<td>RLENGTH</td>
<td>由match函数所匹配的字符串的长度</td>
</tr>
<tr>
<td>RS</td>
<td>记录分隔符(默认是一个换行符)</td>
</tr>
<tr>
<td>RSTART</td>
<td>由match函数所匹配的字符串的第一个位置</td>
</tr>
<tr>
<td>SUBSEP</td>
<td>数组下标分隔符(默认值是/034)</td>
</tr>
</tbody>
</table>
<hr>
<p>以上，还有很多用法暂时就先这样吧，有了再补充，awk编程也是厉害了</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[GTX直压上云技术实践]]></title>
      <url>http://arvon.top/2017/06/01/GTX%E7%9B%B4%E5%8E%8B%E4%B8%8A%E4%BA%91%E6%8A%80%E6%9C%AF%E5%AE%9E%E8%B7%B5/</url>
      <content type="html"><![CDATA[<p><strong>update:</strong>测试时出现二进制文件大小恰好为256M整数倍时解压不退出的bug,提交至维护人员后已经解决，不得不说反馈速度真的是快，从我提出到解决总共用了不到1天时间。给点个赞，棒棒哒<br>GTX Compressor(直压上云技术)调研,由于现业务存在大规模业务数据上传云存储，云厂商提供接口具有一些局限性，现在尝试gtz这个工具。该工具目前支持阿里云及AWS非常符合业务场景，具有高压缩比、高性能、高速直压云等特点，且有数据校验机制，而且开包即用，<strong>不依赖当前系统其他任何库</strong>。</p>
<blockquote>
<p><strong>介绍：</strong>GTX Compressor是Genetalks公司GTX Lab实验室开发的面向大型数据（数GB甚至数TB数据，尤其是生物信息数据）上云，而量身定制的复杂通用数据压缩打包系统，可以对任意基因测序数据以及数据目录进行高压缩率的快速打包，形成单个压缩数据文件，以方便存储档与远程传输、校验。区别于以往的压缩工具，GT Compressor系统着力于 高压缩率，高速率，方便的数据抽取 。<br>——————摘自<a href="https://github.com/Genetalks/gtz/blob/master/README_chs.md" target="_blank" rel="external">Github上该项目官方介绍</a></p>
</blockquote>
<a id="more"></a>
<h4 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h4><ul>
<li>64位 Linux 系统（CentOS 6.5以上或Ubuntu 12.04以上，推荐Ububtu 14.04及以上64位操作系统)</li>
<li>4核以上，最小8GB内存的主机系统（若要达到最大并发性，推荐32核 64GB内存，或与AWS C4.8xlarge机器相同配置）</li>
<li><strong>我的测试环境为</strong>：Centos7.3_x64</li>
</ul>
<h4 id="安装及使用"><a href="#安装及使用" class="headerlink" title="安装及使用"></a>安装及使用</h4><blockquote>
<p>安装非常简单暴力，直接就是开包即用，下载对应系统版本即可</p>
</blockquote>
<ul>
<li><p>安装</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">wget https://github.com/Genetalks/gtz/archive/master.zip</div><div class="line">unzip xvf master.zip</div><div class="line">tar xvf gtz_0.2.2b_centos_pre_release.tgz</div></pre></td></tr></table></figure>
</li>
<li><p>使用方法</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">USAGE:</div><div class="line">./gtz  [--list] [<span class="_">-e</span> &lt;string&gt;] [<span class="_">-f</span>] [--endpoint &lt;string&gt;] [--timeout &lt;string&gt;]</div><div class="line">          [--secret-access-key &lt;string&gt;] [--access-key-id &lt;string&gt;] [-b</div><div class="line">          &lt;string&gt;] [<span class="_">-s</span> &lt;string&gt;] [-c] [-n &lt;string&gt;] [<span class="_">-l</span> &lt;string&gt;] [-i]</div><div class="line">          [<span class="_">-d</span>] [--delete] [<span class="_">-a</span>] [-g &lt;number&gt;] [-o &lt;string&gt;] [--] [--version]</div><div class="line">          [-h] &lt;file names&gt; ...</div></pre></td></tr></table></figure>
</li>
<li><p>压缩解压选项解释</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">### 通用选项</span></div><div class="line">-h：输出以上命令行帮助信息</div><div class="line">--version：输出gt_compress程序的版本号</div><div class="line">--access-key-id : 指定云平台用户ID</div><div class="line">--secret-access-key： 指定云平台用户密钥</div><div class="line">--endpoint ： 指定阿里云OSS平台的访问域名和数据中心</div><div class="line"><span class="comment">### 压缩选项参数</span></div><div class="line"><span class="_">-f</span>, --force ： 强制删除容器内的object</div><div class="line">--timeout ： 指定上传超时阀值</div><div class="line">-i：压缩时增加索引，主要用于在压缩文件中快速检索fastq文件的某段内容，该选项会降低压缩速度</div><div class="line"><span class="_">-a</span>：追加模式，本次压缩的内容会追加到压缩文件中</div><div class="line">-g：分组加速压缩，分组越多，需要的cpu和内存越多，压缩速度越快。不指定该值时，程序会根据cpu和内存自动选择最优值</div><div class="line">-o：指定压缩文件名，不指定时，默认为out.gtz</div><div class="line">file_name：需要压缩的文件或目录, 若不指定，则从标准输入中读入数据</div><div class="line"><span class="comment">### 解压选项参数</span></div><div class="line"><span class="_">-d</span>,--decode : 解压模式 --list	: 列出压缩包中所有的压缩文件名，与<span class="_">-d</span>参数一起使用 <span class="_">-e</span>, --extract	: 解压压缩包中指定的压缩文件，文件名之间用冒号:分割，与<span class="_">-d</span>参数一起使用</div><div class="line">--timeout ： 指定下载超时阀值</div><div class="line">-c,--stdout           :   解压数据输出至标准输出, 只能与 <span class="_">-d</span> 参数一起使用</div><div class="line">-o：指定输出文件名，使用-n或<span class="_">-l</span>时需要指定该选项，否则不需要该选项</div><div class="line">file_name：需要压缩的文件, 若不指定，则从标准输入中读入数据</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="使用范例"><a href="#使用范例" class="headerlink" title="使用范例"></a>使用范例</h4><blockquote>
<p><strong>注意：</strong>使用时可以使用命令行参数指定key变量和endpoint变量，也可以使用export声明，如<br>export access_key_id=xxxxxx<br>export secret_access_key=xxxxxx<br>export endpoint=xxxxxx （该环境变量只有上传至OSS时才需设置）</p>
</blockquote>
<ul>
<li><p>本地压缩解压</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">####----压缩----</span></div><div class="line"><span class="comment">#直接压缩，1G的数据压到68k了，不过源数据不具备参考性，dd出来的数据</span></div><div class="line">./gtz -o test.gtz up_data_test/gtz-test3.log</div><div class="line"><span class="comment">#通过zcat和管道压缩，支持二进制文件</span></div><div class="line">zcat up_data_test/gtz-test3.log |./gtz -o <span class="built_in">test</span>2.gtz</div><div class="line"><span class="comment">####----解压----</span></div><div class="line"><span class="comment">#解压单个文件，解压路径为压缩时的路径</span></div><div class="line">./gtz <span class="_">-d</span> ./test.gtz</div></pre></td></tr></table></figure>
</li>
<li><p>压缩上传AWS例子<br>上传文件在S3上显示为目录gtz-test4.name，该目录里面下面为原文件同名目录及一个gtz.meta文件，如图<br><img src="http://img.arvon.top:80/images/2019/08/12/20170601-gtztools-1.jpg" alt="1"></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> AWS_ACCESS_KEY_ID=<span class="string">'your_key'</span></div><div class="line"><span class="built_in">export</span> AWS_SECRET_ACCESS_KEY=<span class="string">'Your_key'</span></div><div class="line"><span class="built_in">export</span> AWS_DEFAULT_REGION=<span class="string">'your_region'</span></div><div class="line"><span class="comment">#上传单个文件，上传1G的测试数据需要50s左右</span></div><div class="line">./gtz -o s3://arvon-gtz-test/gtz-test4.name up_data_test/gtz-test4.db</div><div class="line"><span class="comment">#追加文件到压缩包，如果不加-a参数会覆盖原来的文件</span></div><div class="line">./gtz -o s3://arvon-gtz-test/ up_data_test/gtz-test3.log</div></pre></td></tr></table></figure>
</li>
<li><p>解压缩AWS上S3到本地</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./gtz  <span class="_">-d</span> s3://arvon-gtz-test/<span class="built_in">test</span>3</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h4><p><a href="https://github.com/Genetalks/gtz" target="_blank" rel="external">Github项目地址</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[常见压缩格式对比]]></title>
      <url>http://arvon.top/2017/05/30/%E5%B8%B8%E8%A7%81%E5%8E%8B%E7%BC%A9%E6%A0%BC%E5%BC%8F%E5%AF%B9%E6%AF%94/</url>
      <content type="html"><![CDATA[<p><strong>数据压缩</strong>可以分为无损压缩和有损压缩，有损，指的是压缩之后就无法完整还原原始信息，但是压缩率可以很高，主要应用于视频、话音等数据的压缩，因为损失了一点信息，人是很难察觉的，或者说，也没必要那么清晰照样可以看可以听；无损压缩则用于文件等等必须完整还原信息的场合。目前只归纳zip、rar、tar.gz、tar.bz常见的这几种，其他的以后接触了再进行补充。<br><a id="more"></a><br><strong>注意</strong>：压缩率大小直接受源文件影响，所以不同类型源文件压缩效率差别会很大，以下数值仅可作参考，压缩率越低压缩效率越高，例如：100G压缩到10G压缩率为10%</p>
<h3 id="普通文本文件压缩率对比"><a href="#普通文本文件压缩率对比" class="headerlink" title="普通文本文件压缩率对比"></a>普通文本文件压缩率对比</h3><table>
<thead>
<tr>
<th>压缩格式</th>
<th>压缩率</th>
<th>占用cpu</th>
<th>耗时</th>
</tr>
</thead>
<tbody>
<tr>
<td>7-zip</td>
<td>10%</td>
<td>50%</td>
<td>600s</td>
</tr>
<tr>
<td>win-zip</td>
<td>30%</td>
<td>65%</td>
<td>200s</td>
</tr>
<tr>
<td>WinRAR</td>
<td>25%</td>
<td>80%</td>
<td>240s</td>
</tr>
<tr>
<td>tar.gz</td>
<td>11%</td>
<td>55%</td>
<td>500s</td>
</tr>
<tr>
<td>tar.bz2</td>
<td>15%</td>
<td>65%</td>
<td>550s</td>
</tr>
</tbody>
</table>
<h3 id="影音文件压缩率对比"><a href="#影音文件压缩率对比" class="headerlink" title="影音文件压缩率对比"></a>影音文件压缩率对比</h3><table>
<thead>
<tr>
<th>压缩格式</th>
<th>压缩率</th>
<th>占用cpu</th>
<th>耗时</th>
</tr>
</thead>
<tbody>
<tr>
<td>7-zip</td>
<td>40%</td>
<td>80%</td>
<td>500s</td>
</tr>
<tr>
<td>win-zip</td>
<td>80%</td>
<td>80%</td>
<td>150s</td>
</tr>
<tr>
<td>WinRAR</td>
<td>45%</td>
<td>70%</td>
<td>450s</td>
</tr>
<tr>
<td>tar.gz</td>
<td>45%</td>
<td>65%</td>
<td>400s</td>
</tr>
<tr>
<td>tar.bz2</td>
<td>43%</td>
<td>70%</td>
<td>450s</td>
</tr>
</tbody>
</table>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="http://www.codeceo.com/article/zip-method.html" target="_blank" rel="external">zip压缩原理分析</a><br><a href="http://blog.csdn.net/21aspnet/article/details/232316" target="_blank" rel="external">zip压缩原理及实现</a><br><a href="http://zhangyu.blog.51cto.com/197148/1592013/" target="_blank" rel="external">tar压缩原理</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Nginx重定向及域名CNAME问题]]></title>
      <url>http://arvon.top/2017/05/29/Nginx%E9%87%8D%E5%AE%9A%E5%90%91%E5%8F%8A%E5%9F%9F%E5%90%8DCNAME%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<p><img src="http://img.arvon.top:80/images/2019/08/12/20170529-nginxcname-1.jpg" alt="20170529-nginxcname-1"><br><strong>关于域名解析</strong>的几个问题整理，最近换了博客评论系统，原因是多说马上就停止支持了，所以现在转用网易云跟帖，个人感觉还可以。期间有个域名解析的问题我觉得可以记录下。主要就是DNS的CNAME记录以及Nginx的301、302重定向。</p>
<h3 id="关于DNS的CNAME解析"><a href="#关于DNS的CNAME解析" class="headerlink" title="关于DNS的CNAME解析"></a>关于DNS的CNAME解析</h3><blockquote>
<p>其实这个也蛮好理解，不涉及数据报内容的改变，就是将要解析的域名指向另一个域名解析。对比A记录就更清晰了，A记录是域名到IP的解析，而CNAME记录是域名解析到域名。所以通过域名的CNAME记录对web访问时没有任何影响的，它只是改变了域名解析的过程而已。</p>
</blockquote>
<a id="more"></a>
<h3 id="关于URL重定向"><a href="#关于URL重定向" class="headerlink" title="关于URL重定向"></a>关于URL重定向</h3><blockquote>
<p>所谓URL重定向其实就是URL跳转，这个可以通过Nginx的HttpRewriteModule设置重写http请求头。URL重定向氛围302临时重定向和301永久重定向，301永久重定向会使搜索引擎抓取新的内容时使用重定向后的新地址，而302临时重定向会使搜索引擎抓取新内容时保留重定向前的旧地址。<br>nginx的rewrite相当于apache的rewriterule(大多数情况下可以把原有apache的rewrite规则加上引号就可以直接使用)，它可以用在server,location 和IF条件判断块中,命令格式如下：<br>rewrite 正则表达式 替换目标 flag标记<br>flag标记可以用以下几种格式：<br>last – 基本上都用这个Flag。<br>break – 中止Rewirte，不在继续匹配<br>redirect – 返回临时重定向的HTTP状态302<br>permanent – 返回永久重定向的HTTP状态301</p>
</blockquote>
<ul>
<li><p>301永久重定向Nginx代码</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">        listen       80;</div><div class="line">        server_name  arvon.top;</div><div class="line">        if ($host = 'www.arvon.top' ) &#123;</div><div class="line">            rewrite ^/(.*)$ http://arvon.top/$1 permanent;</div><div class="line">                   &#125;</div><div class="line">        location / &#123;</div><div class="line">            root   html/public;</div><div class="line">            index  index.html;</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>302临时重定向Nginx代码</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">        listen       80;</div><div class="line">        server_name  arvon.top;</div><div class="line">        if ($host = 'blog.arvon.top' ) &#123;</div><div class="line">            rewrite ^/(.*)$ http://arvon.top/$1 redirect;</div><div class="line">                   &#125;</div><div class="line">        location / &#123;</div><div class="line">            root   html/public;</div><div class="line">            index  index.html;</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Nginx地址重定向"><a href="#Nginx地址重定向" class="headerlink" title="Nginx地址重定向"></a>Nginx地址重定向</h3><blockquote>
<p>使用alias或root进行网站路径定义，也可进行资源路径重定向。</p>
</blockquote>
<ul>
<li><p>使用root定义<br>语法：root path;<br>默认：root html;<br>配置块：http、server、location、if</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">location /download/ &#123;  </div><div class="line">root /opt/web/html/;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>使用alias定义<br>语法：alias path;<br>配置块： location;</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">location /conf &#123;  </div><div class="line">    alias /usr/local/nginx/conf/;      </div><div class="line">&#125;</div><div class="line"><span class="meta">#</span><span class="bash">如果用root，则如</span></div><div class="line">location /conf &#123;  </div><div class="line">       root /usr/local/nginx/;          </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>使用alias时，在URI向实际文件路径的映射过程中，已经把location后配置的/conf这部分字符串丢弃掉，因此，/conf/nginx.conf请求将根据alias path映射为path/nginx.conf。root则不然，它会根据完整的URI请求来映射，因此，/conf/nginx.conf请求会根据root path映射为path/conf/nginx.conf。这也是root可以放置到http、server、location或if块中，而alias只能放置到location块中的原因。</p>
</blockquote>
<h3 id="更详细的说明"><a href="#更详细的说明" class="headerlink" title="更详细的说明"></a>更详细的说明</h3><p><a href="http://lansgg.blog.51cto.com/5675165/1575274" target="_blank" rel="external">1. 大风的博客：nginx配置url重定向-反向代理</a><br><a href="http://blief.blog.51cto.com/6170059/1736787" target="_blank" rel="external">2. 网站路径定义</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Jumpserver实践记录]]></title>
      <url>http://arvon.top/2017/05/24/Jumpserver%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<p><img src="http://img.arvon.top:80/images/2019/08/12/20170524-jumpserver-1.jpg" alt="20170524-jumpserver-1"><br><strong>Jumpserver</strong>是一个由一群有理想有抱负的大牛们开发的开源跳板机及资产管理系统，最近在整理搭建，发现还是蛮好用的，过程记录如下，感谢<a href="https://github.com/jumpserver/jumpserver/tree/0.3.2" target="_blank" rel="external">作者</a>开源！！</p>
<a id="more"></a>
<h3 id="Environment"><a href="#Environment" class="headerlink" title="Environment"></a>Environment</h3><ul>
<li>aws ec2</li>
<li>centos7.3</li>
<li>Python: 3.5</li>
<li>Django: 1.11</li>
<li>Mysql</li>
</ul>
<h3 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h3><ul>
<li><p>install rely env(使用Redhat)</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">wget http://dev.mysql.com/get/mysql57-community-release-el7-7.noarch.rpm</div><div class="line">rpm -ivh mysql57-community-release-el7-7.noarch.rpm</div><div class="line">yum install -y mysql-community-server</div><div class="line">systemctl start mysqld.service</div><div class="line">mysqladmin -uroot -p password <span class="string">"your_password"</span></div><div class="line">pip uninstall pycrypto</div><div class="line">rm -rf /usr/lib64/python2.6/site-packages/Crypto/</div><div class="line">rm -rf  /usr/lib64/python2.6/site-packages/pycrypto-2.6.1-py2.6-linux-x86_64.egg</div><div class="line">pip install pycrypto==2.4.1</div><div class="line">wget https://www.python.org/ftp/python/3.6.0/Python-3.6.0.tar.xz</div><div class="line">tar xvf Python-3.6.0.tar.xz;<span class="built_in">cd</span> Python-3.6.0</div><div class="line">./configure --prefix=/usr/<span class="built_in">local</span>/python3</div><div class="line">make &amp;&amp; make install</div></pre></td></tr></table></figure>
</li>
<li><p>modify config</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#My path: vim /data/jumpserver_pkg/jumpserver-master/install/install.py</span></div><div class="line">python install.py <span class="comment">#直接执行即可</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Solve-the-problem"><a href="#Solve-the-problem" class="headerlink" title="Solve the problem"></a>Solve the problem</h3><ul>
<li>mysql error:报错为django相关<blockquote>
<p>使用utf8创建database<br>CREATE DATABASE IF NOT EXISTS  jumpserver DEFAULT CHARACTER SET utf8;</p>
</blockquote>
</li>
</ul>
<h3 id="Aws-ec2-批量添加主机脚本"><a href="#Aws-ec2-批量添加主机脚本" class="headerlink" title="Aws ec2 批量添加主机脚本"></a>Aws ec2 批量添加主机脚本</h3><ul>
<li><p>获取aws ec2运行主机列表</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">---</span></div><div class="line"><span class="comment">#name:get_ec2_host_list.yml</span></div><div class="line"><span class="attr">- hosts:</span> <span class="string">localhost</span></div><div class="line"><span class="attr">  connection:</span> <span class="string">local</span></div><div class="line"><span class="attr">  gather_facts:</span> <span class="literal">True</span></div><div class="line"><span class="attr">  tasks:</span></div><div class="line"><span class="attr">    - name:</span> <span class="string">ec2</span> <span class="string">instance</span> <span class="string">facts</span></div><div class="line"><span class="attr">      ec2_remote_facts:</span></div><div class="line"><span class="attr">        region:</span> <span class="string">cn-north-1</span></div><div class="line"><span class="attr">        filters:</span></div><div class="line"><span class="attr">          instance-state-name:</span>  <span class="string">running</span></div><div class="line"><span class="attr">      register:</span> <span class="string">ec2</span></div><div class="line"><span class="attr">    - set_fact:</span> <span class="string">ec2_out=&#123;&#123;</span> <span class="string">ec2</span> <span class="string">&#125;&#125;</span></div><div class="line"><span class="attr">    - shell:</span> <span class="string">rm</span> <span class="bullet">-rf</span> <span class="string">running_ec2_list.txt</span></div><div class="line"><span class="attr">    - shell:</span> <span class="string">echo</span> <span class="string">"<span class="template-variable">&#123;&#123; item.0.private_ip_address &#125;&#125;</span>"</span>  <span class="string">"<span class="template-variable">&#123;&#123;item.0.tags.Name&#125;&#125;</span>"</span> <span class="string">&gt;&gt;</span> <span class="string">running_ec2_list.txt</span></div><div class="line"><span class="attr">      with_together:</span></div><div class="line"><span class="bullet">        -</span> <span class="string">"<span class="template-variable">&#123;&#123; ec2_out.instances &#125;&#125;</span>"</span></div></pre></td></tr></table></figure>
</li>
<li><p>生成Excel文件</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment"># -*- coding:utf-8 -*-</span></div><div class="line"><span class="comment">###############################################################################</span></div><div class="line"><span class="comment">#Author: arvon</span></div><div class="line"><span class="comment">#Email: yafeng2011@126.com</span></div><div class="line"><span class="comment">#Blog: http://blog.arvon.top/</span></div><div class="line"><span class="comment">#Date: 2017-05-23</span></div><div class="line"><span class="comment">#Filename: write_jumpserver_host.py</span></div><div class="line"><span class="comment">#Revision: 1.0</span></div><div class="line"><span class="comment">#License: GPL</span></div><div class="line"><span class="comment">#Description: use ansible get host list then use xlrd module write excel</span></div><div class="line"><span class="comment">#Notes:</span></div><div class="line"><span class="comment">###############################################################################</span></div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> openpyxl</div><div class="line"><span class="comment">#vars</span></div><div class="line">port=<span class="string">'22'</span></div><div class="line">host_group=<span class="string">'group_name'</span></div><div class="line">aws_access_id=<span class="string">'your_id'</span></div><div class="line">aws_secret_id=<span class="string">'your_id'</span></div><div class="line">server_file_name=<span class="string">'./running_ec2_list.txt'</span></div><div class="line">dest_filename = <span class="string">'asset_cn_dev.xlsx'</span></div><div class="line"><span class="comment">##functions</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_server_file</span><span class="params">()</span>:</span></div><div class="line">  os.environ[<span class="string">'AWS_ACCESS_KEY_ID'</span>] = aws_access_id</div><div class="line">  os.environ[<span class="string">'AWS_SECRET_ACCESS_KEY'</span>] = aws_secret_id</div><div class="line">  os.system(<span class="string">'ansible-playbook get_ec2_host_list.yml'</span>)</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_jumpserver_excel</span><span class="params">()</span>:</span></div><div class="line">  wb = openpyxl.Workbook()</div><div class="line">  ws1 = wb.active</div><div class="line">  ws1.title = <span class="string">'Assets'</span></div><div class="line">  ws1.append([<span class="string">'IP地址'</span>,<span class="string">'端口号'</span>,<span class="string">'主机名'</span>,<span class="string">'管理账号'</span>,<span class="string">'用户名'</span>,<span class="string">'密码'</span>,<span class="string">'主机组'</span>])</div><div class="line">  <span class="keyword">with</span> open (server_file_name, <span class="string">'r'</span>) <span class="keyword">as</span> f1:</div><div class="line">      server_num = len(open(server_file_name,<span class="string">'rU'</span>).readlines())</div><div class="line">      row = int(<span class="number">2</span>)</div><div class="line">      <span class="keyword">for</span> eachline <span class="keyword">in</span> f1:</div><div class="line">          server_info=eachline.split()</div><div class="line">          private_ip=server_info[<span class="number">0</span>]</div><div class="line">          tag_name=server_info[<span class="number">1</span>]</div><div class="line">          ws1.cell(column=<span class="number">1</span>,row=row,value=private_ip)</div><div class="line">          ws1.cell(column=<span class="number">2</span>,row=row,value=port)</div><div class="line">          ws1.cell(column=<span class="number">3</span>,row=row,value=tag_name)</div><div class="line">          ws1.cell(column=<span class="number">4</span>,row=row,value=<span class="string">'默认'</span>)</div><div class="line">          ws1.cell(column=<span class="number">5</span>,row=row,value=<span class="string">''</span>)</div><div class="line">          ws1.cell(column=<span class="number">6</span>, row=row, value=<span class="string">''</span>)</div><div class="line">          ws1.cell(column=<span class="number">7</span>, row=row, value=host_group)</div><div class="line">          wb.save(filename=dest_filename)</div><div class="line">          row=row+<span class="number">1</span></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</div><div class="line">  write_jumpserver_excel()</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="设置教程"><a href="#设置教程" class="headerlink" title="设置教程"></a>设置教程</h3><ul>
<li>使用jumpserver账户密码登录，如果未设置就是admin及默认密码（如果没有改端口默认为8000）<br><img src="http://img.arvon.top:80/images/2019/08/12/20170524-jumpserver-2.png" alt="2"></li>
<li>进入设置页面，<strong>注意</strong>这里填写的用户只能一次，新添加一个会覆盖原来的设置<br><img src="http://img.arvon.top:80/images/2019/08/12/20170524-jumpserver-3.jpg" alt="3"></li>
<li>建立用户组，然后建立用户时关联用户组，这里的用户和组都是相对jumpserver其实在服务器上并不需要存在这些<br><img src="http://img.arvon.top:80/images/2019/08/12/20170524-jumpserver-4.jpg" alt="4"></li>
<li>添加资产，可以使用上面的python脚本进行批量添加<br><img src="http://img.arvon.top:80/images/2019/08/12/20170524-jumpserver-5.jpg" alt="5"></li>
<li>创建sudo权限控制组，方便对权限进行精细控制<br><img src="http://img.arvon.top:80/images/2019/08/12/20170524-jumpserver-6.jpg" alt="6"></li>
<li>创建用户，这时并没有真正创建，需要保存后进行推送，推送需要选择资产或资产组，选择完成点击推送后会在对应资产上创建该用户<br><img src="http://img.arvon.top:80/images/2019/08/12/20170524-jumpserver-7.jpg" alt="7"></li>
<li>确定jumpserver用户以哪个系统用户访问对应资产<br><img src="http://img.arvon.top:80/images/2019/08/12/20170524-jumpserver-8.jpg" alt="8"></li>
<li>设置完成，此时jumpserver新建用户可以通过接收到的邮件信息进行访问了<ul>
<li>上传下载这个比较好理解直接操作一遍就清楚了</li>
<li>另外有审计功能也是很不错，方便问题定位，也是点着看看就清楚了</li>
</ul>
</li>
</ul>
<hr>
<p>再次感谢jumpserver的开发团队！！！<br>以上</p>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul>
<li><a href="https://github.com/jumpserver/jumpserver" target="_blank" rel="external">jumpserver_doc</a></li>
<li><a href="https://github.com/jumpserver/jumpserver/wiki/%E5%AE%89%E8%A3%85%E5%9B%BE%E8%A7%A3" target="_blank" rel="external">install doc</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MacOS下pip安装报permitted错误解决]]></title>
      <url>http://arvon.top/2017/05/24/MacOS%E4%B8%8Bpip%E5%AE%89%E8%A3%85%E6%8A%A5permitted%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3/</url>
      <content type="html"><![CDATA[<p><img src="http://img.arvon.top:80/images/2019/08/12/20170627-macerror-1.jpg" alt="1"><br>安装个python的etcd模块报错，那红红的一串很是好看。。。<br><a id="more"></a></p>
<p><strong>故障描述：</strong><br>就是这种权限报错OSError: [Errno 1] Operation not permitted ，原因如下</p>
<blockquote>
<p>Mac现在系统有个称为SIP的机制(System Integrity Protection)，默认下系统启用SIP系统完整性保护机制，无论是对于硬盘还是运行时的进程限制对系统目录的写操作，macosx 10.11 EI Capitan使用了Rootlees，可以理解为一个更高等级的内核保护，系统会默认锁定/system , /sbin , /usr这三个目录，所以安装的时候会报这个错误</p>
</blockquote>
<p><strong>解决方法：</strong></p>
<ul>
<li><p>很魔性</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pip install etcd --user U</div><div class="line"><span class="comment">#基于用户的权限来安装模块包，这样问题就解决了</span></div></pre></td></tr></table></figure>
</li>
<li><p>很粗暴(没尝试，也不推荐)</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">csrutil status</div><div class="line"><span class="comment">#需要进入macos的recovery模式终端进行修改csrutil enable</span></div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[计算机度量单位总结]]></title>
      <url>http://arvon.top/2017/04/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%BA%A6%E9%87%8F%E5%8D%95%E4%BD%8D%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p>第一次可以分不清大B小b，但二次就不应该。。。<br><img src="http://img.arvon.top:80/images/2019/08/12/20010101-emoticon-1.jpg" alt="1"><br><a id="more"></a></p>
<p><strong>来看一看</strong>：</p>
<table>
<thead>
<tr>
<th>name</th>
<th>简写</th>
<th>次方</th>
<th>name</th>
<th>简写</th>
<th>次方</th>
</tr>
</thead>
<tbody>
<tr>
<td>kilobyte</td>
<td>KB</td>
<td>10^3</td>
<td>kibibyte</td>
<td>KiB</td>
<td>2^10</td>
</tr>
<tr>
<td>megabyte</td>
<td>MB</td>
<td>10^6</td>
<td>mebibyte</td>
<td>MiB</td>
<td>2^20</td>
</tr>
<tr>
<td>gigabyte</td>
<td>GB</td>
<td>10^9</td>
<td>gibibyte</td>
<td>GiB</td>
<td>2^30</td>
</tr>
<tr>
<td>terabyte</td>
<td>TB</td>
<td>10^12</td>
<td>tebibyte</td>
<td>TiB</td>
<td>2^40</td>
</tr>
<tr>
<td>petabyte</td>
<td>PB</td>
<td>10^15</td>
<td>pebibyte</td>
<td>PiB</td>
<td>2^50</td>
</tr>
<tr>
<td>exabyte</td>
<td>EB</td>
<td>10^18</td>
<td>exbibyte</td>
<td>EiB</td>
<td>2^60</td>
</tr>
<tr>
<td>zettabyte</td>
<td>ZB</td>
<td>10^21</td>
<td>zebibyte</td>
<td>ZiB</td>
<td>2^70</td>
</tr>
<tr>
<td>yottabyte</td>
<td>YB</td>
<td>10^24</td>
<td>yobibyte</td>
<td>YiB</td>
<td>2^80</td>
</tr>
</tbody>
</table>
<h3 id="看个详细的图标"><a href="#看个详细的图标" class="headerlink" title="看个详细的图标"></a>看个详细的图标</h3><table>
<thead>
<tr>
<th>单位</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>bit</td>
<td>计算机最小的数据单位，1比特等于1或者0，是计算机处理、存储、传输数据时使用的二进制格式。</td>
</tr>
<tr>
<td>byte</td>
<td>用于描述数据文件大小、磁盘或者其他存储介质空间的容量或者通过网络传输的数据量的单位，1字节相当于8比特。</td>
</tr>
<tr>
<td>kb(kilobit)</td>
<td>大约1000比特。</td>
</tr>
<tr>
<td>kB(kilobyte)</td>
<td>大约1000字节（精确值为1024字节）</td>
</tr>
<tr>
<td>Mb(megabit)</td>
<td>大约1000万比特</td>
</tr>
<tr>
<td>MB(megabyte)</td>
<td>大约1000万字节(精确值为1048576字节)。megabyte有时记作“meg.”。大多数个人电脑使用MB来计算内存大小，大文件有时也用MB来度量大小。</td>
</tr>
<tr>
<td>GB(gigabyte)</td>
<td>大约10亿字节。Gigbyte有时记作“gig”。大多数的个人电脑使用GB来度量硬盘大小。</td>
</tr>
<tr>
<td>TB(terabyte)</td>
<td>大约1万亿字节。一些高端计算机使用TB来度量硬盘大小。</td>
</tr>
<tr>
<td>kbit/s(kilobits per second)</td>
<td>1000比特每秒。它是计算通过网络连接传输的数据量的标准单位。</td>
</tr>
<tr>
<td>kB/s(kilobytes per second)</td>
<td>1000字节每秒。它是计算通过网络连接传输的数据量的标准单位。</td>
</tr>
<tr>
<td>Mbit/s(megabits per second)</td>
<td>100万比特每秒。它是计算机通过网络连接传输的数据量的标准单位。基础以太网工作带宽为10Mbit/s。</td>
</tr>
<tr>
<td>MB/s(megabyte per second)</td>
<td>100万字节每秒。它是计算通过网络连接传输的数据量的标准单位。</td>
</tr>
<tr>
<td>Gbit/s(gigabits per second)</td>
<td>10亿比特每秒。它是计算机通过网络连接传输的数据量的标准单位。10G或者10吉比特以太网工作带宽为10Gbit/s。</td>
</tr>
<tr>
<td>Tbit/s(terabits per second)</td>
<td>1万亿比特每秒。它是计算机通过网络连接传输的数据量的标准单位。</td>
</tr>
<tr>
<td>HZ(hertz)</td>
<td>频率单位。声波、交流电及其他循环波形的状态转换速度或周期。1Hz表示一秒钟一个循环。</td>
</tr>
<tr>
<td>MHz(megahertz)</td>
<td>兆赫。它是描述计算机微处理器等处理芯片速度的一个常用单位。许多无线电话工作在这个频段。</td>
</tr>
<tr>
<td>GHz(gigahertz)</td>
<td>吉(1 000 000 000)赫。它是描述计算机微处理器等处理芯片速度的一个常用单位。许多无线电话和无线LAN工作在这个频段。</td>
</tr>
</tbody>
</table>
<p><strong>另外：</strong></p>
<blockquote>
<p>MB等单位以10为底数的指数，MiB是以2为底数的指数，如：1KB=10^3=1000, 1MB=10^6=1000000=1000KB,1GB=10^9=1000000000=1000MB,而 1KiB=2^10=1024,1MiB=2^20=1048576=1024KiB。与我们密切相关的是我们在买硬盘的时候，操作系统报的数量要比产品标出或商家号称的小一些，主要原因是标出的是以MB、GB为单位的，1GB就是1,000,000,000 Byte，而操作系统是以2进制为处理单位的，因此检查硬盘容量时是以MiB、GiB为单位，1GB=2^30=1,073,741,824，相比较而言，1GiB要比1GB多出1,073,741,824-1,000,000,000=73,741,824，所以检测实际结果要比标出的少一些。</p>
</blockquote>
<h3 id="内容来自以下链接整理，鸣谢"><a href="#内容来自以下链接整理，鸣谢" class="headerlink" title="内容来自以下链接整理，鸣谢"></a>内容来自以下链接整理，鸣谢</h3><p><a href="http://blog.sina.com.cn/s/blog_604fb7ae0100sbc3.html" target="_blank" rel="external">一片叶子的博客</a><br><a href="http://blog.csdn.net/starshine/article/details/8226320" target="_blank" rel="external">starshine的博客</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[小米Air系统重装Win7]]></title>
      <url>http://arvon.top/2017/03/01/%E5%B0%8F%E7%B1%B3Air%E7%B3%BB%E7%BB%9F%E9%87%8D%E8%A3%85Win7/</url>
      <content type="html"><![CDATA[<p><strong>Tips:</strong>为毛装个系统还要记一下</p>
<blockquote>
<p>网络的解释说第六代酷睿使用了更新的主板芯片，win7缺少驱动。</p>
<ul>
<li>Skylake一代会支持DDR4，100系列芯片组升级也很诱人，但新平台有个大坑需要注意——Skylake平台上不能通过USB接口装Windows 7系统了。</li>
<li>Skylake一代Intel会移除EHCI主控，改为支持XHCI主控，但Windows 7系统原生不支持XHCI主控。再进一步说就是，如果你打算在Skylake平台上继续使用Windows 7系统，那么安装系统时就会遇到一个难题——不能通过USB硬盘安装，也不能通过USB光驱安装。</li>
<li>Skylake的这个改动只影响Windows 7系统，Windows 8及之后的系统都会原生支持XHCI主控，装系统时USB接口没问题。</li>
</ul>
</blockquote>
<a id="more"></a>
<h3 id="设置BIOG"><a href="#设置BIOG" class="headerlink" title="设置BIOG"></a>设置BIOG</h3><blockquote>
<p>1、开机，按F2进BIOS。选择Security，再选择Set Supervisor Password，这是设置管理员和密码，只有设置了这个，我们下一步才能操作。设置好后，按F10，点Yes。<br>2、重启后，继续按F2，就会出现要你输入管理员密码的提示。输入密码进BIOS，选择Security，往下找，选择Secure Boot，选择Disabled，关闭微软安全认证，不然安装win7会蓝屏的。<br>3、再往上移，找到TPM Availability，改成Hiden。然后往下选择boot，选择硬盘启动模式UEFI改为Legacy。USB Boot改为Enabled，然后选择Boot Devices Order，找到你的U盘PE名称调到第一位，确认后按F10，点Yes重启。<br>4、BIOS设置好后，用注入了NVME驱动的PE进去用DiskGenius把GPT分区转换成MBR，然后和普通笔记本装系统一样了，但是系统也是有要求的，要注入NVME驱动的系统，重启后才不会蓝屏。</p>
</blockquote>
<h3 id="下载列表"><a href="#下载列表" class="headerlink" title="下载列表"></a>下载列表</h3><p>含NVME驱动的PE工具：<a href="http://xz.gqgtpc.com/pe/Gqgtupe3.0.1_Setup.exe" target="_blank" rel="external">http://xz.gqgtpc.com/pe/Gqgtupe3.0.1_Setup.exe</a><br>含NVME驱动的Win7系统：<a href="https://page61.ctfile.com/fs/1773061-211197383" target="_blank" rel="external">https://page61.ctfile.com/fs/1773061-211197383</a></p>
<h3 id="经验贴"><a href="#经验贴" class="headerlink" title="经验贴"></a>经验贴</h3><p><a href="http://bbs.xiaomi.cn/t-13410315" target="_blank" rel="external">http://bbs.xiaomi.cn/t-13410315</a><br><a href="http://www.miui.com/thread-8800142-1-1.html" target="_blank" rel="external">http://www.miui.com/thread-8800142-1-1.html</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[关于Ansible条件判断的一个思考]]></title>
      <url>http://arvon.top/2017/02/01/%E5%85%B3%E4%BA%8EAnsible%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD%E7%9A%84%E4%B8%80%E4%B8%AA%E6%80%9D%E8%80%83/</url>
      <content type="html"><![CDATA[<p><strong>背景：</strong>生产环境中偶然遇到一个问题，在使用Playbook调用supervisor进行stop进程时，虽然supervisor指令成功执行，但进程并没有结束。然后准备使用ansible原生的条件判断，但是目前并没有找到合适的。所以呢就先用笨方法自己手动实现类似于while的判断循环结构。另外引发的思考：1.程序在成功启动的情况下什么操作会导致程序的瞬间崩溃。2.运行状态下移除程序源文件对程序有何影响。3.我需要一本书《程序是如何跑起来的》哈哈。。下面写个playbook模拟下使用Ansible如何等待后台进程执行完毕<br><a id="more"></a></p>
<ul>
<li><p>概览</p>
<blockquote>
<p>目录结构</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">├── ansible.cfg</div><div class="line">├── hosts</div><div class="line">├── roles</div><div class="line">│   └── test_wait</div><div class="line">│       ├── tasks</div><div class="line">│       │   └── main.yml</div><div class="line">│       └── templates</div><div class="line">│           └── check_running_file.sh.j2</div><div class="line">└── test_wait.yml</div></pre></td></tr></table></figure>
</blockquote>
<p>摘要：手动在各个机器上建/tmp/helloworld这个文件，然后执行playbook，然后手动删除这个文件，看到只有这个文件消失时才成功执行下面带when判断的指令，目标达成</p>
</li>
<li><p>检测脚本</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">[root@hosts test_ansible]<span class="comment"># cat roles/test_wait/templates/check_running_file.sh.j2</span></div><div class="line">time_out=0</div><div class="line">dest_file=<span class="string">'/tmp/helloworld'</span></div><div class="line"><span class="keyword">while</span> [ <span class="_">-f</span> <span class="string">"<span class="variable">$&#123;dest_file&#125;</span>"</span> ];<span class="keyword">do</span></div><div class="line">  sleep 1</div><div class="line">  <span class="built_in">let</span> time_out=<span class="variable">$&#123;time_out&#125;</span>+1</div><div class="line">  <span class="keyword">if</span> [ <span class="variable">$&#123;time_out&#125;</span> -ge 30 ];<span class="keyword">then</span></div><div class="line">      <span class="built_in">echo</span> <span class="string">"######Stop gamex Error Time out is <span class="variable">$&#123;time_out&#125;</span> Please Check it!!!#####"</span></div><div class="line">      <span class="built_in">exit</span> 0</div><div class="line">  <span class="keyword">fi</span></div><div class="line"><span class="keyword">done</span></div><div class="line"><span class="built_in">exit</span> 0</div></pre></td></tr></table></figure>
</li>
<li><p>Playbook</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">[root@hosts test_ansible]<span class="comment"># cat roles/test_wait/templates/check_running_file.sh.j2</span></div><div class="line">time_out=0</div><div class="line">dest_file=<span class="string">'/tmp/helloworld'</span></div><div class="line"><span class="keyword">while</span> [ <span class="_">-f</span> <span class="string">"<span class="variable">$&#123;dest_file&#125;</span>"</span> ];<span class="keyword">do</span></div><div class="line">  sleep 1</div><div class="line">  <span class="built_in">let</span> time_out=<span class="variable">$&#123;time_out&#125;</span>+1</div><div class="line">  <span class="keyword">if</span> [ <span class="variable">$&#123;time_out&#125;</span> -ge 30 ];<span class="keyword">then</span></div><div class="line">      <span class="built_in">echo</span> <span class="string">"######Stop gamex Error Time out is <span class="variable">$&#123;time_out&#125;</span> Please Check it!!!#####"</span></div><div class="line">      <span class="built_in">exit</span> 0</div><div class="line">  <span class="keyword">fi</span></div><div class="line"><span class="keyword">done</span></div><div class="line"><span class="built_in">exit</span> 0</div><div class="line">[root@hosts test_ansible]<span class="comment"># cat test_wait.yml</span></div><div class="line">- hosts: <span class="built_in">test</span></div><div class="line">  remote_user: ec2-user</div><div class="line">  gather_facts: True</div><div class="line">  become: yes</div><div class="line">  roles:</div><div class="line">    - test_wait</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Nginx状态码总结]]></title>
      <url>http://arvon.top/2016/12/04/Nginx%E7%8A%B6%E6%80%81%E7%A0%81%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p><img src="http://img.arvon.top:80/images/2019/08/12/20010101-emoticon-26.jpg" alt="我要学习"><br>工作中常见的状态码其实并不多，去小米面试的时候问到关于这个问题，回答的不太好，这里就总结记录一下。万一面试再遇到呢。是吧<br><a id="more"></a></p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>100</td>
<td>Continue    初始的请求已经接受，客户应当继续发送请求的其余部分</td>
</tr>
<tr>
<td>200</td>
<td>正常的返回</td>
</tr>
<tr>
<td>201</td>
<td>已创建，请求成功，服务器创建了新的资源</td>
</tr>
<tr>
<td>202</td>
<td>已接受，服务器已经接受了请求，但未开始处理</td>
</tr>
<tr>
<td>203</td>
<td>非授权信息，服务器已成功处理请求，但一些应答头可能不正确，因为使用的是文档的拷贝</td>
</tr>
<tr>
<td>204</td>
<td>无内容，服务器成功处理了请求，但没有返回任何内容</td>
</tr>
<tr>
<td>205</td>
<td>（重置内容） 服务器成功处理了请求，但没有返回任何内容。</td>
</tr>
<tr>
<td>206</td>
<td>（部分内容） 服务器成功处理了部分 GET 请求。</td>
</tr>
<tr>
<td>300</td>
<td>（多种选择） 针对请求，服务器可执行多种操作。 服务器可根据请求者 (user agent) 选择一项操作，或提供操作列表供请求者选择。</td>
</tr>
<tr>
<td>301</td>
<td>（永久移动） 请求的网页已永久移动到新位置。 服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置。</td>
</tr>
<tr>
<td>302</td>
<td>（临时移动） 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。</td>
</tr>
<tr>
<td>303</td>
<td>（查看其他位置） 请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码。</td>
</tr>
<tr>
<td>304</td>
<td>（未修改） 自从上次请求后，请求的网页未修改过。 服务器返回此响应时，不会返回网页内容。</td>
</tr>
<tr>
<td>305</td>
<td>（使用代理） 请求者只能使用代理访问请求的网页。 如果服务器返回此响应，还表示请求者应使用代理。</td>
</tr>
<tr>
<td>307</td>
<td>（临时重定向） 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。</td>
</tr>
<tr>
<td>400</td>
<td>（错误请求） 服务器不理解请求的语法。</td>
</tr>
<tr>
<td>401</td>
<td>（未授权） 请求要求身份验证。 对于需要登录的网页，服务器可能返回此响应。</td>
</tr>
<tr>
<td>403</td>
<td>（禁止） 服务器拒绝请求。</td>
</tr>
<tr>
<td>404</td>
<td>（未找到） 服务器找不到请求的网页。</td>
</tr>
<tr>
<td>405</td>
<td>（方法禁用） 禁用请求中指定的方法。</td>
</tr>
<tr>
<td>406</td>
<td>（不接受） 无法使用请求的内容特性响应请求的网页。</td>
</tr>
<tr>
<td>407</td>
<td>（需要代理授权） 此状态代码与 401（未授权）类似，但指定请求者应当授权使用代理。</td>
</tr>
<tr>
<td>408</td>
<td>（请求超时） 服务器等候请求时发生超时。</td>
</tr>
<tr>
<td>409</td>
<td>（冲突） 服务器在完成请求时发生冲突。 服务器必须在响应中包含有关冲突的信息。</td>
</tr>
<tr>
<td>410</td>
<td>（已删除） 如果请求的资源已永久删除，服务器就会返回此响应。</td>
</tr>
<tr>
<td>411</td>
<td>（需要有效长度） 服务器不接受不含有效内容长度标头字段的请求。</td>
</tr>
<tr>
<td>412</td>
<td>（未满足前提条件） 服务器未满足请求者在请求中设置的其中一个前提条件。</td>
</tr>
<tr>
<td>413</td>
<td>（请求实体过大） 服务器无法处理请求，因为请求实体过大，超出服务器的处理能力。</td>
</tr>
<tr>
<td>414</td>
<td>（请求的 URI 过长） 请求的 URI（通常为网址）过长，服务器无法处理。</td>
</tr>
<tr>
<td>415</td>
<td>（不支持的媒体类型） 请求的格式不受请求页面的支持。</td>
</tr>
<tr>
<td>416</td>
<td>（请求范围不符合要求） 如果页面无法提供请求的范围，则服务器会返回此状态代码。</td>
</tr>
<tr>
<td>417</td>
<td>（未满足期望值） 服务器未满足”期望”请求标头字段的要求。</td>
</tr>
<tr>
<td>500</td>
<td>（服务器内部错误） 服务器遇到错误，无法完成请求。</td>
</tr>
<tr>
<td>501</td>
<td>（尚未实施） 服务器不具备完成请求的功能。 例如，服务器无法识别请求方法时可能会返回此代码。</td>
</tr>
<tr>
<td>502</td>
<td>（错误网关） 服务器作为网关或代理，从上游服务器收到无效响应。</td>
</tr>
<tr>
<td>503</td>
<td>（服务不可用） 服务器目前无法使用（由于超载或停机维护）。 通常，这只是暂时状态。</td>
</tr>
<tr>
<td>504</td>
<td>（网关超时） 服务器作为网关或代理，但是没有及时从上游服务器收到请求。</td>
</tr>
<tr>
<td>505</td>
<td>（HTTP 版本不受支持） 服务器不支持请求中所用的 HTTP 协议版本。</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Iptables整理笔记]]></title>
      <url>http://arvon.top/2016/11/17/Iptables%E6%95%B4%E7%90%86%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p><img src="http://img.arvon.top:80/images/2019/08/12/20161117-iptables-1.png" alt="20161117-iptables-1"><br>iptabels还是很实用的，分享下我的整理笔记<br><a id="more"></a></p>
<h2 id="场景规则"><a href="#场景规则" class="headerlink" title="场景规则"></a>场景规则</h2> <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#对本机lo回环地址放开</span></div><div class="line">iptables -I INPUT -i lo -j ACCEPT</div><div class="line"><span class="comment">#对本机访问外部网络放开(ESTABLISHED表示tcp的一种状态，RELETED为ftp的一种状态)</span></div><div class="line">iptabels -I INPUT -m state --state ESTABLISHED,RELETED -j ACCEPT</div><div class="line"><span class="comment">#对所有地址开放本机tcp（80，22，10-21）端口</span></div><div class="line">iptabels -I INPUT -p tcp --dport 22 -j ACCEPT</div><div class="line">iptabels -I INPUT -p tcp --dports 10:21 -j ACCEPT -m comment --comment <span class="string">" 2015-09-24 by arvon"</span></div><div class="line"><span class="comment">#允许所有的地址开放本机的基于ICMP协议的数据包访问</span></div><div class="line">iptables -I INPUT -p icmp -j ACCEPT</div><div class="line"><span class="comment">#ftp主动模式下规则</span></div><div class="line">iptables -I INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT</div><div class="line">iptables -I INPUT -p tcp --dport 21 -j ACCEPT</div><div class="line"><span class="comment">#ftp被动模式下规则</span></div><div class="line">iptables -I INPUT -p tcp --dport 21 -j ACCEPT</div><div class="line">  <span class="comment">##vim /etc/vsftpd/vsftpd.conf</span></div><div class="line">  <span class="comment">#pasv_min_port=50000</span></div><div class="line">  <span class="comment">#pasv_max_port=60000</span></div><div class="line">iptables -I INPUT -p tcp --dports 50000:60000 -j ACCEPT</div><div class="line"><span class="comment">#ftp被动模式下规则二</span></div><div class="line">iptables —I INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT</div><div class="line">iptables -I INPUT -p tcp --dport 21 -j ACCEPT</div><div class="line">  <span class="comment">#modprobe nf_conntrack_ftp #临时开启内核连接追踪模块ftp</span></div><div class="line">  <span class="comment">#vim /etc/sysconfig/iptables-config    #开机自动加载</span></div><div class="line">  <span class="comment">##IPTABLES_MODULES="nf_conntrack_ftp"</span></div><div class="line"><span class="comment">#防CC攻击</span></div><div class="line"><span class="comment">#对源地址为12并且并发大于10的数据包进行拒绝并返回错误信息</span></div><div class="line">iptables -I INPUT -p tcp --dport 80 <span class="_">-s</span> 192.168.1.12 -m connlimit --connlimit-above 10 -j REJECT</div><div class="line"><span class="comment">#当icmp不超过10个时放行，当超过10个每分钟放行1个</span></div><div class="line">iptables -A INPUT -p icmp -m <span class="built_in">limit</span> --limit 1/m --limit-burst 10 -j ACCEPT</div><div class="line">iptables -A INPUT -p icmp DROP</div><div class="line"><span class="comment">#防SYN攻击</span></div><div class="line">iptables -N syn-flood</div><div class="line">iptables -A INPUT -p tcp --syn -j syn-flood</div><div class="line">iptables -I syn-flood -p tcp -m <span class="built_in">limit</span> --limit 3/s --limit-burst 6 -j RETURN</div><div class="line">iptables -A syn-flood -j REJECT</div><div class="line"><span class="comment">#转发</span></div><div class="line">iptables -A FORWARD -p tcp <span class="_">-s</span> 10.10.0.0/24 -m multiport --dports 80,110,21 -j ACCEPT</div><div class="line"><span class="comment">#工作日工作时间禁止访问tencent的域名</span></div><div class="line">iptables -I FORWARD -p udp --dport 53 -m string --string <span class="string">"tencent"</span> -m time --timestart 8:00 --timestop 12:00 --days Mon,Tue,Wed,Thu,Fri,Sat -j DROP</div><div class="line"><span class="comment">#内核参数调整</span></div><div class="line">sysctl -w net.ipv4.ip_forward=1 <span class="comment">#开启内核数据包转发功能</span></div><div class="line">sysctl -w net.ipv4.tcp_syncookies=1 <span class="comment">#开启cookies验证，一定程度防止syn攻击</span></div></pre></td></tr></table></figure>
<h2 id="Iptables命令"><a href="#Iptables命令" class="headerlink" title="Iptables命令"></a>Iptables命令</h2> <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#列出所有规则</span></div><div class="line">iptables -nVL</div><div class="line"><span class="comment">#添加规则</span></div><div class="line">iptables -I INPUT <span class="_">-s</span> 192.168.1.0/24 -p tcp -m multiport --dport 22,80 -j ACCEPT</div><div class="line"><span class="comment">#删除一条规则</span></div><div class="line">iptables -D INPUT -p icmp -j ACCEPT</div><div class="line">iptables -D INPUT 2</div><div class="line"><span class="comment">#清除所有规则</span></div><div class="line">iptables -F</div><div class="line"><span class="comment">#SNAT</span></div><div class="line">iptables -t nat -A POSTROUTING <span class="_">-s</span> 10.10.10.177.0/24 -j SNAT --to 10.10.188.111</div><div class="line"><span class="comment">#DNAT</span></div><div class="line">iptables -t nat -A PREROUTING <span class="_">-d</span> 10.10.188.111 -p tcp --dport 80 -j DNAT --to 10.10.177.222:80</div><div class="line"><span class="comment">#在最后添加默认拒绝的规则</span></div><div class="line">iptables -P INPUT DROP</div></pre></td></tr></table></figure>
<h2 id="iptables规则组成"><a href="#iptables规则组成" class="headerlink" title="iptables规则组成"></a>iptables规则组成</h2><ul>
<li>Usage： 四张表 + 五条链(hook point) + 规则<h3 id="四张表"><a href="#四张表" class="headerlink" title="四张表"></a>四张表</h3></li>
<li>filter表<br>  访问控制，规则匹配</li>
<li>nat表<br>  请求转发</li>
<li>mangle表<br>  修改数据包，改变包头中内容（TTL，TOS，MARK），需要对应交换机的支持</li>
<li>raw表<h3 id="五条链"><a href="#五条链" class="headerlink" title="五条链"></a>五条链</h3></li>
<li>INPUT</li>
<li>OUTPUT</li>
<li>FORWARD</li>
<li>PREROUTING</li>
<li>POSTROUTING</li>
</ul>
<h3 id="数据包访问控制"><a href="#数据包访问控制" class="headerlink" title="数据包访问控制"></a>数据包访问控制</h3><ul>
<li>ACCEPT<br>  接收数据包</li>
<li>DROP<br>  直接丢弃数据包，不给客户端返回信息</li>
<li>REJECT<br>  丢弃数据包并给客户端返回信息<h3 id="数据包改写"><a href="#数据包改写" class="headerlink" title="数据包改写"></a>数据包改写</h3></li>
<li>SNAT<br>  对源地址进行改写</li>
<li>DNAT<br>  对目标地址进行改写<h3 id="信息记录"><a href="#信息记录" class="headerlink" title="信息记录"></a>信息记录</h3></li>
<li>LOG<br>  将访问信息记录到log</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[yum安装ffmpeg记录]]></title>
      <url>http://arvon.top/2016/10/25/yum%E5%AE%89%E8%A3%85ffmpeg%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<p>Tips：最近安装一个名为ffmpeg的包，但是epel和ali的源都没有这个包。所以<br><a id="more"></a><br>就google了一下，但是网上提供的方案在我实际环境中并不好使，贴在后面了</p>
<h3 id="个人好使"><a href="#个人好使" class="headerlink" title="个人好使"></a>个人好使</h3><ul>
<li>code<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="常规不好使"><a href="#常规不好使" class="headerlink" title="常规不好使"></a>常规不好使</h3><ul>
<li><p>yum源代码添加如下</p>
<blockquote>
<p>yum install -y automake autoconf libtool gcc gcc-c++</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[dag]</div><div class="line">name=Dag RPM Repository <span class="keyword">for</span> Red Hat Enterprise Linux</div><div class="line">baseurl=http://apt.sw.be/redhat/el<span class="variable">$releasever</span>/en/<span class="variable">$basearch</span>/dag</div><div class="line">gpgcheck=0</div><div class="line">enabled=1</div></pre></td></tr></table></figure>
<p>yum install -y ffmpeg ffmpeg-devel</p>
</blockquote>
</li>
<li><p>好使的</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-7</div><div class="line">rpm --import http://li.nux.ro/download/nux/RPM-GPG-KEY-nux.ro</div><div class="line">rpm -Uvh http://li.nux.ro/download/nux/dextop/el7/x86_64/nux-dextop-release-0-1.el7.nux.noarch.rpm</div><div class="line">yum repolist</div><div class="line">yum install -y ffmpeg</div><div class="line">ffmpeg -version</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Notes：第一本Docker书]]></title>
      <url>http://arvon.top/2016/10/11/Notes%EF%BC%9A%E7%AC%AC%E4%B8%80%E6%9C%ACDocker%E4%B9%A6/</url>
      <content type="html"><![CDATA[<p><img src="http://img.arvon.top:80/images/2019/08/12/20161011-notedocker-1.jpg" alt=""><br>图解http已经阅读完毕，现在开始转向docker的学习，先读《第一本Docker书》，就这样，简要记录读书笔记。</p>
<a id="more"></a>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><ul>
<li>Docker组件<blockquote>
<ul>
<li>Docker客户端和服务器</li>
<li>Docker镜像</li>
<li>Registry: 用来保存用户构建的镜像，分为公共和私有两种</li>
<li>Docker容器</li>
</ul>
</blockquote>
</li>
<li>常用命令<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">yum install docker</div><div class="line">systemctl enable docker</div><div class="line">systemctl start docker</div><div class="line">docker info</div><div class="line"><span class="meta">#</span><span class="bash">查看docker信息</span></div><div class="line">docker run -i -t ubuntu /bin/bash</div><div class="line"><span class="meta">#</span><span class="bash">以ubuntu为基础镜像创建容易完成后并运行/bin/bash启动一个shell，-i保证STDIN开启-t创建一个可以与之交互的伪终端这两个是创建可交互容器的最基本参数</span></div><div class="line">docker run --name arvon_web -i -t ubuntu /bin/bash</div><div class="line"><span class="meta">#</span><span class="bash">创建arvon_web为容器名的容器，可以使用容器名代替容器ID操作容器</span></div><div class="line">docker ps</div><div class="line"><span class="meta">#</span><span class="bash">查看正在运行的容器</span></div><div class="line">docker ps -a</div><div class="line"><span class="meta">#</span><span class="bash">查看所有容器，包括运行的和停止的</span></div><div class="line">docker start arvon_web</div><div class="line"><span class="meta">#</span><span class="bash">启动一个容器，可以使用容器名也可以使用容器ID，启动时会沿用docker run启动时指定的参数，因此会运行交互式会话的shell，使用docker attach可以附着到启动的容器</span></div><div class="line">docker attach arvon_web</div><div class="line"><span class="meta">#</span><span class="bash">附着到arvon_web这个容器，如果退出容器的shell，容器也会随之停止运行</span></div><div class="line">docker run --name demo_arvon -d ubuntu /bin/sh -c "while true;do echo hello world; sleep 1; done"</div><div class="line"><span class="meta">#</span><span class="bash">创建一个守护式进程，并一直输出helloworld，运行后不进入容器，容器在后台运行，可以通过docker ps查看到</span></div><div class="line">docker logs demo_arvon</div><div class="line"><span class="meta">#</span><span class="bash">可以查看demo_arvon这个容器的日志，是即时输出</span></div><div class="line">docker logs -f demo_arvon</div><div class="line"><span class="meta">#</span><span class="bash">相当于tailf，是实时输出的日志</span></div><div class="line">docker logs -ft demo_arvon</div><div class="line"><span class="meta">#</span><span class="bash">带时间戳的实时输出</span></div><div class="line">docker top demo_arvon</div><div class="line"><span class="meta">#</span><span class="bash">查看容器内的进程</span></div><div class="line">docker exec -d demo_arvon touch /etc/new_config_file</div><div class="line"><span class="meta">#</span><span class="bash">在demo_arvon这个容器中创建一个new_config_file的空文件</span></div><div class="line">docker stop demo_arvon</div><div class="line"><span class="meta">#</span><span class="bash">停止容器运行</span></div><div class="line">docker ps -n x</div><div class="line"><span class="meta">#</span><span class="bash">显示最后的x的容器，不管这些容器是否在运行都会列出来</span></div><div class="line">docker inspect demo_arvon</div><div class="line"><span class="meta">#</span><span class="bash">检查容器然后返回容器的配置信息，包括名称、网络配置等</span></div><div class="line">docker inspect --format='&#123;&#123; .State.Running &#125;&#125;' demo_arvon</div><div class="line"><span class="meta">#</span><span class="bash">查看容器的运行状态，<span class="literal">true</span>为运行，<span class="literal">false</span>为停止</span></div><div class="line">docker inspect --format '&#123;&#123; .NetworkSettings.IPAddress &#125;&#125;' demo_arvon</div><div class="line"><span class="meta">#</span><span class="bash">查看容器的IP地址,对运行中的容器有效，为运行的容器返回为空</span></div><div class="line">docker inspect --format='&#123;&#123; .State.Running &#125;&#125;' arvon_web demo_arvon</div><div class="line"><span class="meta">#</span><span class="bash">可以一次指定多个容器，会显示每个容器的输出结果</span></div><div class="line">docker rm arvon_web</div><div class="line"><span class="meta">#</span><span class="bash">删除容器</span></div><div class="line">docker rm `docker ps -a -q`</div><div class="line"><span class="meta">#</span><span class="bash">删除所有容器</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="镜像使用及构建"><a href="#镜像使用及构建" class="headerlink" title="镜像使用及构建"></a>镜像使用及构建</h3><ul>
<li>使用镜像<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">docker images</div><div class="line"><span class="comment">#列出镜像列表</span></div><div class="line">docker pull fedora</div><div class="line"><span class="comment">#将fedora镜像拉取到本地</span></div><div class="line">docker search puppet</div><div class="line"><span class="comment">#查找Docker Hub上公共可用的镜像</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="使用dockercommit构建镜像"><a href="#使用dockercommit构建镜像" class="headerlink" title="使用dockercommit构建镜像"></a>使用dockercommit构建镜像</h3><ul>
<li>Command<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#使用docker commit创建镜像，不推荐</span></div><div class="line">docker login</div><div class="line">Username: arvon2014</div><div class="line">Password:</div><div class="line">Email: mail@126.com</div><div class="line">Login Succeeded</div><div class="line"><span class="comment">#</span></div><div class="line">docker run --name t_img -i -t ubuntu /bin/bash</div><div class="line">docker commit -m=<span class="string">"A new custom image"</span> --author=<span class="string">"arvon"</span> t_img arvon2014/web_test：webserver</div><div class="line"><span class="comment">#其中t_img为容器名可以为容器ID， arvon2014为镜像的用户名web_rest为仓库名；webserver为标签-m为描述-author为作者信息，这些都可以省略</span></div><div class="line">docker inspect arvon2014/web_test:webserver</div><div class="line"><span class="comment">#查看新创建镜像的信息</span></div><div class="line">docker run -t -i arvon2014/web_test:webserver /bin/bash</div><div class="line"><span class="comment">#使用新创建的镜像运行一个容器</span></div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[yum 报错：rpmdb open failed]]></title>
      <url>http://arvon.top/2016/09/30/yum-%E6%8A%A5%E9%94%99%EF%BC%9Arpmdb-open-failed/</url>
      <content type="html"><![CDATA[<p><strong>背景：</strong>刚刚直接kill掉yum进程后，yum报了rpmdb的报错，记一下解决方法<br><a id="more"></a></p>
<ul>
<li><p>报错如下</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">rpmdb: Thread/process 17502/140092449953536 failed: Thread died <span class="keyword">in</span> Berkeley DB library</div><div class="line">error: db3 error(-30974) from dbenv-&gt;failchk: DB_RUNRECOVERY: Fatal error, run database recovery</div><div class="line">error: cannot open Packages index using db3 -  (-30974)</div><div class="line">error: cannot open Packages database <span class="keyword">in</span> /var/lib/rpm</div><div class="line">CRITICAL:yum.main:</div><div class="line">Error: rpmdb open failed</div></pre></td></tr></table></figure>
</li>
<li><p>解决方法</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /var/lib/rpm/</div><div class="line">rm -rf __db.*</div><div class="line">rpm --rebuilddb</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python复习笔记]]></title>
      <url>http://arvon.top/2016/09/19/Python%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<blockquote>
<p>python复习笔记<br>记录一下观看milo在网易云课堂上《疯狂的python》的复习笔记，源视频地址<a href="http://study.163.com/course/courseLearn.htm?courseId=302001#/learn/video?lessonId=417020&amp;courseId=302001" target="_blank" rel="external">戳这里</a></p>
</blockquote>
<a id="more"></a>
<h4 id="第一章：导论"><a href="#第一章：导论" class="headerlink" title="第一章：导论"></a>第一章：导论</h4><h5 id="课时1-2：简介"><a href="#课时1-2：简介" class="headerlink" title="课时1-2：简介"></a>课时1-2：简介</h5><ul>
<li><p>编译python文件,生成pyc文件</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#编译1.py文件生成1.pyc的二进制文件</span></div><div class="line"><span class="keyword">import</span> py_compile</div><div class="line">py_compile.compile(<span class="string">'1.py'</span>)</div></pre></td></tr></table></figure>
</li>
<li><p>编译python文件，生成pyo文件</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#pyo为优化的二进制文件</span></div><div class="line">python -O -m py_compile <span class="number">1.</span>py</div></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="课时3：变量"><a href="#课时3：变量" class="headerlink" title="课时3：变量"></a>课时3：变量</h5><ul>
<li><p>变量赋值</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">a = <span class="number">1</span></div><div class="line">b_c = <span class="string">'abc'</span></div><div class="line">_bc3 = <span class="string">'a2b3'</span></div></pre></td></tr></table></figure>
</li>
<li><p>python变量特性</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#python的变量和C等语言不一样，python是以数据申请内存空间，即同个变量不用数据使用不同的内存空间，使用id函数可以查看数据对应的内存空间。</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a=<span class="number">1</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a</div><div class="line"><span class="number">1</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>id(a)</div><div class="line"><span class="number">22053688</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a=<span class="number">2</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a</div><div class="line"><span class="number">2</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>id(a)</div><div class="line"><span class="number">22053664</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b=<span class="number">2</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b</div><div class="line"><span class="number">2</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>id(b)</div><div class="line"><span class="number">22053664</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="课时4：运算符和表达式"><a href="#课时4：运算符和表达式" class="headerlink" title="课时4：运算符和表达式"></a>课时4：运算符和表达式</h5><ul>
<li><p>赋值运算符</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a=<span class="number">1</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a+=<span class="number">2</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a</div><div class="line"><span class="number">3</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a+=<span class="number">3</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a</div><div class="line"><span class="number">6</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a-=<span class="number">4</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a</div><div class="line"><span class="number">2</span></div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>算术运算符</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">+ - *    基础加减乘</div><div class="line">/    要小数点<span class="number">1.0</span>/<span class="number">2</span>  整除<span class="number">3.0</span>//<span class="number">2</span></div><div class="line">%    取余数</div><div class="line">**   取幂运算</div></pre></td></tr></table></figure>
</li>
<li><p>关系运算符</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span> &lt; <span class="number">2</span></div><div class="line"><span class="number">2</span> &gt; <span class="number">1</span></div><div class="line"><span class="number">1</span> == <span class="number">1</span></div><div class="line"><span class="number">1</span> &lt;= <span class="number">1</span></div><div class="line"><span class="number">2</span> &gt;= <span class="number">2</span></div><div class="line"><span class="number">1</span> != <span class="number">2</span></div></pre></td></tr></table></figure>
</li>
<li><p>逻辑运算符</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span> &lt; <span class="number">2</span> <span class="keyword">and</span> <span class="number">2</span> &lt; <span class="number">3</span></div><div class="line"><span class="number">1</span> &lt; <span class="number">2</span> <span class="keyword">or</span> <span class="number">2</span> &gt; <span class="number">3</span></div><div class="line"><span class="keyword">not</span> <span class="number">1</span> &gt; <span class="number">2</span></div></pre></td></tr></table></figure>
</li>
<li><p>小练习</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">a=int(raw_input(<span class="string">'number1 = '</span>))</div><div class="line">b=int(raw_input(<span class="string">'number2 = '</span>))</div><div class="line">c = a+b</div><div class="line"><span class="keyword">print</span> str(a)+<span class="string">' + '</span>+str(b)+<span class="string">' = '</span>+str(c)</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="第二章：数据类型"><a href="#第二章：数据类型" class="headerlink" title="第二章：数据类型"></a>第二章：数据类型</h4><p>主要数据类型五种包括数字、字符串、元组、列表和字典</p>
<h5 id="课时5：数字和字符串"><a href="#课时5：数字和字符串" class="headerlink" title="课时5：数字和字符串"></a>课时5：数字和字符串</h5><ul>
<li><p>数字类型包括整型、长整型、浮点型、复数型</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>num1 = <span class="number">123</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>type(num1)</div><div class="line">&lt;type <span class="string">'int'</span>&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>num2 = <span class="number">123L</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>type(num2)</div><div class="line">&lt;type <span class="string">'long'</span>&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>num3 = <span class="number">99999999999999999999</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>type(num3)</div><div class="line">&lt;type <span class="string">'long'</span>&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>num4 = <span class="number">1.23</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>type(num4)</div><div class="line">&lt;type <span class="string">'float'</span>&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>num5 = <span class="number">1.23j</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>type(num5)</div><div class="line">&lt;type <span class="string">'complex'</span>&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>字符串类型可以使用单引号、双引号、三单引定义</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">123</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>stra = <span class="string">'123'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>type(a)</div><div class="line">&lt;type <span class="string">'int'</span>&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>type(stra)</div><div class="line">&lt;type <span class="string">'str'</span>&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>strb = <span class="string">"let's say \"hello\""</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> strb</div><div class="line">let<span class="string">'s say "hello"</span></div></pre></td></tr></table></figure>
</li>
<li><p>字符串切片</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">'abcde'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">1</span>:<span class="number">4</span>]</div><div class="line"><span class="string">'bcd'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a[:]</div><div class="line"><span class="string">'abcde'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a[:<span class="number">4</span>]</div><div class="line"><span class="string">'abcd'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">4</span>:]</div><div class="line"><span class="string">'e'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a[::<span class="number">1</span>]</div><div class="line"><span class="string">'abcde'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a[::<span class="number">2</span>]</div><div class="line"><span class="string">'ace'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">-1</span>]</div><div class="line"><span class="string">'e'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">-4</span>:<span class="number">-1</span>]</div><div class="line"><span class="string">'bcd'</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="课时6：元组"><a href="#课时6：元组" class="headerlink" title="课时6：元组"></a>课时6：元组</h5><p>列表、元组和字符串都是序列，序列的主要特点是索引操作符合切片操作符</p>
<ul>
<li><p>序列的基本操作</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">len()  <span class="comment">#求序列长度</span></div><div class="line">+  <span class="comment">#连接两个序列</span></div><div class="line">*  <span class="comment">#重复序列元素</span></div><div class="line"><span class="keyword">in</span> <span class="comment">#判断元素是否在序列中</span></div><div class="line">max()  <span class="comment">#返回最大的值</span></div><div class="line">min()  <span class="comment">#返回最小的值</span></div><div class="line">cmp(tuple1, tuple2)    <span class="comment">#比较两个序列值是否相同</span></div><div class="line"><span class="comment">#EX---</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>str1 = <span class="string">'abcde'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>str2 = <span class="string">'12345'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>str1 + str2</div><div class="line"><span class="string">'abcde12345'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>str1 * <span class="number">5</span></div><div class="line"><span class="string">'abcdeabcdeabcdeabcdeabcde'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'a'</span> <span class="keyword">in</span> str1</div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>max(str1)</div><div class="line"><span class="string">'e'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>min(str2)</div><div class="line"><span class="string">'1'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>cmp(str1, str2)</div><div class="line"><span class="number">1</span></div></pre></td></tr></table></figure>
</li>
<li><p>元组<br>通过小括号定义()，元组和列表类似，不过元组被使用元组的值也<strong>不改变</strong>。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>userinfo1=(<span class="string">"zou"</span>, <span class="number">31</span>, <span class="string">"female"</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>userinfo1[<span class="number">1</span>]</div><div class="line"><span class="number">31</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>userinfo1[<span class="number">0</span>]</div><div class="line"><span class="string">'zou'</span></div><div class="line"><span class="comment">#单一元素的元组定义时要加逗号</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="课时7：列表"><a href="#课时7：列表" class="headerlink" title="课时7：列表"></a>课时7：列表</h5><ul>
<li><p>列表操作方法<br>通过中括号定义[]，列表是可变类型的数据</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">listmilo=[<span class="string">'arvon'</span>, <span class="number">24</span>, <span class="string">'male'</span>]</div><div class="line"><span class="comment">#取值</span></div><div class="line">age=listmilo[<span class="number">1</span>]</div><div class="line"><span class="comment">#添加</span></div><div class="line">listmilo.append(<span class="string">'Linux'</span>)</div><div class="line"><span class="comment">#删除</span></div><div class="line">listmilo.remove(listmilo[<span class="number">2</span>])</div><div class="line"><span class="keyword">del</span>(listmilo[<span class="number">2</span>])</div><div class="line"><span class="comment">#修改</span></div><div class="line">listmilo[<span class="number">1</span>]=<span class="number">18</span></div><div class="line"><span class="comment">#查看</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>listmilo [<span class="string">'arvon'</span>, <span class="number">18</span>, <span class="string">'Linux'</span>]</div><div class="line"><span class="comment">#查找</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"Linux"</span> <span class="keyword">in</span> listmilo</div><div class="line"><span class="keyword">True</span></div></pre></td></tr></table></figure>
</li>
<li><p>对象和类快速入门<br>对象=属性+方法</p>
</li>
</ul>
<h5 id="课时8：字典"><a href="#课时8：字典" class="headerlink" title="课时8：字典"></a>课时8：字典</h5><p>使用花括号定义，字典是python中唯一的映射类型（哈希表），字典的对象是可变的，但字典的键必须使用不可变对象，并且一个字典中可以使用不同类型的键<br>keys()或者values()返回键列表或者值列表，items()返回包含键值对的元组。</p>
<ul>
<li><p>例子<br>可以直接使用key访问，key不存在会报错，可以使用had_key()方法或者in/not in来判断，另had_key()方法即将弃用</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a=<span class="number">123</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b=<span class="number">456</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dic4=&#123;a:<span class="string">'aaa'</span>,b:<span class="string">'bbb'</span>,<span class="string">'c'</span>:<span class="string">'ccc'</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dic4</div><div class="line">&#123;<span class="number">456</span>: <span class="string">'bbb'</span>, <span class="string">'c'</span>: <span class="string">'ccc'</span>, <span class="number">123</span>: <span class="string">'aaa'</span>&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>使用dict方法生成字典和使用fromkeys生成字典</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">fdict=dict([<span class="string">'x'</span>,<span class="number">1</span>],[<span class="string">'y'</span>,<span class="number">2</span>])</div><div class="line">ddict=&#123;&#125;.fromkeys((<span class="string">'x'</span>,<span class="string">'y'</span>),<span class="number">-1</span>)</div></pre></td></tr></table></figure>
</li>
<li><p>字典的添加和删除<br>字典是无序的所以可以任意添加元素，列表就不行</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#添加和修改元素元素</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dic1=&#123;<span class="string">'name'</span>:<span class="string">'arvon'</span>,<span class="string">'age'</span>:<span class="number">24</span>,<span class="string">'work'</span>:<span class="string">'BJ'</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dic1[<span class="string">'tel'</span>]=<span class="number">123456</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dic1</div><div class="line">&#123;<span class="string">'age'</span>: <span class="number">24</span>, <span class="string">'work'</span>: <span class="string">'BJ'</span>, <span class="string">'tel'</span>: <span class="number">123456</span>, <span class="string">'name'</span>: <span class="string">'arvon'</span>&#125;</div><div class="line"><span class="comment">#删除元素</span></div><div class="line">dict1.clear()  <span class="comment">#删除dict1字典的所有元素</span></div><div class="line"><span class="keyword">del</span> dict1  <span class="comment">#删除dict1这个字典</span></div><div class="line"><span class="comment">#取值</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dic1=&#123;<span class="string">'a'</span>:<span class="number">1</span>, <span class="string">'b'</span>:<span class="number">2</span>, <span class="string">'c'</span>:<span class="number">3</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dic1[<span class="string">'a'</span>]</div><div class="line"><span class="number">1</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dic.get(<span class="string">'c'</span>)</div><div class="line"><span class="number">3</span></div><div class="line"><span class="comment">#返回字典可key列表和values列表</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dic1=&#123;<span class="string">'a'</span>:<span class="number">1</span>, <span class="string">'b'</span>:<span class="number">2</span>, <span class="string">'c'</span>:<span class="number">3</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dict.keys(dic1)</div><div class="line">[<span class="string">'a'</span>, <span class="string">'c'</span>, <span class="string">'b'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dict.values(dic1)</div><div class="line">[<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>]</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="第三章：流程控制"><a href="#第三章：流程控制" class="headerlink" title="第三章：流程控制"></a>第三章：流程控制</h4><p>主要包括判断和循环</p>
<h5 id="课时9：分支结构"><a href="#课时9：分支结构" class="headerlink" title="课时9：分支结构"></a>课时9：分支结构</h5><p>逻辑值（bool）用来表示诸如：对和错、真和假、空与非空等概念。逻辑值True表示非空的量如（string，tuple，list，set，dictonary等），逻辑值False表示0，None，空的量等。</p>
<ul>
<li><p>if else判断</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> <span class="number">1</span>&lt;<span class="number">2</span>:</div><div class="line">   <span class="keyword">print</span> <span class="string">'Yes'</span></div><div class="line"><span class="keyword">else</span>:</div><div class="line">   <span class="keyword">print</span> <span class="string">'No'</span></div></pre></td></tr></table></figure>
</li>
<li><p>elif 多条件判断</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">a=raw_input(<span class="string">"Input a num: "</span>)</div><div class="line"><span class="keyword">if</span> <span class="number">1</span> &lt; a &lt; <span class="number">3</span>:</div><div class="line">    <span class="keyword">print</span> str(a)+<span class="string">" is 1-3"</span></div><div class="line"><span class="keyword">elif</span> a &gt;= <span class="number">3</span>:</div><div class="line">    <span class="keyword">print</span> str(a)+<span class="string">" is 3-*"</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="课时10：逻辑运算符"><a href="#课时10：逻辑运算符" class="headerlink" title="课时10：逻辑运算符"></a>课时10：逻辑运算符</h5><p>逻辑运算符包括”and”,”or”,”not”</p>
<ul>
<li><p>无聊的例子</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">a = <span class="number">5</span></div><div class="line"><span class="keyword">if</span> a &gt; <span class="number">1</span> <span class="keyword">and</span> a !=<span class="number">2</span>:</div><div class="line">    <span class="keyword">if</span> a==<span class="number">4</span> <span class="keyword">or</span> <span class="number">1</span>&lt;<span class="number">2</span>:</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> a !=<span class="number">5</span>:</div><div class="line">            <span class="keyword">print</span> <span class="string">"Oh"</span></div></pre></td></tr></table></figure>
</li>
<li><p>有用的not</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> <span class="keyword">not</span> fun():</div><div class="line">    <span class="keyword">print</span> <span class="string">"ok"</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="课时11：for循环"><a href="#课时11：for循环" class="headerlink" title="课时11：for循环"></a>课时11：for循环</h5><p>使用for可以循环字符串、元组和列表</p>
<ul>
<li><p>使用for循环字符串</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">'abcde'</span>:</div><div class="line">   <span class="keyword">print</span> i</div></pre></td></tr></table></figure>
</li>
<li><p>使用range方法快速生成序列</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#第一参数为开始值不设置默认为0，第二个为结束值，第三个为步长不写默认为步值为1</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">100</span>,<span class="number">2</span>):</div><div class="line">   <span class="keyword">print</span> i</div></pre></td></tr></table></figure>
</li>
<li><p>小题：计算1到100累加的值</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">num=<span class="number">0</span></div><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">101</span>):</div><div class="line">    num=num+x</div><div class="line"><span class="keyword">print</span> num</div></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="课时12：遍历"><a href="#课时12：遍历" class="headerlink" title="课时12：遍历"></a>课时12：遍历</h5><p>遍历对象可以是字符串、元组、列表</p>
<ul>
<li><p>使用索引遍历</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(len(<span class="string">"hello"</span>)):</div><div class="line">   <span class="keyword">print</span> <span class="string">"hello"</span>[x]</div></pre></td></tr></table></figure>
</li>
<li><p>字典的遍历</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">d = &#123;<span class="number">1</span>:<span class="number">111</span>, <span class="number">2</span>:<span class="number">222</span>, <span class="number">4</span>:<span class="number">444</span>, <span class="number">3</span>:<span class="number">333</span>&#125;</div><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> d:</div><div class="line">    <span class="keyword">print</span> x</div><div class="line">    <span class="keyword">print</span> d[x]</div></pre></td></tr></table></figure>
</li>
<li><p>字典元组拆分法</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">d = &#123;<span class="number">1</span>:<span class="number">111</span>, <span class="number">2</span>:<span class="number">222</span>, <span class="number">4</span>:<span class="number">444</span>, <span class="number">3</span>:<span class="number">333</span>&#125;</div><div class="line">f = d.items()</div><div class="line"><span class="keyword">print</span> f</div><div class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> f:</div><div class="line">    <span class="keyword">print</span> k</div><div class="line">    <span class="keyword">print</span> v</div></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="课时13：循环控制"><a href="#课时13：循环控制" class="headerlink" title="课时13：循环控制"></a>课时13：循环控制</h5><p>主要使用for和while进行循环控制</p>
<ul>
<li><p>Python特殊的for循环，在python中for循环是可以有else的</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#在循环遍历结束时最后会打印一次ending，如果程序未正常遍历结束则不会触发</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</div><div class="line">   <span class="keyword">print</span> i</div><div class="line"><span class="keyword">else</span>:</div><div class="line">   <span class="keyword">print</span> <span class="string">"ending"</span></div></pre></td></tr></table></figure>
</li>
<li><p>使用break跳出循环</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</div><div class="line">    <span class="keyword">print</span> <span class="string">"hello"</span>+str(i)</div><div class="line">    <span class="keyword">if</span> i == <span class="number">3</span>:</div><div class="line">        <span class="keyword">print</span> i</div><div class="line">        <span class="keyword">break</span></div><div class="line"><span class="keyword">else</span>:</div><div class="line">   <span class="keyword">print</span> <span class="string">"ending"</span></div></pre></td></tr></table></figure>
</li>
<li><p>使用continue跳出本次循环</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</div><div class="line">    <span class="keyword">print</span> <span class="string">"hello"</span>+str(i)</div><div class="line">    <span class="keyword">if</span> i == <span class="number">2</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">"22222222"</span></div><div class="line">        <span class="keyword">continue</span></div><div class="line">    <span class="keyword">if</span> i == <span class="number">3</span>:</div><div class="line">        <span class="keyword">print</span> i</div><div class="line">        <span class="keyword">break</span></div><div class="line"><span class="keyword">else</span>:</div><div class="line">   <span class="keyword">print</span> <span class="string">"ending"</span></div></pre></td></tr></table></figure>
</li>
<li><p>使用pass进行占位操作（代码桩）</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</div><div class="line">    <span class="keyword">pass</span></div><div class="line"><span class="keyword">print</span> <span class="string">"Go"</span></div></pre></td></tr></table></figure>
</li>
<li><p>使用exit退出程序</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</div><div class="line">    <span class="keyword">print</span> i</div><div class="line">    exit</div></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="课时14：while循环"><a href="#课时14：while循环" class="headerlink" title="课时14：while循环"></a>课时14：while循环</h5><p>主要做条件循环，直到表达式为假跳出循环,在设计while循环时一定要让有条件退出</p>
<ul>
<li><p>最简单的死循环</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#while 1:</span></div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">"hello"</span></div></pre></td></tr></table></figure>
</li>
<li><p>使用条件退出while</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">"Haha"</span></div><div class="line">    x = raw_input(<span class="string">"Input q for quit: "</span>)</div><div class="line">    <span class="keyword">if</span> x == <span class="string">'q'</span>:</div><div class="line">        <span class="keyword">break</span></div></pre></td></tr></table></figure>
</li>
<li><p>使用while表达式进行条件判断退出</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">x = <span class="string">''</span></div><div class="line"><span class="keyword">while</span> x != <span class="string">'q'</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">"hello"</span></div><div class="line">    x = raw_input(<span class="string">"please input a str, q for quit: "</span>)</div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> x:</div><div class="line">        <span class="keyword">break</span></div></pre></td></tr></table></figure>
</li>
<li><p>while中的else</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">x = <span class="string">''</span></div><div class="line"><span class="keyword">while</span> x != <span class="string">'q'</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">"hello"</span></div><div class="line">    x = raw_input(<span class="string">"please input a str, q for quit: "</span>)</div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> x:</div><div class="line">        <span class="keyword">break</span></div><div class="line"><span class="keyword">else</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">"ending"</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="第四章：函数"><a href="#第四章：函数" class="headerlink" title="第四章：函数"></a>第四章：函数</h4><p>函数就是完成特定功能的语句组，可以通过函数名在程序不同位置多次执行（函数调用）。</p>
<h5 id="课时15：函数定义和调用"><a href="#课时15：函数定义和调用" class="headerlink" title="课时15：函数定义和调用"></a>课时15：函数定义和调用</h5><ul>
<li><p>使用def定义函数，括号里面是参数列表()</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(a,b)</span>:</span></div><div class="line">    c = a + b</div><div class="line">    <span class="keyword">print</span> c</div><div class="line">add(<span class="number">1</span>,<span class="number">2</span>)</div><div class="line">add(<span class="number">3</span>,<span class="number">4</span>)</div></pre></td></tr></table></figure>
</li>
<li><p>基本函数和返回值初探</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">a = <span class="number">100</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">False</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">"Hello"</span></div><div class="line">    <span class="keyword">print</span> a</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span></div><div class="line"><span class="comment">#fun()</span></div><div class="line"><span class="keyword">if</span> <span class="keyword">not</span> fun():</div><div class="line">    <span class="keyword">print</span> <span class="string">"ok"</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="课时16：函数形参、实参、默认参数"><a href="#课时16：函数形参、实参、默认参数" class="headerlink" title="课时16：函数形参、实参、默认参数"></a>课时16：函数形参、实参、默认参数</h5><p>在<strong>定义函数</strong>时函数名后面括号中的变量叫做形参，在<strong>调用函数</strong>时函数名后面的括号中的变量叫做实参</p>
<ul>
<li><p>简单例子</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(x)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"ok"</span></div><div class="line">        <span class="keyword">print</span> x</div><div class="line">s = raw_input(<span class="string">"Input something: "</span>)</div><div class="line">fun(s)</div></pre></td></tr></table></figure>
</li>
<li><p>默认参数例子</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(x,y=<span class="string">'lalala'</span>)</span>:</span></div><div class="line">        <span class="keyword">print</span> x,y</div><div class="line">s = raw_input(<span class="string">"Input something: "</span>)</div><div class="line">fun(<span class="number">4</span>)</div><div class="line">fun(y=<span class="string">'cacaca'</span>)</div><div class="line">fun(<span class="number">2</span>,<span class="string">'goog'</span>)</div></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="课时17：变量作用域"><a href="#课时17：变量作用域" class="headerlink" title="课时17：变量作用域"></a>课时17：变量作用域</h5><p>在python中任何变量都有其特定的作用域，一般在函数中定义的变量只能在函数内部使用，也叫局部变量。在一个文件顶部定义的变量可以提供给该文件中的任何函数调用，也叫全局变量。</p>
<ul>
<li><p>一个例子</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">a = <span class="number">150</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">()</span>:</span></div><div class="line">    a = <span class="number">100</span></div><div class="line">    <span class="keyword">print</span>  <span class="string">'in'</span>,a</div><div class="line">    <span class="comment">#这里打印出的是100</span></div><div class="line">fun()</div><div class="line"><span class="keyword">print</span> <span class="string">'out'</span>,a</div><div class="line"><span class="comment">#out打印出是150</span></div></pre></td></tr></table></figure>
</li>
<li><p>使用global将局部变量声明为全局变量</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">a = <span class="number">150</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">()</span>:</span></div><div class="line">    a = <span class="number">100</span></div><div class="line">    <span class="keyword">global</span> b</div><div class="line">    b = <span class="number">12345</span></div><div class="line">    <span class="keyword">print</span>  <span class="string">'in'</span>,a</div><div class="line">fun()</div><div class="line"><span class="keyword">print</span> <span class="string">'out'</span>,a</div><div class="line"><span class="keyword">print</span> b</div></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="课时18：函数返回值"><a href="#课时18：函数返回值" class="headerlink" title="课时18：函数返回值"></a>课时18：函数返回值</h5><p>函数被调用后会返回一个指定的值即返回值，不指定默认返回None，可以使用return直接指定，返回值可以是任意类型，return执行后函数终止</p>
<ul>
<li>一个例子<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding:utf8</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x,y)</span>:</span></div><div class="line">    t=x+y</div><div class="line">    <span class="keyword">return</span> t</div><div class="line">z = f(<span class="number">2</span>,<span class="number">3</span>)</div><div class="line"><span class="keyword">print</span> z</div><div class="line"><span class="comment">#此时z为None</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="课时19：冗余参数处理"><a href="#课时19：冗余参数处理" class="headerlink" title="课时19：冗余参数处理"></a>课时19：冗余参数处理</h5><ul>
<li><p>正常多类型传值</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x)</span>:</span></div><div class="line">    <span class="keyword">print</span> x</div><div class="line">f(<span class="number">1</span>)</div><div class="line">f(<span class="string">'abc'</span>)</div><div class="line">f([<span class="string">'arvon'</span>,<span class="string">'mo'</span>])</div><div class="line">f(&#123;<span class="string">'arvon'</span>:<span class="number">123</span>,<span class="string">'blog'</span>:<span class="string">'arvon.top'</span>&#125;)</div><div class="line">f(range(<span class="number">10</span>))</div></pre></td></tr></table></figure>
</li>
<li><p>传递元组到多个参数,<em>号和**的使用<br>传递元组使用</em>，传递字典使用<strong>，推荐使用</strong>，原因看例子</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(name=<span class="string">'name'</span>,age=<span class="string">'0'</span>)</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'name: %s'</span> % name</div><div class="line">    <span class="keyword">print</span> <span class="string">'age: %s'</span> % age</div><div class="line">f()</div><div class="line">f(<span class="string">'test'</span>,<span class="number">12</span>)</div><div class="line">t=(<span class="string">'arvon'</span>,<span class="number">24</span>)</div><div class="line">tt=&#123;<span class="string">'age'</span>:<span class="number">23</span>, <span class="string">'name'</span>:<span class="string">'mo'</span>&#125;</div><div class="line">f(*t)</div><div class="line">f(**tt)</div></pre></td></tr></table></figure>
</li>
<li><p>冗余例子,<em>args的使用<br>关于</em>args的意思是接收多余的参数，把这些参数当做一个元组，这个元组名称为args,使用**args冗余字典方式的参数</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">go</span><span class="params">(x,*args,**dargs)</span>:</span></div><div class="line">    <span class="keyword">print</span> x</div><div class="line">    <span class="keyword">print</span> args</div><div class="line">    <span class="keyword">print</span> dargs</div><div class="line">go(<span class="number">1</span>,<span class="number">2</span>)</div><div class="line">go(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</div><div class="line">go(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</div><div class="line">go(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="string">'m'</span>=<span class="number">5</span>)</div></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="课时20：匿名函数lambda"><a href="#课时20：匿名函数lambda" class="headerlink" title="课时20：匿名函数lambda"></a>课时20：匿名函数lambda</h5><p>lambda表达式函数是一种快速定义单行的最小函数，从Lisp借用而来，可使用在任何需要函数的地方。</p>
<ul>
<li><p>最简实例</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x,y)</span>:</span></div><div class="line"><span class="meta">... </span>    <span class="keyword">return</span> x*y</div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f(<span class="number">2</span>,<span class="number">3</span>)</div><div class="line"><span class="number">6</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">lambda</span> x,y:x*y</div><div class="line">&lt;function &lt;<span class="keyword">lambda</span>&gt; at <span class="number">0x7fa5c3e7ea28</span>&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>g = <span class="keyword">lambda</span> x,y:x*y</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>g(<span class="number">2</span>,<span class="number">3</span>)</div><div class="line"><span class="number">6</span></div></pre></td></tr></table></figure>
</li>
<li><p>reduce函数的使用<br>括号中第一项为函数，第二项为列表，一次作用两个值，配合lambda很好用。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">l = range(<span class="number">1</span>,<span class="number">6</span>)</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x,y)</span>:</span></div><div class="line">    <span class="keyword">return</span> x*y</div><div class="line">one=reduce(f,l)</div><div class="line">g = <span class="keyword">lambda</span> x,y:x+y</div><div class="line">two=reduce(g,l)</div><div class="line"><span class="keyword">print</span> one,two</div></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="课时21：实现分支结构"><a href="#课时21：实现分支结构" class="headerlink" title="课时21：实现分支结构"></a>课时21：实现分支结构</h5><p>switch语句用于编写多分支结构的程序类似if else，但python并未提供switch语句。在python当中使用字典来实现相同的功能。</p>
<ul>
<li><p>精简的例子</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;<span class="number">1</span>:case1,<span class="number">2</span>:case2&#125;.get(x,<span class="keyword">lambda</span> *arg, **key:)()</div></pre></td></tr></table></figure>
</li>
<li><p>通过字典调用函数</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding:utf-8</span></div><div class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> division</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">jia</span><span class="params">(x,y)</span>:</span></div><div class="line">    <span class="keyword">return</span> x+y</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">jian</span><span class="params">(x,y)</span>:</span></div><div class="line">    <span class="keyword">return</span> x-y</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">cheng</span><span class="params">(x,y)</span>:</span></div><div class="line">    <span class="keyword">return</span> x*y</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">chu</span><span class="params">(x,y)</span>:</span></div><div class="line">    <span class="keyword">return</span> x/y</div><div class="line">operator = &#123;<span class="string">'+'</span>:jia,<span class="string">'-'</span>:jian,<span class="string">'*'</span>:cheng,<span class="string">'/'</span>:chu&#125;</div><div class="line"><span class="comment">#print operator['+'](3,2)</span></div><div class="line"><span class="comment">#print operator['/'](3,2)</span></div><div class="line"><span class="comment">#print jia(3,2)</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fff</span><span class="params">(x,o,y)</span>:</span></div><div class="line">    <span class="keyword">print</span> operator.get(o)(x,y)</div><div class="line">fff(<span class="number">3</span>,<span class="string">'+'</span>,<span class="number">2</span>)</div><div class="line">fff(<span class="number">3</span>,<span class="string">'/'</span>,<span class="number">2</span>)</div></pre></td></tr></table></figure>
</li>
<li><p>上个例子的复杂方式，有多余的判断方便和上面例子对比</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding:utf-8</span></div><div class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> division</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">jia</span><span class="params">(x,y)</span>:</span></div><div class="line">    <span class="keyword">return</span> x+y</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">jian</span><span class="params">(x,y)</span>:</span></div><div class="line">    <span class="keyword">return</span> x-y</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">cheng</span><span class="params">(x,y)</span>:</span></div><div class="line">    <span class="keyword">return</span> x*y</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">chu</span><span class="params">(x,y)</span>:</span></div><div class="line">    <span class="keyword">return</span> x/y</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">operator</span><span class="params">(x,o,y)</span>:</span></div><div class="line">    <span class="keyword">if</span> o == <span class="string">'+'</span>:</div><div class="line">        <span class="keyword">print</span> jia(x,y)</div><div class="line">    <span class="keyword">elif</span> o == <span class="string">'-'</span>:</div><div class="line">        <span class="keyword">print</span> jian(x,y)</div><div class="line">    <span class="keyword">elif</span> o == <span class="string">'*'</span>:</div><div class="line">        <span class="keyword">print</span> cheng(x,y)</div><div class="line">    <span class="keyword">elif</span> o == <span class="string">'/'</span>:</div><div class="line">        <span class="keyword">print</span> chu(x,y)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">pass</span></div><div class="line">operator(<span class="number">4</span>, <span class="string">'+'</span>, <span class="number">2</span>)</div><div class="line">operator(<span class="number">4</span>, <span class="string">'-'</span>, <span class="number">2</span>)</div><div class="line">operator(<span class="number">4</span>, <span class="string">'*'</span>, <span class="number">2</span>)</div></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="课时22：常用内置函数"><a href="#课时22：常用内置函数" class="headerlink" title="课时22：常用内置函数"></a>课时22：常用内置函数</h5><ul>
<li><p>使用callable检测是否可以直接调用函数</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>callable(min)</div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>callable(f)</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">NameError: name <span class="string">'f'</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>callable(divmod)</div><div class="line"><span class="keyword">True</span></div></pre></td></tr></table></figure>
</li>
<li><p>使用abs取绝对值</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#def a(x):</span></div><div class="line"><span class="comment">#    if x &lt; 0:</span></div><div class="line"><span class="comment">#        return -x</span></div><div class="line"><span class="comment">#    else:</span></div><div class="line"><span class="comment">#        return x</span></div><div class="line"><span class="comment">#print a(10)</span></div><div class="line"><span class="comment">#print a(-9)</span></div><div class="line"><span class="keyword">print</span> abs(<span class="number">-9</span>)</div></pre></td></tr></table></figure>
</li>
<li><p>使用max取最大值,使用min取最小值</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">l = range(<span class="number">12</span>)</div><div class="line"><span class="keyword">print</span> max(l)</div><div class="line"><span class="keyword">print</span> min(l)</div></pre></td></tr></table></figure>
</li>
<li><p>取列表长度</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding:utf8</span></div><div class="line">l=[<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</div><div class="line"><span class="comment">#取列表元素个数</span></div><div class="line"><span class="keyword">print</span> len(l)</div><div class="line"><span class="comment">#取商和摩</span></div><div class="line"><span class="keyword">print</span> divmod(<span class="number">5</span>,<span class="number">2</span>)</div></pre></td></tr></table></figure>
</li>
<li><p>测试数据类型是否相同</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#if type(l) == type([]):</span></div><div class="line">isinstance(l,list)</div><div class="line">isinstance(l,int)</div><div class="line">isinstance(l,str)</div></pre></td></tr></table></figure>
</li>
<li><p>使用cmp判断字符串是否一样</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># if l == 'strxxx':</span></div><div class="line">cmp(l,<span class="string">'strxxx'</span>)</div><div class="line"><span class="comment">#相同返回0，0在判断时为假，需使用not</span></div></pre></td></tr></table></figure>
</li>
<li><p>类型转换函数</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">long() <span class="comment">#长整形</span></div><div class="line">int()</div><div class="line">float()</div><div class="line">str()</div><div class="line">list()  <span class="comment">#列表</span></div><div class="line">tuple() <span class="comment">#元组</span></div><div class="line">hex()  <span class="comment">#16进制转换</span></div><div class="line">oct()  <span class="comment">#8进制转换</span></div><div class="line">chr()  </div><div class="line">ord()</div></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="课时23：与类相关的内置函数"><a href="#课时23：与类相关的内置函数" class="headerlink" title="课时23：与类相关的内置函数"></a>课时23：与类相关的内置函数</h5><ul>
<li><p>与string相关的几个函数</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#首字母大写</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">'hello world'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s.capitalize()</div><div class="line"><span class="string">'Hello world'</span></div><div class="line"><span class="comment">#字符串替换,查看帮助使用help(str.capitalize)</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s.replace(<span class="string">'hello'</span>,<span class="string">'good'</span>)</div><div class="line"><span class="string">'good world'</span></div><div class="line"><span class="comment">#字符串切割</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>ip=<span class="string">'192.168.1.123'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>ip.split(<span class="string">'.'</span>)</div><div class="line">[<span class="string">'192'</span>, <span class="string">'168'</span>, <span class="string">'1'</span>, <span class="string">'123'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>ip.split(<span class="string">'.'</span>,<span class="number">1</span>)</div><div class="line">[<span class="string">'192'</span>, <span class="string">'168.1.123'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>ip.split(<span class="string">'.'</span>,<span class="number">2</span>)</div><div class="line">[<span class="string">'192'</span>, <span class="string">'168'</span>, <span class="string">'1.123'</span>]</div></pre></td></tr></table></figure>
</li>
<li><p>直接使用内置函数跟使用import导入的小区别</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">s = <span class="string">'hello world'</span></div><div class="line">s.replace(<span class="string">'hello'</span>,<span class="string">'good'</span>)</div><div class="line"><span class="comment">##---使用import</span></div><div class="line"><span class="keyword">import</span> string</div><div class="line">string.replace(s,<span class="string">'hello'</span>,<span class="string">'good'</span>)</div></pre></td></tr></table></figure>
</li>
<li><p>使用filter函数过滤</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#filter（function，list），会把函数判断为Ture时list的元素取出来</span></div><div class="line">l=range(<span class="number">10</span>)</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x)</span>:</span></div><div class="line">    <span class="keyword">if</span> x &gt; <span class="number">5</span>:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line"><span class="keyword">print</span> filter(f,l)</div></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="课时24：序列处理函数"><a href="#课时24：序列处理函数" class="headerlink" title="课时24：序列处理函数"></a>课时24：序列处理函数</h5><ul>
<li><p>使用zip或map进行并行遍历<br>使用zip只能对元素数量一样的，map可以将数量不同的地方用None代替</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>name=[<span class="string">'arvon'</span>, <span class="string">'mo'</span>, <span class="string">'lover'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>age=[<span class="string">'23'</span>, <span class="string">'25'</span>, <span class="string">'26'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>tel=[<span class="string">'123456'</span>, <span class="string">'324566'</span>, <span class="string">'54334123'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>zip(name,age,tel)</div><div class="line">[(<span class="string">'arvon'</span>, <span class="string">'23'</span>, <span class="string">'123456'</span>), (<span class="string">'mo'</span>, <span class="string">'25'</span>, <span class="string">'324566'</span>), (<span class="string">'lover'</span>, <span class="string">'26'</span>, <span class="string">'54334123'</span>)]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>map(<span class="keyword">None</span>,name,age,tel)</div><div class="line">[(<span class="string">'arvon'</span>, <span class="string">'23'</span>, <span class="string">'123456'</span>), (<span class="string">'mo'</span>, <span class="string">'25'</span>, <span class="string">'324566'</span>), (<span class="string">'lover'</span>, <span class="string">'26'</span>, <span class="string">'54334123'</span>)]</div></pre></td></tr></table></figure>
</li>
<li><p>map函数高阶用法，可以对遍历后的数据进行函数操作</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a=[<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b=[<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">mf</span><span class="params">(x,y)</span>:</span></div><div class="line"><span class="meta">... </span>    <span class="keyword">return</span> x*y</div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>map(<span class="keyword">None</span>,a,b)</div><div class="line">[(<span class="number">1</span>, <span class="number">2</span>), (<span class="number">3</span>, <span class="number">4</span>), (<span class="number">5</span>, <span class="number">6</span>)]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>map(mf,a,b)</div><div class="line">[<span class="number">2</span>, <span class="number">12</span>, <span class="number">30</span>]</div></pre></td></tr></table></figure>
</li>
<li><p>reduce阶乘例子</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>l=range(<span class="number">1</span>,<span class="number">100</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">xf</span><span class="params">(x,y)</span>:</span></div><div class="line"><span class="meta">... </span>    <span class="keyword">return</span> x +y</div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>reduce(xf,l)</div><div class="line"><span class="number">4950</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>reduce(<span class="keyword">lambda</span> x,y:x+y,l)</div><div class="line"><span class="number">4950</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>filter(<span class="keyword">lambda</span> x:x%<span class="number">2</span> == <span class="number">0</span>,l)</div><div class="line">[<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">12</span>, <span class="number">14</span>, <span class="number">16</span>, <span class="number">18</span>, <span class="number">20</span>, <span class="number">22</span>, <span class="number">24</span>, <span class="number">26</span>, <span class="number">28</span>, <span class="number">30</span>, <span class="number">32</span>, <span class="number">34</span>, <span class="number">36</span>, <span class="number">38</span>, <span class="number">40</span>, <span class="number">42</span>, <span class="number">44</span>, <span class="number">46</span>, <span class="number">48</span>, <span class="number">50</span>, <span class="number">52</span>, <span class="number">54</span>, <span class="number">56</span>, <span class="number">58</span>, <span class="number">60</span>, <span class="number">62</span>, <span class="number">64</span>, <span class="number">66</span>, <span class="number">68</span>, <span class="number">70</span>, <span class="number">72</span>, <span class="number">74</span>, <span class="number">76</span>, <span class="number">78</span>, <span class="number">80</span>, <span class="number">82</span>, <span class="number">84</span>, <span class="number">86</span>, <span class="number">88</span>, <span class="number">90</span>, <span class="number">92</span>, <span class="number">94</span>, <span class="number">96</span>, <span class="number">98</span>]</div></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="课时25：模块和包"><a href="#课时25：模块和包" class="headerlink" title="课时25：模块和包"></a>课时25：模块和包</h5><p>模块是python组织代码的基本方式，python脚本都是以py为扩展名的文件保存，一个脚本可以单独运行也可以导入另一个脚本运行，当导入运行时，被导入的脚本就称作模块（module）。模块名与脚本名字相同，如test.py的模块名就是test可以通过import test导入。</p>
<ul>
<li><p>python找寻模块路径优先级</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#当前目录&gt;lib下&gt;其他</span></div><div class="line"><span class="comment">#查找导入模块的路径</span></div><div class="line"><span class="keyword">import</span> a_module</div><div class="line"><span class="keyword">print</span> a_module.__file__</div></pre></td></tr></table></figure>
</li>
<li><p>实用的<strong>name</strong>,python内置当直接运行脚本返回为<strong>main</strong>，当被调用执行返回为脚本名。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> division</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">jia</span><span class="params">(x,y)</span>:</span></div><div class="line">    <span class="keyword">return</span> x+y</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">jian</span><span class="params">(x,y)</span>:</span></div><div class="line">    <span class="keyword">return</span> x-y</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">cheng</span><span class="params">(x,y)</span>:</span></div><div class="line">    <span class="keyword">return</span> x*y</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">chu</span><span class="params">(x,y)</span>:</span></div><div class="line">    <span class="keyword">return</span> x/y</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">operator</span><span class="params">(x,o,y)</span>:</span></div><div class="line">    <span class="keyword">if</span> o == <span class="string">'+'</span>:</div><div class="line">        <span class="keyword">print</span> jia(x,y)</div><div class="line">    <span class="keyword">elif</span> o == <span class="string">'-'</span>:</div><div class="line">        <span class="keyword">print</span> jian(x,y)</div><div class="line">    <span class="keyword">elif</span> o == <span class="string">'*'</span>:</div><div class="line">        <span class="keyword">print</span> cheng(x,y)</div><div class="line">    <span class="keyword">elif</span> o == <span class="string">'/'</span>:</div><div class="line">        <span class="keyword">print</span> chu(x,y)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">pass</span></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    operator(<span class="number">4</span>, <span class="string">'+'</span>, <span class="number">2</span>)</div><div class="line">    operator(<span class="number">4</span>, <span class="string">'-'</span>, <span class="number">2</span>)</div><div class="line">    operator(<span class="number">4</span>, <span class="string">'*'</span>, <span class="number">2</span>)</div><div class="line">    operator(<span class="number">4</span>, <span class="string">'/'</span>, <span class="number">2</span>)</div></pre></td></tr></table></figure>
</li>
<li><p>简单例子</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> cal</div><div class="line"><span class="keyword">print</span> cal.jia(<span class="number">1</span>,<span class="number">2</span>)</div><div class="line"><span class="comment">#实用cal调用模块，实用.符号调用模块内的函数也叫方法</span></div></pre></td></tr></table></figure>
</li>
<li><p>Python模块可以按目录组织成包</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">###创建一个包的步骤</span></div><div class="line"><span class="comment">#- 建立一个名字为包名字的目录</span></div><div class="line"><span class="comment">#- 在该目录下创建一个__init__.py文件</span></div><div class="line"><span class="comment">#- 根据需要在该目录下存放脚本文件、已编译扩展及子包</span></div><div class="line"><span class="comment">#- import pack.m1, pack.m2, pack.m3</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="第五章：正则表达式"><a href="#第五章：正则表达式" class="headerlink" title="第五章：正则表达式"></a>第五章：正则表达式</h4><h5 id="课时26：简介"><a href="#课时26：简介" class="headerlink" title="课时26：简介"></a>课时26：简介</h5><p>正则表达式（RE）是一种小型的、高度专业化的编程语言，它内嵌在python中，并通过re模块实现。</p>
<ul>
<li>小例子<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> re</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">'abc'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">r'abc'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>re.findall(s,<span class="string">'aaaaaaaa'</span>)</div><div class="line">[]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>re.findall(s,<span class="string">'aaaaaabcaa'</span>)</div><div class="line">[<span class="string">'abc'</span>]</div></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="课时27：元字符"><a href="#课时27：元字符" class="headerlink" title="课时27：元字符"></a>课时27：元字符</h5><ul>
<li><p>普通字符包括大多数字母和字符以及数字等都匹配自身</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>st = <span class="string">'top tip tqp twp tep'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>res=<span class="string">r'top'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>re.findall(res,st)</div><div class="line">[<span class="string">'top'</span>]</div></pre></td></tr></table></figure>
</li>
<li><p>元字符包括.^$*+?{}[]|()</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>str=<span class="string">'I can say "tip top t4p world ^go" and I say hello world'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>rs1 = <span class="string">r'I'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>re.findall(rs1,str)</div><div class="line">[<span class="string">'I'</span>, <span class="string">'I'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>rs2 = <span class="string">r'^I'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>re.findall(rs2,str)</div><div class="line">[<span class="string">'I'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>rs3 = <span class="string">r't[io]p'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>re.findall(rs3,str)</div><div class="line">[<span class="string">'tip'</span>, <span class="string">'top'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>rs4 = <span class="string">r'\^go'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>re.findall(rs4.str)</div><div class="line">[^go]</div></pre></td></tr></table></figure>
</li>
<li><p>关于转义的列表</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">\d <span class="comment">#匹配任何十进制数相当于[0-9]</span></div><div class="line">\D <span class="comment">#匹配任何非数字字符，相当于[^0-9]</span></div><div class="line">\s <span class="comment">#匹配任何空白字符，相当于[\t\n\r\f\v]</span></div><div class="line">\S <span class="comment">#匹配任何非空白字符，相当于[^\t\n\r\f\v]</span></div><div class="line">\w <span class="comment">#匹配任何字母数字字符，相当于[a-zA-Z0-9_]</span></div><div class="line">\W <span class="comment">#匹配任何非字符数字字符，相当于[^a-zA-Z0-9_]</span></div></pre></td></tr></table></figure>
</li>
<li><p>关于重复的正则<br>其中*表示0次或多次、+表示一次或多次，？表示0次或一次，”.”表示匹配一次</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>tel = <span class="string">'010-123456'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>rs = <span class="string">r'010-\d&#123;6&#125;'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>re.findall(rs,tel)</div><div class="line">[<span class="string">'010-123456'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>re.findall(rs,tel)</div><div class="line">[<span class="string">'010-123456'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>rs = <span class="string">r'010-\d*'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>re.findall(rs,tel)</div><div class="line">[<span class="string">'010-123456'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>rs = <span class="string">r'010-\d+'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>re.findall(rs,tel)</div><div class="line">[<span class="string">'010-123456'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>rs = <span class="string">r'010-\d&#123;5&#125;?'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>re.findall(rs,tel)</div><div class="line">[<span class="string">'010-12345'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>rs = <span class="string">r'010-\d?'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>re.findall(rs,tel)</div><div class="line">[<span class="string">'010-1'</span>]</div></pre></td></tr></table></figure>
</li>
<li><p>关于花括号灵活用法</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#可控制匹配次数，如1到5此</span></div><div class="line">rs = <span class="string">r'a&#123;1,5&#125;'</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="课时28：正则表达式常用函数"><a href="#课时28：正则表达式常用函数" class="headerlink" title="课时28：正则表达式常用函数"></a>课时28：正则表达式常用函数</h5><ul>
<li><p>正则表达式编译执行，经常用的话建议采用这种方法</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> re</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>r1 = <span class="string">"\d&#123;3,4&#125;-?\d&#123;6&#125;"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>p_tel = re.compile(r1)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>p_tel</div><div class="line">&lt;_sre.SRE_Pattern object at <span class="number">0x7f44193a2f10</span>&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>re.findall(p_tel,<span class="string">'010-123456'</span>)</div><div class="line">[<span class="string">'010-123456'</span>]</div></pre></td></tr></table></figure>
</li>
<li><p>match和search方法</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#group()返回被re匹配的字符串</span></div><div class="line"><span class="comment">#start()返回匹配开始的位置</span></div><div class="line"><span class="comment">#end()返回匹配结束的位置</span></div><div class="line"><span class="comment">#span()返回一个元组包含匹配的位置</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> re</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>csvt_re = re.compile(<span class="string">r'csvt'</span>,re.I)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>csvt_re.findall(<span class="string">'csVt'</span>)</div><div class="line">[<span class="string">'csVt'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>csvt_re.findall(<span class="string">'csVt csvt CsVt'</span>)</div><div class="line">[<span class="string">'csVt'</span>, <span class="string">'csvt'</span>, <span class="string">'CsVt'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>csvt_re.match(<span class="string">'csvt hello'</span>)</div><div class="line">&lt;_sre.SRE_Match object at <span class="number">0x7f44192f1648</span>&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>csvt_re.search(<span class="string">'csvt hello'</span>)</div><div class="line">&lt;_sre.SRE_Match object at <span class="number">0x7f44192f16b0</span>&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>sub函数替换字符串</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>s</div><div class="line"><span class="string">'hello csvt'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s.replace(<span class="string">'csvt'</span>,<span class="string">'good'</span>)</div><div class="line"><span class="string">'hello good'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s</div><div class="line"><span class="string">'hello csvt'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>rs = <span class="string">r'c..t'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>re.sub(rs,<span class="string">'python'</span>,<span class="string">'csvt caat cvvt cccc'</span>)</div><div class="line"><span class="string">'python python python cccc'</span></div></pre></td></tr></table></figure>
</li>
<li><p>使用re.split进行带正则的分割</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>ip = <span class="string">'1.2.3.4'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>ip.split(<span class="string">'.'</span>)</div><div class="line">[<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">"123*456-789+000"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>re.split(<span class="string">r'[\+\-\*]'</span>,s)</div><div class="line">[<span class="string">'123'</span>, <span class="string">'456'</span>, <span class="string">'789'</span>, <span class="string">'000'</span>]</div></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="课时29：正则表达式内置属性及分组"><a href="#课时29：正则表达式内置属性及分组" class="headerlink" title="课时29：正则表达式内置属性及分组"></a>课时29：正则表达式内置属性及分组</h5><ul>
<li><p>正则编译标志</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">DOTALL,S    <span class="comment">#使.匹配包括换行在内的所有字符</span></div><div class="line">IGNORECASE,I    <span class="comment">#使匹配对大小写不敏感</span></div><div class="line">LOCALE,L    <span class="comment">#做本地化识别，匹配法语等。。。</span></div><div class="line">MULTILINE,M <span class="comment">#多行匹配，影响^和$</span></div><div class="line">VERBOSE,X   <span class="comment">#能够使用REs的verbose状态，使之被组织更清晰易懂</span></div></pre></td></tr></table></figure>
</li>
<li><p>关于S的例子</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>r1 = <span class="string">r"csvt.net"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>re.findall(r1,<span class="string">'vsvt.net'</span>)</div><div class="line">[]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>r1 = <span class="string">r"csvt.net"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>re.findall(r1,<span class="string">'csvt.net'</span>)</div><div class="line">[<span class="string">'csvt.net'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>re.findall(r1,<span class="string">'csvtonet'</span>)</div><div class="line">[<span class="string">'csvtonet'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>re.findall(r1,<span class="string">'csvtonet'</span>,re.S)</div><div class="line">[<span class="string">'csvtonet'</span>]</div></pre></td></tr></table></figure>
</li>
<li><p>关于M的例子</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>s =<span class="string">"""</span></div><div class="line"><span class="meta">... </span>hello csvt</div><div class="line"><span class="meta">... </span>csvt hello</div><div class="line"><span class="meta">... </span>hello csvt hello</div><div class="line"><span class="meta">... </span>csvt hehe</div><div class="line"><span class="meta">... </span>"""</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>r = <span class="string">r"^csvt"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>re.findall(r,s)</div><div class="line">[]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>re.findall(r,s,re.M)</div><div class="line">[<span class="string">'csvt'</span>, <span class="string">'csvt'</span>]</div></pre></td></tr></table></figure>
</li>
<li><p>关于X的例子，当正则是多行时使用</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>tel = <span class="string">r"""</span></div><div class="line"><span class="meta">... </span>\d&#123;3,4&#125;</div><div class="line"><span class="meta">... </span>-?</div><div class="line"><span class="meta">... </span>\d&#123;8&#125;</div><div class="line"><span class="meta">... </span>"""</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>re.findall(tel,<span class="string">'010-12345678'</span>)</div><div class="line">[]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>re.findall(tel,<span class="string">'010-12345678'</span>,re.X)</div><div class="line">[<span class="string">'010-12345678'</span>]</div></pre></td></tr></table></figure>
</li>
<li><p>分组匹配</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>email = <span class="string">r"\w&#123;3&#125;@\w+(\.com|\.cn)"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>re.match(email,<span class="string">'zzz@csvt.cn'</span>)</div><div class="line">&lt;_sre.SRE_Match object at <span class="number">0x7f44192fca08</span>&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>re.match(email,<span class="string">'zzz@csvt.com'</span>)</div><div class="line">&lt;_sre.SRE_Match object at <span class="number">0x7f44192fc990</span>&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>re.match(email,<span class="string">'zzz@csvt.org'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>re.findall(email,<span class="string">'zzz@csvt.com'</span>)</div><div class="line"><span class="comment">#使用findall会优先返回分组匹配的数据，所以一般用match做判断即可</span></div><div class="line">[<span class="string">'.com'</span>]</div></pre></td></tr></table></figure>
</li>
<li><p>利用分组特性的例子</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>s =<span class="string">"""</span></div><div class="line"><span class="meta">... </span>hhsdj dskj hello src=arvon yes jdasdfa</div><div class="line"><span class="meta">... </span>adsfasd src=mo yes dasfasdf</div><div class="line"><span class="meta">... </span>src=lover</div><div class="line"><span class="meta">... </span>hello src=python asdfas</div><div class="line"><span class="meta">... </span>"""</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>r1 = <span class="string">r"hello src=.+ "</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>re.findall(r1,s)</div><div class="line">[<span class="string">'hello src=arvon yes '</span>, <span class="string">'hello src=python '</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>r1 = <span class="string">r"hello src=(.+) +yes"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>re.findall(r1,s)</div><div class="line">[<span class="string">'arvon'</span>]</div></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="课时30：一个小爬虫"><a href="#课时30：一个小爬虫" class="headerlink" title="课时30：一个小爬虫"></a>课时30：一个小爬虫</h5><ul>
<li>下载贴吧或空间中所有图片<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment">#coding:utf-8</span></div><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">import</span> urllib</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getHtml</span><span class="params">(url)</span>:</span></div><div class="line">    page = urllib.urlopen(url)</div><div class="line">    html = page.read()</div><div class="line">    <span class="keyword">return</span> html</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getImg</span><span class="params">(html)</span>:</span></div><div class="line">    reg = <span class="string">r'src="(.*?\.jpg)" size'</span></div><div class="line">    imgre = re.compile(reg)</div><div class="line">    imglist = re.findall(imgre,html)</div><div class="line">    <span class="comment">#print imglist</span></div><div class="line">    imgnum = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> imgurl <span class="keyword">in</span> imglist:</div><div class="line">        urllib.urlretrieve(imgurl,<span class="string">'%s.jpg'</span> % imgnum)</div><div class="line">        imgnum +=<span class="number">1</span></div><div class="line"><span class="comment">#wantUrl = raw_input('Input URL: ')</span></div><div class="line">wantUrl = <span class="string">'http://tieba.baidu.com/p/4637471656'</span></div><div class="line">html = getHtml(wantUrl)</div><div class="line">getImg(html)</div></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="课时31：数据结构之深拷贝和浅拷贝"><a href="#课时31：数据结构之深拷贝和浅拷贝" class="headerlink" title="课时31：数据结构之深拷贝和浅拷贝"></a>课时31：数据结构之深拷贝和浅拷贝</h5><p>python对内存的使用，浅拷贝就是对引用的拷贝，而深拷贝是对对象资源的拷贝</p>
<ul>
<li>实例特点<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> copy</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b=a</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>c = copy.copy(a)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>c</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>id(a)</div><div class="line"><span class="number">140296085124304</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>id(b)</div><div class="line"><span class="number">140296085124304</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>id(c)</div><div class="line"><span class="number">140296085139680</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a.append(<span class="string">'d'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>], <span class="string">'d'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>], <span class="string">'d'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>c</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>id(a[<span class="number">0</span>])</div><div class="line"><span class="number">30618424</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>id(c[<span class="number">0</span>])</div><div class="line"><span class="number">30618424</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">3</span>].append(<span class="string">'d'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>], <span class="string">'d'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>c</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>]]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d = copy.deepcopy(a)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>], <span class="string">'d'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>], <span class="string">'d'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">3</span>].append(<span class="string">'e'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>], <span class="string">'d'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>], <span class="string">'d'</span>]</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="高级功能"><a href="#高级功能" class="headerlink" title="高级功能"></a>高级功能</h4><h5 id="课时32：文件读写"><a href="#课时32：文件读写" class="headerlink" title="课时32：文件读写"></a>课时32：文件读写</h5><ul>
<li><p>文件的读写，使用open或file函数实现</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#usage: file_handler = open(filename, mode)</span></div><div class="line"><span class="comment">#mode</span></div><div class="line">r  <span class="comment">#只读，默认</span></div><div class="line">r+ <span class="comment">#读写</span></div><div class="line">w  <span class="comment">#写入，先删除原文件，再重新写入，如果没有就创建文件</span></div><div class="line">w+ <span class="comment">#读写，先删除源文件，如果文件没有就创建（可以写入输出）</span></div><div class="line">a  <span class="comment">#写入，在文件末尾追加新的内容，文件不存在就创建</span></div><div class="line">a+ <span class="comment">#读写，在文件末尾追加新的内容，文件不存在就创建</span></div><div class="line">b  <span class="comment">#打开二进制文件，可以与r，w，a，+结合使用</span></div><div class="line">U  <span class="comment">#支持所有的换行符号。如\r,\n,\r\n</span></div></pre></td></tr></table></figure>
</li>
<li><p>使用open和file打开、读取、关闭文件</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>fo = open(<span class="string">'/data/python/tmp/file/test.txt'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fo.read()</div><div class="line"><span class="string">'hello world\n'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fo.close()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fo.read()</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">ValueError: I/O operation on closed file</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fo1 = file(<span class="string">'/data/python/tmp/file/test.txt'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fo1.read()</div><div class="line"><span class="string">'hello world\n'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fo1.close()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fo1.read()</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">ValueError: I/O operation on closed file</div></pre></td></tr></table></figure>
</li>
<li><p>使用write对文件写入</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>fnew = open(<span class="string">'new.txt'</span>, <span class="string">'w'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fnew.write(<span class="string">"hello world\nMy name is arvon\n"</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fnew.close()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>rnew = open(<span class="string">'new.txt'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>rnew.read()</div><div class="line"><span class="string">'hello world\nMy name is arvon\n'</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="课时33：文件对象方法"><a href="#课时33：文件对象方法" class="headerlink" title="课时33：文件对象方法"></a>课时33：文件对象方法</h5><ul>
<li><p>文件对象方法</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">FileObject.close() <span class="comment">#关闭文件</span></div><div class="line">String = FileObject.readline([size])</div><div class="line">List = FileObject.readlines([size])</div><div class="line">String = FileObject.read([size])</div><div class="line">FileObject.next()</div><div class="line">FileObject.write(string)</div><div class="line">FileObject.writelines(List)</div><div class="line">FileObject.seek(偏移量，选项)</div><div class="line">FileObject.flush()</div></pre></td></tr></table></figure>
</li>
<li><p>使用for遍历文件行</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> open(<span class="string">'new.txt'</span>):</div><div class="line"><span class="meta">... </span>    <span class="keyword">print</span> i</div><div class="line">...</div><div class="line">hello world</div><div class="line"></div><div class="line">My name <span class="keyword">is</span> arvon</div><div class="line"></div><div class="line">go go go</div><div class="line"></div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>使用readline读取行,使用readlines返回列表</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>f1 = open(<span class="string">'new.txt'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f1.readline()</div><div class="line"><span class="string">'hello world\n'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f1.readline()</div><div class="line"><span class="string">'My name is arvon\n'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f1.readline()</div><div class="line"><span class="string">'go go go\n'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f1.readline()</div><div class="line"><span class="string">''</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f1 = open(<span class="string">'new.txt'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f1.readlines()</div><div class="line">[<span class="string">'hello world\n'</span>, <span class="string">'My name is arvon\n'</span>, <span class="string">'go go go\n'</span>]</div></pre></td></tr></table></figure>
</li>
<li><p>使用next，返回当前行，并将指针指到下一行</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#readline会读取结束会读取空字符串，而next不会</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f1 = open(<span class="string">'new.txt'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f1.next()</div><div class="line"><span class="string">'hello world\n'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f1.next()</div><div class="line"><span class="string">'My name is arvon\n'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f1.next()</div><div class="line"><span class="string">'go go go\n'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f1.next()</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">StopIteration</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>使用writelines实现多行写入<br>可以多行写，效率比write高，速度快</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>f1 = open(<span class="string">'new.txt'</span>, <span class="string">'a'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>l = [<span class="string">'one\n'</span>, <span class="string">'two\n'</span>, <span class="string">'three\n'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f1 = open(<span class="string">'new.txt'</span>, <span class="string">'a'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f1.writelines(l)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f1.close()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f2 = open(<span class="string">'new.txt'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f2.read()</div><div class="line"><span class="string">'hello world\nMy name is arvon\ngo go go\none\ntwo\nthree\n'</span></div></pre></td></tr></table></figure>
</li>
<li><p>关于指针seek简单操作</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#说明FileObject.seek(偏移量，选项)</span></div><div class="line"><span class="comment">#选项=0，表示将文件指针指向文件头部到偏移量字节处</span></div><div class="line"><span class="comment">#选项=1，表示将文件指针指向文件的当前位置，向后移动偏移量字节</span></div><div class="line"><span class="comment">#选项=2，表示将文件指针指向从文件的尾部，向前移动偏移量字节</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f2 = open(<span class="string">'new.txt'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f2.read()</div><div class="line"><span class="string">'hello world\nMy name is arvon\ngo go go\none\ntwo\nthree\n'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f2.read()</div><div class="line"><span class="string">''</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f2.seek(<span class="number">0</span>,<span class="number">0</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f2.seek(<span class="number">0</span>,<span class="number">0</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f2.read()</div><div class="line"><span class="string">'hello world\nMy name is arvon\ngo go go\none\ntwo\nthree\n'</span></div></pre></td></tr></table></figure>
</li>
<li><p>使用flush提交更新，可以在不使用close的情况下查看文件的写入情况</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>f1=open(<span class="string">'new.txt'</span>,<span class="string">'w'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f1.writelines(l)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f1.flush()</div></pre></td></tr></table></figure>
</li>
<li><p>查找hello的个数</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> re</div><div class="line">f1 = open(<span class="string">'a.t'</span>)</div><div class="line"><span class="keyword">print</span> len(re.findall(<span class="string">'hello'</span>,f1.read()))</div><div class="line">f1.close</div><div class="line"><span class="comment">#----two</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f1 = open(<span class="string">'a.t'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f1.read()</div><div class="line"><span class="string">'hello world\nhello hello world\n'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>re1 = <span class="string">r'(hello) '</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> re</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f1.seek(<span class="number">0</span>,<span class="number">0</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>re.findall(re1,f1.read())</div><div class="line">[<span class="string">'hello'</span>, <span class="string">'hello'</span>, <span class="string">'hello'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>re.findall(re1,f1.read())</div><div class="line">[]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f1.seek(<span class="number">0</span>,<span class="number">0</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>len(re.findall(re1,f1.read()))</div><div class="line"><span class="number">3</span></div></pre></td></tr></table></figure>
</li>
<li><p>文件内容替换</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">f1 = open(<span class="string">'a.t'</span>)</div><div class="line">f2 = open(<span class="string">'a2.t'</span>)</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> f1:</div><div class="line">    f2.write(i.replace(<span class="string">'hello'</span>, <span class="string">'csvt'</span>)</div><div class="line">f1.close()</div><div class="line">f2.close()</div><div class="line"><span class="comment">#---2</span></div><div class="line">fp1 = file(<span class="string">'a.t'</span>, <span class="string">'w+'</span>)</div><div class="line">s = f1.read()</div><div class="line">f1.seek(<span class="number">0</span>,<span class="number">0</span>)</div><div class="line">f1.write(s.replace(<span class="string">"hello"</span>, <span class="string">"csvt"</span>))</div><div class="line">fp1.close()</div></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="课时34：OS模块"><a href="#课时34：OS模块" class="headerlink" title="课时34：OS模块"></a>课时34：OS模块</h5><ul>
<li><p>os模块常用函数</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">mkdir(path[,mode=0777])</div><div class="line">makedirs(name,mode=511)</div><div class="line">rmdir(path)</div><div class="line">removedirs(path)</div><div class="line">listdir(path)</div><div class="line">getcwd()</div><div class="line"><span class="built_in">chdir</span>(path)</div><div class="line">walk(top,topdown=True, onerror=None)</div></pre></td></tr></table></figure>
</li>
<li><p>实例参照</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#codeing:utf8</span></div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="comment">#创建单个目录= mkdir</span></div><div class="line">os.mkdir(<span class="string">'./mydir'</span>)</div><div class="line"><span class="comment">#创建多级目录= mkdir -p</span></div><div class="line">os.mkdirs(<span class="string">'./a/b/c'</span>)</div><div class="line"><span class="comment">#删除空目录</span></div><div class="line">os.rmdir(<span class="string">'./mydir'</span>)</div><div class="line"><span class="comment">#删除多级空目录</span></div><div class="line">os.rmdirs(<span class="string">'./a/b/c'</span>)</div><div class="line"><span class="comment">#列出当前目录下文件,不包含子目录= ls</span></div><div class="line">os.listdir(<span class="string">'.'</span>)</div><div class="line"><span class="comment">#获取当前路径= pwd</span></div><div class="line">os.getcwd(<span class="string">'.'</span>)</div><div class="line"><span class="comment">#切换目录= cd</span></div><div class="line">os.chdir(<span class="string">'./a'</span>)</div></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="课时35：目录遍历"><a href="#课时35：目录遍历" class="headerlink" title="课时35：目录遍历"></a>课时35：目录遍历</h5><ul>
<li><p>列出多级目录中的文件路径(自写)</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">dirList</span><span class="params">(path)</span>:</span></div><div class="line">    filelist = os.listdir(path)</div><div class="line">    fpath = os.getcwd()</div><div class="line">    <span class="keyword">for</span> filename <span class="keyword">in</span> filelist:</div><div class="line">        filepath = os.path.join(fpath,path,filename)</div><div class="line">        <span class="keyword">if</span> os.path.isdir(filepath):</div><div class="line">            dirList(filepath)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">print</span> filepath</div><div class="line">dirList(<span class="string">'testdir'</span>)</div></pre></td></tr></table></figure>
</li>
<li><p>利用walk模块递归</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> os</div><div class="line">allDate = os.walk(<span class="string">'testdir'</span>)</div><div class="line"><span class="keyword">for</span> dirpath,zidir,filenames <span class="keyword">in</span> allDate:</div><div class="line">    <span class="keyword">for</span> eachfile <span class="keyword">in</span> filenames:</div><div class="line">        eachfilepath = os.path.join(dirpath,eachfile)</div><div class="line">        <span class="keyword">print</span>  eachfilepath</div></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="课时36：异常处理"><a href="#课时36：异常处理" class="headerlink" title="课时36：异常处理"></a>课时36：异常处理</h5><ul>
<li><p>常见python异常</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">AssertionError <span class="comment">#assert语句失败</span></div><div class="line">AttributerError    <span class="comment">#试图访问一个对象没有的属性</span></div><div class="line">IOError    <span class="comment">#输入输出异常，基本是无法打开文件</span></div><div class="line">ImportError    <span class="comment">#无法引入模块或包，基本是路径问题</span></div><div class="line">IndentationError   <span class="comment">#语法错误，代码没有正确对齐</span></div><div class="line">IndexError <span class="comment">#下标索引超出序列边界</span></div><div class="line">KeyError   <span class="comment">#试图访问字典中不存在的键</span></div><div class="line">KeyboardInterrupt  <span class="comment">#Ctrl-c终止</span></div><div class="line">NameError  <span class="comment">#使用一个还未赋予对象的变量</span></div><div class="line">SyntaxError    <span class="comment">#python代码逻辑语法错误</span></div><div class="line">TypeError  <span class="comment">#传入的对象类型与要求不符</span></div><div class="line">UnboundLocalError  <span class="comment">#试图访问一个还未设置的全局变量，基本上由于另有一个同名全局变量</span></div><div class="line">ValueError <span class="comment">#传入一个不被期望的值，即使类型正确</span></div></pre></td></tr></table></figure>
</li>
<li><p>异常及异常抛出<br>使用try时报错会终止执行错误语句以下的语句</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding:utf8</span></div><div class="line">filename = raw_input(<span class="string">"要操作的文件："</span>)</div><div class="line"><span class="keyword">try</span>:</div><div class="line">   open(filename)</div><div class="line">   <span class="keyword">print</span> filename</div><div class="line"><span class="keyword">except</span> IOError,msg:</div><div class="line">    <span class="keyword">print</span> <span class="string">"该文件不存在"</span></div><div class="line"><span class="keyword">except</span> NameError,msg:</div><div class="line">    <span class="keyword">pass</span></div></pre></td></tr></table></figure>
</li>
<li><p>finally子句，不关心捕获什么异常，代码必须执行，如文件关闭、释放锁、把数据库连接返还给连接池等。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span>:</div><div class="line">    f = open(filename)</div><div class="line">    <span class="keyword">print</span> hello</div><div class="line"><span class="keyword">except</span> IOError,msg:</div><div class="line">    <span class="keyword">pass</span></div><div class="line"><span class="keyword">finally</span>:</div><div class="line">    f.close()</div><div class="line">    <span class="keyword">print</span> <span class="string">"ok"</span></div></pre></td></tr></table></figure>
</li>
<li><p>使用raise抛出异常,抛出的异常类型必须是python中已定义的类型，不能随意起名</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">filename = raw_input(<span class="string">"something: "</span>)</div><div class="line"><span class="keyword">if</span> filename == <span class="string">"hello"</span>:</div><div class="line">    <span class="keyword">raise</span> TypeError(<span class="string">"nothing!!!!"</span>)</div></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="课时37：mysql数据库模块"><a href="#课时37：mysql数据库模块" class="headerlink" title="课时37：mysql数据库模块"></a>课时37：mysql数据库模块</h5><ul>
<li><p>安装MySQL-python模块</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install MySQL-python</div></pre></td></tr></table></figure>
</li>
<li><p>使用MySQLdb模块,交互模式下</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> MySQLdb</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>conn = MySQLdb.connect(user=<span class="string">'root'</span>,passwd=<span class="string">'admin'</span>,host=<span class="string">'127.0.0.1'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>cur = conn.cursor()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>conn.select_db(<span class="string">'test'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>cur.execute(<span class="string">"insert into mytable(id,username) value(2,'mo');"</span>)</div><div class="line"><span class="number">1L</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>sqli = <span class="string">"insert into mytable(id,username) value(%s, %s);"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>cur.execute(sqli,(<span class="number">3</span>,<span class="string">'lover'</span>))</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>sqlim = <span class="string">"insert into mytable(id,username) values(%s,%s);"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>cur.executemany(sqli,[(<span class="number">4</span>,<span class="string">'haha'</span>),(<span class="number">5</span>,<span class="string">'papa'</span>),(<span class="number">6</span>,<span class="string">'dada'</span>)])</div><div class="line"><span class="number">3L</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>cur.execute(<span class="string">'delete from mytable where id=4'</span>)</div><div class="line"><span class="number">1L</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>cur.execute(<span class="string">"update mytable set username='gogo' where id=5"</span>)</div><div class="line"><span class="number">1L</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>cur.execute(<span class="string">"select * from mytable"</span>)</div><div class="line"><span class="number">6L</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>cur.fetchone()</div><div class="line">(<span class="number">1L</span>, <span class="string">'arvon'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>cur.execute(<span class="string">"select * from mytable"</span>)</div><div class="line"><span class="number">6L</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>cur.fetchone()</div><div class="line">(<span class="number">1L</span>, <span class="string">'arvon'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>cur.fetchone()</div><div class="line">(<span class="number">1L</span>, <span class="string">'arvon'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>cur.scroll(<span class="number">0</span>,<span class="string">'absolute'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>cur.fetchone()</div><div class="line">(<span class="number">1L</span>, <span class="string">'arvon'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>cur.fetchmany(cur.execute(<span class="string">"select* from mytable"</span>))</div><div class="line">((<span class="number">1L</span>, <span class="string">'arvon'</span>), (<span class="number">2L</span>, <span class="string">'mo'</span>), (<span class="number">3L</span>, <span class="string">'lover'</span>), (<span class="number">5L</span>, <span class="string">'gogo'</span>), (<span class="number">6L</span>, <span class="string">'dada'</span>), (<span class="number">7L</span>, <span class="string">'dudu'</span>))</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>cur.close()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>conn.close()</div></pre></td></tr></table></figure>
</li>
<li><p>在脚本中使用的例子</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> MySQLdb</div><div class="line"><span class="comment">#coding:utf-8</span></div><div class="line"><span class="comment">#mysql&gt;create table mytable (id int , username char(20));</span></div><div class="line">conn = MySQLdb.connect(user=<span class="string">'root'</span>,passwd=<span class="string">'admin'</span>,host=<span class="string">'127.0.0.1'</span>)</div><div class="line"><span class="comment">#连接到数据库服务器</span></div><div class="line">cur = conn.cursor()</div><div class="line"><span class="comment">#连接到数据库后游标的定义</span></div><div class="line">conn.select_db(<span class="string">'test'</span>)</div><div class="line"><span class="comment">#连接到test数据库</span></div><div class="line">cur.execute(<span class="string">"insert into mytable(id,username) value(2,'mo');"</span>)</div><div class="line"><span class="comment">#插入一条数据</span></div><div class="line">sqlim = <span class="string">"insert into mytable(id,username) values(%s,%s);"</span></div><div class="line">cur.executemany(sqli,[(<span class="number">4</span>,<span class="string">'haha'</span>),(<span class="number">5</span>,<span class="string">'papa'</span>),(<span class="number">6</span>,<span class="string">'dada'</span>)])</div><div class="line"><span class="comment">#使用格式化字符串，一次添加多条数据，同理可应用于修改和删除</span></div><div class="line">cur.execute(<span class="string">'delete from mytable where id=4'</span>)</div><div class="line"><span class="comment">#删除一条数据</span></div><div class="line">cur.execute(<span class="string">"update mytable set username='gogo' where id=5"</span>)</div><div class="line"><span class="comment">#修改一条数据</span></div><div class="line">cur.execute(<span class="string">"select * from mytable"</span>)</div><div class="line">cur.fetchone()</div><div class="line">cur.scroll(<span class="number">0</span>,<span class="string">'absolute'</span>)</div><div class="line">cur.fetchmany()</div><div class="line"><span class="comment">#查询一条数据，先select出数据条目数量，再通过fetchone依次取值,取值完成后可以通&gt;过scroll重新定义游标位置，如上为让游标在到开头，使用getchmany可以以元组形式取出</span></div><div class="line">所有值</div><div class="line">cur.fetchmany(cur.execute(<span class="string">"select* from mytable"</span>))</div><div class="line"><span class="comment">#使用这种方法可以直接取出所有值</span></div><div class="line">cur.close()</div><div class="line"><span class="comment">#关闭游标</span></div><div class="line">conn.close()</div><div class="line"><span class="comment">#关闭数据库连接</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="课时38：面向对象编程之类和对象"><a href="#课时38：面向对象编程之类和对象" class="headerlink" title="课时38：面向对象编程之类和对象"></a>课时38：面向对象编程之类和对象</h5><p>在python中将所有类型都当做对象</p>
<ul>
<li>类和对象<blockquote>
<ul>
<li>面向过程和面向对象的编程<br>面向过程的编程：函数式编程、c程序等<br>面向对象的编程：C++，Java，Python等</li>
<li>类和对象是面向对象中的两个重要概念<br>类：是对事物的抽象，如汽车模型<br>对象：是类的一个实例，如轿车、客车</li>
<li>范例说明<br>汽车模型可以对汽车的特征和行为进行抽象，然后可以实例化为一台真实的汽车实体出来。</li>
</ul>
</blockquote>
</li>
<li>Python类定义<blockquote>
<ul>
<li>Python类的定义<br>使用class关键字定义一个类，并且类名的首字母要大写；当程序员需要创建的类型不能用简单类型表示时就需要创建类；类把需要的变量和函数结合在一起，这种包含也称为<strong>封装</strong>。</li>
<li>Python类的结构<blockquote>
<blockquote>
<p>class 类名:<br>…    成员变量<br>…    成员函数(至少有一个形参self)<br>…</p>
</blockquote>
</blockquote>
</li>
</ul>
</blockquote>
</li>
<li><p>简单的例子</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Test</span>:</span></div><div class="line"><span class="meta">... </span>    first = <span class="number">123</span></div><div class="line"><span class="meta">... </span>    second = <span class="number">456</span></div><div class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(self)</span>:</span></div><div class="line"><span class="meta">... </span>        <span class="keyword">return</span> <span class="string">'test'</span></div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dog = Test()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dog.f()</div><div class="line"><span class="string">'test'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dog.first</div><div class="line"><span class="number">123</span></div></pre></td></tr></table></figure>
</li>
<li><p>对象的创建<br>创建对象的过程称之为实例化；当一个对象被创建后，包括三方面的特征：对象的句柄、属性和方法。<br>句柄用于区分不同的对象<br>对象的属性和方法与类中的成员变量和成员函数对应</p>
<blockquote>
<p>小例</p>
<blockquote>
<blockquote>
<p>if <strong>name</strong> == “<strong>main</strong>“<br>…    myClass1 = MyClass()</p>
</blockquote>
</blockquote>
</blockquote>
</li>
</ul>
<hr>
<p>ok, python复习告一段落,下一阶段docker进阶</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Centos下搭建svn服务器]]></title>
      <url>http://arvon.top/2016/09/09/Centos%E4%B8%8B%E6%90%AD%E5%BB%BAsvn%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      <content type="html"><![CDATA[<p><strong>前言：</strong>因需求需搭建一个svn服务器，这里顺带记录一下svn的搭建及使用方法。<br><a id="more"></a></p>
<h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><ul>
<li>centos6.7 x_64</li>
<li>yum源</li>
<li>windows客户端测试</li>
</ul>
<h3 id="搭建记录"><a href="#搭建记录" class="headerlink" title="搭建记录"></a>搭建记录</h3><h4 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h4><ul>
<li><p>安装svn软件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install subversion -y</div></pre></td></tr></table></figure>
</li>
<li><p>创建版本库目录</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mkdir -pv /data/svn/svnrepos</div></pre></td></tr></table></figure>
</li>
<li><p>创建版本库</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">svnadmin create /data/svn/svnrepos</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="配置修改"><a href="#配置修改" class="headerlink" title="配置修改"></a>配置修改</h4><p>配置文件路径均在版本库目录下，以我的为例即/data/svn/svnrepos/conf下</p>
<ul>
<li><p>修改svnserve.conf文件，打开以下代码注释</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">anon-access = <span class="built_in">read</span> <span class="comment">#匿名用户可读</span></div><div class="line">auth-access = write <span class="comment">#授权用户可写</span></div><div class="line">password-db = /data/svn/svnrepos/conf/passwd <span class="comment">#使用哪个文件作为账号文件</span></div><div class="line">authz-db = /data/svn/svnrepos/conf/authz <span class="comment">#使用哪个文件作为权限文件</span></div><div class="line">realm = Arvon Test Repository <span class="comment">#提示信息</span></div></pre></td></tr></table></figure>
</li>
<li><p>修改passwd文件<br>如下在[users]下面添加用户名和密码,此文件就是管理账户密码的文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[users]</div><div class="line">arvon = arovn.top</div></pre></td></tr></table></figure>
</li>
<li><p>修改authz文件<br>如下在[groups]下添加目录或子目录做到更细致的权限控制，在目录下控制用户权限</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[groups]</div><div class="line">[/]</div><div class="line"><span class="comment">#/ 表示对根目录（即/svn/project目录）下的所有子目录范围设置权限；</span></div><div class="line"><span class="comment">#[/abc] 表示对资料库中abc项目设置权限；</span></div><div class="line">arvon = rw</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="启动svn服务"><a href="#启动svn服务" class="headerlink" title="启动svn服务"></a>启动svn服务</h4><ul>
<li><p>直接使用命令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">svnserver <span class="_">-d</span> -r /data/svn/svnrepos/</div></pre></td></tr></table></figure>
</li>
<li><p>使用守护进程启动（需修改启动配置）</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#vi /etc/init.d/svnserve</span></div><div class="line">daemon --pidfile=<span class="variable">$&#123;pidfile&#125;</span> <span class="variable">$exec</span> <span class="variable">$args</span> -r /data/svn/svnrepos</div><div class="line"><span class="comment">#然后使用命令启动</span></div><div class="line">/etc/init.d/svnserve start</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="使用测试"><a href="#使用测试" class="headerlink" title="使用测试"></a>使用测试</h3><h4 id="客户端下载"><a href="#客户端下载" class="headerlink" title="客户端下载"></a>客户端下载</h4><ul>
<li><a href="https://pan.baidu.com/s/1bpBRA83" target="_blank" rel="external">windows</a></li>
<li><a href="https://tortoisesvn.net/downloads.html" target="_blank" rel="external">mac/linxu</a></li>
</ul>
<h4 id="客户端测试使用"><a href="#客户端测试使用" class="headerlink" title="客户端测试使用"></a>客户端测试使用</h4><p>由于目前好用的贴图网不好找就参考被人吧,感谢感谢~~</p>
<ul>
<li><a href="http://www.uml.org.cn/pzgl/200904246.asp" target="_blank" rel="external">TortoiseSVN使用简介</a></li>
<li><a href="https://www.google.com.hk/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=2&amp;ved=0ahUKEwiM_83j_YHPAhVDWT4KHTVaCQcQFgghMAE&amp;url=%68%74%74%70%3a%2f%2f%62%62%73%2e%73%63%69%65%6e%63%65%6e%65%74%2e%63%6e%2f%68%6f%6d%65%2e%70%68%70%3f%6d%6f%64%3d%61%74%74%61%63%68%6d%65%6e%74%26%69%64%3d%31%38%35%34%33&amp;usg=AFQjCNExAzbLuWZTTnzUECCzYGcn2qy3jg" target="_blank" rel="external">中文教程pdf版下载</a></li>
<li><a href="http://www.cnblogs.com/sw926/p/3309619.html" target="_blank" rel="external">TortoiseSVN使用方法</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CentOS6.8搭建个人dokuwiki]]></title>
      <url>http://arvon.top/2016/08/20/CentOS6-8%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BAdokuwiki/</url>
      <content type="html"><![CDATA[<p><strong>摘要：</strong><a href="https://www.dokuwiki.org/wiki:dokuwiki" target="_blank" rel="external">dokuwiki</a>是一个开源的wiki引擎程序，非常适合知识库管理，因为有的东西知识不完善不好用blog写，有时也许即时记录一下想法什么的，所以这个还是很有必要的。之前也对比过其他的wiki程序，不过这个比较符合我的要求，所以就用这个程序，这里主要对安装配置做一下记录。</p>
<a id="more"></a>
<h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><ul>
<li>这里使用的是CentOS6.8系统安装。</li>
<li>使用nginx+php发布,另外dokuwiki不需要数据库，这点我很喜欢。</li>
</ul>
<h4 id="nginx-php环境准备"><a href="#nginx-php环境准备" class="headerlink" title="nginx+php环境准备"></a>nginx+php环境准备</h4><ul>
<li>参照我之前的<a href="http://blog.arvon.top/2015/02/13/Centos%E6%90%AD%E5%BB%BAnginx-php%E7%8E%AF%E5%A2%83/" target="_blank" rel="external">nginx+php环境搭建</a></li>
<li>注意安装完成php-fpm完成后记得查看php进程是否正常，php-fpm进程默认是9000端口</li>
</ul>
<h4 id="安装dokuwiki"><a href="#安装dokuwiki" class="headerlink" title="安装dokuwiki"></a>安装dokuwiki</h4><ul>
<li>下载dokuwiki<br>下载地址<a href="https://download.dokuwiki.org/" target="_blank" rel="external">https://download.dokuwiki.org/</a><br><code>注意:</code>下载的时候会让选择语言，这里我没直接贴链接的原因也是这个，选一个中文即可，英文默认必须安装。</li>
<li>安装dokuwiki<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#解压</span></div><div class="line">tar xvf dokuwiki<span class="_">-a</span>1b9b25f129b085a00920bd821719ccd.tgz</div><div class="line"><span class="comment">#移动到nginx网页存放目录</span></div><div class="line">mv dokuwiki /usr/share/nginx/html/</div><div class="line"><span class="comment">#修改权限</span></div><div class="line">chmod -R 777 /usr/share/nginx/html/dokuwiki/data/</div><div class="line">chmod -R 777 /usr/share/nginx/html/dokuwiki/conf/</div><div class="line"><span class="comment">#重启nginx和php-fpm</span></div><div class="line">/etc/init.d/nginx restart</div><div class="line">/etc/init.d/php-fpm restart</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="网页安装配置"><a href="#网页安装配置" class="headerlink" title="网页安装配置"></a>网页安装配置</h4><ul>
<li>登陆<a href="http://yourIP/dokuwiki/install.php" target="_blank" rel="external">http://yourIP/dokuwiki/install.php</a></li>
<li>然后可以选择右上角的语言，之后就可以注册超级用户使用了。安装配置之后记得删除网站目录下的install.php文件</li>
<li>前面如果不注意会出现很多问题，比如，提示/data/pages无法写入的就是权限修改问题这个用上面的chmod命令可以解决</li>
<li>还会就是网页配置的时候有个bug，如果直接<a href="http://yourIP/install.php不安装反倒下载这个文件的时候，修改nginx配置文件将这个url修改为我上面写的那个url即可，其实就是换个路径就好了，`另外`需先确认nginx+php是正常的。" target="_blank" rel="external">http://yourIP/install.php不安装反倒下载这个文件的时候，修改nginx配置文件将这个url修改为我上面写的那个url即可，其实就是换个路径就好了，`另外`需先确认nginx+php是正常的。</a></li>
</ul>
<hr>
<p>ok，以上，附我的wiki地址:<a href="http://wiki.arvon.top" target="_blank" rel="external">http://wiki.arvon.top</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Ubuntu14.04命令行连接无线网络]]></title>
      <url>http://arvon.top/2016/08/17/Ubuntu14-04%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%BF%9E%E6%8E%A5%E6%97%A0%E7%BA%BF%E7%BD%91%E7%BB%9C/</url>
      <content type="html"><![CDATA[<p><strong><em>摘要：</em></strong>自己有个性能一般的ThinkPad本子，装了Ubuntu14.04，不过最近感觉触摸板很不好用，就打算使用命令行直接使用不用图形界面了，也更省资源。命令行启动后遇见个问题，我不会用命令行直接连接无线网络，真是尴尬，这里记录一下解决过程。</p>
<a id="more"></a>
<h3 id="设置开机启动命令行"><a href="#设置开机启动命令行" class="headerlink" title="设置开机启动命令行"></a>设置开机启动命令行</h3><p> 我这里使用的是方法一</p>
<h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><ul>
<li><p>修改grup文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#sudo vim /etc/default/grub</span></div><div class="line"><span class="comment">#将以下注释行末尾添加text</span></div><div class="line"><span class="comment">#GRUB_CMDLINE_LINUX_DEFAULT="quiet splash"</span></div><div class="line">GRUB_CMDLINE_LINUX_DEFAULT=<span class="string">"quiet splash text"</span></div></pre></td></tr></table></figure>
</li>
<li><p>刷新grub</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo update-grup</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><ul>
<li><p>编写配置文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#sudo chmod +w /boot/grub/grub.cfg</span></div><div class="line"><span class="comment">#sudo vim /boot/grub/grub.cfg</span></div><div class="line"><span class="comment">#复制以下内容</span></div><div class="line"> menuentry <span class="string">'Ubuntu，Linux 3.2.0-24-generic-pae'</span> --class ubuntu --class gnu-linux --class gnu --class os &#123;</div><div class="line">    recordfail</div><div class="line">    gfxmode <span class="variable">$linux_gfx_mode</span></div><div class="line">    insmod gzio</div><div class="line">    insmod part_msdos</div><div class="line">    insmod ext2</div><div class="line">    <span class="built_in">set</span> root=<span class="string">'(hd0,msdos8)'</span></div><div class="line">    search --no-floppy --fs-uuid --set=root 689a61a1-06fd-4ffe-95d7-8671e97bbe81</div><div class="line">    linux    /boot/vmlinuz-3.2.0-24-generic-pae root=UUID=689a61a1-06fd-4ffe-95d7-8671e97bbe81 ro   quiet splash <span class="variable">$vt_handoff</span></div><div class="line">    initrd    /boot/initrd.img-3.2.0-24-generic-pae</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>粘贴复制的内容并修改</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#参照如下</span></div><div class="line">menuentry <span class="string">'Ubuntu，Linux 3.2.0-24-generic-pae(command mode)'</span> --class ubuntu --class gnu-linux --class gnu --class os &#123;</div><div class="line">    recordfail</div><div class="line">    gfxmode <span class="variable">$linux_gfx_mode</span></div><div class="line">    insmod gzio</div><div class="line">    insmod part_msdos</div><div class="line">    insmod ext2</div><div class="line">    <span class="built_in">set</span> root=<span class="string">'(hd0,msdos8)'</span></div><div class="line">    search --no-floppy --fs-uuid --set=root 689a61a1-06fd-4ffe-95d7-8671e97bbe81</div><div class="line">    linux    /boot/vmlinuz-3.2.0-24-generic-pae root=UUID=689a61a1-06fd-4ffe-95d7-8671e97bbe81 ro text</div><div class="line">    initrd    /boot/initrd.img-3.2.0-24-generic-pae</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>关闭grub隐藏菜单</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#vim /etc/default/grub</span></div><div class="line">GRUB_HIDDEN_TIMEOUT=7</div><div class="line"><span class="comment">#修改以上的数值原值为0修改为非0即可</span></div></pre></td></tr></table></figure>
</li>
<li><p>刷新Grub</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo update-grub</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="命令行连接无线网络"><a href="#命令行连接无线网络" class="headerlink" title="命令行连接无线网络"></a>命令行连接无线网络</h3><h4 id="可用的方法"><a href="#可用的方法" class="headerlink" title="可用的方法"></a>可用的方法</h4><ul>
<li><p>查看哪个网卡支持无线网络</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo iwconfig</div><div class="line"><span class="comment">#我的网卡名称是wlan0，可以看IEEE802.11bgn作为参照</span></div></pre></td></tr></table></figure>
</li>
<li><p>确认网卡启动</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo ip link <span class="built_in">set</span> wlan0 up</div><div class="line"><span class="comment">#sudo ifconfig wlan0 up</span></div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>扫描无线网络</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo iw dev wlan0 scan | less</div><div class="line"><span class="comment">#sudo iwlist wlan0 scan | more</span></div></pre></td></tr></table></figure>
</li>
<li><p>连接无线网络<br>这里就分多种情况了（因为加密方式有3种，WEP、WPA、WPA2）</p>
<ol>
<li><p>对于常用的WPA方式加密</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#先生成要连接的无线网络的账号密码配置文件，借助wpa_passphrase命令</span></div><div class="line">sudo wpa_passphrase ESSID PWD &gt; ssidname.conf</div><div class="line"><span class="comment">#ssidname.conf这个文件名字可以自己随便起，位置也可以随便放，ESSID为无线名称，PWD为ESSID这个无线的连接密码</span></div><div class="line">sudo wpa_supplicant -B -i wlan0 -Dwext -c ./ssidname.conf</div><div class="line"><span class="comment">#连接该无线网络，此时还不能上网，需要获取IP</span></div><div class="line">sudo iwconfig wlan0</div><div class="line"><span class="comment">#查看此时wlan0网卡的状态</span></div><div class="line">sudo dhclient wlan0</div><div class="line"><span class="comment">#sudo dhcpcd wlan0</span></div><div class="line"><span class="comment">#获取IP,现在就可以看是不是能上网了</span></div></pre></td></tr></table></figure>
</li>
<li><p>对于WEB加密的无线</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo iw dev wlan0 connect [网络 SSID] key 0:[WEP 密钥]</div></pre></td></tr></table></figure>
</li>
<li><p>对于没有密码的</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo iw dev wlan0 connect [网络 SSID]</div></pre></td></tr></table></figure>
</li>
</ol>
</li>
</ul>
<h4 id="遇见的问题"><a href="#遇见的问题" class="headerlink" title="遇见的问题"></a>遇见的问题</h4><ul>
<li>关于”opertion not possible due to RF-kill”问题<br>描述：遇见这个问题是我已经用命令行连接上了无线，然后重启打算再熟悉一遍的时候，启动网卡就报这个错误。<br>解决：<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo rfkill block all</div><div class="line"><span class="comment">#软件上关闭所有的(网卡、蓝牙、红外)</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul>
<li><a href="http://blog.csdn.net/odaynot/article/details/7667251" target="_blank" rel="external">点滴的blog</a></li>
<li><a href="http://www.ahlinux.com/ubuntu/21063.html" target="_blank" rel="external">Linux技术网</a></li>
<li><a href="https://linux.cn/article-4015-1.html" target="_blank" rel="external">Linux开源中文社区</a></li>
<li><a href="http://www.2cto.com/os/201210/160117.html" target="_blank" rel="external">红黑联盟</a></li>
<li><a href="http://tieba.baidu.com/p/2097205543" target="_blank" rel="external">Linux吧</a></li>
</ul>
<hr>
<p>以上，属于归纳整理</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[DNS端口使用解释]]></title>
      <url>http://arvon.top/2016/08/16/DNS%E7%AB%AF%E5%8F%A3%E4%BD%BF%E7%94%A8%E8%A7%A3%E9%87%8A/</url>
      <content type="html"><![CDATA[<p><strong>前言：</strong>我们公司有个面试题很有意思，DNS的默认查询端口是什么？可能大家都很熟悉dns使用53端口，那究竟是使用udp协议还是tcp协议呢，恩，我也不清楚，所以就看了个科普贴！<br><a id="more"></a></p>
<h3 id="DNS端口有TCP53和UDP53两个端口"><a href="#DNS端口有TCP53和UDP53两个端口" class="headerlink" title="DNS端口有TCP53和UDP53两个端口"></a>DNS端口有TCP53和UDP53两个端口</h3><p>DNS在进行区域传输的时候使用TCP协议，其他时候则使用UDP协议</p>
<h4 id="使用TCP53端口的情况"><a href="#使用TCP53端口的情况" class="headerlink" title="使用TCP53端口的情况"></a>使用TCP53端口的情况</h4><ul>
<li>区域传送时使用TCP，主要有一下两点考虑：<ol>
<li>辅域名服务器会定时（一般时3小时）向主域名服务器进行查询以便了解数据是否有变动。如有变动，则会执行一次区域传送，进行数据同步。区域传送将使用TCP而不是UDP，因为数据同步传送的数据量比一 个请求和应答的数据量要多得多</li>
<li>TCP是一种可靠的连接，保证了数据的准确性。</li>
</ol>
</li>
</ul>
<h4 id="使用UDP53端口的情况"><a href="#使用UDP53端口的情况" class="headerlink" title="使用UDP53端口的情况"></a>使用UDP53端口的情况</h4><ul>
<li>域名解析时使用UDP协议<ol>
<li>客户端向DNS服务器查询域名，一般返回的内容都不超过512字节，用UDP传输即可。不用经过TCP三次握手，这样DNS服务器负载更低，响应更快。虽然从理论上说，客户端也可以指定向DNS服务器查询的时候使用TCP，但事实上，很多DNS服务器进行配置的时候，仅支持UDP查询包。</li>
<li>使用TCP的情况非常罕见，神秘兮兮。其实当解析器发出一个request后，返回的response中的tc删节标志比特位被置1时，说明反馈报文因为超长而有删节。这是因为UDP的报文最大长度为512字节。解析器发现后，将使用TCP重发request，TCP允许报文长度超过512字节。既然TCP能将data stream分成多个segment，它就能用更多的segment来传送任意长度的数据。</li>
</ol>
</li>
<li>为什么既使用UDP协议又使用TCP协议<ol>
<li>TCP与UDP传送字节的长度限制：UDP报文的最大长度为512字节，而TCP则允许报文长度超过512字节。当DNS查询超过512字节时，协议的TC标志出现删除标志，这时则使用TCP发送。通常传统的UDP报文一般不会大于512字节。</li>
</ol>
</li>
</ul>
<h3 id="TCP和UDP连接的简单区别说明"><a href="#TCP和UDP连接的简单区别说明" class="headerlink" title="TCP和UDP连接的简单区别说明"></a>TCP和UDP连接的简单区别说明</h3><p> TCP是一种面向连接的协议，提供可靠的数据传输，一般服务质量要求比较高的情况，使用这个协议。UDP—用户数据报协议，是一种无连接的传输层协议，提供面向事务的简单不可靠信息传送服务。</p>
<h4 id="TCP与UDP的区别"><a href="#TCP与UDP的区别" class="headerlink" title="TCP与UDP的区别"></a>TCP与UDP的区别</h4><ol>
<li>UDP和TCP协议的主要区别是两者在如何实现信息的可靠传递方面不同。TCP协议中包含了专门的传递保证机制，当数据接收方收到发送方传来的信息时，会自动向发送方发出确认消息；发送方只有在接收到该确认消息之后才继续传送其它信息，否则将一直等待直到收到确认信息为止。 与TCP不同，UDP协议并不提供数据传送的保证机制。如果在从发送方到接收方的传递过程中出现数据报的丢失，协议本身并不能做出任何检测或提示。因此，通常人们把UDP协议称为不可靠的传输协议。相对于TCP协议，UDP协议的另外一个不同之处在于如何接收突发性的多个数据报。不同于TCP，UDP并不能确保数据的发送和接收顺序。事实上，UDP协议的这种乱序性基本上很少出现，通常只会在网络非常拥挤的情况下才有可能发生。</li>
<li>既然UDP是一种不可靠的网络协议，那么还有什么使用价值或必要呢？其实不然，在有些情况下UDP协议可能会变得非常有用。因为UDP具有TCP所望尘莫及的速度优势。虽然TCP协议中植入了各种安全保障功能，但是在实际执行的过程中会占用大量的系统开销，无疑使速度受到严重的影响。反观UDP由于排除了信息可靠传递机制，将安全和排序等功能移交给上层应用来完成，极大降低了执行时间，使速度得到了保证。</li>
<li>DNS的规范规定了2种类型的DNS服务器，一个叫主DNS服务器，一个叫辅助DNS服务器。在一个区中主DNS服务器从自己本机的数据文件中读取该区的DNS数据信息，而辅助DNS服务器则从区的主DNS服务器中读取该区的DNS数据信息。当一个辅助DNS服务器启动时，它需要与主DNS服务器通信，并加载数据信息，这就叫做区传送（zone transfer）。</li>
</ol>
<hr>
<p>以上，致谢<a href="http://bbs.51cto.com/thread-1010537-1.html" target="_blank" rel="external">bbs版主小侠唐在飞</a>,以上内容均由bbs内容整理而来</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[hexo之Next主题设置]]></title>
      <url>http://arvon.top/2016/08/15/hexo%E4%B9%8BNext%E4%B8%BB%E9%A2%98%E5%A4%B4%E5%83%8F%E8%AE%BE%E7%BD%AE/</url>
      <content type="html"><![CDATA[<p><strong>摘要：</strong>使用Next主题搭建了博客，虽然说头像什么的都是浮云，但是没有还是略显不爽，但恕我愚昧只按照<a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="external">Next官方文档</a>没弄出来，官方写的太简略了，记录一下较为详细的步骤。<br>更新：打赏<br>更新：站内搜索</p>
<a id="more"></a>
<h3 id="设置头像"><a href="#设置头像" class="headerlink" title="设置头像"></a>设置头像</h3><p>这个头像就是站内侧边栏上那个头像</p>
<ul>
<li>第一步找个jpg图片</li>
<li><p>将图片放到站点配置目录images目录下（并没有规定非放在这）</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#我图片放的路径</span></div><div class="line">themes/next/<span class="built_in">source</span>/images/suolong.jpg</div></pre></td></tr></table></figure>
</li>
<li><p>修改主题配置文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#vim themes/next/_config.yml</span></div><div class="line"><span class="comment">#在任意位置添加如下内容</span></div><div class="line">avatar: images/suolong.jpg</div></pre></td></tr></table></figure>
</li>
<li><p>完成（hexo s测试）</p>
</li>
</ul>
<h3 id="设置网站logo"><a href="#设置网站logo" class="headerlink" title="设置网站logo"></a>设置网站logo</h3><p>也就是浏览器标签上的显示图标,这个图片是有要求的，可以使用在线工具生成。</p>
<ul>
<li><p>图片位置</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">themes/next/<span class="built_in">source</span>/images/favicon.ico</div></pre></td></tr></table></figure>
</li>
<li><p>修改站点配置文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#vim themes/next/_config.yml</span></div><div class="line">favicon: images/favicon.ico</div></pre></td></tr></table></figure>
</li>
<li><p>完成（测试即可）</p>
</li>
</ul>
<h3 id="打赏功能"><a href="#打赏功能" class="headerlink" title="打赏功能"></a>打赏功能</h3><p>如果url的话很简单，直接参照<a href="http://theme-next.iissnan.com/theme-settings.html#reward" target="_blank" rel="external">官网</a>就可以,对于不使用外链，图片放本地的话需要注意下路径</p>
<ul>
<li><p>图片位置</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">themes/next/<span class="built_in">source</span>/images/uploads/zhipay.jpg</div><div class="line">themes/next/<span class="built_in">source</span>/images/uploads/weipay.jpg</div></pre></td></tr></table></figure>
</li>
<li><p>修改主题配置文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#vim themes/next/_config.yml</span></div><div class="line"><span class="comment">#使用外链的话很简单，如下，直接写外链地址就可以了</span></div><div class="line"><span class="comment">#wechatpay: http://i2.piimg.com/517630/8ef419c517319dd1.jpg</span></div><div class="line"><span class="comment">#alipay: http://i2.piimg.com/517630/cac5f15767848576.jpg</span></div><div class="line">alipay: /images/uploads/zhipay.jpg</div><div class="line">wechatpay: /images/uploads/weipay.jpg</div></pre></td></tr></table></figure>
</li>
<li><p>好了，配置完成</p>
</li>
</ul>
<h3 id="站内搜索"><a href="#站内搜索" class="headerlink" title="站内搜索"></a>站内搜索</h3><ul>
<li><p>安装sitemap</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-generator-search --save</div></pre></td></tr></table></figure>
</li>
<li><p>修改站点配置文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">search:</div><div class="line">    path: sitemap.xml</div><div class="line">        field: post</div></pre></td></tr></table></figure>
</li>
<li><p>修改localsearch文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#vim themes/next/layout/_partials/search/localsearch.swig</span></div><div class="line"><span class="comment">#修改如下：</span></div><div class="line">&lt;div class=<span class="string">"popup"</span>&gt;</div><div class="line">&lt;span class=<span class="string">"search-icon fa fa-search"</span>&gt;&lt;/span&gt;</div><div class="line">&lt;input <span class="built_in">type</span>=<span class="string">"text"</span> id=<span class="string">"local-search-input"</span> placeholder=<span class="string">"search my blog..."</span>&gt;</div><div class="line">&lt;div id=<span class="string">"local-search-result"</span>&gt;&lt;/div&gt;</div><div class="line">&lt;span class=<span class="string">"popup-btn-close"</span>&gt;close&lt;/span&gt;</div><div class="line">&lt;/div&gt;</div><div class="line"><span class="comment">#原文件如下：</span></div><div class="line">&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line">   var search_path = <span class="string">"&lt;%= config.search.path %&gt;"</span>;</div><div class="line">   <span class="keyword">if</span> (search_path.length == 0) &#123;</div><div class="line">       search_path = <span class="string">"search.xml"</span>;</div><div class="line">   &#125;</div><div class="line">   var path = <span class="string">"&lt;%= config.root %&gt;"</span> + search_path;</div><div class="line">   searchFunc(path, <span class="string">'local-search-input'</span>, <span class="string">'local-search-result'</span>);</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>站内搜索完成</p>
</li>
</ul>
<hr>
<p>以上</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[8月读书计划]]></title>
      <url>http://arvon.top/2016/08/13/8%E6%9C%88%E8%AF%BB%E4%B9%A6%E8%AE%A1%E5%88%92/</url>
      <content type="html"><![CDATA[<p><img src="http://img.arvon.top:80/images/2019/08/12/20160813-augustread-1.jpg" alt="20160813-augustread-1"><br>前天入了三本图灵的图解系列丛书，要计划读一下，这里做个记录。</p>
<h3 id="书单"><a href="#书单" class="headerlink" title="书单"></a>书单</h3><ul>
<li><a href="https://www.amazon.cn/%E5%9B%BE%E8%A7%A3%E7%BD%91%E7%BB%9C%E7%A1%AC%E4%BB%B6-%E4%B8%89%E8%BD%AE%E8%B4%A4%E4%B8%80/dp/B00LZZADJC/ref=pd_bxgy_14_img_3?ie=UTF8&amp;psc=1&amp;refRID=F6ZZB1SS4HR0R286HEJA" target="_blank" rel="external">图解网络硬件</a></li>
<li><a href="https://www.amazon.cn/%E5%9B%BE%E7%81%B5%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E4%B8%9B%E4%B9%A6-%E5%9B%BE%E8%A7%A3TCP-IP-%E7%AB%B9%E4%B8%8B%E9%9A%86%E5%8F%B2/dp/B00DMS9990/ref=sr_1_1?ie=UTF8&amp;qid=1471020135&amp;sr=8-1&amp;keywords=%E5%9B%BE%E8%A7%A3tcp+ip" target="_blank" rel="external">图解tcp/ip</a></li>
<li><a href="https://www.amazon.cn/%E5%9B%BE%E7%81%B5%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E4%B8%9B%E4%B9%A6-%E5%9B%BE%E8%A7%A3HTTP-%E4%B8%8A%E9%87%8E%E5%AE%A3/dp/B00JTQK1L4/ref=pd_bxgy_14_img_3?ie=UTF8&amp;psc=1&amp;refRID=X611PHYM2A37XZX7CZZW" target="_blank" rel="external">图解http</a><a id="more"></a>
</li>
</ul>
<h3 id="为什么读"><a href="#为什么读" class="headerlink" title="为什么读"></a>为什么读</h3><ul>
<li>抓包分析能力是我之前就想学习的技能，但是苦于对协议什么的理解的不够系统，没有完善的知识体系所以心有余而力不足，刚好看到这个系列介绍协议的书就想买了看看，看过之后就可以研读我另外两本关于网络分析的书了。</li>
</ul>
<h3 id="网络分析读书清单"><a href="#网络分析读书清单" class="headerlink" title="网络分析读书清单"></a>网络分析读书清单</h3><ul>
<li><a href="https://www.amazon.cn/Wireshark%E7%BD%91%E7%BB%9C%E5%88%86%E6%9E%90%E7%9A%84%E8%89%BA%E6%9C%AF-%E6%9E%97%E6%B2%9B%E6%BB%A1/dp/B01AS1OS8A/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1471020453&amp;sr=1-1&amp;keywords=wireshark" target="_blank" rel="external">wireshark网络分析的艺术</a></li>
<li><a href="http://item.jd.com/10067343.html" target="_blank" rel="external">实用网络流量分析技术</a></li>
</ul>
<h3 id="关于blog"><a href="#关于blog" class="headerlink" title="关于blog"></a>关于blog</h3><p>读书和写blog这两个是应该坚持的，应该养成记录技术问题的习惯，以后尽量加大blog更新的频率，该做的实验还是要积极去实践和记录的</p>
<hr>
<p>以上</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Git钩子在hexo中的应用]]></title>
      <url>http://arvon.top/2016/08/12/Git%E9%92%A9%E5%AD%90%E5%9C%A8hexo%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/</url>
      <content type="html"><![CDATA[<p><strong>摘要：</strong>早该记录了，最开始我的blog是使用hexo+github搭建的使用jacman主题，也是因为对git不够了解，当时绑定域名是使用直接在github上写CNAME文件。感觉太麻烦了，就买了空间换了WordPress，wp也是用了要有快一年，然后感觉markdown支持的真是不好，而且迁移很不爽，然后就换了现在的。关于现在这套blog架构，依然使用hexo作为blog框架，我自己的电脑用作服务器，然后VPS作为web服务器提供发布，使用git hook进行更新blog。</p>
<h3 id="git钩子简介-–摘自git-scm"><a href="#git钩子简介-–摘自git-scm" class="headerlink" title="git钩子简介 –摘自git-scm"></a>git钩子简介 –摘自<a href="https://git-scm.com/book/zh/v2/%E8%87%AA%E5%AE%9A%E4%B9%89-Git-Git-%E9%92%A9%E5%AD%90" target="_blank" rel="external">git-scm</a></h3><p>Git 能在特定的重要动作发生时触发自定义脚本。 有两组这样的钩子：客户端的和服务器端的。 客户端钩子由诸如提交和合并这样的操作所调用，而服务器端钩子作用于诸如接收被推送的提交这样的联网操作。 你可以随心所欲地运用这些钩子。</p>
<a id="more"></a>
<h4 id="git-hook概述"><a href="#git-hook概述" class="headerlink" title="git hook概述"></a>git hook概述</h4><p>钩子都被存储在 Git 目录下的 hooks 子目录中。 也即绝大部分项目中的 .git/hooks 。 当你用 git init 初始化一个新版本库时，Git 默认会在这个目录中放置一些示例脚本。这些脚本除了本身可以被调用外，它们还透露了被触发时所传入的参数。 所有的示例都是 shell 脚本，其中一些还混杂了 Perl 代码，不过，任何正确命名的可执行脚本都可以正常使用 —— 你可以用 Ruby 或 Python，或其它语言编写它们。 这些示例的名字都是以 .sample 结尾，如果你想启用它们，得先移除这个后缀。把一个正确命名且可执行的文件放入 Git 目录下的 hooks 子目录中，即可激活该钩子脚本。 这样一来，它就能被 Git 调用。Git Hooks 就是一些触发特定事件的脚本。比如 commit、push、merge 等等，也区分本地 Hooks 和服务端 Hooks。</p>
<h4 id="使用post-reveive"><a href="#使用post-reveive" class="headerlink" title="使用post-reveive"></a>使用post-reveive</h4><p>当用户在本地仓库执行git-push命令时，服务器上远程仓库就会对应执行git-receive-pack命令，而git-receive-pack命令会调用pre-receive钩子。使用git部署时的流程：本地git-push –&gt; VPS上Git服务器更新并Hook –&gt;VPS上执行pre-receive脚本，同步到服务器本地仓库目录</p>
<h3 id="git部署blog过程记录"><a href="#git部署blog过程记录" class="headerlink" title="git部署blog过程记录"></a>git部署blog过程记录</h3><h4 id="VPS安装git"><a href="#VPS安装git" class="headerlink" title="VPS安装git"></a>VPS安装git</h4><ul>
<li>安装初始化<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">yum install git-core -y</div><div class="line">adduser git-blog</div><div class="line"><span class="built_in">cd</span> /home/git-blog</div><div class="line">git init --bare blog.git</div><div class="line"><span class="comment">#使用--bare参数是创建一个裸仓库，没有工作区，这里不再裸仓库进行操作，只为共享而存在</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="创建信任"><a href="#创建信任" class="headerlink" title="创建信任"></a>创建信任</h4><ul>
<li>创建从我本机到VPS上git-blog用户的信任<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ssh-copy-id git-blog@VPShost</div><div class="line"><span class="comment">#就是把~/.ssh/id_rsa.pub中的内容添加到VPS主机上~/.ssh/authorized_keys文件中</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="本地配置git发布"><a href="#本地配置git发布" class="headerlink" title="本地配置git发布"></a>本地配置git发布</h4><ul>
<li>Hexo主配置文件_config.yml如下<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line"> <span class="built_in">type</span>: git</div><div class="line"> message: Arvon</div><div class="line"> repo: ssh://git-blog@blog.arvon.top:12345/home/arvon/blog.git</div><div class="line"> <span class="comment">#repo: git-blog@blog.arvon.top:/home/arvon/blog.git</span></div><div class="line"> branch: master</div><div class="line"><span class="comment">#注意的地方，搬来repo那是直接写主机地址就可以了但是，我这主机ssh端口不是默认端口所以就需要写成ssh的形式。</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="服务器配置git-hook"><a href="#服务器配置git-hook" class="headerlink" title="服务器配置git hook"></a>服务器配置git hook</h4><ul>
<li>编辑blog.git/hooks下新建post-receive文件，内容如下<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/sh</span></div><div class="line">git --work-tree=/usr/nginx/html/myblog --git-dir=/home/git-blog/blog.git checkout <span class="_">-f</span></div><div class="line"><span class="comment">#这个意思是发布的内容推送到/usr/nginx/html/myblog目录下</span></div><div class="line"><span class="comment">#别忘了 chmod +x post-receive</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h4><ul>
<li><p>本地操作</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git new <span class="string">"test"</span></div><div class="line">git g <span class="_">-d</span></div></pre></td></tr></table></figure>
</li>
<li><p>参考文档<br><a href="http://www.swiftyper.com/2016/04/17/deploy-hexo-with-git-hook/" target="_blank" rel="external">swiftyper的blog</a><br><a href="http://www.imys.net/20160303/hexo-nginx-auto-deploy.html" target="_blank" rel="external">imys的blog</a></p>
</li>
<li>之前关于hexo的文章<br><a href="http://arvon.top/2015/07/23/Linux%E4%B8%8Bhexo%E9%85%8D%E7%BD%AE/">linux下hexo配置</a><br><a href="http://arvon.top/2015/07/20/Hexo%E7%AE%80%E6%98%8E/">hexo简明</a><br><a href="http://arvon.top/2015/07/17/%E4%BD%BF%E7%94%A8Hexo%E5%92%8CGithub%E6%90%AD%E5%BB%BABlog/">使用Hexo和Github搭建Blog</a></li>
</ul>
<hr>
<p>ok,以上，以后还会补充git的东西</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Tmux源码安装]]></title>
      <url>http://arvon.top/2016/08/12/Tmux%E6%BA%90%E7%A0%81%E5%AE%89%E8%A3%85/</url>
      <content type="html"><![CDATA[<p><strong>简述：</strong>之前其实有写过<a href="http://arvon.top/2015/07/22/Tmux-%E4%BD%BF%E7%94%A8%E7%AE%80%E8%AE%B0/">一篇tmux的简单使用绍</a>,但是不够详尽，而且当时也并没有出现几个问题，当yum不好使的时候，就要上源码了。</p>
<a id="more"></a>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>tmux依赖于ncurses-devel和libevent。所以要先安装ncurses-devel，然后libevent，然后tmux</p>
<h4 id="关于libevent库"><a href="#关于libevent库" class="headerlink" title="关于libevent库"></a>关于libevent库</h4><ul>
<li><p>先装开发库</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install gcc kernel-devel make ncurses-devel</div></pre></td></tr></table></figure>
</li>
<li><p>安装libevent库</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">wget https://github.com/downloads/libevent/libevent/libevent-2.0.21-stable.tar.gz</div><div class="line">tar xvf libevent-2.0.21-stable.tar.gz</div><div class="line">cd libevent-2.0.21-stable</div><div class="line">./configure</div><div class="line">make &amp;&amp; make install</div><div class="line"><span class="meta">#</span><span class="bash">注意了，有个坑，这时libevent并咩有安装在默认路径，所以会报错的，因此需要做个软链或者直接cp一份到默认路径，我的环境是CentOS6.7—x64的，所以就放到/usr/lib64下面</span></div><div class="line">cp libevent-2.0.21-stable/.libs/libevent-2.0.so.5 /usr/lib64/</div><div class="line"><span class="meta">#</span><span class="bash">顺便贴一句报错--&gt;tmux: error <span class="keyword">while</span> loading shared libraries: libevent-2.0.so.5: cannot open shared object file: No such file or directory</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="关于tmux源码"><a href="#关于tmux源码" class="headerlink" title="关于tmux源码"></a>关于tmux源码</h4><p>现在装tmux就比较顺滑了</p>
<ul>
<li>下载tmux源码，方式有多种（tmux、curl、git均可）<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#这里我使用了2.0版本</span></div><div class="line">wget https://github.com/tmux/tmux/releases/download/2.0/tmux-2.0.tar.gz</div><div class="line"><span class="comment">#curl -OL http://downloads.sourceforge.net/tmux/tmux-1.9a.tar.gz</span></div><div class="line"><span class="comment">#git clone git://git.code.sf.net/p/tmux/tmux-code</span></div><div class="line"><span class="comment">#根据下载源码具体情况安装</span></div><div class="line">tar xvf tmux-2.0.tar.gz</div><div class="line"><span class="built_in">cd</span> tmux-2.0</div><div class="line">./configure</div><div class="line">make &amp;&amp; make install</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p>ok, 开始愉快的使用吧,简单使用命令参照我之前的那一篇就可以<br><a href="https://tmux.github.io/" target="_blank" rel="external">Tmux官方</a><br><a href="http://cenalulu.github.io/linux/tmux/" target="_blank" rel="external">很好的普及文章</a><br><a href="https://gist.github.com/rothgar/cecfbd74597cc35a6018" target="_blank" rel="external">本篇参考</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[sort小插曲]]></title>
      <url>http://arvon.top/2016/08/11/sort%E5%B0%8F%E6%8F%92%E6%9B%B2/</url>
      <content type="html"><![CDATA[<p><strong>Tips:</strong>遇见一个有趣的sort命令问题，很有意思，这里记录一下，顺便也再复习一下sort命令。</p>
<a id="more"></a>
<h4 id="有意思的例子"><a href="#有意思的例子" class="headerlink" title="有意思的例子"></a>有意思的例子</h4><ul>
<li><p>要求：将以下文本_按字母排序，_和-之间的按数字升序，-之后的按数字降序排列,不能破坏原本每行的数据，只对上下顺序排列.</p>
<ul>
<li>文本sort.txt如下<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">def_99-55</div><div class="line">def_99-11</div><div class="line">def_123-100</div><div class="line">abc_456-100</div><div class="line">abc_123-100</div><div class="line">def_123-10</div><div class="line">abc_456-10</div><div class="line">abc_123-1</div><div class="line">xzy_789-0</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>解答</p>
<ul>
<li>脚本如下<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">cat sort.txt |sed s/_/-/ |sort -t<span class="string">"-"</span> -k1,1 -k2,2n -k3,3nr |sed s/-/_/</div><div class="line"><span class="comment">#说明：先将分隔符替换为统一，然后以-为分割符对第一字段按基础排序，第二字段按数字排序，第三字段按数字降序排序</span></div><div class="line"><span class="comment">#-k1,1这种表达方式是只对本域进行排序是最准确的表达,类似还有-k1.2,1.2表示仅对第一列第二个字符排序，1,1这种表达表示的是一个完整域，如果直接写-k1那就表示从1到最后一个域，这样表述的是不准确的</span></div><div class="line"><span class="comment">#输出如下</span></div><div class="line">abc_123-100</div><div class="line">abc_123-1</div><div class="line">abc_456-100</div><div class="line">abc_456-10</div><div class="line">def_99-55</div><div class="line">def_99-11</div><div class="line">def_123-100</div><div class="line">def_123-10</div><div class="line">xzy_789-0</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h4 id="sort命令回顾"><a href="#sort命令回顾" class="headerlink" title="sort命令回顾"></a>sort命令回顾</h4><ul>
<li><p>基础选项</p>
<ul>
<li>常规选项(参考:<a href="http://man.linuxde.net/sort" target="_blank" rel="external">http://man.linuxde.net/sort</a>)<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#usage: sort [选项] [参数]</span></div><div class="line">-b：忽略每行前面开始出的空格字符；</div><div class="line">-c：检查文件是否已经按照顺序排序；</div><div class="line"><span class="_">-d</span>：排序时，处理英文字母、数字及空格字符外，忽略其他的字符；</div><div class="line"><span class="_">-f</span>：排序时，将小写字母视为大写字母；</div><div class="line">-i：排序时，除了040至176之间的ASCII字符外，忽略其他的字符；</div><div class="line">-m：将几个排序号的文件进行合并；</div><div class="line">-M：将前面3个字母依照月份的缩写进行排序；</div><div class="line">-n：依照数值的大小排序；</div><div class="line">-o&lt;输出文件&gt;：将排序后的结果存入制定的文件；</div><div class="line">-r：以相反的顺序来排序；</div><div class="line">-t&lt;分隔字符&gt;：指定排序时所用的栏位分隔字符；</div><div class="line">+&lt;起始栏位&gt;-&lt;结束栏位&gt;：以指定的栏位来排序，范围由起始栏位到结束栏位的前一栏位</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>关于古老的+-选定域的说明<br>sort官方有如下说明(摘自<a href="http://www.cnblogs.com/51linux/archive/2012/05/23/2515299.html" target="_blank" rel="external">孙愚的博客</a>)</p>
<blockquote>
<p>On older systems, <code>sort’ supports an obsolete origin-zero syntax</code>+POS1 [-POS2]‘ for specifying sort keys.    POSIX 1003.1-2001 (*note Standards conformance::) does not allow this; use `-k’ instead.<br>原来，这种古老的表示方式已经被淘汰了，以后可以理直气壮的鄙视使用这种表示方法的脚本喽！<br>（为了防止古老脚本的存在，在这再说一下这种表示方法，加号表示Start部分，减号表示End部分。最最重要的一点是，这种方式方法是从0开始计数的，  以前所说的第一个域，在此被表示为第0个域。以前的第2个字符，在此表示为第1个字符</p>
</blockquote>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ssh无交互批量认证]]></title>
      <url>http://arvon.top/2016/08/08/ssh%E6%97%A0%E4%BA%A4%E4%BA%92%E6%89%B9%E9%87%8F%E8%AE%A4%E8%AF%81/</url>
      <content type="html"><![CDATA[<p><strong><em>Tips:</em></strong>在使用ansible部署服务器的时候，部署机需要先做好和其他服务器的免密码登陆，如果一台一台手动执行那就太low了，所以就需要脚本来批量完成这些繁琐的工作，下面是我写的脚本，主要使用了expect这个工具。</p>
<a id="more"></a>
<h3 id="expect介绍"><a href="#expect介绍" class="headerlink" title="expect介绍"></a>expect介绍</h3><ul>
<li>expect是用于提供自动交互的工具，它可以控制处理输入和输出流，然后提供自动填写数据等功能（主要就是替代原本需要人机交互需要做的事情）</li>
<li>expect采用tcl(Tool Command Language)的脚本语言</li>
</ul>
<h3 id="脚本实例（自用脚本可随意参考）"><a href="#脚本实例（自用脚本可随意参考）" class="headerlink" title="脚本实例（自用脚本可随意参考）"></a>脚本实例（自用脚本可随意参考）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/usr/bin/sh</span></div><div class="line"><span class="comment">###############################################################################</span></div><div class="line"><span class="comment">#Author: arvon</span></div><div class="line"><span class="comment">#Email: yafeng2011@126.com</span></div><div class="line"><span class="comment">#Blog: http://arvon.top/</span></div><div class="line"><span class="comment">#Date: 2016/08/08</span></div><div class="line"><span class="comment">#Filename: write_authorized_keys.sh</span></div><div class="line"><span class="comment">#Revision: 1.0</span></div><div class="line"><span class="comment">#License: GPL</span></div><div class="line"><span class="comment">#Description: auto write authorized to other server</span></div><div class="line"><span class="comment">#Notes:</span></div><div class="line"><span class="comment">###############################################################################</span></div><div class="line"><span class="comment">#vars</span></div><div class="line">username=<span class="string">'root'</span></div><div class="line">server_passwd=<span class="string">'arvon2014'</span></div><div class="line">IP_list=<span class="string">"</span></div><div class="line">172.17.18.61</div><div class="line">172.17.18.62</div><div class="line">172.17.18.63</div><div class="line">"</div><div class="line"><span class="comment">#functions</span></div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">Main</span></span>()&#123;</div><div class="line"><span class="comment">#install_expect_package</span></div><div class="line"><span class="comment">#create_ras_pub</span></div><div class="line">write_authorized_file</div><div class="line">&#125;</div><div class="line"><span class="comment">#install expect package</span></div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">install_expect_package</span></span>()&#123;</div><div class="line">yum install -y expect expect-devel</div><div class="line">&#125;</div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">create_rsa_pub</span></span>()&#123;</div><div class="line">expect -c <span class="string">"</span></div><div class="line">spawn ssh-keygen -t rsa</div><div class="line">  expect &#123;</div><div class="line">    \"*y/n*\" &#123;send \"y\r\"; exp_continue&#125;</div><div class="line">    \"*key*\" &#123;send \"\r\"; exp_continue&#125;</div><div class="line">    \"*passphrase*\" &#123;send \"\r\"; exp_continue&#125;</div><div class="line">    \"*again*\" &#123;send \"\r\";&#125;</div><div class="line">  &#125;"</div><div class="line">&#125;</div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">write_authorized_file</span></span>()&#123;</div><div class="line"><span class="keyword">for</span> each_ip <span class="keyword">in</span> <span class="variable">$&#123;IP_list&#125;</span>;<span class="keyword">do</span></div><div class="line">    expect -c <span class="string">"  </span></div><div class="line">    spawn ssh-copy-id <span class="variable">$&#123;username&#125;</span>@<span class="variable">$&#123;each_ip&#125;</span>  </div><div class="line">      expect &#123;  </div><div class="line">        \"*yes/no*\" &#123;send \"yes\r\"; exp_continue&#125;  </div><div class="line">        \"*password*\" &#123;send \"<span class="variable">$&#123;server_passwd&#125;</span>\r\"; exp_continue&#125;  </div><div class="line">        \"*Password*\" &#123;send \"<span class="variable">$&#123;server_passwd&#125;</span>\r\";&#125;  </div><div class="line">      &#125;  </div><div class="line">    "  </div><div class="line"><span class="keyword">done</span></div><div class="line">&#125;</div><div class="line"><span class="comment">#Main</span></div><div class="line">Main</div></pre></td></tr></table></figure>
<h3 id="参考地址"><a href="#参考地址" class="headerlink" title="参考地址"></a>参考地址</h3><p><a href="http://www.nist.gov/el/msid/expect.cfm" target="_blank" rel="external">1. Expect官方文档</a><br><a href="http://www.pythonclub.org/linux/expect" target="_blank" rel="external">2. python俱乐部</a><br><a href="http://blog.csdn.net/Beckham008/article/details/17258117" target="_blank" rel="external">3. Beckham008的blog</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Cassandra简单使用记录]]></title>
      <url>http://arvon.top/2016/08/06/Cassandra%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<p><strong>简述：</strong>在现在公司接触这个比较多，但是之前并不熟悉，所以需要简单记录下基础增删改查，以及简单介绍。我目前的理解就是这个nosql非常适合做集群，在吞吐量上应该远高于传统数据库。需要再以后工作学习中再深入了解，先简单记录一下吧。</p>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Apache Cassandra最初由Facebook创建，集Google BigTable的数据模型与Amazon Dynamo的完全分布式的架构于一身,是一个大规模可伸缩的开源NoSQL数据库。Cassandra完美地支持管理大量的结构化，半结构化和非结构化数据，且能够跨多个数据中心和云。Cassandra提供了持续可用性，线性扩展，操作简单，跨多个服务器而没有单点故障。且提供了一个有力的动态数据模型，支持最大的灵活性和快速响应。</p>
<a id="more"></a>
<h3 id="cql交互命令（类似sql）"><a href="#cql交互命令（类似sql）" class="headerlink" title="cql交互命令（类似sql）"></a>cql交互命令（类似sql）</h3><ol>
<li><p>运行cqlsh</p>
<ul>
<li>直接键入cqlsh命令即可，登陆后可使用help查看帮助<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/data/apps/opt/cassandra/bin/cqlsh ssy-db1</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>创建keyspace（秘钥空间）</p>
<ul>
<li><p>主要包括复制策略和durable_writes</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">cqlsh&gt;</span><span class="bash"> CREATE KEYSPACE <span class="string">"Test"</span></span></div><div class="line"><span class="meta">cqlsh&gt;</span><span class="bash"> WITH replication = &#123;<span class="string">'class'</span>:<span class="string">'SimpleStrategy'</span>, <span class="string">'replication_factor'</span> : 3&#125;;</span></div><div class="line"><span class="meta">#</span><span class="bash">创建名为Test的keyspace(默认创建时不区分大小写的，加上双引号就区分大小写了),采用simple存储策略，factor为存储策略的选项</span></div></pre></td></tr></table></figure>
</li>
<li><p>复制策略介绍</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">org.apache.cassandra.locator.SimpleStrategy</div><div class="line"><span class="meta">#</span><span class="bash">SimpleStrategy针对是一个data center中的多个存储节点(node)的存储，strategy_options表示数据存储所有存储节点(node)的复本数量，选择node的规则是在data center中按照顺时针的方向进行选择；</span></div><div class="line">org.apache.cassandra.locator.NetworkTopologyStrategy</div><div class="line"><span class="meta">#</span><span class="bash">NetworkTopologyStrategy是针对多个data center的情况进行处理，这个是以防同一个data center中的所以节点同时出现问题，如掉电；</span></div><div class="line">org.apache.cassandra.locator.OldNetworkTopologyStrategy</div><div class="line"><span class="meta">#</span><span class="bash">OldNetworkT opologyStrategy，这个可能会很少用上了，对data center的个数及复本的数量支持的有限，有了NetworkTopologyStrategy就不需要OldNetworkTopologyStrategy了。</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>删除keyspace</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">cqlsh&gt;</span><span class="bash"> drop keyspace <span class="string">"Test"</span></span></div></pre></td></tr></table></figure>
</li>
<li><p>修改keyspace参数信息</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">cqlsh&gt;</span><span class="bash"> ALTER KEYSPACE <span class="string">"Test"</span> WITH REPLICATION = &#123; <span class="string">'class'</span> : <span class="string">'SimpleStrategy'</span>, <span class="string">'replication_factor'</span> : 1 &#125;;</span></div><div class="line"><span class="meta">#</span><span class="bash">修改factor为1</span></div></pre></td></tr></table></figure>
</li>
<li><p>进入keyspace</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">cqlsh&gt;</span><span class="bash"> use <span class="string">"keyspace_name"</span>;</span></div></pre></td></tr></table></figure>
</li>
<li><p>查看</p>
<ul>
<li><p>查看keyspace</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">cqlsh&gt;</span><span class="bash"> SELECT * from system.schema_keyspaces;</span></div><div class="line"><span class="meta">cqlsh&gt;</span><span class="bash"> describe keyspaces;</span></div></pre></td></tr></table></figure>
</li>
<li><p>查看已有表</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">sqlsh&gt;</span><span class="bash"> describe tables;</span></div></pre></td></tr></table></figure>
</li>
<li><p>查看表结构</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">sqlsh&gt;</span><span class="bash"> use <span class="string">"keyspace_name"</span></span></div><div class="line"><span class="meta">sqlsh&gt;</span><span class="bash"> describe table <span class="string">"table_name"</span>;</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Zabbix添加自定义监控项]]></title>
      <url>http://arvon.top/2016/08/05/Zabbix%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9B%91%E6%8E%A7%E9%A1%B9/</url>
      <content type="html"><![CDATA[<p><em>Intorduction:</em> 最近一直有使用zabbix，根据需求需要自己手动监控一些服务，这时就需要自己动手自己写一些小脚本了，我这里写了一个比较简单的小脚本，主要用来监控monit监控的服务状态，听起来有些拗口，不过就是这样的。 这里尽可以详细的记录一下，哪里有不对欢迎指正</p>
<a id="more"></a>
<h3 id="部署思路"><a href="#部署思路" class="headerlink" title="部署思路"></a>部署思路</h3><ul>
<li>zabbix的server端我是直接写脚本安装的。先前blog有记录过。</li>
<li>zabbix的client端和监控脚本采用ansible直接推送和安装。（ansible的配置随后再记录）  <h3 id="配置调试"><a href="#配置调试" class="headerlink" title="配置调试"></a>配置调试</h3><h4 id="自定义脚本"><a href="#自定义脚本" class="headerlink" title="自定义脚本"></a>自定义脚本</h4></li>
<li><p>脚本如下</p>
  <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment">#########################################################################</span></div><div class="line"><span class="comment">#Author: arvon</span></div><div class="line"><span class="comment">#Email: guoyf@easemob.com</span></div><div class="line"><span class="comment">#Blog: arvon.top</span></div><div class="line"><span class="comment">#Date: 16/07/06</span></div><div class="line"><span class="comment">#Version: 1.0</span></div><div class="line"><span class="comment">#Todo: collect the monit summary process status send to zabbix server</span></div><div class="line"><span class="comment">##########################################################################</span></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> commands</div><div class="line">my_parameter = sys.argv[<span class="number">1</span>]</div><div class="line">total_msg = commands.getoutput(<span class="string">'monit summary'</span>)</div><div class="line">msg_list = total_msg.split(<span class="string">'\n'</span>)</div><div class="line">a = <span class="number">0</span></div><div class="line"><span class="keyword">for</span> each_line <span class="keyword">in</span> msg_list:</div><div class="line">    <span class="keyword">if</span> my_parameter <span class="keyword">in</span> each_line <span class="keyword">and</span> <span class="string">'Process'</span> <span class="keyword">in</span> each_line:</div><div class="line">        <span class="keyword">if</span> <span class="string">'Running'</span> <span class="keyword">in</span> each_line:</div><div class="line">            a = <span class="number">1</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            a = <span class="number">0</span></div><div class="line"><span class="keyword">print</span> a</div></pre></td></tr></table></figure>
</li>
<li><p>开启client端自定义脚本选项</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Include=/etc/zabbix/zabbix_agentd.d/  #在这个路径下可以放自己的配置文件</div><div class="line">UnsafeUserParameters=1 #就是这个参数1为打开，没有脚本的话打开这个会报错的</div></pre></td></tr></table></figure>
</li>
<li><p>配置文件说明<br>自定义在/etc/zabbix/zabbix_agentd.d/下的配置文件<br>里面主要有两个关键因素</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">UserParameter=process.msg.web #这个就是定义key名称的地方，但最好定义的规整一点，还有就是别和zabbix自带的key重复</div><div class="line">sudo python /etc/zabbix/scripts/get_monit_status.py "'nginx'"  #这个是Value，可以是脚本也可以是个命令什么，这里返回的值就是zabbixServer得到的值</div></pre></td></tr></table></figure>
</li>
<li><p>zabbix-get测试说明<br>zabbix-get是zabbix的排错工具，在server上安装执行最好，-s是指定主机，-k是指定要获取哪个key对应的值，这里返回的是1，是我想用1和0在web上方便使用布尔值对服务状态做判断</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Ansible根据excel自动生成inventory文件]]></title>
      <url>http://arvon.top/2016/08/05/Ansible%E6%A0%B9%E6%8D%AEexcel%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90inventory%E6%96%87%E4%BB%B6/</url>
      <content type="html"><![CDATA[<p>Tip: 根据excel表格手动写入inventory文件是个费时费力还容易出错的事情，这种事情本就应该使用脚本完成，刚好最近需要，然后就查阅文档，本来是想用shell的，毕竟相比python我还是对shell比较熟悉，奈何python的xlrd模块实在太合适所以就用python写了脚本（需要先安装xlrd模块）。<br>Update:现在不推荐使用xlrd模块了，原因是现在python3.0趋向于使用新模块openpyx，而且xlrd模块只是读取excel还需xlwd模块进行写入操作，不过现在这个模块已经支持不是很好了，我用pip没装上，所以现在使用openpyx模块，在<a href="http://arvon.top/2017/05/24/Jumpserver%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/">我博客Jumpserver</a>这篇文章里记录有这个模块的用法<br><a id="more"></a></p>
<h3 id="安装xlrd模块"><a href="#安装xlrd模块" class="headerlink" title="安装xlrd模块"></a>安装xlrd模块</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pip install xlrd</div><div class="line"><span class="meta">#</span><span class="bash">想源码安装参照https://pypi.python.org/pypi/xlrd/</span></div></pre></td></tr></table></figure>
<h3 id="Python脚本"><a href="#Python脚本" class="headerlink" title="Python脚本"></a>Python脚本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment"># -*- coding:utf-8 -*-</span></div><div class="line"><span class="comment">###############################################################################</span></div><div class="line"><span class="comment">#Author: arvon</span></div><div class="line"><span class="comment">#Email: yafeng2011@126.com</span></div><div class="line"><span class="comment">#Blog: http://arvon.top/</span></div><div class="line"><span class="comment">#Date: 2016/08/04</span></div><div class="line"><span class="comment">#Filename: excel_write_inventory.py</span></div><div class="line"><span class="comment">#Revision: 1.1</span></div><div class="line"><span class="comment">#License: GPL</span></div><div class="line"><span class="comment">#Description: use xlrd module auto create vars and file for ansible</span></div><div class="line"><span class="comment">#Notes:</span></div><div class="line"><span class="comment">###############################################################################</span></div><div class="line"><span class="keyword">from</span> xlrd <span class="keyword">import</span> open_workbook</div><div class="line"></div><div class="line"><span class="comment">#input vars</span></div><div class="line">excel_file = <span class="string">'test.xlsx'</span></div><div class="line"><span class="comment">#input the excel file path</span></div><div class="line">inventory_path = <span class="string">'./'</span></div><div class="line"><span class="comment">#input the inventory file dir path</span></div><div class="line">ops_dir_path = <span class="string">'you/ansible/path'</span></div><div class="line"><span class="comment">#input the ops-repo dir path</span></div><div class="line">inventory_file = <span class="string">'inventory.yml'</span></div><div class="line"><span class="comment">#input the ansible's inventory filename</span></div><div class="line">inventory_name = <span class="string">'ssy'</span></div><div class="line"></div><div class="line"><span class="comment">#define vars</span></div><div class="line">data = open_workbook(excel_file)</div><div class="line">table = data.sheets()[<span class="number">0</span>]</div><div class="line"><span class="comment">#open the excel first sheets</span></div><div class="line">nrows = table.nrows</div><div class="line"><span class="comment">#nrows is the tables line numbers</span></div><div class="line"></div><div class="line"><span class="comment">#functions</span></div><div class="line"><span class="comment">#write title to inventory file</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_title</span><span class="params">()</span>:</span></div><div class="line">    f = open(inventory_path + inventory_file, <span class="string">'w'</span>)</div><div class="line">    input_msg = \</div><div class="line"><span class="string">'''\</span></div><div class="line">hosts_ops_path: /data/ops-repo/</div><div class="line">inventory:</div><div class="line">  name: ssy</div><div class="line">  hosts:</div><div class="line">'''</div><div class="line">    f.write(<span class="string">'host_ops_path: '</span> + ops_dir_path + <span class="string">'\n'</span>)</div><div class="line">    f.write(<span class="string">'inventory:'</span> + <span class="string">'\n'</span>)</div><div class="line">    f.write(<span class="string">'  name: '</span> + inventory_name + <span class="string">'\n'</span>)</div><div class="line">    f.write(<span class="string">'  hosts:'</span> + <span class="string">'\n'</span>)</div><div class="line">    f.close</div><div class="line"><span class="comment">#write all hosts</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_hosts</span><span class="params">(row_num,host_name,group_name,host_num = <span class="number">1</span>)</span>:</span></div><div class="line">    <span class="keyword">for</span> each_line_num <span class="keyword">in</span> range(nrows):</div><div class="line">        each_line = table.row_values(each_line_num)</div><div class="line">        <span class="keyword">if</span> each_line[row_num] == <span class="number">1</span>:</div><div class="line">            f = open(inventory_path + inventory_file, <span class="string">'a'</span>)</div><div class="line">            f.write(<span class="string">'  - name: '</span>+ host_name + str(host_num) + <span class="string">'\n'</span>)</div><div class="line">            host_num = host_num + <span class="number">1</span></div><div class="line">            f.write(<span class="string">'    ip: '</span> + str(each_line[<span class="number">1</span>]) + <span class="string">'\n'</span>)</div><div class="line">            f.write(<span class="string">'    group: '</span>+ group_name + <span class="string">'\n'</span>)</div><div class="line">            f.write(<span class="string">"\n"</span>)</div><div class="line">            f.close</div><div class="line"><span class="comment">#use functions</span></div><div class="line">write_title()</div><div class="line">write_hosts(<span class="number">4</span>,<span class="string">'db'</span>,<span class="string">'dbserver'</span>)</div><div class="line">write_hosts(<span class="number">5</span>,<span class="string">'redis'</span>,<span class="string">'redis'</span>)</div><div class="line">write_hosts(<span class="number">6</span>,<span class="string">'zk'</span>,<span class="string">'zookeeper'</span>)</div><div class="line">write_hosts(<span class="number">7</span>,<span class="string">'kafka'</span>,<span class="string">'kafka'</span>)</div><div class="line">write_hosts(<span class="number">8</span>,<span class="string">'mysql'</span>,<span class="string">'mysql'</span>)</div><div class="line">write_hosts(<span class="number">9</span>,<span class="string">'rest'</span>,<span class="string">'rest'</span>)</div><div class="line">write_hosts(<span class="number">10</span>,<span class="string">'thrift'</span>,<span class="string">'thrift'</span>)</div><div class="line">write_hosts(<span class="number">11</span>,<span class="string">'push'</span>,<span class="string">'push'</span>)</div><div class="line">write_hosts(<span class="number">12</span>,<span class="string">'db-ejabberd'</span>,<span class="string">'ejabberd-db'</span>)</div><div class="line">write_hosts(<span class="number">13</span>,<span class="string">'conn-ejabberd'</span>,<span class="string">'ejabberd-conn'</span>)</div><div class="line">write_hosts(<span class="number">14</span>,<span class="string">'nginx'</span>,<span class="string">'nginx'</span>)</div><div class="line">write_hosts(<span class="number">15</span>,<span class="string">'web'</span>,<span class="string">'web'</span>)</div><div class="line">write_hosts(<span class="number">16</span>,<span class="string">'turn'</span>,<span class="string">'turn'</span>)</div><div class="line">write_hosts(<span class="number">17</span>,<span class="string">'media'</span>,<span class="string">'media'</span>)</div><div class="line">write_hosts(<span class="number">18</span>,<span class="string">'coference'</span>,<span class="string">'coference'</span>)</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[zabbix3.0配置文档]]></title>
      <url>http://arvon.top/2016/07/30/zabbix3.0%E9%85%8D%E7%BD%AE%E6%96%87%E6%A1%A3/</url>
      <content type="html"><![CDATA[<p> zabbix安装配置记录</p>
 <a id="more"></a>
<h3 id="Command-record"><a href="#Command-record" class="headerlink" title="Command record"></a>Command record</h3><ul>
<li><p>Yum Repo Install</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">The system Version is CentOS7.2</span></div><div class="line">wget http://repo.zabbix.com/zabbix/3.0/rhel/7/x86_64/zabbix-release-3.0-1.el7.noarch.rpm</div><div class="line">rpm -ivh  zabbix-release-3.0-1.el6.noarch.rpm</div></pre></td></tr></table></figure>
</li>
<li><p>LAMP Environment</p>
</li>
<li>Warning<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">iptables</span></div><div class="line">systemctl stop iptables</div><div class="line"><span class="meta">#</span><span class="bash">selinux</span></div><div class="line">setenforce 0</div><div class="line"><span class="meta">#</span><span class="bash">install lamp package</span></div><div class="line">yum install mysql mysql mysql-server php php-mysql httpd</div><div class="line"><span class="meta">#</span><span class="bash">Installed:</span></div><div class="line"><span class="meta">#</span><span class="bash">  mysql-community-client.x86_64 0:5.6.30-2.el6       mysql-community-libs.x86_64 0:5.6.30-2.el6         mysql-community-server.x86_64 0:5.6.30-2.el6       nginx.x86_64 1:1.6.3-8.el7       php.x86_64   0:5.4.16-36.1.el7_2.1       php-mysql.x86_64 0:5.4.16-36.1.el7_2.1      </span></div><div class="line">/etc/init.d/mysqld start</div><div class="line">mysqladmin password</div><div class="line">mysql -uroot -padmin -e "create database zabbix character set utf8;"</div><div class="line">mysql -uroot -padmin -e "grant all privileges on zabbix.* to zabbix@localhost identified by 'zabbix';"</div><div class="line">mysql -uroot -padmin -e "flush privileges;"</div><div class="line"><span class="meta">#</span><span class="bash">mysql -h<span class="variable">$zabbixIP</span> -uzabbix -pzabbix</span></div><div class="line">systemctl start httpd</div><div class="line">systemctl status httpd</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="Zabbix-Server"><a href="#Zabbix-Server" class="headerlink" title="Zabbix Server"></a>Zabbix Server</h4><ul>
<li><p>Zabbix Server Install</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">yum -y install zabbix-server-mysql zabbix-web-mysql zabbix-get</div><div class="line"><span class="meta">#</span><span class="bash">Installed:</span></div><div class="line"><span class="meta">#</span><span class="bash">  zabbix-get.x86_64 0:3.0.3-1.el7                                                       zabbix-server-mysql.x86_64 0:3.0.3-1.el7                                                       zabbix-web-mysql.noarch 0:3.0.3-1.el7                </span></div><div class="line">cd /usr/share/doc/zabbix-server-mysql-3.0.3/</div><div class="line">zcat create.sql.gz | mysql -uroot -padmin zabbix</div></pre></td></tr></table></figure>
</li>
<li><p>Zabbix Modify config</p>
</li>
<li><p>zabbix_server.conf</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">cat /etc/zabbix/zabbix_server.conf | egrep -v <span class="string">"^#|^$"</span></span></div><div class="line">LogFile=/var/log/zabbix/zabbix_server.log</div><div class="line">LogFileSize=0</div><div class="line">PidFile=/var/run/zabbix/zabbix_server.pid</div><div class="line">DBHost=localhost</div><div class="line">DBName=zabbix</div><div class="line">DBUser=zabbix</div><div class="line">DBPassword=zabbix</div><div class="line">SNMPTrapperFile=/var/log/snmptrap/snmptrap.log</div><div class="line">Timeout=4</div><div class="line">AlertScriptsPath=/usr/lib/zabbix/alertscripts</div><div class="line">ExternalScripts=/usr/lib/zabbix/externalscripts</div><div class="line">LogSlowQueries=3000</div></pre></td></tr></table></figure>
</li>
<li><p>zabbix_config</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">vim /etc/httpd/conf.d/zabbix.conf</span></div><div class="line">  &lt;IfModule mod_php5.c&gt;</div><div class="line">      php_value max_execution_time 300</div><div class="line">      php_value memory_limit 128M</div><div class="line">      php_value post_max_size 16M</div><div class="line">      php_value upload_max_filesize 2M</div><div class="line">      php_value max_input_time 300</div><div class="line">      php_value always_populate_raw_post_data -1</div><div class="line">      php_value date.timezone Asia/Chongqing</div><div class="line">  &lt;/IfModule&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>Start Zabbix</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">systemctl enable zabbix-server</div><div class="line">systemctl start zabbix-server</div></pre></td></tr></table></figure>
</li>
<li><p>Zabbix Web Install</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">Use Web Access: http://<span class="variable">$IPADDRESS</span>/zabbix/setup.php</span></div><div class="line"><span class="meta">#</span><span class="bash">Mdodify Parameter Base： https://www.zabbix.com/documentation/3.0/manual/installation/install_from_packages</span></div><div class="line"><span class="meta">#</span><span class="bash">The web Default Name/Password is Admin/zabbix</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="Zabbix-Agent"><a href="#Zabbix-Agent" class="headerlink" title="Zabbix Agent"></a>Zabbix Agent</h4><ul>
<li><p>Install</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install zabbix zabbix-agent</div></pre></td></tr></table></figure>
</li>
<li><p>Modify config</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">PidFile=/var/run/zabbix/zabbix_agentd.pid</div><div class="line">LogFile=/var/log/zabbix/zabbix_agentd.log</div><div class="line">LogFileSize=0</div><div class="line">Server=127.0.0.1,172.17.18.64   #Add the agent IP</div><div class="line">ServerActive=172.17.18.64   #Modify</div><div class="line">Hostname=Zabbix server</div><div class="line">Include=/etc/zabbix/zabbix_agentd.d/</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[grep命令]]></title>
      <url>http://arvon.top/2016/07/15/grep%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<p>Tips：很有用的几个选项</p>
<h3 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h3><ul>
<li>定向匹配&amp;忽略大小写<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">-B</span></div><div class="line">grep -B 5 part filename #显示filename中匹配part的前5行</div><div class="line"><span class="meta">#</span><span class="bash">-A</span></div><div class="line">grep -A 5 part filename #显示filename中匹配part的后5行</div><div class="line"><span class="meta">#</span><span class="bash">-C</span></div><div class="line">grep -C 5 part filename #显示filename中匹配part的前后5行</div><div class="line"><span class="meta">#</span><span class="bash">-i</span></div><div class="line">grep -i part filename #匹配filename中的part不区分大小写</div></pre></td></tr></table></figure>
</li>
</ul>
<a id="more"></a>
<ul>
<li><p>反选匹配</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">-v</span></div><div class="line">egrep -v "^#|^$" filename #不显示filename中的空行和开头#的注释行，显示其余内容</div></pre></td></tr></table></figure>
</li>
<li><p>计数匹配</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">grep -c part filename #显示匹配到part的行数</div></pre></td></tr></table></figure>
</li>
<li><p>显示文件名匹配</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">-H</span></div><div class="line">grep part -H somefile #显示一群文件中含有part的文件名并显示匹配项相关</div><div class="line"><span class="meta">#</span><span class="bash"><span class="_">-l</span></span></div><div class="line">grep part -l somefile #只显示含有匹配项的文件名</div></pre></td></tr></table></figure>
</li>
<li><p>其他选项</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">-s或--no-messages   不显示错误信息。</div><div class="line">-w或--word-regexp   只显示全字符合的列。</div><div class="line">-x或--line-regexp   只显示全列符合的列。</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="帮助"><a href="#帮助" class="headerlink" title="帮助"></a>帮助</h3><ul>
<li>其他遗漏选项参考帮助文档 –help</li>
<li>参考<a href="http://vbird.dic.ksu.edu.tw/linux_basic/0330regularex_2.php" target="_blank" rel="external">鸟哥文档</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CentOS搭建rsync服务]]></title>
      <url>http://arvon.top/2016/04/11/CentOS%E6%90%AD%E5%BB%BArsync%E6%9C%8D%E5%8A%A1/</url>
      <content type="html"><![CDATA[<p>更新：本篇选择独立启动模式</p>
<blockquote>
<p>选择rsync服务器启动方式</p>
<ul>
<li>rsync服务器负载比较高，则使用独立启动模式</li>
<li>rsync服务器负责较低，使用xinetd运行方式</li>
</ul>
</blockquote>
<p>Tips：由于需要将线上大量数据迁移至本地，直接使用ftp或scp会很不方便，使用rsync可以有断点续传功能，而且搭建起来十分快捷方便。</p>
<h4 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h4><ul>
<li>本地CentOS release 6.7</li>
<li>线上CentOS release 6.5</li>
<li>这里是将线上数据拉至本地，本地主机在局域网中 ，并没有单独的公网IP，故线上服务器做rsync的服务端，本地PC做rsync的客户端</li>
</ul>
<a id="more"></a>
<h4 id="服务端配置"><a href="#服务端配置" class="headerlink" title="服务端配置"></a>服务端配置</h4><ul>
<li><p>Install packge</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install rsync -y</div></pre></td></tr></table></figure>
</li>
<li><p>Command</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">mkdir /etc/rsyncd</div><div class="line">touch /etc/rsyncd/rsyncd.conf    <span class="comment">#主配置文件</span></div><div class="line">touch /etc/rsyncd/rsyncd.secrets  <span class="comment">#客户端连接时使用的用户和密码</span></div><div class="line">touch /etc/rsyncd/rsyncd.motd    <span class="comment">#服务端提示信息文件</span></div><div class="line">chmod 600 /etc/rsyncd/rsyncd.secrets</div><div class="line">chown root:root /etc/rsyncd/rsyncd.secrets</div></pre></td></tr></table></figure>
</li>
<li><p>Main_config</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">uid = root</div><div class="line">gid = root</div><div class="line">use chroot = no</div><div class="line"><span class="built_in">read</span> only = yes          <span class="comment">#只读，不让客户端上传文件到服务器</span></div><div class="line">address = 203.66.131.14  <span class="comment">#服务端的IP，写错将无法启动进程</span></div><div class="line">port = 873</div><div class="line"><span class="comment">#hosts allow = 192.168.1.0/24 172.16.0.0/255.255.0.0</span></div><div class="line">hosts allow = 0.0.0.0/0.0.0.0</div><div class="line">hosts deny = *</div><div class="line">max connections = 5</div><div class="line">pid file = /var/run/rsyncd.pid</div><div class="line">motd file = /etc/rsyncd/rsyncd.motd</div><div class="line">secrets file = /etc/rsyncd/rsyncd.secrets</div><div class="line"><span class="built_in">log</span> file = /var/<span class="built_in">log</span>/rsync.log</div><div class="line">transfer logging = yes</div><div class="line"><span class="built_in">log</span> format = %t %a %m %f %b</div><div class="line">syslog facility = <span class="built_in">local</span>3</div><div class="line">timeout = 300</div><div class="line">[mytmp]</div><div class="line">path = /data/nfsd/backup/arvon_backup</div><div class="line">list = yes</div><div class="line">ignore errors</div><div class="line">auth users = rsync  <span class="comment">#只有rsyncd.secrets文件中的zhang3用户可以同步此目录</span></div><div class="line">[townhome]</div><div class="line">path = /home/town</div><div class="line">list = no           <span class="comment">#服务器上同步数据的目录在服务器模块上列出来</span></div><div class="line">ignore errors       <span class="comment">#忽略IO错误</span></div><div class="line">auth users = rsync   <span class="comment">#只有rsyncd.secrets文件中的town用户可以同步此目录</span></div><div class="line">comment = hitown    <span class="comment">#客户端连接时的提示</span></div></pre></td></tr></table></figure>
</li>
<li><p>Password_config</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[hello@host]$ sudo cat /etc/rsyncd/rsyncd.secrets</div><div class="line">rsync:123456</div></pre></td></tr></table></figure>
</li>
<li><p>Look_config</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> vi /etc/rsyncd/rsyncd.motd</span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">###############################</span></span></div><div class="line"><span class="meta">#</span><span class="bash">            Go !!!</span></div><div class="line"><span class="meta">#</span><span class="bash">欢迎信息，并无卵用</span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">###############################</span></span></div></pre></td></tr></table></figure>
</li>
<li><p>Start_service</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/usr/bin/rsync --daemon --config=/etc/rsyncd/rsyncd.conf    #启动服务</div><div class="line">echo '/usr/bin/rsync --daemon --config=/etc/rsyncd/rsyncd.conf' &gt;&gt; /etc/rc.local    #设置开机启动</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="客户端配置"><a href="#客户端配置" class="headerlink" title="客户端配置"></a>客户端配置</h4><ul>
<li><p>Install</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install rsync -y</div></pre></td></tr></table></figure>
</li>
<li><p>Config</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">echo 123456 &gt; /etc/rsync.password  #将rsync的密码写入本地</div><div class="line"><span class="meta">#</span><span class="bash">这个rsync.password文件可随意放，不过建议放在etc下</span></div><div class="line">chmod 600 /etc/rsync.password #重要，rsync会检查权限，如果不是600会报出错误</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="测试-amp-使用"><a href="#测试-amp-使用" class="headerlink" title="测试&amp;使用"></a>测试&amp;使用</h4><ul>
<li><p>列出文件</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">rsync --list-only --password-file=/etc/rsync.password rsync@rsync_server_ip::mytmp</div><div class="line"><span class="meta">#</span><span class="bash">这个mytmp是体现在主配置 文件的，也就是/etc/rsyncd/rsyncd.conf</span></div></pre></td></tr></table></figure>
</li>
<li><p>同步文件到本地的目录</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">rsync -auvzP --delete --password-file=/etc/rsync.password rsync@rsync_server_ip::mytmp /your/want/path</span></div><div class="line"><span class="meta">#</span><span class="bash">由于这里只是需要将线上数据拉到本地，并不需要完全一致，所以可以不用--delete参数，能不用则不用，删除总归是危险操作</span></div><div class="line">rsync -auvzP  --password-file=/etc/rsync.password rsync@rsync_server_ip::mytmp /your/want/path</div></pre></td></tr></table></figure>
</li>
<li><p>参数说明</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="_">-a</span> 相当于-rlptgoD</div><div class="line">-r是递归</div><div class="line"><span class="_">-l</span>是链接文件，意思是拷贝链接文件；</div><div class="line">-p表示保持文件原有权限；</div><div class="line">-t保持文件原有时间；</div><div class="line">-g保持文件原有用户组；</div><div class="line">-o 保持文件原有属主；</div><div class="line">-D 相当于块设备文件；</div><div class="line">-u, --update 仅仅进行更新，也就是跳过所有已经存在于DST，并且文件时间晚于要备份的文件。(不覆盖更新的文件)</div><div class="line">-z 传输时压缩；</div><div class="line">-P 传输进度；</div><div class="line">-v 传输时的进度等信息，和-P有点关系，自己试试。</div><div class="line">--delete 表示客户端的数据要与服务器端完全一致，如果客户端目录里有服务器上不存在的文件，则删除。</div><div class="line"><span class="comment">#执行rsync同步时，慎用-z参数！一旦启用了-z参数，则数据在传输前会先经过压缩，如果文件比较大的话，压缩会很慢！进而出现，明明网速很快，却同步缓慢的情况。</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="排错"><a href="#排错" class="headerlink" title="排错"></a>排错</h4><ul>
<li><p>连接不上<br>直接都不出欢迎 界面，查看防火墙，发现问题<br><code>解决:</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo iptables -nvL --line-number</div><div class="line">sudo iptables -I INPUT 17 -p tcp -m tcp --dport 873 -j ACCEPT -m comment --comment <span class="string">"added by arvonfor rsync"</span></div></pre></td></tr></table></figure>
</li>
<li><p>连接上，有报错<br>权限问题，反正我的是，来了个狠的，已ok，报错如下<br>@ERROR: auth failed on module xxx<br>rsync error: error starting client-server protocol (code 5) at main.c(1530) [sender=3.0.6]<br><code>解决:</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod 600 -R /etc/rsyncd/</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<p>以上</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[4月读书计划]]></title>
      <url>http://arvon.top/2016/04/03/4%E6%9C%88%E8%AF%BB%E4%B9%A6%E8%AE%A1%E5%88%92/</url>
      <content type="html"><![CDATA[<p><img src="http://img.arvon.top:80/images/2019/08/12/20160403-aprilread-1.jpg" alt="20160403-aprilread-1"><br>PS：学习其实是一件蛮幸福的事情，学的越多感觉不会的越多，不过心里很踏实，最近学习ansibel和git。</p>
<h3 id="关于最近的学习方向"><a href="#关于最近的学习方向" class="headerlink" title="关于最近的学习方向"></a>关于最近的学习方向</h3><ul>
<li>ansibel<ul>
<li>最近购买了4本图书，买了就不能白买不是，而且也是机遇不错，现阶段也在使用ansibel，配置管理和版本控制对于运维确实是挺重要的，【奔跑吧ansible】预计花费4周左右时间来学习。</li>
<li>由于最近需要使用AWS，所需需要研究下ec2模块</li>
<li>需要进行学习变量和遍历循环<a id="more"></a></li>
</ul>
</li>
<li>git<ul>
<li>这个是版本控制，以前只是用hexo和git做过一段时间bolg，充其量只能算是了解，需要系统的学习一下，购买了蝙蝠书，这个估计会有些晦涩，进度可能会有问题，预计也是4周，根据实际情况再调整。</li>
<li>需要了解gitlab搭建及配置</li>
</ul>
</li>
<li>wireshark<ul>
<li>这个网络分析工具，现阶段只能说是知道有这么个东西，做运维的网络分析也是必备技能之一，所以买了本比较肤浅的书籍，【wireshark分析的艺术】，预计学习时间也是一个月。</li>
<li>tcp协议学习</li>
<li>wireshark表达式学习，及tcpdump学习使用</li>
</ul>
</li>
</ul>
<h3 id="关于技术博客"><a href="#关于技术博客" class="headerlink" title="关于技术博客"></a>关于技术博客</h3><ul>
<li>持之以恒<br>老是想着自己买个云主机，其实现阶段踏踏实实把技术学了，把博客写了就可以了，买主机最起码现在还是不必要的，该把精力主要投入到学习中去，保持博客的更新频率</li>
<li>想法和思路<br>逐渐开始学习思路整理分析，不仅仅记录技术点和写脚本命令，逐步提升博客的质量</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CentOS搭建支持ftp的cdn服务]]></title>
      <url>http://arvon.top/2016/03/25/CentOS%E6%90%AD%E5%BB%BA%E6%94%AF%E6%8C%81ftp%E7%9A%84cdn%E6%9C%8D%E5%8A%A1/</url>
      <content type="html"><![CDATA[<p><strong>摘要：</strong>由于测试需要，需用nginx搭建cdn服务器，并要求可以使用ftp上传。送个之前nginx搭建cdn的<a href="http://blog.arvon.top/2016/03/03/Nginx%E6%90%AD%E5%BB%BACDN%E6%BA%90%E7%AB%99/" target="_blank" rel="external">–&gt;飞机票</a>,下面是主要vsftp的配置，nginx配置cdn参照飞机票那篇即可。<br><a id="more"></a></p>
<h3 id="搭建nginx-cdn服务器"><a href="#搭建nginx-cdn服务器" class="headerlink" title="搭建nginx cdn服务器"></a>搭建nginx cdn服务器</h3><ul>
<li>具体参照使用nginx作cdn源站</li>
<li>nginx默认不开启文件目录显示，需要自行手动修改开启,在nginx.conf文件(/usr/local/nginx/conf/)里的http{}里面加入如下代码：</li>
<li>如显示不正常需删除多余index页面<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">autoindex on;</div><div class="line"><span class="comment">#PS:另外两个参数最好也加上去</span></div><div class="line">autoindex_exact_size off;</div><div class="line"><span class="comment">#默认为on，显示出文件的确切大小，单位是bytes。</span></div><div class="line"><span class="comment">#改为off后，显示出文件的大概大小，单位是kB或者MB或者GB</span></div><div class="line">autoindex_localtime on;</div><div class="line"><span class="comment">#默认为off，显示的文件时间为GMT时间。</span></div><div class="line"><span class="comment">#改为on后，显示的文件时间为文件的服务器时间</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="搭建ftp服务器（来源：参照Johnny整理的步骤整合）"><a href="#搭建ftp服务器（来源：参照Johnny整理的步骤整合）" class="headerlink" title="搭建ftp服务器（来源：参照Johnny整理的步骤整合）"></a>搭建ftp服务器（来源：参照Johnny整理的步骤整合）</h3><ul>
<li><p>安装软件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install vsftpd -y</div></pre></td></tr></table></figure>
</li>
<li><p>修改配置文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#[root@stag-gw-cnd conf.d]# cat /etc/vsftpd/vsftpd.conf | egrep -v "^$|^#"</span></div><div class="line">anonymous_enable=NO</div><div class="line">local_enable=YES</div><div class="line">write_enable=YES</div><div class="line">local_umask=022</div><div class="line">dirmessage_enable=YES</div><div class="line">xferlog_enable=YES</div><div class="line">connect_from_port_20=YES</div><div class="line">xferlog_std_format=YES</div><div class="line">listen=YES</div><div class="line">chroot_local_user=YES</div><div class="line">local_root=/usr/share/nginx/cdn/Test</div><div class="line">pasv_promiscuous=YES</div><div class="line">pasv_enable=YES</div><div class="line">pasv_max_port=10100</div><div class="line">pasv_min_port=10090</div><div class="line">pam_service_name=vsftpd</div><div class="line">userlist_enable=YES</div><div class="line">tcp_wrappers=YES</div></pre></td></tr></table></figure>
</li>
<li><p>防火墙配置</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">vim /etc/sysconfig/iptables</div><div class="line">iptables -I INPUT -p tcp -m state --state NEW -m tcp --dport 21 -j ACCEPT</div><div class="line">iptables -I INPUT -p tcp --destination-port 10090:10100 -j ACCEPT</div><div class="line">/etc/init.d/iptables save</div></pre></td></tr></table></figure>
</li>
<li><p>服务配置</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">service vsftpd restart</div><div class="line">iptables -nvL</div></pre></td></tr></table></figure>
</li>
<li><p>用户配置</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">adduser ftptest</div><div class="line">passwd ftptest</div><div class="line">usermod -s /sbin/nologin ftptest</div><div class="line">usermod -d /usr/share/nginx/cdn/Test ftptest</div><div class="line">chown dcxjftp:ftp -R /usr/share/nginx/cdn/Test</div></pre></td></tr></table></figure>
</li>
<li><p>安全配置</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">vim /etc/pam.d/vsftpd</div><div class="line"><span class="meta">#</span><span class="bash">注释下面这行</span></div><div class="line"><span class="meta">#</span><span class="bash">auth       required  pam_shells.so</span></div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<p>以上</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Nginx搭建CDN源站记录]]></title>
      <url>http://arvon.top/2016/03/03/Nginx%E6%90%AD%E5%BB%BACDN%E6%BA%90%E7%AB%99/</url>
      <content type="html"><![CDATA[<p><strong>摘要：</strong>nginx有很多很强大的功能，可以做web，可以做代理、可以做SLB、还可以做缓存CDN等等，这里记录以下做缓存时的配置。<br><a id="more"></a></p>
<h3 id="Install-package"><a href="#Install-package" class="headerlink" title="Install package"></a>Install package</h3><ul>
<li><p>yum.repo</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget http://mirrors.opencas.cn/epel/6/i386/epel-release-6-8.noarch.rpm</div></pre></td></tr></table></figure>
</li>
<li><p>Install</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install nginx-1.0.15-12.el6.x86_64</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Service-config"><a href="#Service-config" class="headerlink" title="Service config"></a>Service config</h3><ul>
<li><p>配置：example one<br>创建cdn源站其端口为12345<br>在/etc/nginx/conf.d这个目录下添加一个cdn.conf的文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># The default server</span></div><div class="line">server &#123;</div><div class="line">    listen       12345 default_server;</div><div class="line">    server_name  _;</div><div class="line">    <span class="comment">#charset koi8-r;</span></div><div class="line">    <span class="comment">#access_log  logs/host.access.log  main;</span></div><div class="line">    <span class="comment"># Load configuration files for the default server block.</span></div><div class="line">    include /etc/nginx/default.d/*.conf;</div><div class="line">    location / &#123;</div><div class="line">        root   /usr/share/nginx/cdn;</div><div class="line">        index  index.html index.htm;</div><div class="line">    &#125;</div><div class="line">    error_page  404              /404.html;</div><div class="line">    location = /404.html &#123;</div><div class="line">        root   /usr/share/nginx/cdn;</div><div class="line">    &#125;</div><div class="line">    <span class="comment"># redirect server error pages to the static page /50x.html</span></div><div class="line">    <span class="comment">#</span></div><div class="line">    error_page   500 502 503 504  /50x.html;</div><div class="line">    location = /50x.html &#123;</div><div class="line">        root   /usr/share/nginx/cdn;</div><div class="line">    &#125;</div><div class="line">    <span class="comment"># proxy the PHP scripts to Apache listening on 127.0.0.1:80</span></div><div class="line">    <span class="comment">#</span></div><div class="line">    <span class="comment">#location ~ \.php$ &#123;</span></div><div class="line">    <span class="comment">#    proxy_pass   http://127.0.0.1;</span></div><div class="line">    <span class="comment">#&#125;</span></div><div class="line">    <span class="comment"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span></div><div class="line">    <span class="comment">#</span></div><div class="line">    <span class="comment">#location ~ \.php$ &#123;</span></div><div class="line">    <span class="comment">#    root           html;</span></div><div class="line">    <span class="comment">#    fastcgi_pass   127.0.0.1:9000;</span></div><div class="line">    <span class="comment">#    fastcgi_index  index.php;</span></div><div class="line">    <span class="comment">#    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span></div><div class="line">    <span class="comment">#    include        fastcgi_params;</span></div><div class="line">    <span class="comment">#&#125;</span></div><div class="line">    <span class="comment"># deny access to .htaccess files, if Apache's document root</span></div><div class="line">    <span class="comment"># concurs with nginx's one</span></div><div class="line">    <span class="comment">#</span></div><div class="line">    <span class="comment">#location ~ /\.ht &#123;</span></div><div class="line">    <span class="comment">#    deny  all;</span></div><div class="line">    <span class="comment">#&#125;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>start service</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/etc/init.d/nginx start</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="check"><a href="#check" class="headerlink" title="check"></a>check</h3><ul>
<li>在/usr/share/nginx/cdn/下放个文件，for example：test<blockquote>
<p>在浏览器键入：<a href="http://service_ip:12345/test" target="_blank" rel="external">http://service_ip:12345/test</a></p>
</blockquote>
</li>
</ul>
<hr>
<p>ok,以上</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python2.6升级2.7记录]]></title>
      <url>http://arvon.top/2016/02/12/python2-6%E5%8D%87%E7%BA%A72-7%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<p>Tips:由于想自己用Django搭建blog，需要2.7的python环境而centos6.7默认是2.6版本，所以升级了python<br><a id="more"></a></p>
<ol>
<li><p>下载Python-2.7.3</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget http://python.org/ftp/python/2.7.3/Python-2.7.3.tar.bz2</div></pre></td></tr></table></figure>
</li>
<li><p>解压安装</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">tar -jxvf Python-2.7.3.tar.bz2  </div><div class="line">cd Python-2.7.3</div><div class="line">./configure</div><div class="line">make all  </div><div class="line">make install</div><div class="line">make clean</div><div class="line">make distclean</div></pre></td></tr></table></figure>
</li>
<li><p>建立软连接，使系统默认的 python指向 python2.7</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">python -V  </div><div class="line">/usr/local/bin/python2.7 -V</div><div class="line">mv /usr/bin/python /usr/bin/python2.6.6  </div><div class="line">ln -s /usr/local/bin/python2.7 /usr/bin/python  </div><div class="line">python -V</div></pre></td></tr></table></figure>
</li>
<li><p>解决系统 Python 软链接指向 Python2.7 版本后，因为yum是不兼容 Python 2.7的，所以yum不能正常工作，我们需要指定 yum 的Python版本</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">vi /usr/bin/yum  </span></div><div class="line"><span class="meta">#</span><span class="bash">将文件头部的</span></div><div class="line"><span class="meta">#</span><span class="bash">!/usr/bin/python</span></div><div class="line"><span class="meta">#</span><span class="bash">改成</span></div><div class="line"><span class="meta">#</span><span class="bash">!/usr/bin/python2.6.6</span></div></pre></td></tr></table></figure>
</li>
</ol>
<hr>
<p>以上</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[selinux和iptables关闭]]></title>
      <url>http://arvon.top/2016/02/01/selinux%E5%92%8Ciptables%E5%85%B3%E9%97%AD/</url>
      <content type="html"><![CDATA[<h3 id="iptables"><a href="#iptables" class="headerlink" title="iptables"></a>iptables</h3><h4 id="Centos6-x"><a href="#Centos6-x" class="headerlink" title="Centos6.x"></a>Centos6.x</h4><ul>
<li><p>临时关闭</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">service iptables stop</div><div class="line">/etc/init.d/iptabels stop</div></pre></td></tr></table></figure>
</li>
<li><p>永久关闭</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">chkconfig iptables off</div><div class="line">chkconfig iptables on    <span class="comment">#开启</span></div></pre></td></tr></table></figure>
</li>
</ul>
<a id="more"></a>
<h4 id="Centos7-x"><a href="#Centos7-x" class="headerlink" title="Centos7.x"></a>Centos7.x</h4><ul>
<li><p>Centos7默认使用firewall</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">systemctl stop firewalld.service</div><div class="line"><span class="comment">#停止firewall</span></div><div class="line">systemctl <span class="built_in">disable</span> firewalld.service</div><div class="line"><span class="comment">#禁止firewall开机启动</span></div></pre></td></tr></table></figure>
</li>
<li><p>使用iptables管理</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">yum -y install iptables-services</div><div class="line"><span class="comment">#vi /etc/sysconfig/iptables</span></div><div class="line"><span class="comment">#修改iptables这个文件可以写入删除规则</span></div><div class="line"><span class="comment">#-A INPUT -m state --state NEW -m tcp -p tcp --dport 3306 -j ACCEPT</span></div><div class="line">systemctl restart iptables.service</div><div class="line"><span class="comment">#重启防火墙使配置生效</span></div><div class="line">systemctl <span class="built_in">enable</span> iptables.service</div><div class="line"><span class="comment">#设置防火墙开机启动</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="selinux"><a href="#selinux" class="headerlink" title="selinux"></a>selinux</h3><ul>
<li><p>查看状态</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">getenforce</div></pre></td></tr></table></figure>
</li>
<li><p>临时关闭</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">setenforce 0</div></pre></td></tr></table></figure>
</li>
<li><p>永久关闭</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#修改/etc/selinux/config文件中设置SELINUX=disabled ，然后重启服务器。</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<p>以上</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CentOS搭建NTP服务器]]></title>
      <url>http://arvon.top/2016/01/20/centos%E6%90%AD%E5%BB%BANTP%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      <content type="html"><![CDATA[<p><strong>简介：</strong><br>NTP（NetworkTime Protocol，网络时间协议）是用来在分布式时间服务器和客户端之间进行时间同步。<a href="http://blog.arvon.top/2015/12/13/Linux%E4%B8%BB%E6%9C%BA%E6%97%B6%E9%97%B4%E4%B8%8D%E5%87%86%E9%97%AE%E9%A2%98/" target="_blank" rel="external">–&gt;另一篇关于时间的</a></p>
<p>NTP基于UDP报文进行传输，使用的UDP端口号为123。<br>使用NTP的目的是对网络内所有具有时钟的设备进行时钟同步，使网络内所有设备的时钟保持一致，从而使设备能够提供基于统一时间的多种应用。<br>对于时间错误会导致服务器宕机，所以运行NTP的本地系统，既可以接受来自其他时钟源的同步，又可以作为时钟源同步其他的时钟，并且可以和其他设备互相同步。</p>
<a id="more"></a>
<h3 id="NTP服务器搭建"><a href="#NTP服务器搭建" class="headerlink" title="NTP服务器搭建"></a>NTP服务器搭建</h3><p><code>Tips: hadoop对局域网时间同步要求非常高，所以适合搭建使用ntp服务器</code></p>
<ul>
<li>主要包括两个文件<ul>
<li>/etc/ntp/ntpserver.conf</li>
<li>/etc/ntp.conf</li>
</ul>
</li>
</ul>
<h4 id="服务器端（转自搭建ntp服务器）"><a href="#服务器端（转自搭建ntp服务器）" class="headerlink" title="服务器端（转自搭建ntp服务器）"></a>服务器端（转自<a href="http://www.linuxidc.com/Linux/2014-02/97205.htm" target="_blank" rel="external">搭建ntp服务器</a>）</h4><ul>
<li>1.搭建环境<br>环境：CentOS6.4<br>Server192.168.126.1<br>Client192.168.126.2</li>
<li><p>2.安装NTP</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum –y install ntp</div></pre></td></tr></table></figure>
</li>
<li><p>3.修改配置文件添加一行</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#vim /etc/ntp.conf</span></div><div class="line">restrict 192.168.126.0255.255.255.0 nomodify notrap</div></pre></td></tr></table></figure>
</li>
<li><p>4.找到以下两行去掉注释</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#vi /etc/ntp.conf</span></div><div class="line">server127.127.1.0</div><div class="line">fudge127.127.1.0stratum 10</div></pre></td></tr></table></figure>
</li>
<li><p>5.开机启动服务</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chkconfig --level 345 ntpon</div></pre></td></tr></table></figure>
</li>
<li><p>6.启动服务</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/etc/init.d/ntpd start</div></pre></td></tr></table></figure>
</li>
<li><ol>
<li>防火墙需要开123端口或者关闭防火墙<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-A INPUT -m state --state NEW -m tcp -p tcp --dport 123 -jACCEPT</div></pre></td></tr></table></figure>
</li>
</ol>
</li>
</ul>
<h4 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h4><ul>
<li><p>1.与服务端同步时间执行以下命令<br>手工执行或用crontab来执行</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ntpdate 192.168.126.1</div></pre></td></tr></table></figure>
<p>使用crontab –e</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">0 21 * * * ntpdate 192.168.126.1 &gt;&gt; /root/ntpdate.log 2&gt;&amp;1</div></pre></td></tr></table></figure>
</li>
<li><p>2.查看同步状况</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ntpq –p</div></pre></td></tr></table></figure>
</li>
<li><p>3.防火墙需要开123端口或者关闭防火墙</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-A INPUT -m state --state NEW -m tcp -p tcp --dport 123 -jACCEPT</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="手动脚本设置同步"><a href="#手动脚本设置同步" class="headerlink" title="手动脚本设置同步"></a>手动脚本设置同步</h3><ul>
<li>通过crontab设置时间同步<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/usr/sbin/ntpdate ntp.sjtu.edu.cn &gt;&gt; /var/log/ntp.log 2&gt;&amp;1; /sbin/hwclock –w</div><div class="line"><span class="meta">#</span><span class="bash">写入crontab，根据业务需要定制时间同步的频率</span></div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CentOS6.x挂载ntfs和xfs问题]]></title>
      <url>http://arvon.top/2016/01/13/CentOS6-x%E6%8C%82%E8%BD%BDntfs%E5%92%8Cxfs%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p><strong>摘要：</strong> centos6.x默认是ext4的文件系统，而centos7.x是默认xfs的文件系统，所以直接挂载是会出问题的，另外ntfs是windows上的文件系统，挂载也会出问题，这里记录一下如何解决。</p>
<h3 id="挂载xfs"><a href="#挂载xfs" class="headerlink" title="挂载xfs"></a>挂载xfs</h3><ul>
<li>安装支持包<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">wget http://mirrors.opencas.cn/epel/6/i386/epel-release-6-8.noarch.rpm</div><div class="line">yum install xfsprogs kmod-xfs xfsdump xfsprogs-devel</div><div class="line">mount -t xfs /dev/sdc1 /data3/sdc1/</div></pre></td></tr></table></figure>
</li>
</ul>
<a id="more"></a>
<ul>
<li>报错解决<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#需要安装 lvm2:  yum install lvm2</span></div><div class="line"><span class="comment">#然后按一下步骤：</span></div><div class="line"><span class="comment">#1、查看物理卷：pvs</span></div><div class="line">PV       VG       Fmt   Attr PSize PFree</div><div class="line">  /dev/sda2   VolGroup00 lvm2 a- 279.22G 32.00M</div><div class="line"><span class="comment">#2、查看卷组：vgs</span></div><div class="line">VG       <span class="comment">#PV #LV #SN Attr VSize VFree</span></div><div class="line">  VolGroup00 1 4 0 wz--n- 279.22G 32.00M</div><div class="line"><span class="comment">#3、查看逻辑卷：lvdisplay</span></div><div class="line">--- Logical volume ---</div><div class="line">  LV Name             /dev/VolGroup00/LogVol03</div><div class="line">  VG Name             VolGroup00</div><div class="line">  LV UUID             YhG8Fu-ZGPk-qt8D-AxgC-DzOU-dg1F-z71feI</div><div class="line">  LV Write Access        <span class="built_in">read</span>/write</div><div class="line"> LV Status              unenable</div><div class="line">  <span class="comment"># open                 1</span></div><div class="line">  LV Size             245.97 GB</div><div class="line">  Current LE          7871</div><div class="line">  Segments             1</div><div class="line">  Allocation          inherit</div><div class="line">  Read ahead sectors     auto</div><div class="line">  - currently <span class="built_in">set</span> to     256</div><div class="line">  Block device           253:2</div><div class="line"><span class="comment">#4、如未激活，需要激活逻辑卷：vgchange -ay /dev/VolGroup00</span></div><div class="line">LV Status              available</div><div class="line"><span class="comment">#5、挂载逻辑卷：mount   /dev/VolGroup00/LogVol03   /home/lvm</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="挂载ntfs"><a href="#挂载ntfs" class="headerlink" title="挂载ntfs"></a>挂载ntfs</h3><ul>
<li><p>安装支持包</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">wget http://pkgs.repoforge.org/rpmforge-release/rpmforge-release-0.5.3-1.el6.rf.x86_64.rpm</div><div class="line">chmod 755 rpmforge-release-0.5.3-1.el6.rf.x86_64.rpm</div><div class="line">rpm -ivh rpmforge-release-0.5.3-1.el6.rf.x86_64.rpm</div><div class="line">yum install fuse-ntfs-3g -y</div><div class="line">mount /dev/sdd1 /data3/sdd/</div></pre></td></tr></table></figure>
</li>
<li><p>补充<br>此时挂载了ntfs也只是可以实现读取并不能写入，目前没有发现什么有效方法</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux主机时间不准问题]]></title>
      <url>http://arvon.top/2015/12/13/Linux%E4%B8%BB%E6%9C%BA%E6%97%B6%E9%97%B4%E4%B8%8D%E5%87%86%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p><strong>摘要：</strong>linux主机时间过一段时间就会发现时间不对了，查阅资料这个大概是因为硬件时间和服务器时间不一致导致的。</p>
<a id="more"></a>
<h3 id="查看分析"><a href="#查看分析" class="headerlink" title="查看分析"></a>查看分析</h3><ul>
<li><p>查看服务器时间，即系统时间</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">date</div></pre></td></tr></table></figure>
</li>
<li><p>线上修改时区（不重启）</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tzselect    <span class="comment">#使用此命令，然后根据提示更改即可</span></div></pre></td></tr></table></figure>
</li>
<li><p>查看服务器硬件时间</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hwclock  --show</div></pre></td></tr></table></figure>
</li>
<li><p>同步服务器硬件时间和系统时间</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hwclock  --hctosys           //把硬件时间同步到系统时间</div><div class="line">hwclock  --systohc            //系统时间同步到硬件时间</div></pre></td></tr></table></figure>
</li>
<li><p>查看当前使用的时区</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">cat /etc/sysconfig/clock</div><div class="line"><span class="comment"># The timezone of the system is defined by the contents of /etc/localtime.</span></div><div class="line">ZONE=<span class="string">"America/New_York"</span></div><div class="line"><span class="comment">#UTC=true</span></div><div class="line"><span class="comment">#ARC=false</span></div><div class="line"><span class="comment">#这个时区采用的是美国时间，所以即时进行了时间同步，也是同步成美国时区的时间，而不是中国时区的时间。</span></div></pre></td></tr></table></figure>
</li>
<li><p>时间同步操作命令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/usr/sbin/ntpdate cn.pool.ntp.org</div><div class="line">/usr/sbin/ntpdate ntp.api.bz</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="小知识"><a href="#小知识" class="headerlink" title="小知识"></a>小知识</h3><ul>
<li>常用时区介绍<blockquote>
<p>CST：<br>中国标准时间（China Standard Time），这个解释可能是针对RedHat Linux。<br>UTC：<br>协调世界时，又称世界标准时间，简称UTC，从英文国际时间/法文协调时间”Universal Time/Temps Cordonné”而来。中国大陆、香港、澳门、台湾  、蒙古国、新加坡、马来西亚、菲律宾、澳洲西部的时间与UTC的时差均为+8，也就是UTC+8。<br>GMT：<br>格林尼治标准时间（英语：Greenwich Mean Time，GMT）是指位于英国伦敦郊区的皇家格林尼治天文台的标准时间，因为本初子午线被定义在通过那里  的经线。</p>
</blockquote>
</li>
</ul>
<hr>
<p>以上</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[linux解压rar及xshell的rz]]></title>
      <url>http://arvon.top/2015/12/05/linux%E8%A7%A3%E5%8E%8Brar%E5%8F%8Axshell%E7%9A%84rz/</url>
      <content type="html"><![CDATA[<p><strong>摘要：</strong>有时会遇到要在linux下解压rar包，这就很不舒服，毕竟rar是win下不开源的东西，所以建议还是少用，另外rz这个小工具在使用xshell想上传个小东西的时候非常方便，大文件还是建议ftp或者弄个rsync。</p>
<a id="more"></a>
<ul>
<li><p>解压rar<br>需要下载rar软件，yum源中并没有提供。原因为rar并不属于开源软件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#download</span></div><div class="line">wget http://www.rarlab.com/rar/rarlinux-x64-5.3.0.tar.gz</div><div class="line"><span class="comment">#install</span></div><div class="line">tar zxvf rarlinux-x64-5.3.0.tar.gz</div><div class="line">cp rar/rar /bin/</div><div class="line">cp rar/unrar /bin/</div><div class="line"><span class="comment">#usage:</span></div><div class="line">rar e name.rar    <span class="comment">#会解压至当前文件夹</span></div></pre></td></tr></table></figure>
</li>
<li><p>使用lrzsz<br>需要直接向xshell拉小文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">yum search rz</div><div class="line">yum install lrzsz.x86_64 0:0.12.20-27.1.el6</div></pre></td></tr></table></figure>
</li>
<li><p>使用unzip</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">yum install unzip -y</div><div class="line">unzip xxx.zip</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[cp和chown的几个好用选项]]></title>
      <url>http://arvon.top/2015/11/14/cp%E5%92%8Cchown%E7%9A%84%E5%87%A0%E4%B8%AA%E5%A5%BD%E7%94%A8%E9%80%89%E9%A1%B9/</url>
      <content type="html"><![CDATA[<p><strong>摘要：</strong>生产环境中对权限什么的要求是很严格的，而使用root用户进行操作，难免会变更权限信息，修改权限就变得十分有必要，而以下的选线都是很实用的。<br><a id="more"></a></p>
<h3 id="关于copy的几个选项"><a href="#关于copy的几个选项" class="headerlink" title="关于copy的几个选项"></a>关于copy的几个选项</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">-P</div><div class="line"><span class="comment">#-p 或 --preserve    保留源文件或目录的属性，包括所有者、所属组、权限与时间</span></div><div class="line">-R</div><div class="line"><span class="comment">#-R 或 --recursive   递归处理，将指定目录下的文件及子目录一并处理</span></div><div class="line"><span class="_">-a</span></div><div class="line"><span class="comment"># -a 或 --archive     此参数的效果和同时指定"-dpR"参数相同</span></div></pre></td></tr></table></figure>
<h3 id="关于chown和chmod"><a href="#关于chown和chmod" class="headerlink" title="关于chown和chmod"></a>关于chown和chmod</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">--reference=dir_file</div><div class="line"><span class="comment">#修改文件权限与dir_file一致</span></div><div class="line">chmod --reference=xxx yyy</div><div class="line">chown --reference=xxx yyy</div></pre></td></tr></table></figure>
<h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><h4 id="copy命令"><a href="#copy命令" class="headerlink" title="copy命令"></a>copy命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="_">-a</span>：此参数的效果和同时指定<span class="string">"-dpR"</span>参数相同；</div><div class="line"><span class="_">-d</span>：当复制符号连接时，把目标文件或目录也建立为符号连接，并指向与源文件或目录连接的原始文件或目录；</div><div class="line"><span class="_">-f</span>：强行复制文件或目录，不论目标文件或目录是否已存在；</div><div class="line">-i：覆盖既有文件之前先询问用户；</div><div class="line"><span class="_">-l</span>：对源文件建立硬连接，而非复制文件；</div><div class="line">-p：保留源文件或目录的属性；</div><div class="line">-R/r：递归处理，将指定目录下的所有文件与子目录一并处理；</div><div class="line"><span class="_">-s</span>：对源文件建立符号连接，而非复制文件；</div><div class="line">-u：使用这项参数后只会在源文件的更改时间较目标文件更新时或是名称相互对应的目标文件并不存在时，才复制文件；</div><div class="line">-S：在备份文件时，用指定的后缀“SUFFIX”代替文件的默认后缀；</div><div class="line">-b：覆盖已存在的文件目标前将目标文件备份；</div><div class="line">-v：详细显示命令执行的操作。</div></pre></td></tr></table></figure>
<h4 id="chown命令"><a href="#chown命令" class="headerlink" title="chown命令"></a>chown命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#chown -R arvon /usr/arvon</span></div><div class="line">-c或——changes：效果类似“</div><div class="line">-v”参数，但仅回报更改的部分；</div><div class="line"><span class="_">-f</span>或--quite或——silent：不显示错误信息；</div><div class="line">-h或--no-dereference：只对符号连接的文件作修改，而不更改其他任何相关文件；</div><div class="line">-R或——recursive：递归处理，将指定目录下的所有文件及子目录一并处理；</div><div class="line">-v或——version：显示指令执行过程；</div><div class="line">--dereference：效果和“-h”参数相同；</div><div class="line">--help：在线帮助；</div><div class="line">--reference=&lt;参考文件或目录&gt;：把指定文件或目录的拥有者与所属群组全部设成和参考文件或目录的拥有者与所属群组相同；</div><div class="line">--version：显示版本信息。</div></pre></td></tr></table></figure>
<h4 id="chmod命令"><a href="#chmod命令" class="headerlink" title="chmod命令"></a>chmod命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#权限指定说明</span></div><div class="line">u User，即文件或目录的拥有者；</div><div class="line">g Group，即文件或目录的所属群组；</div><div class="line">o Other，除了文件或目录拥有者或所属群组之外，其他用户皆属于这个范围；</div><div class="line">a All，即全部的用户，包含拥有者，所属群组以及其他用户；</div><div class="line">r 读取权限，数字代号为“4”; w 写入权限，数字代号为“2”；</div><div class="line">x 执行或切换权限，数字代号为“1”；</div><div class="line">- 不具任何权限，数字代号为“0”；</div><div class="line">s 特殊功能说明：变更文件或目录的权限。</div><div class="line"><span class="comment">#选项说明</span></div><div class="line">-c或——changes：效果类似“-v”参数，但仅回报更改的部分；</div><div class="line"><span class="_">-f</span>或--quiet或——silent：不显示错误信息；</div><div class="line">-R或——recursive：递归处理，将指令目录下的所有文件及子目录一并处理；</div><div class="line">-v或——verbose：显示指令执行过程；</div><div class="line">--reference=&lt;参考文件或目录&gt;：把指定文件或目录的所属群组全部设成和参考文件或目录的所属群组相同；</div><div class="line">&lt;权限范围&gt;+&lt;权限设置&gt;：开启权限范围的文件或目录的该选项权限设置；</div><div class="line">&lt;权限范围&gt;-&lt;权限设置&gt;：关闭权限范围的文件或目录的该选项权限设置；</div><div class="line">&lt;权限范围&gt;=&lt;权限设置&gt;：指定权限范围的文件或目录的该选项权限设置；</div><div class="line"><span class="comment">#chmod u=rwx,g=rw,o=r hi.txt</span></div></pre></td></tr></table></figure>
<h3 id="参考地址"><a href="#参考地址" class="headerlink" title="参考地址"></a>参考地址</h3><p><a href="http://man.linuxde.net" target="_blank" rel="external">Linux命令大全</a><br><a href="http://www.hi-docs.com/linux/chmod.html" target="_blank" rel="external">Hi doc</a><br><a href="https://www.linuxyw.com/a/wenjianguanli/20130429/148.html" target="_blank" rel="external">儒峰的网站</a></p>
<hr>
<p>以上</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[NFS服务安装部署记录]]></title>
      <url>http://arvon.top/2015/10/20/NFS%E6%9C%8D%E5%8A%A1%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<p><strong>简述：</strong>其实在部署多台服务器时搭建一个nfs服务器是个共享资源非常好的方案，可以实现脚本共享，也可以实现数据集中备份，是个非常好用的网络文件系统。实验环境为多台服务器，其中一台用作NFSserver其余的主机作为client</p>
<a id="more"></a>
<h4 id="安装yum源"><a href="#安装yum源" class="headerlink" title="安装yum源"></a>安装yum源</h4><ul>
<li>安装yum源<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">wget http://mirrors.opencas.cn/epel/6/i386/epel-release-6-8.noarch.rpm</div><div class="line"><span class="comment">#package: nfs-utils.x86_64</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="Server端配置"><a href="#Server端配置" class="headerlink" title="Server端配置"></a>Server端配置</h4><ul>
<li><p>安装包权限</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">yum install nfs-utils.x86_64</div><div class="line">chkconfig rpcbind on</div><div class="line">chkconfig nfs on</div><div class="line">mkdir /data/nfs</div><div class="line">chown -R nfsnobody:nfsnobody /data/nfs</div><div class="line"><span class="comment">#为防止客户端的读取写入可以顺利进行，将共享目录权限设置为nfsnobody</span></div></pre></td></tr></table></figure>
</li>
<li><p>Server端修改配置文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#vim /etc/exports</span></div><div class="line">/data/nfsd/deploy 192.168.1.2/32(rw,root_squash,all_squash)</div><div class="line">/data/nfsd/deploy 192.168.1.4/32(rw,root_squash,all_squash)</div><div class="line">/data/nfsd/deploy 192.168.1.5/32(rw,root_squash,all_squash)</div><div class="line"><span class="comment">#指定哪些机器可以访问共享目录deploy，以及以何种方式访问</span></div></pre></td></tr></table></figure>
</li>
<li><p>启动测试</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">service rpcbind start</div><div class="line">service nfs start</div><div class="line">rpcinfo -p    <span class="comment">#確認nfs服務啟動成功</span></div><div class="line">exportfs    <span class="comment">#检查 NFS 服务器是否输出我们想共享的目录</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="Client端配置"><a href="#Client端配置" class="headerlink" title="Client端配置"></a>Client端配置</h4><ul>
<li>客户端很简单<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">yum install nfs-utils.x86_64</div><div class="line">chkconfig rpcbind on</div><div class="line">service rpcbind start</div><div class="line">showmount <span class="_">-e</span> 192.168.1.3    <span class="comment">#showmount -e nfs服務器的IP,检查 NFS 服务器端是否有目录共享</span></div><div class="line"><span class="comment">#mount -t nfs4 192.168.1.3:/data/nfsd/deploy /mnt/deploy    #默认使用的是udp协议,会存在丢数据问题</span></div><div class="line">mount -t nfs4 192.168.1.3:/data/nfsd/deploy /mnt/deploy -o proto=tcp -o nolock <span class="comment">#使用tcp协议，速度慢</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="自动挂载"><a href="#自动挂载" class="headerlink" title="自动挂载"></a>自动挂载</h4><ul>
<li><p>使用fstab实现启动挂载</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#vim /etc/fstab</span></div><div class="line"><span class="comment">#添加如下字段</span></div><div class="line">192.168.1.3:/data/nfsd/deploy   /mnt/deploy     nfs     defaults        0 0</div><div class="line">192.168.1.3:/data/nfsd/backup   /mnt/backup     nfs     defaults        0 0</div></pre></td></tr></table></figure>
</li>
<li><p>好用命令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">mount <span class="_">-a</span></div><div class="line"><span class="comment">#这个-a参数会读取/etc/fstab文件的内容，对没有挂载的会再次瓜子啊</span></div><div class="line">umount <span class="_">-l</span> mountmoint</div><div class="line"><span class="comment">#强制解除挂载</span></div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<p>以上</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Ansible之HAVE_DECL_MPZ_POWM_SEC报错记录]]></title>
      <url>http://arvon.top/2015/10/12/Ansible%E4%B9%8BHAVE-DECL-MPZ-POWM-SEC%E6%8A%A5%E9%94%99%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<p>简述：在centOS6.5上使用pip安装ansible(version=2.1.1.0)时报错</p>
<h3 id="报错解决"><a href="#报错解决" class="headerlink" title="报错解决"></a>报错解决</h3><ul>
<li>解决如下<br>分析为PyCrypto模块安装有问题，所以就直接卸载重装。。有能力的话我会进一步探究这个报错，不过现在以下方法可以解决，先这样吧<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">pip uninstall python-keyczar pycrypto pyasn1</div><div class="line">yum erase python-keyczar python-crypto pyasn1</div><div class="line">yum install python-keyczar</div></pre></td></tr></table></figure>
</li>
</ul>
<a id="more"></a>
<ul>
<li>报错如下<blockquote>
<p>ERROR! Unexpected Exception: ‘module’ object has no attribute ‘HAVE_DECL_MPZ_POWM_SEC’<br>the full traceback was:<br>Traceback (most recent call last):<br>File “/usr/bin/ansible”, line 81, in <module><br>  from ansible.cli.adhoc import AdHocCLI as mycli<br>File “/usr/lib/python2.6/site-packages/ansible/cli/adhoc.py”, line 28, in <module><br>  from ansible.executor.task_queue_manager import TaskQueueManager<br>File “/usr/lib/python2.6/site-packages/ansible/executor/task_queue_manager.py”, line 29, in <module><br>  from ansible.executor.process.result import ResultProcess<br>File “/usr/lib/python2.6/site-packages/ansible/executor/process/result.py”, line 34, in <module><br>  from Crypto.Random import atfork<br>File “/usr/lib64/python2.6/site-packages/Crypto/Random/<strong>init</strong>.py”, line 29, in <module><br>  from Crypto.Random import _UserFriendlyRNG<br>File “/usr/lib64/python2.6/site-packages/Crypto/Random/_UserFriendlyRNG.py”, line 38, in <module><br>  from Crypto.Random.Fortuna import FortunaAccumulator<br>File “/usr/lib64/python2.6/site-packages/Crypto/Random/Fortuna/FortunaAccumulator.py”, line 39, in <module><br>  import FortunaGenerator<br>File “/usr/lib64/python2.6/site-packages/Crypto/Random/Fortuna/FortunaGenerator.py”, line 34, in <module><br>  from Crypto.Util.number import ceil_shift, exact_log2, exact_div<br>File “/usr/lib64/python2.6/site-packages/Crypto/Util/number.py”, line 56, in <module><br>  if _fastmath is not None and not _fastmath.HAVE_DECL_MPZ_POWM_SEC:<br>AttributeError: ‘module’ object has no attribute ‘HAVE_DECL_MPZ_POWM_SEC’</module></module></module></module></module></module></module></module></module></p>
</blockquote>
</li>
</ul>
<h3 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h3><ul>
<li>命令脚本片段（摘自sam的脚本）<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#安装PIP</span></div><div class="line">yum install python-pip.noarch python-devel libxslt-devel libffi-devel openssl-devel python-devel gcc-c++ gcc PyYAML python-babel python-crypto  python-httplib2 python-jinja2 python-keyczar python-markupsafe python-paramiko python-pyasn1 python-simplejson python-six -y</div><div class="line">mkdir ~/.pip/</div><div class="line"><span class="built_in">echo</span> <span class="string">"</span></div><div class="line">[global]</div><div class="line">index-url = http://mirrors.aliyun.com/pypi/simple/</div><div class="line"></div><div class="line">[install]</div><div class="line">trusted-host=mirrors.aliyun.com" &gt;&gt; ~/.pip/pip.conf</div><div class="line"><span class="comment">#安装ansible</span></div><div class="line">pip install --upgrade pip python-keyczar</div><div class="line">pip install ansible==2.1.1.0</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[crontab简记]]></title>
      <url>http://arvon.top/2015/09/16/crontab%E7%AE%80%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p>今天刚好要备份线上的crontab，就顺便记下来，省得忘了以后还要去上网找。<br><strong>介绍:</strong>crontab命令<br>常见于Unix和类Unix的操作系统之中，用于设置周期性被执行的指令。该命令从标准输入设备读取指令，并将其存放于“crontab”文件中，以供之后读取和执行。该词来源于希腊语 chronos(χρνο)，原意是时间。常，crontab储存的指令被守护进程激活， crond常常在后台运行，每一分钟检查是否有预定的作业需要执行。这类作业一般称为cron jobs。<em>crontab文件</em>包含送交cron守护进程的一系列作业和指令。每个用户可以拥有自己的crontab文件；同时，操作系统保存一个针对整个系统的crontab文件，该文件通常存放于/etc或者/etc之下的子目录中，而这个文件只能由系统管理员来修改。<br>crontab文件的每一行均遵守特定的格式，由空格或tab分隔为数个领域，每个领域可以放置单一或多个数值。(ps:摘自百度百科)</p>
<a id="more"></a>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><ul>
<li>常用命令<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">crontab -e	#编辑，编辑后重启服务生效</div><div class="line">/etc/init.d/crond restart（stop/start）	#重启服务</div><div class="line">crontab -l	#查看</div><div class="line">crontab -l&gt;/home/backup/crontab/crontab\`date '+%Y%m%d'`.bak	#备份crontab</div><div class="line"><span class="meta">#</span><span class="bash">* 每分钟执行以下ls命令</span></div><div class="line">0 * * * * /bin/ls</div><div class="line"><span class="meta">#</span><span class="bash">* 周一到周五每天17点发email给arvon</span></div><div class="line">0 17 * * 1-5 mail -s "hi" alex@domain.name &lt; /tmp/maildata</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="命令介绍"><a href="#命令介绍" class="headerlink" title="命令介绍"></a>命令介绍</h2><ul>
<li>参照man手册<blockquote>
<ul>
<li>f1 f2 f3 f4 f5 cmd/script</li>
<li>其中 f1 是表示分钟，f2 表示小时，f3 表示一个月份中的第几日，f4 表示月份，f5 表示一个星期中的第几天。program 表示要执行的程式。</li>
<li>当 f1 为 <em> 时表示每分钟都要执行 program，f2 为 </em> 时表示每小时都要执行程式，其余类推</li>
<li>当 f1 为 a-b 时表示从第 a 分钟到第 b 分钟这段时间内要执行，f2 为 a-b 时表示从第 a 到第 b 小时都要执行，其余类推</li>
<li>当 f1 为 <em>/n 时表示每 n 分钟个时间间隔执行一次，f2 为 </em>/n 表示每 n 小时个时间间隔执行一次，其余类推</li>
<li>当 f1 为 a, b, c,… 时表示第 a, b, c,… 分钟要执行，f2 为 a, b, c,… 时表示第 a, b, c…个小时要执行，其余类推</li>
<li>使用者也可以将所有的设定先存放在档案 file 中，用 crontab file 的方式来设定时程表。</li>
<li>由于unix版本不一样，所以部分语法有差别，例如在hp unix aix 中设定间隔执行如果采用*/n 方式将出现语法错误，在这类unix中 ，间隔执行只能以列举方式，详请见例子。</li>
<li>使用方法:　　用VI编辑一个文件 cronfile，然后在这个文件中输入格式良好的时程表。编辑完成后，保存并退出。</li>
<li>在命令行输入crontab cronfile这样就将cronfile文件提交给cron进程，同时，新创建cronfile的一个副本已经被放在/var/spoll/cron目录中，文件名就是用户名。</li>
</ul>
</blockquote>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Zabbix使用Percona组件监控Mysql]]></title>
      <url>http://arvon.top/2015/09/14/Zabbix%E4%BD%BF%E7%94%A8Percona%E7%BB%84%E4%BB%B6%E7%9B%91%E6%8E%A7Mysql/</url>
      <content type="html"><![CDATA[<p>上周测试了使用percona Monitoring Plugins 监控mysql，确认可行。<br>Percona Monitoring Plugins是一个高质量的组件，为mysql数据库添加企业级的监控和图表功能。该插件可以和Nagios或者是Cati等监控系统集成，从Percona1.1开始支持zabbix监控。其脚本由php实现，所以需安装php环境</p>
<a id="more"></a>
<h4 id="实现环境"><a href="#实现环境" class="headerlink" title="实现环境"></a>实现环境</h4><ul>
<li>已经完成了zabbix基本环境部署</li>
<li>安装php环境</li>
<li>使用epel源，下载所需组件</li>
</ul>
<h4 id="下载Percona-Monitoring-Plugins"><a href="#下载Percona-Monitoring-Plugins" class="headerlink" title="下载Percona Monitoring Plugins"></a>下载Percona Monitoring Plugins</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">#下载文件</div><div class="line">wget https://www.percona.com/downloads/percona-monitoring-plugins/1.1.1/percona-zabbix-templates-1.1.1-1.noarch.rpm</div><div class="line">#提取下载的rpm文件</div><div class="line">[root@localhost ~]# rpm2cpio percona-zabbix-templates-1.1.1-1.noarch.rpm |cpio -div</div><div class="line">&gt;目录文件说明</div><div class="line">#脚本文件路径</div><div class="line">var/lib/zabbix/percona/scripts/</div><div class="line">#key文件位置</div><div class="line">var/lib/zabbix/percona/templates/userparameter_percona_mysql.conf</div><div class="line">#模板文件位置</div><div class="line">var/lib/zabbix/percona/templates/zabbix_agent_template_percona_mysql_server_ht_2.0.9-sver1.1.1.xml</div><div class="line"># 安装percona monitoring plugins</div><div class="line">[root@localhost ~]# rpm -ivh percona-zabbix-templates-1.1.1-1.noarch.rpm</div></pre></td></tr></table></figure>
<h4 id="安装php环境"><a href="#安装php环境" class="headerlink" title="安装php环境"></a>安装php环境</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# yum install php php-mysql</div></pre></td></tr></table></figure>
<h4 id="复制文件"><a href="#复制文件" class="headerlink" title="复制文件"></a>复制文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">将key的子配置文件复制到/etc/zabbix/zabbix_agentd.d/</div><div class="line">``插曲``由于版本不同，所以实际文件位置也不同，这个位置可以在agent的包里看到</div><div class="line">rpm -ql zabbix22-agent-2.2.1-5.el6.x86_64</div><div class="line">/usr/share/doc/zabbix22-agent-2.2.1/userparameter_mysql.conf</div><div class="line">[root@localhost zabbix]# cp /var/lib/zabbix/percona/templates/userparameter_percona_mysql.conf /etc/zabbix/zabbix_agentd.d/</div></pre></td></tr></table></figure>
<h4 id="重启zabbix-agent服务"><a href="#重启zabbix-agent服务" class="headerlink" title="重启zabbix-agent服务"></a>重启zabbix-agent服务</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/etc/init.d/zabbix-agent restart</div></pre></td></tr></table></figure>
<h4 id="修改脚本"><a href="#修改脚本" class="headerlink" title="修改脚本"></a>修改脚本</h4><p>修改脚本中的用户名和密码,用户名和密码为本机数据库的账户和密码，并不需要特别的权限<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# vim /var/lib/zabbix/percona/scripts/ss_get_mysql_stats.php</div></pre></td></tr></table></figure></p>
<h4 id="没有用户"><a href="#没有用户" class="headerlink" title="没有用户"></a>没有用户</h4><p>添加数据库的用户<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">mysql&gt;</span><span class="bash"> grant process,super,select on *.* to zabbix@localhost identified by <span class="string">'zabbix'</span>;</span></div><div class="line"><span class="meta">mysql&gt;</span><span class="bash"> flush privileges;</span></div></pre></td></tr></table></figure></p>
<h4 id="脚本调试"><a href="#脚本调试" class="headerlink" title="脚本调试"></a>脚本调试</h4><p>运行脚本，只要不报error就是没问题<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@centos-01 percona]# /var/lib/zabbix/percona/scripts/get_mysql_stats_wrapper.sh gg</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CentOS环境搭建zabbix2.2监控]]></title>
      <url>http://arvon.top/2015/09/09/CentOS%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BAzabbix%E7%9B%91%E6%8E%A7/</url>
      <content type="html"><![CDATA[<p>##zabbix server<br>更新：此版本为2.2版本，已更新3.0版本</p>
<a id="more"></a>
<h3 id="配置yum源"><a href="#配置yum源" class="headerlink" title="配置yum源"></a>配置yum源</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">rpm -ivh http://repo.zabbix.com/zabbix/2.2/rhel/6/x86_64/zabbix-release-2.2-1.el6.noarch.rpm</div><div class="line">http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm</div></pre></td></tr></table></figure>
<h3 id="install-zabbix-server"><a href="#install-zabbix-server" class="headerlink" title="install zabbix server"></a>install zabbix server</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">yum install -y zabbix zabbix-get zabbix-server zabbix-web-mysql zabbix-web zabbix-agent	#这个装出来是1.8的版本。所以重来</div><div class="line"><span class="meta">#</span><span class="bash">* 下面是2.2版本的安装包</span></div><div class="line">yum install -y zabbix22 zabbix22-web-mysql zabbix22-server zabbix22-agent zabbix22-web zabbix22-dbfiles-mysql zabbix22-server-mysql</div></pre></td></tr></table></figure>
<h3 id="mysql-config"><a href="#mysql-config" class="headerlink" title="mysql config"></a>mysql config</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install -y mysql-server</div></pre></td></tr></table></figure>
<h4 id="修改mysql配置文件"><a href="#修改mysql配置文件" class="headerlink" title="修改mysql配置文件"></a>修改mysql配置文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">cp /etc/my.cnf /tmp</div><div class="line">egrep -v "(^#|^$)" 	#cat /etc/my.cnf | grep -v ^# | grep -v ^$</div><div class="line"><span class="meta">#</span><span class="bash">vi /etc/my.cnf</span></div><div class="line"><span class="meta">#</span><span class="bash">参照P27[Zabbix企业级分布式监控系统](http://item.jd.com/11522142.html?cu=<span class="literal">true</span>&amp;utm_source=baidu-search&amp;utm_medium=cpc&amp;utm_campaign=t_262767352_baidusearch&amp;utm_term=12777330128_0_0757319b492245849616c53bac31a23e)</span></div><div class="line">[mysqld]</div><div class="line">datadir=/var/lib/mysql</div><div class="line">socket=/var/lib/mysql/mysql.sock</div><div class="line">user=mysql</div><div class="line"><span class="meta">#</span><span class="bash"> Disabling symbolic-links is recommended to prevent assorted security risks</span></div><div class="line">symbolic-links=0</div><div class="line">character-set-server=utf8</div><div class="line">innodb_file_per_table=1</div><div class="line">[mysqld_safe]</div><div class="line">log-error=/var/log/mysqld.log</div><div class="line">pid-file=/var/run/mysqld/mysqld.pid</div></pre></td></tr></table></figure>
<h3 id="启动mysql服务"><a href="#启动mysql服务" class="headerlink" title="启动mysql服务"></a>启动mysql服务</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">yum install mysql-server -y</div><div class="line">service mysqld start</div><div class="line">ps -ef | grep mysql</div><div class="line">netstat -nlput | grep 3306</div></pre></td></tr></table></figure>
<h4 id="mysql设置"><a href="#mysql设置" class="headerlink" title="mysql设置"></a>mysql设置</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">mysqladmin -uroot password admin</div><div class="line">mysql -uroot -padmin</div><div class="line"><span class="meta">mysql&gt;</span><span class="bash"> create database zabbix character <span class="built_in">set</span> utf8;</span></div><div class="line"><span class="meta">mysql&gt;</span><span class="bash"> grant all privileges on zabbix.* to zabbix@localhost identified by <span class="string">'zabbix'</span>;</span></div><div class="line"><span class="meta">mysql&gt;</span><span class="bash"> flush privileges;</span></div></pre></td></tr></table></figure>
<h3 id="创建zabbix的数据库"><a href="#创建zabbix的数据库" class="headerlink" title="创建zabbix的数据库"></a>创建zabbix的数据库</h3><ul>
<li>zabbix连接数据：zabbix/zabbix<h3 id="导入zabbix的数据库"><a href="#导入zabbix的数据库" class="headerlink" title="导入zabbix的数据库"></a>导入zabbix的数据库</h3><h4 id="进入数据库导入"><a href="#进入数据库导入" class="headerlink" title="进入数据库导入"></a>进入数据库导入</h4>mysql&gt;use zabbix<br>###倒入sql一定按顺序<code>一定</code></li>
<li><code>必须多说两句</code>，这个地方卡了我整整一天，报错贴图在最后<br>source /usr/share/zabbix-mysql/schema.sql<br>source /usr/share/zabbix-mysql/images.sql<br>source /usr/share/zabbix-mysql/data.sql<h4 id="在数据库外导入"><a href="#在数据库外导入" class="headerlink" title="在数据库外导入"></a>在数据库外导入</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mysql -uzabbix -pzabbix zabbix &lt; /usr/share/zabbix-mysql/schema.sql</div><div class="line">mysql -uzabbix -p_zabbix_ zabbix &lt; /usr/share/zabbix-mysql/images.sql</div><div class="line">mysql -uzabbix -p_zabbix_ zabbix &lt; /usr/share/zabbix-mysql/data.sql</div></pre></td></tr></table></figure>
</li>
</ul>
<p>###配置zabbix_server.conf</p>
<ul>
<li><p>默认参数：<br>  egrep -v “(^#|^$)” /etc/zabbix/zabbix_server.conf</p>
  <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">LogFile=/var/log/zabbix/zabbix_server.log</div><div class="line">LogFileSize=0</div><div class="line">PidFile=/var/run/zabbix/zabbix.pid</div><div class="line">DBName=zabbix</div><div class="line">DBUser=zabbix</div><div class="line">DBSocket=/var/lib/mysql/mysql.sock</div><div class="line">AlertScriptsPath=/var/lib/zabbix/</div></pre></td></tr></table></figure>
</li>
<li><p>修改后参数：<br>  主要添加字段为：DBpassword=zabbix</p>
</li>
</ul>
<h4 id="iptables-amp-Selinux设置"><a href="#iptables-amp-Selinux设置" class="headerlink" title="iptables&amp;Selinux设置"></a>iptables&amp;Selinux设置</h4><ul>
<li>iptables设置(注意顺序)<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">-A INPUT -m state --state NEW -m tcp -p tcp --dport 80 -j ACCEPT</div><div class="line">-A INPUT -m state --state NEW -m tcp -p tcp --dport 10051 -j ACCEPT</div><div class="line">-A OUTPUT -m state --state NEW -m tcp -p tcp --dport 10050 -j ACCEPT</div><div class="line">-A INPUT -m state --state NEW -m tcp -p tcp --sport 10050 -j ACCEPT</div><div class="line"><span class="meta">#</span><span class="bash">* Selinux关闭</span></div><div class="line">[root@localhost ~]# setenforce 0</div><div class="line">[root@localhost ~]# getenforce</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="启动zabbix服务-amp-http服务"><a href="#启动zabbix服务-amp-http服务" class="headerlink" title="启动zabbix服务&amp;http服务"></a>启动zabbix服务&amp;http服务</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo /etc/init.d/zabbix-server start</div><div class="line">sudo /etc/init.d/httpd start</div></pre></td></tr></table></figure>
<h2 id="zabbix-agent"><a href="#zabbix-agent" class="headerlink" title="zabbix agent"></a>zabbix agent</h2><h3 id="sofaware"><a href="#sofaware" class="headerlink" title="sofaware"></a>sofaware</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">rpm -ivh http://repo.zabbix.com/zabbix/2.2/rhel/6/x86_64/zabbix-release-2.2-1.el6.noarch.rpm</div><div class="line">yum install zabbix zabbix-agent</div></pre></td></tr></table></figure>
<h3 id="configure"><a href="#configure" class="headerlink" title="configure"></a>configure</h3><h4 id="iptables"><a href="#iptables" class="headerlink" title="iptables"></a>iptables</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">-A INPUT -m state --state NEW -m tcp -p tcp --dport 10050 -j ACCEPT</div><div class="line">-A OUTPUT -m state --state NEW -m tcp -p tcp --dport 10051 -j ACCEPT</div></pre></td></tr></table></figure>
<h4 id="zabbix-agentd-conf"><a href="#zabbix-agentd-conf" class="headerlink" title="zabbix_agentd.conf"></a>zabbix_agentd.conf</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# egrep -v "(^#|^$)" /etc/zabbix/zabbix_agentd.conf</div><div class="line">PidFile=/var/run/zabbix/zabbix_agentd.pid</div><div class="line">LogFile=/var/log/zabbix/zabbix_agentd.log</div><div class="line">LogFileSize=0</div><div class="line">Server=192.168.138.133	#server IP</div><div class="line">ServerActive=192.168.138.133	#server IP</div><div class="line">Hostname=Centos-01.hostname</div><div class="line">Include=/etc/zabbix/zabbix_agentd.d/</div></pre></td></tr></table></figure>
<h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# /etc/init.d/zabbix-agent restart</div></pre></td></tr></table></figure>
<h4 id="zabbix添加主机"><a href="#zabbix添加主机" class="headerlink" title="zabbix添加主机"></a>zabbix添加主机</h4><h5 id="手动添加"><a href="#手动添加" class="headerlink" title="手动添加"></a>手动添加</h5><p><img src="http://i1.tietuku.com/29ff780785f8142b.png" alt="看图"><br><img src="http://i1.tietuku.com/a5071fd29e260241.png" alt=""></p>
<h5 id="自动添加"><a href="#自动添加" class="headerlink" title="自动添加"></a>自动添加</h5><p><img src="http://i1.tietuku.com/50818e58957d382a.png" alt=""><br><img src="http://i1.tietuku.com/5c8029d4a5750557.png" alt=""></p>
<p>##报错解决</p>
<h4 id="timezone问题"><a href="#timezone问题" class="headerlink" title="timezone问题"></a>timezone问题</h4><p><img src="http://i1.tietuku.com/6eab8e80bb3eb1f1.png" alt=""><br>php.ini配置文件设置<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cp /etc/php.ini /tmp/</div><div class="line">sudo vim /etc/php.ini</div><div class="line"><span class="meta">#</span><span class="bash">添加字段：date.timezone = Asia/Shanghai</span></div></pre></td></tr></table></figure></p>
<h4 id="web参数不满足要求问题"><a href="#web参数不满足要求问题" class="headerlink" title="web参数不满足要求问题"></a>web参数不满足要求问题</h4><p><img src="http://i1.tietuku.com/0d83e480b0e348c7.png" alt=""><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cp /etc/httpd/conf.d/zabbix.conf /tmp/</div><div class="line">sudo vim /etc/httpd/conf.d/zabbix.conf</div></pre></td></tr></table></figure></p>
<blockquote>
<p>修改其中字段为以下</p>
<p><directory "="" usr="" share="" zabbix"=""><br>    Options FollowSymLinks<br>    AllowOverride None<br>    Order allow,deny<br>    Allow from all<br>    php_value date:timezone Asia/Shanghai<br>    php_value max_execution_time 300<br>    php_value post_max_size 16M<br>    php_value max_input_time 300<br>    php_value memory_limit 128M<br>    php_value upload_max_filesize 2M<br></directory><br>然后重启httpd服务</p>
</blockquote>
<h4 id="默认登陆账号密码"><a href="#默认登陆账号密码" class="headerlink" title="默认登陆账号密码"></a>默认登陆账号密码</h4><p>账户：Admin<br>密码：zabbix</p>
<h4 id="zabbix忘记密码，将旧密码修改为arvon"><a href="#zabbix忘记密码，将旧密码修改为arvon" class="headerlink" title="zabbix忘记密码，将旧密码修改为arvon"></a>zabbix忘记密码，将旧密码修改为arvon</h4><p>登陆部署机数据库，修改数据库中的密码，步骤如下：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">echo -n arvon | openssl md5</div><div class="line">(stdin)= 5c48aaaa95a1797ffb2dc32699b0c6c3</div><div class="line"><span class="meta">&gt;</span><span class="bash">mysql -uname -ppassword</span></div><div class="line"><span class="meta">&gt;</span><span class="bash">use zabbix;</span></div><div class="line"><span class="meta">&gt;</span><span class="bash">select * from users;</span></div><div class="line"><span class="meta">#</span><span class="bash">先在外面生成的md5码该用了</span></div><div class="line"><span class="meta">&gt;</span><span class="bash">update users <span class="built_in">set</span>  passwd=<span class="string">'e2798af12a7a0f4f70b4d69efbc25f4d'</span> <span class="built_in">where</span> userid = <span class="string">'1'</span>;</span></div></pre></td></tr></table></figure></p>
<p><img src="http://i1.tietuku.com/75f80ce9269b455a.png" alt=""></p>
<h4 id="报错贴图“table-not-exist”"><a href="#报错贴图“table-not-exist”" class="headerlink" title="报错贴图“table not exist”"></a>报错贴图“table not exist”</h4><p><img src="http://i1.tietuku.com/3f75b678db942213.png" alt=""><br><img src="http://i1.tietuku.com/b585f7995c14ad19.png" alt=""></p>
<h4 id="epel源错误"><a href="#epel源错误" class="headerlink" title="epel源错误"></a>epel源错误</h4><p><img src="http://i1.tietuku.com/c53075f14306cd61.png" alt=""><br>修改文件“/etc/yum.repos.d/epel.repo”， 第一项epel，将baseurl的注释取消， mirrorlist注释掉。即可</p>
<h4 id="zabbixserver-web-报错“Zabbix-discoverer-processes-more-than-75-busy”"><a href="#zabbixserver-web-报错“Zabbix-discoverer-processes-more-than-75-busy”" class="headerlink" title="zabbixserver web 报错“Zabbix discoverer processes more than 75% busy”"></a>zabbixserver web 报错“Zabbix discoverer processes more than 75% busy”</h4><p><img src="http://i1.tietuku.com/281d34ca6408ac6e.png" alt=""></p>
<blockquote>
<p><a href="Zabbix discoverer processes more than 75% busy">参考</a></p>
</blockquote>
<h4 id="zabbix-server-is-not-running报错"><a href="#zabbix-server-is-not-running报错" class="headerlink" title="zabbix server is not running报错"></a>zabbix server is not running报错</h4><p><img src="http://i1.tietuku.com/21ba7ab71d649b6d.png" alt="错误如图"><br><img src="http://i1.tietuku.com/263e79625c329936.png" alt=""><br>解决：仅限于我个人使用，打死都想不到密码写错了，zabbix_server.conf里面的密码加了两个单引号，真是作死呀，就是看不出来</p>
<p>参考文档：<br><a href="http://zabbix.org/wiki/InstallOnCentOS_RHEL#Database" target="_blank" rel="external">zabbix wike</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[mysql主从]]></title>
      <url>http://arvon.top/2015/09/07/mysql%E4%B8%BB%E4%BB%8E%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<p>这篇题目占了好长时间了，一直说补上也没补上，今天没事，就弄个实验环境来记录一下。正所谓好记性不如烂笔头，那就写一下。</p>
<a id="more"></a>
<h4 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h4><ul>
<li><p>两台服务器</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# cat /etc/redhat-release</div><div class="line">CentOS release 6.7 (Final)</div><div class="line"><span class="meta">#</span><span class="bash">其中62做master，63做salve, 66为VIP</span></div></pre></td></tr></table></figure>
</li>
<li><p>mysql版本<br>mysql版本说明：mysqlAB复制版本都要高于3.2，slave版本可以高于master但不可以低于master</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# mysql -V</div><div class="line">mysql  Ver 14.14 Distrib 5.6.32, for Linux (x86_64) using  EditLine wrapper</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="Master配置"><a href="#Master配置" class="headerlink" title="Master配置"></a>Master配置</h4><ul>
<li><p>初始化mysql</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/etc/init.d/mysql start</div><div class="line">mysqladmin -uroot -parvon.top</div></pre></td></tr></table></figure>
</li>
<li><p>配置文件</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">vim /etc/my.cfg</span></div><div class="line">[mysqld]</div><div class="line">server-id = 1</div><div class="line"><span class="meta">#</span><span class="bash">backup这台设置2,</span></div><div class="line">log-bin = arvon-mysql-bin</div><div class="line"><span class="meta">#</span><span class="bash">binlog文件名称</span></div><div class="line">binlog-ignore-db = mysql,information_schema</div><div class="line"><span class="meta">#</span><span class="bash">忽略写入binlog日志的库</span></div><div class="line">auto-increment-increment = 2</div><div class="line"><span class="meta">#</span><span class="bash">字段变化增量值</span></div><div class="line">auto-increment-offset = 1</div><div class="line"><span class="meta">#</span><span class="bash">初始字段ID为1</span></div><div class="line">slave-skip-errors = all</div><div class="line"><span class="meta">#</span><span class="bash">忽略所有复制产生的错误</span></div></pre></td></tr></table></figure>
</li>
<li><p>添加slave读取master的用户和权限</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">mysql&gt;</span><span class="bash"> grant replication slave on *.* to <span class="string">'slave'</span>@<span class="string">'172.17.18.63'</span> identified by <span class="string">'blog.arvon.top'</span>;</span></div><div class="line"><span class="meta">mysql&gt;</span><span class="bash"> flush privileges;</span></div><div class="line"><span class="meta">#</span><span class="bash">给slave用户读取master的权限密码为blog.arvon.top</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="Slave配置"><a href="#Slave配置" class="headerlink" title="Slave配置"></a>Slave配置</h4><ul>
<li><p>测试salve用户登录是否正常</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql -h172.17.18.62 -uslave -pblog.arvon.top</div></pre></td></tr></table></figure>
</li>
<li><p>配置文件<br>先修改my.cnf文件，主要写入server-id,没有把后面server的主机端口密码信息直接写入配置文件是因为mysql5.5之后直接写会报错，mysql不认识，需要直接在mysql中用后面的命令指出。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">server-id=2</div></pre></td></tr></table></figure>
<p>mysql中要指出的变量,后面MASTER_LOG_FILE和MASTER_LOG_POS就是上面server配置端binglog和post的值</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">mysql&gt;</span><span class="bash"> CHANGE MASTER TO MASTER_HOST=<span class="string">'172.17.18.62'</span>,</span></div><div class="line"><span class="meta">   -&gt;</span><span class="bash"> MASTER_PORT=3306,</span></div><div class="line"><span class="meta">   -&gt;</span><span class="bash"> MASTER_USER=<span class="string">'slave'</span>,</span></div><div class="line"><span class="meta">   -&gt;</span><span class="bash"> MASTER_PASSWORD=<span class="string">'blog.arvon.top'</span>,</span></div><div class="line"><span class="meta">   -&gt;</span><span class="bash"> MASTER_LOG_FILE=<span class="string">'arvon-mysql-bin.000001'</span>,</span></div><div class="line"><span class="meta">   -&gt;</span><span class="bash"> MASTER_LOG_POS=120;</span></div><div class="line"><span class="meta">#</span><span class="bash">启动slave进程</span></div><div class="line"><span class="meta">mysql&gt;</span><span class="bash"> slave start;</span></div></pre></td></tr></table></figure>
</li>
<li><p>查看slave状态<br>共有两个线程一个为IO线程，一个为SQL进程,如图都为yes说明成功</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">mysql&gt;</span><span class="bash"> show slave status\G;</span></div></pre></td></tr></table></figure>
</li>
<li><p>测试一下<br>在master创建一个database，然后去slave查看一下是否有了，我这反正测试时成功的，哈哈。</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用fio工具测试linux的磁盘性能]]></title>
      <url>http://arvon.top/2015/08/24/%E4%BD%BF%E7%94%A8fio%E5%B7%A5%E5%85%B7%E6%B5%8B%E8%AF%95linux%E7%9A%84%E7%A3%81%E7%9B%98%E6%80%A7%E8%83%BD/</url>
      <content type="html"><![CDATA[<p>很多时候我们需要对服务器的性能进行评估，这就少不了运用合适的工具。其中fio是测试iops的一款很好用的工具，用来对硬件进行压力测试和验证，支持13中不同的I/O引擎，包括：sync、mmap、libaio、posixaio、SG v3、splice、null、network、syslet、guasi、solarisaio等等</p>
<h3 id="简单测试写性能"><a href="#简单测试写性能" class="headerlink" title="简单测试写性能"></a>简单测试写性能</h3><ul>
<li>使用dd简单测试<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">dd <span class="keyword">if</span>=<span class="regexp">/dev/zero</span> of=testfile bs=<span class="number">1</span>M count=<span class="number">1024</span> oflag=dsync</div><div class="line"><span class="comment">#采用dd创建一个1G的文件的磁盘写速度，IO引擎为dsync</span></div></pre></td></tr></table></figure>
</li>
</ul>
<a id="more"></a>
<h3 id="准备-amp-安装"><a href="#准备-amp-安装" class="headerlink" title="准备&amp;安装"></a>准备&amp;安装</h3><ul>
<li><a href="http://freecode.com/projects/fio/" target="_blank" rel="external">FIO官网</a></li>
<li>安装系统<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">wget http:<span class="regexp">//brick</span>.kernel.dk/snaps/fio-<span class="number">2.0</span>.<span class="number">7</span>.tar.gz</div><div class="line"><span class="comment">#download the software</span></div><div class="line">yum install libaio-devel</div><div class="line"><span class="comment">#安装依赖包</span></div><div class="line">tar -xvf fio-<span class="number">2.0</span>.<span class="number">7</span>.tar.gz</div><div class="line"><span class="comment">#decompression</span></div><div class="line">cd fio-<span class="number">2.0</span>.<span class="number">7</span></div><div class="line"><span class="comment">#进入解压目录</span></div><div class="line">make</div><div class="line">make install</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h3><ul>
<li>fio选项说明<blockquote>
<p>filename=/dev/sdb1       测试文件名称，通常选择需要测试的盘的data目录。<br>direct=1                 测试过程绕过机器自带的buffer。使测试结果更真实。<br>rw=randwrite             测试随机写的I/O<br>rw=randrw                测试随机写和读的I/O<br>bs=16k                   单次io的块文件大小为16k<br>bsrange=512-2048         同上，提定数据块的大小范围<br>size=5g    本次的测试文件大小为5g，以每次4k的io进行测试。<br>numjobs=30               本次的测试线程为30.<br>runtime=1000             测试时间为1000秒，如果不写则一直将5g文件分4k每次写完为止。<br>ioengine=psync           io引擎使用pync方式<br>rwmixwrite=30            在混合读写的模式下，写占30%<br>group_reporting          关于显示结果的，汇总每个进程的信息。<br>此外<br>lockmem=1g               只使用1g内存进行测试。<br>zero_buffers             用0初始化系统buffer。<br>nrfiles=8                每个进程生成文件的数量。</p>
</blockquote>
</li>
<li>例子<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#随机读</span></div><div class="line">fio -filename=<span class="regexp">/root/filename</span> -direct=<span class="number">1</span> -iodepth <span class="number">1</span> -thread -rw=randread -ioengine=psync -bs=<span class="number">16</span>k -size=<span class="number">2</span>G -numjobs=<span class="number">10</span> -runtime=<span class="number">1000</span> -group_reporting -name=mytest</div><div class="line"><span class="comment">#顺序读</span></div><div class="line">fio -filename=filename -direct=<span class="number">1</span> -iodepth <span class="number">1</span> -thread -rw=<span class="keyword">read</span> -ioengine=psync -bs=<span class="number">16</span>k -size=<span class="number">2</span>G -numjobs=<span class="number">30</span> -runtime=<span class="number">1000</span> -group_reporting -name=mytest</div><div class="line"><span class="comment">#随机写</span></div><div class="line">fio -filename=filename -direct=<span class="number">1</span> -iodepth <span class="number">1</span> -thread -rw=randwrite -ioengine=psync -bs=<span class="number">16</span>k -size=<span class="number">2</span>G -numjobs=<span class="number">30</span> -runtime=<span class="number">1000</span> -group_reporting -name=mytest</div><div class="line"><span class="comment">#顺序写</span></div><div class="line">fio -filename=filename -direct=<span class="number">1</span> -iodepth <span class="number">1</span> -thread -rw=<span class="keyword">write</span> -ioengine=psync -bs=<span class="number">16</span>k -size=<span class="number">2</span>G -numjobs=<span class="number">30</span> -runtime=<span class="number">1000</span> -group_reporting -name=mytest</div><div class="line"><span class="comment">#混合随机读写</span></div><div class="line">fio -filename=filename -direct=<span class="number">1</span> -iodepth <span class="number">1</span> -thread -rw=randrw -rwmixread=<span class="number">70</span> -ioengine=psync -bs=<span class="number">16</span>k -size=<span class="number">2</span>G -numjobs=<span class="number">30</span> -runtime=<span class="number">100</span> -group_reporting -name=mytest -ioscheduler=noop</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[yum源配置手册]]></title>
      <url>http://arvon.top/2015/08/21/yum%E6%BA%90%E9%85%8D%E7%BD%AE%E6%89%8B%E5%86%8C/</url>
      <content type="html"><![CDATA[<p>yum（yellow dog updater， modified）是一个在Fedora和RedHat以及SUSE中的Shell前端软件包管理器，能够从指定的服务器自动下载RPM包并安装，可以自动处理依赖关系，并且一次安装所有的依赖关系软件包。系统管理过程中，难免要找软件装软件，如果定制性不高的话，使用yum安装不失为一个好办法，废话少说，开始介绍</p>
<a id="more"></a>
<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">1. 升级系统</span></div><div class="line">yum update</div><div class="line">yum -y update mysql	#升级特定的软件</div><div class="line"><span class="meta">#</span><span class="bash">2. 安装指定的软件包</span></div><div class="line">yum -y install vsftpd</div><div class="line"><span class="meta">#</span><span class="bash">3. 卸载指定的软件包</span></div><div class="line">yum -y remore vsftpd mysql</div><div class="line"><span class="meta">#</span><span class="bash">4. 查看系统中已经安装的和可用的软件组，对于可用的软件组，你可以选择安装</span></div><div class="line">yum grouplist</div><div class="line"><span class="meta">#</span><span class="bash">5. 清除缓存中的rpm 头文件和包文件</span></div><div class="line">yum clean all</div><div class="line"><span class="meta">#</span><span class="bash">6. 搜索相关的软件包</span></div><div class="line">yum -y search Emacs</div><div class="line"><span class="meta">#</span><span class="bash">显示指定软件包的信息</span></div><div class="line">yum info Emacs</div><div class="line"><span class="meta">#</span><span class="bash">查询指定软件包的依赖信息，emacs依赖的模块不少啊</span></div><div class="line">yum deplist emacs</div><div class="line"><span class="meta">#</span><span class="bash">列出所有以 yum 开头的软件包</span></div><div class="line">yum list yum\*</div><div class="line"><span class="meta">#</span><span class="bash">10. 列出已经安装的但是不包含在资源库中的rpm 包</span></div><div class="line">yum list extras</div></pre></td></tr></table></figure>
<h3 id="Repo配置文件"><a href="#Repo配置文件" class="headerlink" title="Repo配置文件"></a>Repo配置文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">配置文件位于``/etc/yum.repos.d/*.repo``,扩展名都为Repo，要想不生效，可直接修改后缀，如改为*.reop_bak</span></div><div class="line"><span class="meta">#</span><span class="bash">配置文件解释</span></div><div class="line">arvon@Mo:~/arvon_work&gt; cat CentOS6-Base-163.repo | grep -v '^#'</div><div class="line">[base]</div><div class="line"><span class="meta">#</span><span class="bash">表示标识名称</span></div><div class="line">name=CentOS-$releasever - Base - 163.com</div><div class="line"><span class="meta">#</span><span class="bash">名字，其实可以随便起</span></div><div class="line">faliovermethod=priority</div><div class="line"><span class="meta">#</span><span class="bash">priority是默认值表示从列出的baseurl中顺序选择镜像服务器地址，roundrobin表示随机选择</span></div><div class="line">exclude=compiz**compiz*fusion-icon*</div><div class="line"><span class="meta">#</span><span class="bash">用来禁止这个仓库某些软件包的安装，可使用通配符，并以空格分隔。视情况添加</span></div><div class="line">baseurl=http://mirrors.163.com/centos/$releasever/os/$basearch/</div><div class="line"><span class="meta">#</span><span class="bash">引用的地址,http://网站  file://本地		ftp://文件服务器</span></div><div class="line">mirrorlist=http://mirrors.fedoraproject.org/mirrorlist?repo=fedora-$releasever$arch=$basearch</div><div class="line"><span class="meta">#</span><span class="bash">是指一个镜像服务器地址列表，通常是开启的，在浏览器打开据说可以看到可用的镜像服务器列表</span></div><div class="line">enabled=1</div><div class="line"><span class="meta">#</span><span class="bash">enabled=1为启用这个源，0为不启用这个源</span></div><div class="line">gpgcheck=1</div><div class="line"><span class="meta">#</span><span class="bash">表示这个repo中下载的rpm将惊醒gpg校验，以确定rpm包的来源是有效和安全的</span></div><div class="line">gpgkey=http://mirror.centos.org/centos/RPM-GPG-KEY-CentOS-6</div><div class="line"><span class="meta">#</span><span class="bash">定义用于校验的gpg密匙</span></div></pre></td></tr></table></figure>
<ul>
<li>粘贴可用的epel的yum源<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">[epel]</div><div class="line">name=Extra Packages for Enterprise Linux 6 - $basearch</div><div class="line"><span class="meta">#</span><span class="bash">baseurl=http://download.fedoraproject.org/pub/epel/6/<span class="variable">$basearch</span></span></div><div class="line">mirrorlist=https://mirrors.fedoraproject.org/metalink?repo=epel-6&amp;arch=$basearch</div><div class="line">failovermethod=priority</div><div class="line">enabled=1</div><div class="line">gpgcheck=1</div><div class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-6</div><div class="line">[epel-debuginfo]  </div><div class="line">name=Extra Packages for Enterprise Linux 6 - $basearch - Debug</div><div class="line"><span class="meta">#</span><span class="bash">baseurl=http://download.fedoraproject.org/pub/epel/6/<span class="variable">$basearch</span>/debug</span></div><div class="line">mirrorlist=https://mirrors.fedoraproject.org/metalink?repo=epel-debug-6&amp;arch=$basearch</div><div class="line">failovermethod=priority</div><div class="line">enabled=0</div><div class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-6</div><div class="line">gpgcheck=1  </div><div class="line">[epel-source]</div><div class="line">name=Extra Packages for Enterprise Linux 6 - $basearch - Source</div><div class="line"><span class="meta">#</span><span class="bash">baseurl=http://download.fedoraproject.org/pub/epel/6/SRPMS</span></div><div class="line">mirrorlist=https://mirrors.fedoraproject.org/metalink?repo=epel-source-6&amp;arch=$basearch</div><div class="line">failovermethod=priority</div><div class="line">enabled=0</div><div class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-6</div><div class="line">gpgcheck=1</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="常用的yum源站"><a href="#常用的yum源站" class="headerlink" title="常用的yum源站"></a>常用的yum源站</h3><ol>
<li>EPEL源</li>
</ol>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">URL</span></div><div class="line">https://admin.fedoraproject.org/mirrormanager/</div><div class="line"><span class="meta">#</span><span class="bash">EPEL-REPO-RPM</span></div><div class="line">wget https://dl.fedoraproject.org/pub/epel/epel-release-latest-5.noarch.rpm</div><div class="line">wget https://dl.fedoraproject.org/pub/epel/epel-release-latest-6.noarch.rpm</div><div class="line">axel https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm</div></pre></td></tr></table></figure>
<ol>
<li>ALI源</li>
</ol>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">URL</span></div><div class="line">http://mirrors.aliyun.com/repo/</div><div class="line"><span class="meta">#</span><span class="bash">ALI-REPO</span></div><div class="line">wget http://mirrors.aliyun.com/repo/Centos-6.repo</div><div class="line">axel http://mirrors.aliyun.com/repo/Centos-7.repo</div><div class="line"><span class="meta">#</span><span class="bash">ALI-EPLE-REPO</span></div><div class="line">wget http://mirrors.aliyun.com/repo/epel-6.repo</div><div class="line">axel http://mirrors.aliyun.com/repo/epel-7.repo</div><div class="line"><span class="meta">#</span><span class="bash">ALI-FEDORA-REPO</span></div><div class="line">wget http://mirrors.aliyun.com/repo/fedora.repo</div></pre></td></tr></table></figure>
<h3 id="可能错误"><a href="#可能错误" class="headerlink" title="可能错误"></a>可能错误</h3><ul>
<li>错误现象lock<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Loading "installonlyn" plugin</div><div class="line">Existing lock /var/run/yum.pid: another copy is running. Aborting.</div><div class="line"><span class="meta">#</span><span class="bash">解释</span></div><div class="line">这是因为yum在更新， 此时是kill不掉的该进程的， 正确的解决方法是让它停止更新即可。</div><div class="line">可以直接输入 rm -f /var/run/yum.pid</div><div class="line">也可以/etc/init.d/yum-updatesd stop</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[lsof命令]]></title>
      <url>http://arvon.top/2015/08/21/lsof%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<p><strong>简介：</strong>lsof命令既（list open files）Lsof 是遵从Unix 哲学的典范，它只做一件事情，并且做的相当完美——它可以列出某个进程打开的所有文件信息。打开的文件可能是普通的文件，目录，NFS文件，块文件，字符文件，共享库，常规管道，明明管道，符号链接，Socket流，网络Socket，UNIX域Socket，以及其它更多。因为Unix系统中几乎所有东西都是文件，你可以想象lsof该有多有用。</p>
<a id="more"></a>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul>
<li><p>yum安装</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install lsof -y</div></pre></td></tr></table></figure>
</li>
<li><p>源码安装</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">wget http://down1.chinaunix.net/distfiles/lsof_4.76.tar.gz</div><div class="line">tar -zxvf lsof.tar.gz</div><div class="line">cd lsof_4.78</div><div class="line">tar xvf lsof_4.78_srv.tar</div><div class="line">./configure lunux</div><div class="line">make</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><ul>
<li><p>lsof<br>不加参数的输出，是列出所有进程打开的所有文件</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">arvon@Mo:~&gt; lsof</div><div class="line">lsof: WARNING: can't stat() fuse.gvfs-fuse-daemon file system /root/.gvfs</div><div class="line">    Output information may be incomplete.</div><div class="line">COMMAND     PID         USER        FD      	TYPE 		DEVICE 			SIZE/OFF   NODE 	NAME</div><div class="line">进程的名称	进程标识符	进程所有者	文件描述符	文件类型	指定磁盘的名称		文件的大小 索引节点 打开文件的确切名称</div><div class="line">init          1       root  cwd   unknown                        /proc/1/cwd (readlink: Permission denied)</div><div class="line">init          1       root  rtd   unknown                        /proc/1/root (readlink: Permission denied)</div><div class="line">init          1       root  txt   unknown                        /proc/1/exe (readlink: Permission denied)</div><div class="line">init          1       root NOFD                                  /proc/1/fd (opendir: Permission denied)</div></pre></td></tr></table></figure>
</li>
<li><p>lsof /path/to/file /path/to/file2<br>找出谁在使用某个文件,可一次指定多个文件</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">arvon@Mo:~&gt; lsof /home/arvon</div><div class="line">lsof: WARNING: can't stat() fuse.gvfs-fuse-daemon file system /root/.gvfs</div><div class="line">    Output information may be incomplete.</div><div class="line">COMMAND   PID  USER   FD   TYPE DEVICE SIZE/OFF   NODE NAME</div><div class="line">bash    24519 arvon  cwd    DIR    8,2     4096 463289 /home/arvon</div><div class="line">lsof    25011 arvon  cwd    DIR    8,2     4096 463289 /home/arvon</div><div class="line">lsof    25012 arvon  cwd    DIR    8,2     4096 463289 /home/arvon</div></pre></td></tr></table></figure>
</li>
<li><p>lsof +D /usr/lib<br>加上+D参数，lsof会对指定目录进行递归查找，注意这个参数要比grep版本慢</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">arvon@Mo:~&gt; lsof +D /usr/lib</div><div class="line">lsof: WARNING: can't stat() fuse.gvfs-fuse-daemon file system /root/.gvfs</div><div class="line">    Output information may be incomplete.</div><div class="line">COMMAND   PID  USER  FD   TYPE DEVICE SIZE/OFF   NODE NAME</div><div class="line">bash    24519 arvon mem    REG    8,2   256324 445427 /usr/lib/locale/es_VE.utf8/LC_CTYPE</div><div class="line">bash    24519 arvon mem    REG    8,2       54 445420 /usr/lib/locale/om_ET/LC_NUMERIC</div><div class="line">bash    24519 arvon mem    REG    8,2     2454 431855 /usr/lib/locale/en_US.utf8/LC_TIME</div></pre></td></tr></table></figure>
</li>
<li><p>查看文件、设备被哪些进程占用</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> lsof /dev/tty1</span></div><div class="line">COMMAND     PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME</div><div class="line">bash       1770 jian    0u   CHR    4,1      0t0 1045 /dev/tty1</div><div class="line">bash       1770 jian    1u   CHR    4,1      0t0 1045 /dev/tty1</div><div class="line">bash       1770 jian    2u   CHR    4,1      0t0 1045 /dev/tty1</div><div class="line">bash       1770 jian  255u   CHR    4,1      0t0 1045 /dev/tty1</div><div class="line">startx     1845 jian    0u   CHR    4,1      0t0 1045 /dev/tty1</div><div class="line">startx     1845 jian    1u   CHR    4,1      0t0 1045 /dev/tty1</div><div class="line">...</div></pre></td></tr></table></figure>
</li>
<li><p>监控文件系统：指定目录、挂载点，可以看到有哪些进程打开了其下的文件</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> lsof /data/</span></div><div class="line">COMMAND   PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME</div><div class="line">bash    15983 jian  cwd    DIR    8,5     4096 8252 /data/backup</div><div class="line">...</div></pre></td></tr></table></figure>
</li>
<li><p>列出被指定进程名打开的文件</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> lsof -c ssh -c init</span></div><div class="line">COMMAND    PID   USER   FD   TYPE DEVICE SIZE/OFF   NODE NAME</div><div class="line">init         1       root  txt    REG        8,1   124704  917562 /sbin/init</div><div class="line">init         1       root  mem    REG        8,1  1434180 1442625 /lib/i386-linux-gnu/libc-2.13.so</div><div class="line">init         1       root  mem    REG        8,1    30684 1442694 /lib/i386-linux-gnu/librt-2.13.so</div><div class="line">...</div><div class="line">ssh-agent 1528 lakshmanan    1u   CHR        1,3      0t0    4369 /dev/null</div><div class="line">ssh-agent 1528 lakshmanan    2u   CHR        1,3      0t0    4369 /dev/null</div><div class="line">ssh-agent 1528 lakshmanan    3u  unix 0xdf70e240      0t0   10464 /tmp/ssh-sUymKXxw1495/agent.1495</div></pre></td></tr></table></figure>
</li>
<li><p>监控进程：指定进程号，可以查看该进程打开的文件：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> lsof -p 2064</span></div><div class="line">COMMAND  PID USER   FD   TYPE     DEVICE SIZE/OFF    NODE NAME</div><div class="line">firefox 2064 jian  cwd    DIR        8,6     4096 1571780 /home/jian</div><div class="line">firefox 2064 jian  rtd    DIR        8,6     4096       2 /</div><div class="line">firefox 2064 jian  txt    REG        8,6    44224 1985670 /usr/lib/firefox-12.0/firefox</div><div class="line">firefox 2064 jian  mem    REG        8,6 14707012  925361 /usr/share/fonts/chinese/msyhbd.ttf</div><div class="line">firefox 2064 jian  mem    REG        8,6 15067744  925362 /usr/share/fonts/chinese/msyh.ttf</div><div class="line">firefox 2064 jian  mem    REG        8,6 16791251 1701681 /usr/share/fonts/wenquanyi/wqy-zenhei.ttc</div><div class="line">firefox 2064 jian  mem    REG       0,16 67108904   10203 /dev/shm/pulse-shm-3021850167</div><div class="line">...</div></pre></td></tr></table></figure>
</li>
<li><p>当你想要杀掉某个用户所有打开的文件、设备，你可以这样：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">kill -9 `lsof -t -u lakshmanan`</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="监控网络"><a href="#监控网络" class="headerlink" title="监控网络"></a>监控网络</h3><ul>
<li><p>监控网络:查看<code>指定端口有哪些进程在使用</code>（lsof -i 列出所有的打开的网络连接）：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> lsof -i:22</span></div><div class="line">COMMAND  PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME</div><div class="line">sshd    1569 root    3u  IPv4  10303      0t0  TCP *:ssh (LISTEN)</div><div class="line">sshd    1569 root    4u  IPv6  10305      0t0  TCP *:ssh (LISTEN)</div><div class="line">...</div></pre></td></tr></table></figure>
</li>
<li><p>监控网络：列出被某个进程打开所有的网络文件：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">lsof -i -a -p 234</div><div class="line"><span class="meta">#</span><span class="bash">lsof -i <span class="_">-a</span> -c ssh</span></div></pre></td></tr></table></figure>
</li>
<li><p>监控网络：列出所有 tcp、udp 连接：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">lsof -i tcp;</div><div class="line">lsof -i udp;</div></pre></td></tr></table></figure>
</li>
<li><p>列出所有NFS文件</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">lsof -N -u lakshmanan -a</div></pre></td></tr></table></figure>
</li>
<li><p>查看指定网口有哪些进程在使用</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> lsof -i@192.168.1.91</span></div><div class="line">COMMAND     PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME</div><div class="line">skype      1909 jian   54u  IPv4   9116      0t0  TCP 192.168.1.91:40640-&gt;64.4.23.153:40047 (ESTABLISHED)</div><div class="line">pidgin     1973 jian    7u  IPv4   6599      0t0  TCP 192.168.1.91:59311-&gt;hx-in-f125.1e100.net:https   (ESTABLISHED)</div><div class="line">pidgin     1973 jian   13u  IPv4   9260      0t0  TCP 192.168.1.91:54447-&gt;by2msg3010511.phx.gbl:msnp   (ESTABLISHED)</div><div class="line">...</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="监控用户"><a href="#监控用户" class="headerlink" title="监控用户"></a>监控用户</h3><ul>
<li><p>查看指定用戶打开的文件（lsof -u ^lakshmanan 可以排除某用户）：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> lsof -u messagebus</span></div><div class="line">COMMAND    PID       USER   FD   TYPE     DEVICE SIZE/OFF    NODE NAME</div><div class="line">dbus-daem 1805 messagebus  cwd    DIR        8,6     4096       2 /</div><div class="line">dbus-daem 1805 messagebus  rtd    DIR        8,6     4096       2 /</div><div class="line">dbus-daem 1805 messagebus  txt    REG        8,6  1235361 1834948 /usr/bin/dbus-daemon</div><div class="line">dbus-daem 1805 messagebus  mem    REG        8,6   210473 1700647 /lib/libnss_files-2.15.so</div><div class="line">dbus-daem 1805 messagebus  mem    REG        8,6   190145 1700642 /lib/libnss_nis-2.15.so</div><div class="line">dbus-daem 1805 messagebus  mem    REG        8,6   490366 1700636 /lib/libnsl-2.15.so</div><div class="line">...</div></pre></td></tr></table></figure>
</li>
<li><p>查看指定程序打开的文件：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> lsof -c firefox</span></div><div class="line">COMMAND  PID USER   FD   TYPE     DEVICE SIZE/OFF    NODE NAME</div><div class="line">firefox 2064 jian  cwd    DIR        8,6     4096 1571780 /home/jian</div><div class="line">firefox 2064 jian  rtd    DIR        8,6     4096       2 /</div><div class="line">firefox 2064 jian  txt    REG        8,6    44224 1985670 /usr/lib/firefox-12.0/firefox</div><div class="line">firefox 2064 jian  mem    REG        8,6 14707012  925361 /usr/share/fonts/chinese/msyhbd.ttf</div><div class="line">firefox 2064 jian  mem    REG        8,6 15067744  925362 /usr/share/fonts/chinese/msyh.ttf</div><div class="line">firefox 2064 jian  mem    REG        8,6 16791251 1701681 /usr/share/fonts/wenquanyi/wqy-zenhei.ttc</div><div class="line">...</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h3><ul>
<li><p>只有多个查询条件都满足， 用 “-a” 参数，默认是 -o 。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> lsof <span class="_">-a</span> -c bash -u root</span></div><div class="line">COMMAND  PID USER   FD   TYPE DEVICE SIZE/OFF    NODE NAME</div><div class="line">bash    1986 root  cwd    DIR    8,6     4096 1701593 /root/lab</div><div class="line">bash    1986 root  rtd    DIR    8,6     4096       2 /</div><div class="line">bash    1986 root  txt    REG    8,6  1994157 1700632 /bin/bash</div><div class="line">bash    1986 root  mem    REG    8,6  9690800  405214 /usr/lib/locale/locale-archive</div><div class="line">bash    1986 root  mem    REG    8,6   210473 1700647 /lib/libnss_files-2.15.so</div></pre></td></tr></table></figure>
</li>
<li><p><code>关于磁盘空间告警 df -h --max=1 与 du -hx --max=1 显示不一致的问题</code></p>
<blockquote>
<p>最常见的的还是下面这种情况：<br>lsof|grep -i delete<br>看看被删除的文件：有些删了文件，但是进程没 reload，那些空间还是占用的，你可以理解为类似 windows 下的进程句柄没释放的概念吧~ 只是   windows 下如果有文件被进程使用，你一般是删不掉的，而 linux 虽然不做删除限制，但却要等到进程使用完文件才能完全释放，以防止进程奔溃，  这是操作系统对资源的管理差异吧~<br>例如 nginx 会有很多临时文件占用了 /tmp 目录，删掉后，依然占用着空间，<br>此时你可以：<br>pkill -9 nginx &amp;&amp; /etc/init.d/nginx restart</p>
</blockquote>
</li>
</ul>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://www.ibm.com/developerworks/cn/aix/library/au-lsof.html" target="_blank" rel="external">使用lsof查找打开的文件</a><br><a href="http://ylinux.org/blog/article/276" target="_blank" rel="external">实用系统工具lsof</a></p>
<hr>
<p>以上</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[zabbix Too many open files错误]]></title>
      <url>http://arvon.top/2015/08/21/Zabbix_Too_many_open_files%E9%94%99%E8%AF%AF/</url>
      <content type="html"><![CDATA[<h2 id="问题描述：今天看了zabbix监控，又一个agent-unreachable，然后惯例我要去重启agent，but并没有什么卵用。看报错，查log"><a href="#问题描述：今天看了zabbix监控，又一个agent-unreachable，然后惯例我要去重启agent，but并没有什么卵用。看报错，查log" class="headerlink" title="问题描述：今天看了zabbix监控，又一个agent unreachable，然后惯例我要去重启agent，but并没有什么卵用。看报错，查log"></a>问题描述：今天看了zabbix监控，又一个agent unreachable，然后惯例我要去重启agent，but并没有什么卵用。看报错，查log</h2><a id="more"></a>
<p>通过google有了一些眉目,以下摘自<a href="http://www.cnblogs.com/wgkgood/archive/2011/03/02/2066709.html" target="_blank" rel="external">google</a></p>
<blockquote>
<p>linux系统出现Too many open files 错误，这是因为文件描述符大小不够，或者有不正常的网络连接(Socket也是一种特殊的文件)、文件IO没有关闭并释放出文件描述符（文件句柄，File Operator）。<br>使用如下命令查看系统对允许打开最大文件描述符的配置：<br>ulimit -u 查看open files设置<br>ulimit -a 查看所有设置<br>ulimit -u 65535(新的open files 值)修改设置<br>ulimit -n 65536 设置用户可以同时打开的最大文件数（max open files）<br>　<br>如果本参数设置过小，对于并发访问量大的网站，可能会出现too many open files的错误 　<br>使用lsof -p pid [httpd进程的 pid、java的pid]来查看系统中apache进程和java运行时进程当前打开的文件资源，发现两者之和已经接近1024，大于了默认的设置。</p>
<p>修改配置：</p>
<p>修改/etc/security/limits.conf，在文件末加上</p>
<ul>
<li>soft nofile 65536</li>
<li>hard nofile 65536</li>
</ul>
<p>系统级文件描述符极限还可以通过将以下三行添加到 /etc/rc.d/rc.local 启动脚本中来设置：</p>
<ul>
<li>Increase system-wide file descriptor limit.<br>echo 65536 &gt; /proc/sys/fs/file-max<br>echo 65536 &gt; /proc/sys/fs/inode-max</li>
</ul>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[sed 命令实例]]></title>
      <url>http://arvon.top/2015/08/20/sed-%E5%91%BD%E4%BB%A4%E5%AE%9E%E4%BE%8B/</url>
      <content type="html"><![CDATA[<blockquote>
<p>sed命令在很有目的性的针对文本进行操作的时候还是十分有优势的。<br>sed 是一种在线编辑器，它一次处理一行内容。处理时，把当前处理的行存储在临时缓冲区中，称为“模式空间”（pattern space），接着用sed命令处理缓冲区中的内容，处理完成后，把缓冲区的内容送往屏幕。接着处理下一行，这样不断重复，直到文件末尾。文件内容并没有 改变，除非你使用重定向存储输出。Sed主要用来自动编辑一个或多个文件；简化对文件的反复操作；编写转换程序等。</p>
</blockquote>
<a id="more"></a>
<h3 id="sed使用参数"><a href="#sed使用参数" class="headerlink" title="sed使用参数"></a>sed使用参数</h3><ul>
<li>命令概览<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">[root@www ~]# sed [-nefr] [动作]</div><div class="line">选项与参数：</div><div class="line">-n ：使用安静(silent)模式。在一般 sed 的用法中，所有来自 STDIN 的数据一般都会被列出到终端上。但如果加上 -n 参数后，则只有经过sed   特殊处理的那一行(或者动作)才会被列出来。</div><div class="line">-e ：直接在命令列模式上进行 sed 的动作编辑；</div><div class="line">-f ：直接将 sed 的动作写在一个文件内， -f filename 则可以运行 filename 内的 sed 动作；</div><div class="line">-r ：sed 的动作支持的是延伸型正规表示法的语法。(默认是基础正规表示法语法)</div><div class="line">-i ：直接修改读取的文件内容，而不是输出到终端。</div><div class="line">动作说明： [n1[,n2]]function</div><div class="line">n1, n2 ：不见得会存在，一般代表『选择进行动作的行数』，举例来说，如果我的动作是需要在 10 到 20 行之间进行的，则『 10,20[动作行为]   』</div><div class="line">function：</div><div class="line">a ：新增， a 的后面可以接字串，而这些字串会在新的一行出现(目前的下一行)～</div><div class="line">c ：取代， c 的后面可以接字串，这些字串可以取代 n1,n2 之间的行！</div><div class="line">d ：删除，因为是删除啊，所以 d 后面通常不接任何咚咚；</div><div class="line">i ：插入， i 的后面可以接字串，而这些字串会在新的一行出现(目前的上一行)；</div><div class="line">p ：列印，亦即将某个选择的数据印出。通常 p 会与参数 sed -n 一起运行～</div><div class="line">s ：取代，可以直接进行取代的工作哩！通常这个 s 的动作可以搭配正规表示法！例如 1,20s/old/new/g 就是啦！</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><ul>
<li><p>将/etc/passwd内容列出，同事，将2-5行<code>删除</code></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">arvon@Mo:~&gt; nl /etc/passwd | sed '2, 5d'</div><div class="line">   1	at:x:25:25:Batch jobs daemon:/var/spool/atjobs:/bin/bash</div><div class="line">   6	gdm:x:107:112:Gnome Display Manager daemon:/var/lib/gdm:/bin/false</div><div class="line">   7	haldaemon:x:101:102:User for haldaemon:/var/run/hald:/bin/false</div><div class="line">   8	lp:x:4:7:Printing daemon:/var/spool/lpd:/bin/bash</div><div class="line"><span class="meta">#</span><span class="bash">只要删除第 2 行</span></div><div class="line">nl /etc/passwd | sed '2d'</div><div class="line"><span class="meta">#</span><span class="bash">删除3至最后一行</span></div><div class="line">nl /etc/passwd | sed '3,$d'</div></pre></td></tr></table></figure>
</li>
<li><p>在第二行后(亦即是加在第三行)<code>加上</code>『drink tea?』字样！</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">arvon@Mo:~&gt;  nl /etc/passwd | sed '2a drink tea'</div><div class="line">   1	at:x:25:25:Batch jobs daemon:/var/spool/atjobs:/bin/bash</div><div class="line">   2	bin:x:1:1:bin:/bin:/bin/bash</div><div class="line">drink tea</div><div class="line">   3	daemon:x:2:2:Daemon:/sbin:/bin/bash</div><div class="line"><span class="meta">#</span><span class="bash">那如果是要在第二行前</span></div><div class="line">nl /etc/passwd | sed '2i drink tea'</div></pre></td></tr></table></figure>
</li>
<li><p>如果是要<code>增加两行</code>以上，在第二行后面加入两行字，例如『Drink tea or …..』与『drink beer?』</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[root@www ~]# nl /etc/passwd | sed '2a Drink tea or ......\</div><div class="line"><span class="meta">&gt;</span><span class="bash"> drink beer ?<span class="string">'</span></span></div><div class="line">1 root:x:0:0:root:/root:/bin/bash</div><div class="line">2 bin:x:1:1:bin:/bin:/sbin/nologin</div><div class="line">Drink tea or ......</div><div class="line">drink beer ?</div><div class="line">3 daemon:x:2:2:daemon:/sbin:/sbin/nologin</div><div class="line">.....(后面省略).....</div></pre></td></tr></table></figure>
</li>
<li><p>将第2-5行的内容<code>取代</code>成为『No 2-5 number』呢？</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">arvon@Mo:~&gt; nl /etc/passwd | sed '2,5c No 2-5 number'</div><div class="line">   1	at:x:25:25:Batch jobs daemon:/var/spool/atjobs:/bin/bash</div><div class="line">No 2-5 number</div><div class="line">   6	gdm:x:107:112:Gnome Display Manager daemon:/var/lib/</div><div class="line">	 ...</div></pre></td></tr></table></figure>
</li>
<li><p>仅<code>列出</code> /etc/passwd 文件内的第 5-7 行</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">arvon@Mo:~&gt; cat /etc/passwd | sed -n '5,7p'</div><div class="line">games:x:12:100:Games account:/var/games:/bin/bash</div><div class="line">gdm:x:107:112:Gnome Display Manager daemon:/var/lib/gdm:/bin/false</div><div class="line">haldaemon:x:101:102:User for haldaemon:/var/run/hald:/bin/false</div></pre></td></tr></table></figure>
</li>
<li><p><code>搜索</code> /etc/passwd有root关键字的行</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">arvon@Mo:~&gt; nl /etc/passwd | sed '/root/p'</div><div class="line">   1	at:x:25:25:Batch jobs daemon:/var/spool/atjobs:/bin/bash</div><div class="line">   2	bin:x:1:1:bin:/bin:/bin/bash</div><div class="line">   3	daemon:x:2:2:Daemon:/sbin:/bin/bash</div><div class="line">   4	ftp:x:40:49:FTP account:/srv/ftp:/bin/bash</div><div class="line">   5	games:x:12:100:Games account:/var/games:/bin/bash</div><div class="line">   6	gdm:x:107:112:Gnome Display Manager daemon:/var/lib/gdm:/bin/false</div><div class="line">   7	haldaemon:x:101:102:User for haldaemon:/var/run/hald:/bin/false</div><div class="line">   8	lp:x:4:7:Printing daemon:/var/spool/lpd:/bin/bash</div><div class="line">   9	mail:x:8:12:Mailer daemon:/var/spool/clientmqueue:/bin/false</div><div class="line">   ...</div><div class="line"><span class="meta">#</span><span class="bash">如果root找到，除了输出所有行，还会输出匹配行。</span></div></pre></td></tr></table></figure>
</li>
<li><p>使用-n的时候将<code>只打印包含模板的行</code>。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">arvon@Mo:~&gt; nl /etc/passwd | sed -n '/root/p'</div><div class="line">  19	root:x:0:0:root:/root:/bin/bash</div></pre></td></tr></table></figure>
</li>
<li><p><code>删除</code>/etc/passwd所有包含root的行，其他行输出</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">arvon@Mo:~&gt; nl /etc/passwd | sed '/root/d'</div><div class="line">   1	at:x:25:25:Batch jobs daemon:/var/spool/atjobs:/bin/bash</div><div class="line">   2	bin:x:1:1:bin:/bin:/bin/bash</div><div class="line">   3	daemon:x:2:2:Daemon:/sbin:/bin/bash</div><div class="line">   4	ftp:x:40:49:FTP account:/srv/ftp:/bin/bash</div><div class="line">   5	games:x:12:100:Games account:/var/games:/bin/bash</div><div class="line">   ...</div></pre></td></tr></table></figure>
</li>
<li><p>搜索/etc/passwd,找到root对应的行，执行后面花括号中的一组命令，<code>每个命令之间用分号分隔，这里把bash替换为blueshell</code>，再输出这行：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">arvon@Mo:~&gt; nl /etc/passwd | sed -n '/root/&#123;s/bash/blueshell/;p&#125;'</div><div class="line">  19	root:x:0:0:root:/root:/bin/blueshell</div></pre></td></tr></table></figure>
</li>
<li><p>如果只<code>替换</code>/etc/passwd的第一个bash关键字为blueshell，就<code>退出</code></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">arvon@Mo:~&gt; nl /etc/passwd | sed -n '/bash/&#123;s/bash/blueshell/;p;q&#125;'</div><div class="line">   1	at:x:25:25:Batch jobs daemon:/var/spool/atjobs:/bin/blueshell</div></pre></td></tr></table></figure>
</li>
<li><p><code>获取主机ip</code></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">arvon@Mo:~&gt; /sbin/ifconfig eth0 | grep 'inet addr' | sed 's/^.*addr://g' | sed 's/Bcast.*$//g'</div><div class="line">192.168.138.130</div></pre></td></tr></table></figure>
</li>
<li><p>一条sed命令，删除/etc/passwd第三行到末尾的数据，并把bash替换为blueshell</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">arvon@Mo:~&gt; nl /etc/passwd | sed -e '3,$d' -e 's/bash/blueshell/'</div><div class="line">   1	at:x:25:25:Batch jobs daemon:/var/spool/atjobs:/bin/blueshell</div><div class="line">   2	bin:x:1:1:bin:/bin:/bin/blueshell</div></pre></td></tr></table></figure>
</li>
<li><p><code>直接修改</code>文件内容</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">利用 sed 将 regular_express.txt 内每一行结尾若为 . 则换成 !</span></div><div class="line">[root@www ~]# sed -i 's/\.$/\!/g' regular_express.txt</div></pre></td></tr></table></figure>
</li>
<li><p>利用 sed <code>直接</code>在 regular_express.txt 最后一行加入『# This is a test』</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">arvon@Mo:~/arvon_work&gt; sed -i '$a # THis is a test' hello</div><div class="line">arvon@Mo:~/arvon_work&gt; cat hello</div><div class="line">echo</div><div class="line">arvon</div><div class="line">is</div><div class="line">a</div><div class="line">good</div><div class="line">nor</div><div class="line">and</div><div class="line">or</div><div class="line"><span class="meta">#</span><span class="bash"> THis is a <span class="built_in">test</span></span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="参考地址"><a href="#参考地址" class="headerlink" title="参考地址"></a>参考地址</h3><p><a href="http://www.cnblogs.com/ggjucheng/archive/2013/01/13/2856901.html" target="_blank" rel="external">看的博客</a><br><a href="http://vbird.dic.ksu.edu.tw/linux_basic/0330regularex_2.php#sed" target="_blank" rel="external">鸟哥私房菜</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Perl语言入门]]></title>
      <url>http://arvon.top/2015/08/17/Perl%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A82/</url>
      <content type="html"><![CDATA[<p><strong>更新记录</strong><br>2015/08/17    拆开来记，start with foreach<br>2015/09/01 更新到子程序，最近有点懒惰了</p>
<a id="more"></a>
<p>##结构</p>
<p>###foreach控制结构</p>
<ul>
<li>Example one<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/perl</span></div><div class="line"><span class="keyword">use</span> <span class="number">5.010</span>;</div><div class="line"><span class="keyword">foreach</span> $rock (<span class="keyword">qw</span>/ <span class="keyword">my</span> girlfriend is Mo /)&#123;</div><div class="line">    <span class="keyword">print</span> <span class="string">"One word is named $rock\n"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>arvon@Mo:~/arvon_perl&gt; perl foreach_one.pl<br>One word is named my<br>One word is named girlfriend<br>One word is named is<br>One word is named Mo</p>
</blockquote>
<ul>
<li>Example two<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/perl</span></div><div class="line"><span class="keyword">use</span> <span class="number">5.010</span>;</div><div class="line">@rocks = <span class="keyword">qw</span>/ hello world Mo /;</div><div class="line"><span class="keyword">foreach</span> $rock(@rocks)&#123;</div><div class="line">    $rock = <span class="string">"\t$rock"</span>;</div><div class="line">    $rock .= <span class="string">"\n"</span>;</div><div class="line">    <span class="keyword">print</span> <span class="string">"\$rock now is $rock"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>arvon@Mo:~/arvon_perl&gt; perl foreach_two.pl<br>$rock now is     hello<br>$rock now is     world<br>$rock now is     Mo</p>
</blockquote>
<p>###Perl的默认变量$</p>
<ul>
<li>Example one<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/perl</span></div><div class="line"><span class="keyword">use</span> <span class="number">5.010</span>;</div><div class="line"><span class="keyword">foreach</span> (<span class="number">1</span>..<span class="number">10</span>)&#123;    <span class="comment">#使用了默认变量$_</span></div><div class="line">    <span class="keyword">print</span> <span class="string">"I can count to $_!\n"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>arvon@Mo:~/arvon_perl&gt; perl variable_one.pl<br>I can count to 1!<br>I can count to 2!<br>I can count to 3!<br>I can count to 4!<br>I can count to 5!<br>I can count to 6!<br>I can count to 7!<br>I can count to 8!<br>I can count to 9!<br>I can count to 10!</p>
</blockquote>
<p>###reverse操作符</p>
<ul>
<li>reverse操作符会读取列表的值，并按相反的次序返回该列表。<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/perl</span></div><div class="line"><span class="keyword">use</span> <span class="number">5.010</span>;</div><div class="line">@fred = <span class="number">6</span>..<span class="number">10</span>;</div><div class="line">@barney = <span class="keyword">reverse</span>(@fred);</div><div class="line">@wilma = <span class="keyword">reverse</span> <span class="number">6</span>..<span class="number">10</span>;</div><div class="line">@fred = <span class="keyword">reverse</span> @fred;</div><div class="line"><span class="keyword">print</span> <span class="string">"@fred, @barney, @wilma, \n"</span>;</div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>arvon@Mo:~/arvon_perl&gt; perl reverse_array.pl<br>10 9 8 7 6, 10 9 8 7 6, 10 9 8 7 6,</p>
</blockquote>
<p>###sort操作符</p>
<ul>
<li>其实啊，就是排序<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/perl</span></div><div class="line"><span class="keyword">use</span> <span class="number">5.010</span>;</div><div class="line">@rocks = <span class="keyword">qw</span>/ happy birthday to Mo /;</div><div class="line">@sorted = <span class="keyword">sort</span>(@rocks);</div><div class="line">@back = <span class="keyword">reverse</span> <span class="keyword">sort</span> @rocks;</div><div class="line">@rocks = <span class="keyword">sort</span> @rocks;</div><div class="line">@numbers = <span class="keyword">sort</span> <span class="number">97</span>..<span class="number">102</span>;</div><div class="line"><span class="keyword">print</span> <span class="string">"</span></div><div class="line">       @rocks \</div><div class="line">       @sorted\</div><div class="line">       @back\</div><div class="line">       @rocks\</div><div class="line">       @numbers";</div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>arvon@Mo:~/arvon_perl&gt; perl sort_string.pl</p>
</blockquote>
<pre><code>Mo birthday happy to
Mo birthday happy to
to happy birthday Mo
Mo birthday happy to
100 101 102 97 98 99
</code></pre><p>###each操作符</p>
<ul>
<li>每次对数组调用each，会返回数组中下一个元素所对应的两个值–该元素的索引以及该元素的值<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/perl</span></div><div class="line"><span class="keyword">use</span> <span class="number">5.012</span>;</div><div class="line"><span class="keyword">my</span> @rocks = <span class="keyword">qw</span>/ bedrock slate rubble granite /;</div><div class="line"><span class="keyword">while</span>( <span class="keyword">my</span>( $index, $value ) = <span class="keyword">each</span> @rocks)&#123;</div><div class="line">    <span class="keyword">say</span> <span class="string">"$index: $value"</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">foreach</span> $index(<span class="number">0</span> .. $#rocks )&#123;</div><div class="line">    <span class="keyword">print</span> <span class="string">"$index: $rocks[$index]\n"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="子程序"><a href="#子程序" class="headerlink" title="子程序"></a>子程序</h2><ul>
<li>子程序名称<br>子程序名称以字母、数字、下划线组成，不能以数字开头，子程序名称属于独立的名字空间</li>
</ul>
<h3 id="定义子程序"><a href="#定义子程序" class="headerlink" title="定义子程序"></a>定义子程序</h3><ul>
<li>定义子程序用sub、子程序名以及花括号封闭起来的代码块，for example：<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">sub</span> <span class="title">marine</span> </span>&#123;</div><div class="line">    $n += <span class="number">1</span>; <span class="comment">#全局变量$n</span></div><div class="line">    <span class="keyword">print</span> <span class="string">"Hello, sailor number $n!\n"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="调用子程序"><a href="#调用子程序" class="headerlink" title="调用子程序"></a>调用子程序</h3><ul>
<li>在任意表达式中使用程序名（前面加上与号）来调用它<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/perl</span></div><div class="line"><span class="function"><span class="keyword">sub</span> <span class="title">marine</span></span>&#123;</div><div class="line">    $n += <span class="number">1</span>;</div><div class="line">    <span class="keyword">print</span> <span class="string">"Hello, sailor number $n!\n"</span>;</div><div class="line">&#125;</div><div class="line">&amp;marine;    <span class="comment">#打印hello，sailor number 1！</span></div><div class="line">&amp;marine;    <span class="comment">#打印hello，sailor number 2！</span></div><div class="line">&amp;marine;    <span class="comment">#打印hello，sailor number 3！</span></div><div class="line">&amp;marine;    <span class="comment">#打印hello，sailor number 4！</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><ul>
<li>任何的perl子程序都有返回值，但不是所有的返回值都是有用的，Larry将之简化，在子程序的执行过程中，它会不断进行运算，而最后一次运算的结果（不管是什么）都会被自动当成子程序的返回值。<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/perl</span></div><div class="line">$fred = <span class="number">2</span>;</div><div class="line">$barney = <span class="number">3</span>;</div><div class="line">$wilma = &amp;sum_of_fred_and_barney;</div><div class="line"><span class="function"><span class="keyword">sub</span> <span class="title">sum_of_fred_and_barney</span></span>&#123;</div><div class="line">    <span class="keyword">print</span> <span class="string">"Hey, you called the sum_of_fred_and_barney subroutine!\n"</span>;</div><div class="line">    $fred + $barney;</div><div class="line">&#125;</div><div class="line"><span class="comment">#&amp;sum_of_fred_and_barney;</span></div><div class="line">$betty = <span class="number">3</span> * &amp;sum_of_fred_and_barney;</div><div class="line"><span class="keyword">print</span> <span class="string">"\$wilma is $wilma.\n"</span>;</div><div class="line"><span class="keyword">print</span> <span class="string">"\$betty is $betty.\n"</span>;</div></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/perl</span></div><div class="line">$fred = <span class="number">2</span>;</div><div class="line">$barney = <span class="number">3</span>;</div><div class="line"><span class="function"><span class="keyword">sub</span> <span class="title">larger_of_fred_or_barney</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> ($fred &gt; $barney)&#123;</div><div class="line">        $fred;</div><div class="line">        <span class="keyword">print</span> <span class="string">"\$fred is $fred\n"</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        $barney;</div><div class="line">        <span class="keyword">print</span> <span class="string">"\$barney is $barney\n"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">&amp;larger_of_fred_or_barney;</div></pre></td></tr></table></figure>
<h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><ul>
<li>要传递参数列表到子程序里，只要在子程序调用的后面加上被括号圈引得列表表达式就可以了，for example：<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$n = &amp;max(<span class="number">10</span>, <span class="number">15</span>);</div></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/perl</span></div><div class="line"><span class="function"><span class="keyword">sub</span> <span class="title">max</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> ($_[<span class="number">0</span>] &gt; $_[<span class="number">1</span>])&#123;</div><div class="line">        $_[<span class="number">0</span>];</div><div class="line">        <span class="keyword">print</span> <span class="string">"\$_[0] is $_[0]\n"</span>;</div><div class="line">    &#125;<span class="keyword">else</span> &#123;</div><div class="line">        $_[<span class="number">1</span>];</div><div class="line">        <span class="keyword">print</span> <span class="string">"\$_[1] is $_[1]\n"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">$n = &amp;max(<span class="number">3</span>, <span class="number">4</span>);</div></pre></td></tr></table></figure>
<h4 id="子程序中的私有变量"><a href="#子程序中的私有变量" class="headerlink" title="子程序中的私有变量"></a>子程序中的私有变量</h4><ul>
<li>默认情况下，perl里的所有变量都是全局变量，即在程序的任何地方都可以访问他们。随时可以借助my操作符来创建私有变量（lexical variable）<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/perl</span></div><div class="line"><span class="function"><span class="keyword">sub</span> <span class="title">max</span> </span>&#123;</div><div class="line">    <span class="keyword">my</span>($m, $n);</div><div class="line">    ($m, $n_) = @_;</div><div class="line">    <span class="keyword">if</span> ($m &gt; $n)&#123; $m &#125; <span class="keyword">else</span> &#123; $n &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="变长的参数列表"><a href="#变长的参数列表" class="headerlink" title="变长的参数列表"></a>变长的参数列表</h4><ul>
<li>打印最大值，“高水线（high-watermark）”算法<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/perl</span></div><div class="line">$maximum = &amp;max(<span class="number">3</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">4</span>, <span class="number">6</span>);</div><div class="line"><span class="function"><span class="keyword">sub</span> <span class="title">max</span></span>&#123;</div><div class="line">    <span class="keyword">my</span>($max_so_far) = <span class="keyword">shift</span> @_;</div><div class="line">    <span class="keyword">foreach</span> (@_)&#123;</div><div class="line">        <span class="keyword">if</span> ($_ &gt; $max_so_far)&#123;</div><div class="line">            $max_so_far = $_;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    $max_so_far;</div><div class="line">    <span class="keyword">print</span> <span class="string">"Max is $max_so_far\n"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="空参数列表"><a href="#空参数列表" class="headerlink" title="空参数列表"></a>空参数列表</h4><h4 id="关于词法（my）变量"><a href="#关于词法（my）变量" class="headerlink" title="关于词法（my）变量"></a>关于词法（my）变量</h4><ul>
<li>词法变量可以用在任何语句块内，而不仅限于子程序语句块。比如说，它可以在if、while或foreach的语句块里使用</li>
<li><p>求次方</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/perl</span></div><div class="line"><span class="keyword">foreach</span> (<span class="number">1</span>..<span class="number">10</span>)&#123;</div><div class="line">    <span class="keyword">my</span>($square) = $_ * $_;</div><div class="line">    <span class="keyword">print</span> <span class="string">"$_ squared is $square.\n"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>my操作符不加括号时，只能用来声明单个词法变量</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">my</span> $fred, $barney;  <span class="comment">#只声明了fred这一个变量</span></div><div class="line"><span class="keyword">my</span>（$fred, $barney); <span class="comment">#两个都声明了</span></div></pre></td></tr></table></figure>
</li>
<li><p>在日常perl编程中，你最好对每个新变量都使用my声明，最好对每个新变量都使用my声明，让它保持在自己所在的词法作用域内。</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/perl</span></div><div class="line"><span class="keyword">foreach</span> <span class="keyword">my</span> $rock (<span class="keyword">qw</span>/bedrock slate lava /)&#123;</div><div class="line">    <span class="keyword">print</span> <span class="string">"One rock is $rock.\n"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="use-strict编译指令（pragma）"><a href="#use-strict编译指令（pragma）" class="headerlink" title="use strict编译指令（pragma）"></a>use strict编译指令（pragma）</h3><ul>
<li><p>告诉perl我愿意接受更严格的限制使用use strict这个编译指令放在程序开头</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">use</span> strict;</div></pre></td></tr></table></figure>
</li>
<li><p>自perl5.12开始，如果使用编译指令指定最低perl版本号的话，就相当于隐式打开了约束指令</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">use</span> <span class="number">5.012</span>;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="return操作符"><a href="#return操作符" class="headerlink" title="return操作符"></a>return操作符</h3><ul>
<li>return操作符可以让子程序执行到一半的时候停止执行<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/perl</span></div><div class="line"><span class="keyword">use</span> strict;</div><div class="line"><span class="keyword">my</span> @names = <span class="keyword">qw</span>/ fred barney betty dino wilma pebbles bamm-bam /;</div><div class="line"><span class="keyword">my</span> $result = &amp;which_element_is(<span class="string">"dino"</span>, @names);</div><div class="line"><span class="function"><span class="keyword">sub</span> <span class="title">which_element_is</span></span>&#123;</div><div class="line">    <span class="keyword">my</span>($what, @array) = @_;</div><div class="line">    <span class="keyword">foreach</span> (<span class="number">0</span>..$#array)&#123;</div><div class="line">        <span class="keyword">if</span> ($what eq $array[$_])&#123;</div><div class="line">            <span class="keyword">return</span> $_;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    -<span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Perl语言入门（6th）课后习题]]></title>
      <url>http://arvon.top/2015/08/12/Perl%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%EF%BC%886th%EF%BC%89%E8%AF%BE%E5%90%8E%E4%B9%A0%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>个人感觉课后习题单独分出来比较方便，这里有可能的话会多放些例子，ok，go</p>
<a id="more"></a>
<p>###Chapter one</p>
<ol>
<li>计算半径为12.5的园的周长，可自行输入，小于0输出为0<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/perl</span></div><div class="line"><span class="keyword">print</span> <span class="string">"Please input a number: "</span>;</div><div class="line">$inputNumber = &lt;STDIN&gt;;</div><div class="line">$perimeter = $inputNumber * <span class="number">2</span> * <span class="number">3.14</span>;</div><div class="line"><span class="keyword">print</span> <span class="string">"The perimeter is $perimeter\n"</span>;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>###Chapter two</p>
<ol>
<li><p>半径12.5圆，求周长</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/perl</span></div><div class="line"><span class="keyword">use</span> <span class="number">5.010</span>;</div><div class="line">$pi = <span class="number">3.141592654</span>;</div><div class="line">$circ = <span class="number">2</span> * $pi * <span class="number">12.5</span>;</div><div class="line"><span class="keyword">print</span> <span class="string">"The circumference of a circle of radius 12.5 is $circ.\n"</span>;</div></pre></td></tr></table></figure>
</li>
<li><p>交互算周长</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/perl -w</span></div><div class="line">$pi = <span class="number">3.141592654</span>;</div><div class="line"><span class="keyword">print</span> <span class="string">"What is the radius?\n"</span>;</div><div class="line"><span class="keyword">chomp</span>($radius = &lt;STDIN&gt;);</div><div class="line">$circ = <span class="number">2</span> * $pi * $radius;</div><div class="line"><span class="keyword">print</span> <span class="string">"The circumference of a circlee of radius $radius is $circ.\n"</span>;</div></pre></td></tr></table></figure>
</li>
<li><p>加验证的交互算周长</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/perl</span></div><div class="line">$pi = <span class="number">3.1415926</span>;</div><div class="line"><span class="keyword">print</span> <span class="string">"What is the radius?"</span>;</div><div class="line"><span class="keyword">chomp</span>($radius = &lt;STDIN&gt;);</div><div class="line">$circ = <span class="number">2</span> * $pi * $radius;</div><div class="line"><span class="keyword">if</span> ($radius &lt; <span class="number">0</span>)&#123;</div><div class="line">    $circ = <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">print</span> <span class="string">"The circumference of a circle of radius $radius is $circ.\n"</span>;</div></pre></td></tr></table></figure>
</li>
<li><p>交互求和</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/perl</span></div><div class="line"><span class="keyword">print</span> <span class="string">"Enter first number: "</span>;</div><div class="line"><span class="keyword">chomp</span>($one = &lt;STDIN&gt;);</div><div class="line"><span class="keyword">print</span> <span class="string">"Enter second number: "</span>;</div><div class="line"><span class="keyword">chomp</span>($two = &lt;STDIN&gt;);</div><div class="line">$result = $one + $two;</div><div class="line"><span class="keyword">print</span> <span class="string">"The result is $result.\n"</span></div></pre></td></tr></table></figure>
</li>
<li><p>字符串重复术，中间的是小写字母x</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/perl</span></div><div class="line"><span class="keyword">print</span> <span class="string">"Enter a string: "</span>;</div><div class="line">$str = &lt;STDIN&gt;;</div><div class="line"><span class="keyword">print</span> <span class="string">"Enter a number of times: "</span>;</div><div class="line"><span class="keyword">chomp</span>($num = &lt;STDIN&gt;);</div><div class="line">$result = $str <span class="keyword">x</span> $num;</div><div class="line"><span class="keyword">print</span> <span class="string">"The result is:\n$result"</span>;</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="Chapter-three"><a href="#Chapter-three" class="headerlink" title="Chapter three"></a>Chapter three</h3><ol>
<li><p>将输入的字符串倒序打印</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/binj/perl</span></div><div class="line"><span class="keyword">use</span> <span class="number">5.010</span>;</div><div class="line"><span class="keyword">print</span> <span class="string">"Enter some lines, then press Ctrl-D:\n"</span>;<span class="comment">#or try Ctrl-Z</span></div><div class="line">@lines = &lt;STDIN&gt;;</div><div class="line">@reverse_lines = <span class="keyword">reverse</span> @lines;</div><div class="line"><span class="keyword">print</span> <span class="string">"@reverse_lines"</span>;</div></pre></td></tr></table></figure>
</li>
<li><p>键入数字，输出对应的name</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/perl</span></div><div class="line">@names = <span class="keyword">qw</span>/ guo qiu arvon mo love /;</div><div class="line"><span class="keyword">print</span> <span class="string">"Enter some number from 1 to 5, one per line, then press Ctrl-D:\n"</span>;</div><div class="line"><span class="comment">#print @names;</span></div><div class="line"><span class="keyword">chomp</span>(@number = &lt;STDIN&gt;);</div><div class="line"><span class="comment">#print "\@number is @number\n";</span></div><div class="line"><span class="keyword">foreach</span> $num (@number)&#123;</div><div class="line"><span class="comment">#    print "now \$num is $num";</span></div><div class="line">    <span class="keyword">print</span> <span class="string">"$names[ $num -1 ]\n"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>注释的是在一行输入输入的，没注释的分行显示</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/perl</span></div><div class="line"><span class="comment">#chomp(@lines = &lt;STDIN&gt;);</span></div><div class="line"><span class="comment">#@sorted = sort @lines;</span></div><div class="line"><span class="comment">#print "@sorted\n";</span></div><div class="line"><span class="keyword">print</span> <span class="keyword">sort</span> &lt;STDIN&gt;;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>###小代码块</p>
<ul>
<li>检查参数个数是否正确<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">sub</span> <span class="title">max</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (@_ != <span class="number">2</span>)&#123;</div><div class="line">        <span class="keyword">print</span> <span class="string">"WAENING! &amp;max should get exactly two argumnets!\n"</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment"># follow</span></div><div class="line">    <span class="comment">#...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Perl语言入门（一）]]></title>
      <url>http://arvon.top/2015/08/10/Prel%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p><strong>更新记录：</strong></p>
<ul>
<li>2015/08/10 DonePage45</li>
<li>2015/08/11 DonePage68</li>
<li>2015/08/17 Read list and array, do a new one.</li>
</ul>
<a id="more"></a>
<p>##前言杂记</p>
<ul>
<li>适合管理员使用的语言</li>
<li>Arvon’s读书笔记</li>
<li><p>sixth edtion for learning perl</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">use</span> <span class="number">5.014</span>;<span class="comment">#该脚本需要在Perl 5.14或更高版本才能正常运行</span></div><div class="line">perl -v<span class="comment">#查看perl的版本</span></div></pre></td></tr></table></figure>
</li>
<li><p>Hello，World</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/perl</span></div><div class="line"><span class="keyword">printf</span> <span class="string">"Hello, world!\n"</span>;</div><div class="line"><span class="keyword">use</span> <span class="number">5.010</span>;</div><div class="line"><span class="keyword">say</span> <span class="string">"Hello, world!"</span>;</div></pre></td></tr></table></figure>
</li>
<li><p>替换字符演示</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/perl</span></div><div class="line">@lines = <span class="string">`perldoc -u -fatan2`</span>;</div><div class="line"><span class="keyword">foreach</span> (@lines)&#123;</div><div class="line">    <span class="regexp">s/\w&lt;([^&gt;]+)&gt;/\U$1/g</span>;</div><div class="line">        <span class="keyword">print</span>;</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>##标量数据</p>
<ul>
<li>标量数据是Perl里面最简单的一种数据类型。对大部分标量来说，它要么是数字（如123或3.25e23），要<br>么是由字符组成的序列（如hello）。对Perl来说，数字和字符串大多情况下是可以在内部转换的。可以用操<br>作符对标量进行操作（如加法或字符串连接），产生的结果通常也是一个标量。标量可以存储在标量变量里，<br>也可以从文件和设备读取或写入这些位置。</li>
</ul>
<p>###数字</p>
<p>####所有数字的内部格式都相同</p>
<ul>
<li>Perl内部，总是按“双精度浮点数（double-precision floating-point）”的要求来保存数字并进行运算<br>的。也就是说，Perl内部并不存在整数值–程序中用到的整数型常量会被转换成等效的浮点数值。</li>
</ul>
<p>####浮点数直接量</p>
<ul>
<li>直接量（literal）是指某个数字在Perl源代码中的写法。直接量并非运算结果，也不是I/O（输入/输出）<br>操作的结果，它只是直接键入源程序代码中的数据。</li>
<li>Perl浮点数直接量的写法，小数点与前置的正负号都是可选的，数字后面也可以加上用“e”表示的10的次方<br>表示符（即指数表示法）。</li>
<li>如下列写法<blockquote>
<p>1.25<br>255.000<br>255.0<br>7.25e45    #7.25乘以10的45次方，其中e可以大写<br>-6.5e123</p>
</blockquote>
</li>
</ul>
<p>####整数直接量</p>
<ul>
<li>整数直接量：<blockquote>
<p>0<br>1234<br>-4321<br>41023789873    #可以写成41_023_789_873,Perl允许在整数直接量插入下划线，方便辨认</p>
</blockquote>
</li>
</ul>
<p>####非十进制的整数直接量</p>
<ul>
<li>Perl语言和其他许多程序语言一样，允许使用十进制（decimal）意外的其他进制表示数字。八进制（octal）<br>直接量以0开头，十六进制（hexadecimal）直接量以ox开头，二进制（binary）直接量以ob开头。十六进制的<br>A到F（可以写成小写的a到f，来代表十进制的10到15）。例如<blockquote>
<p>o377    #八进制的377，等于十进制的255<br>0xff    #十六进制的FF，等于十进制的255<br>ob11111111    #二进制的，等于十进制的255</p>
</blockquote>
</li>
<li>这三个数字虽然看起来不同，但对Perl来说都是同一个数字</li>
</ul>
<p>####数字操作符</p>
<ul>
<li>Perl提供了各种常见的数字操作符，如加、减、乘、除、取模、次方。例如：<blockquote>
<p>2+3<br>5.1-2.4<br>3<em>12<br>14/2<br>10.2/0.3<br>10/3<br>10%3    #取模，结果为1<br>2*</em>3    #次方，结果为8</p>
</blockquote>
</li>
</ul>
<p>###字符串</p>
<ul>
<li>字符串就是一个字符序列，如hello。字符串可以各种字符任意组合而成。最短的字符串不包含任何字符，也<br>叫做空字符串。最长的字符串的长度没有限制。这符合Perl遵守的“无内置限制（nobuilt-inlimits）”的原则。<br>字符串通常是由可输出地字母、数字及标点符号组成，其范围介于ASCII编码的32到126之间。由于字符串可以<br>包含任何字符，所以可用它来创建、扫描或操控二进制数据，这是许多其他工具语言望尘莫及的。例如：你可以<br>将一个图形文件或编译过的可执行文件读进Perl的字符串变变量，修改它的内容再写回去。</li>
<li><p>Perl完全支持Unicode，所以在字符串中可以使用任意一个合法的Unicode字符。不过由于Perl的历史原因<br>它不会自动将程序源代码当做Unicode编码的文本读入，所以如果你想要在源代码中使用Unicode书写直接量<br>的话，需手工加上utf8编译指令：</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">use</span> utf8;</div></pre></td></tr></table></figure>
</li>
<li><p>和数字一样，字符串也有直接量记法，也就是Perl程序中字符串的书写方式。包括单引号内的字符串和双引号<br>内的字符串。</p>
</li>
</ul>
<p>####单引号内的字符串直接量</p>
<ul>
<li>除了单引号和反斜线之外，单引号内所有的字符串都代表他们自己。<blockquote>
<p>‘fred’<br>‘hello’<br>‘’<br>‘#$@%’<br>‘Don\’t let me go!’<br>‘the last character is a backslash:\‘<br>‘\’\‘    #单引号后面紧接着反斜线<br>‘hi\n’    #单引号内的\n并不是换行符，而是表示字面上的两个字符</p>
</blockquote>
</li>
</ul>
<p>####双引号内的字符串直接量</p>
<ul>
<li>双引号中的反斜线更为强大<blockquote>
<p>“hi\n”        #换行符<br>“love\tyou”        #水平制表符<br>“\r”    #回车<br>“\f”    #换页符<br>“\b”    #退格<br>“\e”    #Esc（ASCII编码的转义字符）<br>“\cC”    #控制符，就是COntrol键的代码（此例表示同时按下Ctrl和c键的返回码）<br>“\l”    #将下个字母转换为小写<br>“\L”    #将它后面的所有字母都转换为小写的，直到\E为止<br>“\u”    #将下个字符转换为大写<br>“\U”    #将它后面所有的字母都转换为大写，直到\E为止<br>“\E”    #结束\L、\U和\Q开始的作用范围</p>
</blockquote>
</li>
</ul>
<p>####字符串操作符</p>
<ul>
<li>字符串可以用.操作符链接起来<blockquote>
<p>“hello”.”world”    #等同于”helloworld”<br>“hello” . ‘ ‘ . “world”    #等同于’hello world’<br>‘hello world’ . “\n”    #等同于”hello world\n”</p>
</blockquote>
</li>
<li><code>注意</code>：链接运算符必须显示使用连接操作符（concatenation operator），而不是像其他一些语言<br>只需要把两个字符串放在一起就行。</li>
<li><code>特殊的重复操作符，小写字母x</code>，此操作符会将其左边的操作数与它本身重复连接，重复次数由右边的<br>操作数（某个数字）指定。例子：<blockquote>
<p>“fred” x 3    #得到“fredfredfred”<br>“barney” x (4+1)    #得到“barneybarneybarneybarneybarney”<br>5 x 4.8    #相当于5乘以4，它会把4.8当做4，因为这里是小写字母x而不是*</p>
</blockquote>
</li>
</ul>
<p>####数字与字符串之间的自动转换</p>
<ul>
<li>Perl根据操作符来确定你需要的是数字还是字符串。如操作符（比如+号）需要的是数字，Perl会将操作<br>数视为数字；在操作符（比如.）需要字符串时，Perl便会将数视为字符串。<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/perl</span></div><div class="line"><span class="comment">#Todo: concatenation operator</span></div><div class="line"><span class="keyword">use</span> <span class="number">5.010</span>;</div><div class="line"><span class="keyword">printf</span> <span class="string">"5*4.8\n"</span>;</div><div class="line"><span class="keyword">printf</span> <span class="number">5</span> * <span class="number">4.8</span> . <span class="string">"\n"</span>;</div><div class="line"><span class="keyword">printf</span> <span class="number">5</span> <span class="keyword">x</span> <span class="number">4.8</span> . <span class="string">"\n"</span>;</div><div class="line"><span class="keyword">printf</span> <span class="string">"z"</span> . <span class="number">5</span>*<span class="number">7</span> . <span class="string">"\n"</span>;</div><div class="line"></div><div class="line"><span class="comment">###Output</span></div><div class="line">[root@Mo arvon_perl]<span class="comment"># perl string_repetition</span></div><div class="line"><span class="number">5</span>*<span class="number">4.8</span></div><div class="line"><span class="number">24</span></div><div class="line"><span class="number">5555</span></div><div class="line">z35</div></pre></td></tr></table></figure>
</li>
</ul>
<p>###Perl的内置警告信息</p>
<ul>
<li><p>从Perl的5.6版本开始，可以通过编译指令开启警告功能</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/perl</span></div><div class="line"><span class="keyword">use</span> warnings;</div></pre></td></tr></table></figure>
</li>
<li><p>也可以在命令行上使用-w选项对要运行的程序开启警告功能</p>
<blockquote>
<p>$ perl -w program.pl</p>
</blockquote>
</li>
<li><p>还可以在shebang行上指定命令行选项</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/perl -w</span></div></pre></td></tr></table></figure>
</li>
<li><p>如果看不懂某个警告信息，可以利用diagnostics这个编译命令报告更为详尽的问题描述。在perdiag文档<br>中列有简要警告信息和详细诊断说明，该文档时理解diagnostics输出信息的最佳参考：</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/perl</span></div><div class="line"><span class="keyword">use</span> diagnostics;	<span class="comment">#会使程序变慢，如果熟悉，尽量不使用</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>###标量变量</p>
<ul>
<li>变量（variable）就是存储一个或多个值的容器的名称。而标量变量就是单单存储一个值的变量。变量的<br>名称在整个程序中保持不变，但它所持有的值是可以在程序运行时不断修改变化的。</li>
<li>标量变量存储的是单个标量值。标量变量的名称是以$开头的，这个符号也称为魔符（sigil），然后是变<br>量Perl的标识符：由一个字母或下划线开头，后接多个字母、数字、下划线。标识符是区分大小写的：$Fred<br>和$fred是完全不同的变量。<blockquote>
<p>$name<br>$Name<br>$NAME<br>$a_very_long_variable_that_ends_in_i</p>
</blockquote>
</li>
<li>Perl通过变量标识符的魔符来区分它是什么类型的变量。所以不管取什么名字，都不会和Perl自带的函数<br>或操作符的写法相冲突。$的确切意思是“取单个东西”或者“取标量”。</li>
<li>给变量取个好名字，例如：$my_name or $myName</li>
</ul>
<p>###标量的赋值（assignment）</p>
<ul>
<li>和其他程序语言差不多，Perl的赋值操作符为等号，等号的左边是变量名称，右边为某个表达式。<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$fred = <span class="number">17</span>;</div><div class="line">$barney = <span class="string">'hello'</span>;</div><div class="line">$barney = $fred+<span class="number">3</span>;</div><div class="line">$barney = $barney*<span class="number">2</span>;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>####双目赋值的操作符</p>
<ul>
<li><p>例子一</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$fred = $fred + <span class="number">5</span>;	<span class="comment">#相当于$fred += 5;</span></div><div class="line">$barney = $barney * <span class="number">3</span>;	<span class="comment">#相当于$barney *= 3;</span></div><div class="line">$str = $str. <span class="string">" "</span>;	<span class="comment">#相当于$str .= "";</span></div></pre></td></tr></table></figure>
</li>
<li><p>例子二</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/perl</span></div><div class="line">$fred = <span class="number">1</span>;</div><div class="line">$fred = $fred + <span class="number">5</span>;</div><div class="line"><span class="keyword">printf</span> <span class="string">"now + 5 fred is "</span> . $fred . <span class="string">"\n"</span>;</div><div class="line">$fred += <span class="number">2</span>;</div><div class="line"><span class="keyword">printf</span> <span class="string">"then + 2 fred is "</span> . $fred . <span class="string">"\n"</span>;</div><div class="line">$str = <span class="string">'hello'</span>;</div><div class="line">$str = $str . <span class="string">" "</span>;</div><div class="line"><span class="keyword">print</span> <span class="string">"the string \$str is "</span> . $str . <span class="string">"\n"</span>;</div><div class="line"></div><div class="line"><span class="comment">###Output</span></div><div class="line">root@Mo arvon_perl]<span class="comment"># perl double.pl</span></div><div class="line">now + <span class="number">5</span> fred is <span class="number">6</span></div><div class="line">then + <span class="number">2</span> fred is <span class="number">8</span></div></pre></td></tr></table></figure>
</li>
<li><p>字符串中的标量变量内插</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/perl</span></div><div class="line">$meal = <span class="string">"love"</span>;</div><div class="line">$things = <span class="string">"arvon $meal mo"</span>;</div><div class="line"><span class="keyword">print</span> <span class="string">"$things\n"</span>;</div><div class="line">$newThings = <span class="string">' arvon '</span> . $meal . <span class="string">' mo'</span>;</div><div class="line"><span class="keyword">print</span> <span class="string">'now the $newThings is'</span> . $newThings . <span class="string">"\n"</span>;</div><div class="line"></div><div class="line"><span class="comment">###Output[root@Mo arvon_perl]# perl varInsert.pl</span></div><div class="line">arvon love mo</div><div class="line">now the $newThings is arvon love mo</div></pre></td></tr></table></figure>
</li>
<li><p>如果变量从未被赋值过，就会用空字符串来替换</p>
</li>
<li><p>如果只是打印这个变量值，则不必使用变量内插的方式：</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">print</span> <span class="string">"$fred"</span>；</div><div class="line"><span class="keyword">print</span> $fred；	<span class="comment">#用这个比较好</span></div></pre></td></tr></table></figure>
</li>
<li><p>可以直接键入一些字符的代码点(code point)，再通过chr（）函数转换成对应字符,反过来我们可以通过<br>ord（）函数把字符转换为代码点</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$alef = <span class="keyword">chr</span>( <span class="number">0x05D</span>o ）；</div><div class="line">$codePoint = <span class="keyword">ord</span>(<span class="string">'?'</span>);</div></pre></td></tr></table></figure>
</li>
</ul>
<p>###操作符的优先级与结合性</p>
<ul>
<li>在复杂的表达式里，先执行哪个操作再执行哪个操作，取决于操作符的优先级。在Perl里乘法的优先级高于<br>加法，可以使用括号改变执行的优先级</li>
<li>当两个优先级相同的操作符抢着使用三个操作数时，优先级便交由结合性解决：<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="number">4</span> ** <span class="number">3</span> ** <span class="number">2</span> <span class="comment">#4 ** (3 ** 2),得4 ** 9，向右结合</span></div><div class="line"><span class="number">72</span> / <span class="number">12</span> / <span class="number">3</span><span class="comment">#(72 / 12） / 3,得6 / 3，向左结合</span></div><div class="line"><span class="number">36</span> / <span class="number">6</span> * <span class="number">3</span>	<span class="comment">#(36 / 6) * 3</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>###比较操作符</p>
<ul>
<li>perl的比较操作符类似于代数系统：&lt;,&lt;=,==,&gt;=,&gt;,!=。这些操作符的返回值要么是true要么是false。</li>
<li>字符串比较时，使用lt、le、eq、ge、gt、ne。<code>注意:</code>字符在ASCII编码中的顺序并不总是对应于字<br>符本身意义上的顺序。</li>
</ul>
<p>##控制结构</p>
<p>###if控制结构</p>
<p>####例子<br><figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/perl</span></div><div class="line"><span class="comment">#$name = 'fred';</span></div><div class="line">$name = <span class="string">'Nfred'</span>;</div><div class="line"><span class="keyword">if</span> ($name eq <span class="string">"fred"</span>)&#123;</div><div class="line">    <span class="keyword">print</span> <span class="string">"'$name' is 'fred' in\n"</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span>&#123;</div><div class="line">    <span class="keyword">print</span> <span class="string">"'$name' is not 'fred' is $name\n"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>####布尔值</p>
<ul>
<li><p>任何标量值都可以成为if控制结构里的判断条件。如果把表达式返回的真假值保存到变量中，那在判断时可以<br>直接检查该变量的值，读起来也方便：</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/perl</span></div><div class="line"><span class="comment">#$name = 'fred';</span></div><div class="line">$name = <span class="string">'Nfred'</span>;</div><div class="line"><span class="keyword">if</span> ($name eq <span class="string">"fred"</span>)&#123;</div><div class="line">    <span class="keyword">print</span> <span class="string">"'$name' is 'fred' in\n"</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span>&#123;</div><div class="line">    <span class="keyword">print</span> <span class="string">"'$name' is not 'fred' is $name\n"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">###Output</span></div><div class="line">[root@Mo arvon_perl]<span class="comment"># perl Boolean_value.pl</span></div><div class="line">hello, world</div></pre></td></tr></table></figure>
</li>
<li><p>Perl和其他语言不同，Perl并没有专用的“布尔（boolean）”数据类型，它是靠一些简单的规则来判断的：</p>
<blockquote>
<ul>
<li>如果是数字，0为假，所有其他数字都为真</li>
<li>如果是字符串，空字符串（’’)为假；所有其他字符串为真。</li>
<li>如果既不是数字也不是字符串，那就先转换成数字或字符串再进行判断。</li>
</ul>
</blockquote>
</li>
</ul>
<p>###获取用户输入</p>
<ul>
<li>用户输入的例子<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/perl</span></div><div class="line"><span class="keyword">print</span> <span class="string">"Input something please: "</span>;</div><div class="line">$line = &lt;STDIN&gt;;</div><div class="line"><span class="keyword">if</span> ($line eq <span class="string">"\n"</span>)&#123;</div><div class="line">    <span class="keyword">print</span> <span class="string">"That was just a blank line!\n"</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span>&#123;</div><div class="line">    <span class="keyword">print</span> <span class="string">"That line of input was: $line"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">###Output</span></div><div class="line">[root@Mo arvon_perl]<span class="comment"># perl stdin01.pl</span></div><div class="line">Input something please:</div><div class="line">That was just a blank line!</div><div class="line">[root@Mo arvon_perl]<span class="comment"># perl stdin01.pl ]</span></div><div class="line">Input something please: hello</div><div class="line">That line of input was: hello</div></pre></td></tr></table></figure>
</li>
</ul>
<p>###chomp操作符</p>
<ul>
<li><p>chomp（）操作符只能用于单个变量，且该变量的内容必须为字符串，如果该字符串的末尾是换行符，chomp（）<br>的任务就是去掉它。</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/perl</span></div><div class="line">$text = <span class="string">"a line of text\n"</span>;     <span class="comment">#or input by &lt;STDIN&gt;</span></div><div class="line"><span class="keyword">chomp</span>($text);   <span class="comment">#remove the \n</span></div><div class="line"><span class="keyword">print</span> $text;</div><div class="line"></div><div class="line"><span class="comment">###Output</span></div><div class="line">[root@Mo arvon_perl]<span class="comment"># perl chompTraining.pl</span></div><div class="line">a line of text[root@Mo arvon_perl]<span class="comment">#</span></div></pre></td></tr></table></figure>
</li>
<li><p>处理字符串变量</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/perl</span></div><div class="line"><span class="keyword">chomp</span>($text = &lt;STDIN&gt;); <span class="comment">#读入文字，略过最后的换行符</span></div><div class="line"><span class="comment">#$text = &lt;STDIN&gt;;       #等同于上面的写法</span></div><div class="line"><span class="comment">#chomp($text):</span></div><div class="line"><span class="keyword">print</span> $text;</div><div class="line"></div><div class="line"><span class="comment">###Output</span></div><div class="line">[root@Mo arvon_perl]<span class="comment"># perl chompTraining02.pl</span></div><div class="line">hello,world</div><div class="line">hello,world[root@Mo arvon_perl]<span class="comment">#</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>###while控制结构<br><figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/perl</span></div><div class="line">$count = <span class="number">0</span>;</div><div class="line"><span class="keyword">while</span> ($count &lt;  <span class="number">10</span>)&#123;</div><div class="line">    $count += <span class="number">2</span>;</div><div class="line">    <span class="keyword">print</span> <span class="string">"Now the number is $count\n"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">###Output</span></div><div class="line">[root@Mo arvon_perl]<span class="comment"># perl whileCount.pl</span></div><div class="line">Now the number is <span class="number">2</span></div><div class="line">Now the number is <span class="number">4</span></div><div class="line">Now the number is <span class="number">6</span></div><div class="line">Now the number is <span class="number">8</span></div><div class="line">Now the number is <span class="number">10</span></div></pre></td></tr></table></figure></p>
<p>###undef值</p>
<ul>
<li>我们未赋值时就用到了某个不存在标量变量，并不会让程序停止运行，当成数字使用，它会表现的像0；当<br>做字符串使用，它会表现的像空字符串。<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/perl</span></div><div class="line"><span class="comment">#累加奇数</span></div><div class="line">$n = <span class="number">1</span>;</div><div class="line"><span class="keyword">while</span> ($n &lt; <span class="number">10</span>)&#123;</div><div class="line">    $sum += $n;</div><div class="line">    $n += <span class="number">2</span>;<span class="comment">#准备奇数</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">print</span> <span class="string">"The total was $sum.\n"</span></div><div class="line"></div><div class="line"><span class="comment">###Output</span></div><div class="line">[root@Mo arvon_perl]<span class="comment"># perl accumulation.pl</span></div><div class="line">The total was <span class="number">25</span>.</div></pre></td></tr></table></figure>
</li>
</ul>
<p>###definded函数</p>
<ul>
<li>行输入操作符<stdin>有时候会返回undef。要判断某个字符串是undef而不是空字符串，可以使用defined<br>函数。如果是undef，该函数返回假，否则返回真：<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/perl</span></div><div class="line">$madonna = &lt;STDIN&gt;;</div><div class="line"><span class="keyword">if</span> (<span class="keyword">defined</span>($madonna))&#123;</div><div class="line">    <span class="keyword">print</span> <span class="string">"The input was $madonna"</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span>&#123;</div><div class="line">    <span class="keyword">print</span> <span class="string">"No input available\n"</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">#$madonna = undef;</span></div><div class="line"></div><div class="line"><span class="comment">###Output</span></div><div class="line">[root@Mo arvon_perl]<span class="comment"># perl undef01.pl</span></div><div class="line">No input available</div><div class="line">[root@Mo arvon_perl]<span class="comment"># perl undef01.pl</span></div><div class="line">Mo</div><div class="line">The input was Mo</div><div class="line">[root@Mo arvon_perl]<span class="comment"># perl undef01.pl</span></div><div class="line"></div><div class="line">The input was</div></pre></td></tr></table></figure>
</stdin></li>
</ul>
<p>##列表和数组</p>
<ul>
<li>如果Perl的标量代表单数（singular），那么列表和数组就表示复数（plural）。</li>
<li>列表（list）是标量的有序集合，而数组（array）则是存储列表的变量。列表指的是数据，而数组指的是变<br>量。列表里的值不一定放在数组里，但每个数组变量都包含一个列表（即便是不含任何元素的空列表。</li>
<li>数组或列表中的每个元素 （element）都是单独的标量变量，拥有独立的标量值。这些值是有序的，从开始到<br>终止元素的先后次序是固定的。</li>
</ul>
<p>###访问数组中的元素</p>
<ul>
<li>Example one<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/perl</span></div><div class="line"><span class="keyword">use</span> <span class="number">5.010</span>;</div><div class="line"><span class="comment">#print "Hello world\n";</span></div><div class="line">$fred[<span class="number">0</span>] = <span class="string">"Hello"</span>;</div><div class="line">$fred[<span class="number">1</span>] = <span class="string">"My"</span>;</div><div class="line">$fred[<span class="number">2</span>] = <span class="string">"Name"</span>;</div><div class="line"><span class="keyword">print</span> <span class="string">"$fred[0]\n"</span>;</div><div class="line"></div><div class="line"><span class="comment">###Output</span></div><div class="line">&gt;arvon@Mo:~<span class="regexp">/arvon_perl&gt; perl array.pl</span></div><div class="line">Hello</div></pre></td></tr></table></figure>
</li>
</ul>
<p>###特殊的数字索引</p>
<ul>
<li>Example two<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/perl</span></div><div class="line"><span class="keyword">use</span> <span class="number">5.010</span>;</div><div class="line">$rocks[<span class="number">0</span>] = <span class="string">'hello'</span>;</div><div class="line">$rocks[<span class="number">1</span>] = <span class="string">'list'</span>;</div><div class="line">$rocks[<span class="number">2</span>] = <span class="string">'array'</span>;</div><div class="line">$rocks[<span class="number">3</span>] = <span class="string">'element'</span>;</div><div class="line">$rocks[<span class="number">4</span>] = <span class="string">'four'</span>;</div><div class="line">$rocks[<span class="number">9</span>] = <span class="string">'nine'</span>;</div><div class="line"><span class="comment">#</span></div><div class="line">$end = $#rocks;</div><div class="line"><span class="keyword">print</span> <span class="string">"\$end is $end\n"</span>;</div><div class="line"><span class="comment">#</span></div><div class="line">$number_of_rocks = $end + <span class="number">1</span>;</div><div class="line"><span class="keyword">print</span> <span class="string">"The number is $number_of_rocks\n"</span>;</div><div class="line"><span class="comment">#</span></div><div class="line">$rocks[ $#rocks ] = <span class="string">'hard rodk'</span>;</div><div class="line"></div><div class="line"><span class="comment">###Output</span></div><div class="line">arvon@Mo:~<span class="regexp">/arvon_perl&gt; perl array_print.pl</span></div><div class="line">$end is 9</div><div class="line">The number is 10</div></pre></td></tr></table></figure>
</li>
</ul>
<p>###列表直接量</p>
<ul>
<li>列表直接量（list literal），可以由圆括号内用逗号隔开的一组数据表示，而这些数据就称为元素。<br>for example<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)  <span class="comment">#(1, 2, 3,)相同的逗号会被忽略</span></div><div class="line">(<span class="string">"fred"</span>, <span class="number">4.5</span>)   <span class="comment">#两个元素，'fred'和4.5</span></div><div class="line">()  <span class="comment">#空列表，0个元素</span></div><div class="line">(<span class="number">1</span>..<span class="number">100</span>)    <span class="comment">#100个整数组成的列表</span></div><div class="line">(<span class="number">1</span>..<span class="number">5</span>)  <span class="comment">#..是范围操作符（range operator）</span></div><div class="line">(<span class="number">1.7</span>..<span class="number">5.7</span>)  <span class="comment">#同上，但两个数字的小数部分会被去掉</span></div><div class="line">(<span class="number">5</span>..<span class="number">1</span>)  <span class="comment">#表示空列表，只能正向计数</span></div><div class="line">($m..$n)    <span class="comment">#由$m和$n决定</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>###<code>qw简写</code></p>
<ul>
<li>在perl程序中，经常会需要建立简单的单词列表。使用qw简写，可以省去键入的引号。<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/perl</span></div><div class="line"><span class="keyword">use</span> <span class="number">5.010</span>;</div><div class="line">(<span class="string">"Mo"</span>, <span class="string">"have"</span>, <span class="string">"rose"</span>, <span class="string">"you"</span>, <span class="string">"known"</span>);</div><div class="line"><span class="comment">#</span></div><div class="line"><span class="string">qw( Mo have rose you known )</span>;</div><div class="line"><span class="comment">#</span></div><div class="line"><span class="string">qw(Mo</span></div><div class="line">hava    rose</div><div class="line">you known);</div><div class="line"><span class="comment">#</span></div><div class="line"><span class="string">qw(</span></div><div class="line">    Mo</div><div class="line">    have</div><div class="line">    rose</div><div class="line">    you</div><div class="line">    known</div><div class="line">);</div><div class="line"><span class="comment">#</span></div><div class="line"><span class="keyword">qw</span>! Mo have rose you known!;</div><div class="line"><span class="keyword">qw</span>/ Mo have rose you known/;</div><div class="line"><span class="keyword">qw</span><span class="comment"># Mo have rose you known#;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>###列表的赋值</p>
<ul>
<li>和标量赋值一样，列表值可以被赋值给变量<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/perl</span></div><div class="line"><span class="keyword">use</span> <span class="number">5.010</span>;</div><div class="line">($fred, $barney, $dino) = (<span class="string">"flintstone"</span>, <span class="string">"rubble"</span>, <span class="keyword">undef</span>);</div><div class="line"><span class="comment">#左侧列表中的三个变量会依次被赋予右侧列表中对应的值，相当于分别做了三次独立的赋值操作；</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>###pop和push操作符</p>
<ul>
<li>要增加元素到数组尾端时，只要将它存放到更高索引的新位置就可以了。<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/perl</span></div><div class="line">@array = <span class="number">5</span>..<span class="number">9</span>;</div><div class="line">$mo = <span class="keyword">pop</span>(@array);</div><div class="line"><span class="keyword">printf</span> <span class="string">"now \$mo is $mo\n"</span>;</div><div class="line">$arvon = <span class="keyword">pop</span>(@array);</div><div class="line"><span class="keyword">printf</span> <span class="string">"now \$arvon is $arvon\n"</span>;</div><div class="line"><span class="keyword">push</span>(@array, <span class="number">0</span>);</div><div class="line"><span class="keyword">printf</span> <span class="string">"now \@array is @array\n"</span>;</div><div class="line"><span class="keyword">push</span>@array,<span class="number">3</span>;</div><div class="line"><span class="keyword">printf</span> <span class="string">"now \@array is @array\n"</span>;</div><div class="line"><span class="keyword">push</span>@array,<span class="string">"Hello"</span>;</div><div class="line"><span class="keyword">printf</span> <span class="string">"now \@array is @array\n"</span>;</div><div class="line">@newOne = <span class="keyword">qw</span>/ <span class="keyword">my</span> name is arvon /;</div><div class="line"><span class="keyword">print</span> <span class="string">"@newOne\n"</span>;</div><div class="line"><span class="comment">###Output</span></div><div class="line">arvon@Mo:~<span class="regexp">/arvon_perl&gt; perl assignment_array.pl</span></div><div class="line">now $mo is 9</div><div class="line">now $arvon is 8</div><div class="line">now @array is 5 6 7 0</div><div class="line">now @array is 5 6 7 0 3</div><div class="line">now @array is 5 6 7 0 3 Hello</div><div class="line">my name is arvon</div></pre></td></tr></table></figure>
</li>
</ul>
<p>###shift和unshift操作符</p>
<ul>
<li>相反，unshift和shift操作符是对数组的开头进行处理<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/perl</span></div><div class="line"><span class="keyword">use</span> <span class="number">5.010</span>;</div><div class="line">@array = <span class="keyword">qw</span>/ why are you so diao /;</div><div class="line">$one = <span class="keyword">shift</span>@array;<span class="comment">#$one is "why", @array = are you so diao</span></div><div class="line"><span class="keyword">print</span> <span class="string">"$one is not @array\n"</span>;</div><div class="line">$two = <span class="keyword">shift</span>(@array);<span class="comment">#$two is "are", @array = you so diao</span></div><div class="line"><span class="keyword">print</span> <span class="string">"$two is not @array\n"</span>;</div><div class="line">$three = <span class="keyword">shift</span>@array;<span class="comment">#$three is "you", @array= so diao</span></div><div class="line"><span class="keyword">print</span> <span class="string">"$three is not @array\n"</span>;</div><div class="line"><span class="comment">##</span></div><div class="line"><span class="keyword">unshift</span>(@array, <span class="number">4</span>);</div><div class="line"><span class="keyword">print</span> <span class="string">"Now \@array is @array\n"</span>;</div><div class="line"><span class="keyword">unshift</span>(@array, <span class="number">5</span>);</div><div class="line"><span class="keyword">print</span> <span class="string">"Now \@array is @array\n"</span>;</div><div class="line">@others = <span class="number">1</span>..<span class="number">3</span>;</div><div class="line"><span class="keyword">unshift</span> @array, @others; <span class="comment">#@array变成了(1, 2, 3, 4, 5, )</span></div><div class="line"><span class="keyword">print</span> <span class="string">"\@others is @others, But now \@array is already @array"</span>;</div><div class="line"></div><div class="line"><span class="comment">###Output</span></div><div class="line">arvon@Mo:~<span class="regexp">/arvon_perl&gt; perl unshift_str.pl</span></div><div class="line">why is not are you so diao</div><div class="line">are is not you so diao</div><div class="line">you is not so diao</div><div class="line">Now @array is 4 so diao</div><div class="line">Now @array is 5 4 so diao</div><div class="line">@others is 1 2 3, But now @array is already 1 2 3 5 4 so diao</div></pre></td></tr></table></figure>
</li>
</ul>
<p>###splice操作符</p>
<ul>
<li>push-pop和shift-unshift操作符都是对数组首尾进行操作的，中间的话就用splice</li>
<li><p>Example one</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/perl</span></div><div class="line"><span class="keyword">use</span> <span class="number">5.010</span>;</div><div class="line">@array = <span class="string">qw( pebbles dino fred barney betty )</span>;</div><div class="line">@removed = <span class="keyword">splice</span> @array, <span class="number">2</span>;<span class="comment">#在原来的数组中删掉fred及其后的元素</span></div><div class="line"><span class="comment">#@removed变成qw（fred barney betty）</span></div><div class="line"><span class="comment">#而原来的@array则变成qw（pebbles dino）</span></div><div class="line"><span class="keyword">print</span> <span class="string">"\@array now is @array\n"</span>;</div><div class="line"><span class="keyword">print</span> <span class="string">"\@removed is @removed\n"</span>;</div><div class="line"></div><div class="line"><span class="comment">###Output</span></div><div class="line">arvon@Mo:~<span class="regexp">/arvon_perl&gt; perl splice_string.pl</span></div><div class="line">@array now is pebbles dino</div><div class="line">@removed is fred barney betty</div></pre></td></tr></table></figure>
</li>
<li><p>Example two</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/perl</span></div><div class="line"><span class="keyword">use</span> <span class="number">5.010</span>;</div><div class="line">@array = <span class="string">qw( pebbles dino fred barney betty )</span>;</div><div class="line"><span class="comment">#@removed = splice @array, 2;#在原来的数组中删掉fred及其后的元素</span></div><div class="line"><span class="comment">##@removed变成qw（fred barney betty）</span></div><div class="line"><span class="comment">##而原来的@array则变成qw（pebbles dino）</span></div><div class="line"><span class="comment">#print "\@array now is @array\n";</span></div><div class="line"><span class="comment">#print "\@removed is @removed\n";</span></div><div class="line"><span class="comment">#@removed = splice @array, 1, 2;</span></div><div class="line"><span class="comment">##This time @removed is (pebbles, barney, betty )</span></div><div class="line">@removed = <span class="keyword">splice</span> @array, <span class="number">1</span>, <span class="number">0</span>, <span class="string">qw(wilema)</span>;</div><div class="line"><span class="comment">##Just known @array is became (pebbles wilema dino fred barney betty)</span></div><div class="line"><span class="keyword">print</span> <span class="string">"now \@removed is @removed, and \@array is @array.\n"</span></div><div class="line"></div><div class="line"><span class="comment">###Output</span></div><div class="line">arvon@Mo:~<span class="regexp">/arvon_perl&gt; perl splice_string.pl</span></div><div class="line">now @removed is , and @array is pebbles wilema dino fred barney betty.</div></pre></td></tr></table></figure>
</li>
</ul>
<p>###字符串的内插</p>
<ul>
<li><p>和标量一样，数组的内容同样可以被内插到双引号中。内插时，会在数组的各个元素之间自动添加分隔用的空格</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/perl</span></div><div class="line"><span class="keyword">use</span> <span class="number">5.010</span>;</div><div class="line">@rocks = <span class="keyword">qw</span>/ flintstone slate rubble /;</div><div class="line"><span class="keyword">print</span> <span class="string">"Quartz @rocks limestone\n"</span></div><div class="line"></div><div class="line"><span class="comment">###Output</span></div><div class="line">arvon@Mo:~<span class="regexp">/arvon_perl&gt; perl array_one.pl</span></div><div class="line">Quartz flintstone slate rubble limestone</div></pre></td></tr></table></figure>
</li>
<li><p>Example for index_expression</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/perl</span></div><div class="line"><span class="keyword">use</span> <span class="number">5.010</span>;</div><div class="line">@fred = <span class="string">qw(eating rocks is wrong)</span>;</div><div class="line">$fred = <span class="string">"right"</span>;</div><div class="line"><span class="keyword">print</span> <span class="string">"This is $fred[3]\n"</span>;     <span class="comment">#just right</span></div><div class="line"><span class="keyword">print</span> <span class="string">"This is <span class="subst">$&#123;fred&#125;</span>[3]\n"</span>;   <span class="comment">#wrong</span></div><div class="line"><span class="keyword">print</span> <span class="string">"This is $fred"</span>.<span class="string">"[3]\n"</span>;  <span class="comment">#wrong</span></div><div class="line"><span class="keyword">print</span> <span class="string">"This is $fred\[3]\n"</span>;    <span class="comment">#still wrong</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>##后续下一篇，太长了不方便查阅</p>
<ul>
<li>So， Let’s go</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux挂载LVM分区]]></title>
      <url>http://arvon.top/2015/08/07/Linux%E6%8C%82%E8%BD%BDLVM%E5%88%86%E5%8C%BA/</url>
      <content type="html"><![CDATA[<p><strong>简介：</strong>LVM是 Logical Volume Manager（逻辑卷管理）的简写，它是Linux环境下对磁盘分区进行管理的一种机制，它由Heinz Mauelshagen在Linux 2.4内核上实现，目前最新版本为：稳定版1.0.5，开发版 1.1.0-rc2，以及LVM2开发版。Linux用户安装Linux操作系统时遇到的一个常见的难以决定的问题就是如何正确地评估各分区大小，以分配合适的硬盘空间。普通的磁盘分区管理方式在逻辑分区划分好之后就无法改变其大小，当一个逻辑分区存放不下某个文件时，这个文件因为受上层文件系统的限制，也不能跨越多个分区来存放，所以也不能同时放到别的磁盘上。而遇到出现某个分区空间耗尽时，解决的方法通常是使用符号链接，或者使用调整分区大小的工具，但这只是暂时解决办法，没有从根本上解决问题。随着Linux的逻辑卷管理功能的出现，这些问题都迎刃而解，用户在无需停机的情况下可以方便地调整各个分区大小。</p>
<a id="more"></a>
<h2 id="手动将LVM挂载至linux系统"><a href="#手动将LVM挂载至linux系统" class="headerlink" title="手动将LVM挂载至linux系统"></a>手动将LVM挂载至linux系统</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">rpm -qa lvm2</div><div class="line"><span class="comment">#查看是否安装了lvm</span></div><div class="line">yum install lvm2</div><div class="line"><span class="comment">#安装lvm软件</span></div><div class="line">vgscan</div><div class="line"><span class="comment">#查找并显示系统中存在的LVN卷组</span></div><div class="line">lvscan</div><div class="line"><span class="comment">#查看系统中存在哪些卷组以及它们的激活状态（注意：如果有两个卷组名一样，其中一个是无法挂载的，要想挂载，需要重命名一个卷组）</span></div><div class="line">vgdisplay LVMname | more</div><div class="line"><span class="comment">#显示所有名为LVMname卷组的详细信息，请记住你将要挂载卷组的 VG UUID。</span></div><div class="line">	vgrename o236o6-MGAQ-erKG-k6cH<span class="number">-12</span>Zs<span class="number">-8</span>NwX-CCqPG3 vgNewName</div><div class="line"><span class="comment">#卷组重新命名为vgNewName</span></div><div class="line">vgchange -ay /dev/vgNewName</div><div class="line"><span class="comment">#激活卷组vsNewName，此时你也并不能使用，需要挂载</span></div><div class="line">lvscan</div><div class="line"><span class="comment">#查看现在的激活状态</span></div><div class="line">mount /dev/vgNewName /somePoint</div><div class="line"><span class="comment">#挂载LVM到挂载点，这样就可以访问了</span></div><div class="line">umount /dev/vgNewName<span class="comment"># or usr 'umount /somePoint'</span></div><div class="line"><span class="comment">#卸载LVM卷组</span></div><div class="line">vgchange -an /dev/vgNewName</div><div class="line"><span class="comment">#将卷组修改成不激活状态</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[nc命令]]></title>
      <url>http://arvon.top/2015/07/30/nc%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<p>由于telnet不能测试udp端口联通性，nc命令可以检测udp端口连接状态，这里记录一下用法<br><code>nc命令介绍:</code>可以检测tcp/udp端口连通性、端口扫描、远程传输文件、克隆硬盘或分区、保存web页面、模拟http Headers、简单聊天等等</p>
<a id="more"></a>
<h3 id="参数介绍"><a href="#参数介绍" class="headerlink" title="参数介绍"></a>参数介绍</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">-g&lt;网关&gt; 设置路由器跃程通信网关，最多可设置8个。</div><div class="line">-G&lt;指向器数目&gt; 设置来源路由指向器，其数值为4的倍数。</div><div class="line">-h 在线帮助。</div><div class="line">-i&lt;延迟秒数&gt; 设置时间间隔，以便传送信息及扫描通信端口。</div><div class="line">-l 使用监听模式，管控传入的资料。</div><div class="line">-n 直接使用IP地址，而不通过域名服务器。</div><div class="line">-o&lt;输出文件&gt; 指定文件名称，把往来传输的数据以16进制字码倾倒成该文件保存。</div><div class="line">-p&lt;通信端口&gt; 设置本地主机使用的通信端口。</div><div class="line">-r 乱数指定本地与远端主机的通信端口。</div><div class="line">-s&lt;来源位址&gt; 设置本地主机送出数据包的IP地址。</div><div class="line">-u 使用UDP传输协议。</div><div class="line">-v 显示指令执行过程。</div><div class="line">-w&lt;超时秒数&gt; 设置等待连线的时间。</div><div class="line">-z 使用0输入/输出模式，只在扫描通信端口时使用。</div></pre></td></tr></table></figure>
<h3 id="检测端口连通性"><a href="#检测端口连通性" class="headerlink" title="检测端口连通性"></a>检测端口连通性</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#TCP</span></div><div class="line"><span class="comment">#TCP单个端口或范围扫描</span></div><div class="line">nc -vz -w2 192.168.20.133 1870</div><div class="line">nc -vz -w2 192.168.20.133 1-1870</div><div class="line"><span class="comment">#UDP</span></div><div class="line"><span class="comment">#UDP单个端口或范围扫描</span></div><div class="line">nc -uz -w2 192.168.20.133 5000</div><div class="line">nc -uz -w2 192.168.20.133 4990-5000</div></pre></td></tr></table></figure>
<h3 id="模拟接收端口数据"><a href="#模拟接收端口数据" class="headerlink" title="模拟接收端口数据"></a>模拟接收端口数据</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">nc -lk 10.17.0.167 2003</div><div class="line"><span class="comment">#如判断数据是否传送到达</span></div></pre></td></tr></table></figure>
<h3 id="传输文件"><a href="#传输文件" class="headerlink" title="传输文件"></a>传输文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#目标文件主机命令，这个需要在文件传输之前执行，file.txt为文件传输过来后的文件名</span></div><div class="line">nc <span class="_">-l</span> 1234 &gt; file.txt</div><div class="line"><span class="comment">#源文件主机命令，hello.txt为传输文件，63为目标主机</span></div><div class="line">nc 172.17.18.63 1234 &lt; hello.txt</div></pre></td></tr></table></figure>
<h3 id="聊天与传输文件基本一样"><a href="#聊天与传输文件基本一样" class="headerlink" title="聊天与传输文件基本一样"></a>聊天与传输文件基本一样</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">nc <span class="_">-l</span> 1234    <span class="comment">#主机1</span></div><div class="line">nc 192.168.2.34 1234    <span class="comment">#主机2</span></div></pre></td></tr></table></figure>
<h3 id="操作memcache"><a href="#操作memcache" class="headerlink" title="操作memcache"></a>操作memcache</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#存储数据</span></div><div class="line"><span class="built_in">printf</span> “<span class="built_in">set</span> key 0 10 6rnresultrn” |nc 192.168.2.34 11211</div><div class="line"><span class="comment">#获取数据</span></div><div class="line"><span class="built_in">printf</span> “get keyrn” |nc 192.168.2.34 11211</div><div class="line"><span class="comment">#删除数据</span></div><div class="line"><span class="built_in">printf</span> “delete keyrn” |nc 192.168.2.34 11211</div><div class="line"><span class="comment">#查看状态</span></div><div class="line"><span class="built_in">printf</span> “statsrn” |nc 192.168.2.34 11211</div><div class="line"><span class="comment">#模拟top命令查看状态</span></div><div class="line">watch “<span class="built_in">echo</span> stats” |nc 192.168.2.34 11211</div><div class="line"><span class="comment">#清空缓存</span></div><div class="line"><span class="built_in">printf</span> “flush_allrn” |nc 192.168.2.34 11211</div></pre></td></tr></table></figure>
<h3 id="操作redis"><a href="#操作redis" class="headerlink" title="操作redis"></a>操作redis</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">redis-cli</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[简明Python读书笔记]]></title>
      <url>http://arvon.top/2015/07/30/%E7%AE%80%E6%98%8EPython%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p><img src="http://img.arvon.top:80/images/2019/08/12/20150730-pythonnote-1.jpg" alt="20150730-pythonnote-1"></p>
<h1 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h1><ul>
<li>20150730 总结介绍</li>
<li>20150731 控制流</li>
<li>20150804 module</li>
<li>20150806 脚本练手</li>
<li>20150807 模块方法</li>
<li>20150810 是时候结束了<a id="more"></a>
<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1></li>
</ul>
<h2 id="简记"><a href="#简记" class="headerlink" title="简记"></a>简记</h2><ul>
<li>这里使用的是CentOS release 6.6 (Final)</li>
</ul>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[root@Mo ~]# python -V		#查看python的版本</div><div class="line">Python 2.6.6</div><div class="line"></div><div class="line">[root@Mo arvon_python]# which python	#查看python命令的安装的位置</div><div class="line">/usr/bin/python</div><div class="line"></div><div class="line">[root@Mo arvon_python]# echo $PATH		#查看$PATH变量，可以通过which命令查看一个命令的位置</div><div class="line">/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin</div><div class="line"><span class="meta"></span></div><div class="line">	#<span class="bash">缩进可以使用Tab、2个空格、4个空格，选择一个长期用下去</span></div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment">#-*- coding: utf-8 -*-</span></div><div class="line"><span class="comment">#the script is about expression</span></div><div class="line">length = float(raw_input(<span class="string">"Enter the length:"</span>))</div><div class="line">breadth = float(raw_input(<span class="string">"Enter the breadth:"</span>))</div><div class="line">area = length * breadth</div><div class="line"><span class="keyword">print</span> <span class="string">'Area is'</span>, area</div><div class="line"><span class="keyword">print</span> <span class="string">'Perimeter is'</span>, <span class="number">2</span>* (length + breadth)</div></pre></td></tr></table></figure>
<h2 id="控制流"><a href="#控制流" class="headerlink" title="控制流"></a>控制流</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><ul>
<li>在python中有三种控制流语句if、for、while</li>
</ul>
<h4 id="if语句实例"><a href="#if语句实例" class="headerlink" title="if语句实例"></a>if语句实例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment">#-*- coding: utf-8 -*-</span></div><div class="line"><span class="comment">#Todo: show how to use if</span></div><div class="line"><span class="comment">#number = int(raw_input("Input a number:"))</span></div><div class="line">number = <span class="number">25</span></div><div class="line">guess = int(input(<span class="string">"Enter a number which you are think:"</span>))</div><div class="line"><span class="keyword">print</span> guess</div><div class="line"><span class="keyword">print</span> number</div><div class="line"><span class="keyword">if</span> guess == number:</div><div class="line">    <span class="keyword">print</span> <span class="string">"Your number is right"</span></div><div class="line"><span class="keyword">elif</span> guess &gt; <span class="number">25</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">"Your number is:"</span>, guess, <span class="string">"It,s too big"</span></div><div class="line"><span class="keyword">elif</span> guess &lt; <span class="number">25</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">"You number is:"</span>, guess, <span class="string">"is small"</span></div></pre></td></tr></table></figure>
<h4 id="while语句实例"><a href="#while语句实例" class="headerlink" title="while语句实例"></a>while语句实例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment">#-*- coding: utf-8 -*-</span></div><div class="line"><span class="comment">#Todo: while</span></div><div class="line">number=<span class="number">23</span></div><div class="line">running=<span class="keyword">True</span></div><div class="line"><span class="keyword">while</span> running:</div><div class="line">    guess=int(raw_input(<span class="string">'Enteraninteger:'</span>))</div><div class="line">    <span class="keyword">if</span> guess == number:</div><div class="line">        <span class="keyword">print</span> <span class="string">'Congratulations, you guessed it.'</span></div><div class="line">        running = <span class="keyword">False</span> <span class="comment">#this causes the while loop to stop</span></div><div class="line">    <span class="keyword">elif</span> guess &lt; number:</div><div class="line">        <span class="keyword">print</span> <span class="string">'No, it is a litte higher than that'</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">'No, it is a little lower than that'</span></div><div class="line"><span class="keyword">else</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">'The while loop is over.'</span></div><div class="line">    <span class="comment">#Do anything else you want to do here</span></div><div class="line"><span class="keyword">print</span> <span class="string">'done'</span></div></pre></td></tr></table></figure>
<h4 id="for语句"><a href="#for语句" class="headerlink" title="for语句"></a>for语句</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment">#-*- coding: utf-8 -*-</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">15</span>, <span class="number">2</span>):</div><div class="line">    <span class="keyword">print</span> i</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">'THe for loop is over'</span></div></pre></td></tr></table></figure>
<h4 id="break语句"><a href="#break语句" class="headerlink" title="break语句"></a>break语句</h4><ul>
<li>break语句是用来终止循环语句的，哪怕循环条件没有称为False或序列还没有被完全递归，也停止执行循环语句。</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment">#-*- coding: utf-8 -*-</span></div><div class="line"><span class="comment">#Todo: break.py</span></div><div class="line">runing = <span class="string">'True'</span></div><div class="line"><span class="keyword">while</span> runing:</div><div class="line">    s = raw_input(<span class="string">'Enter your name:'</span>)</div><div class="line">    <span class="keyword">if</span> s == <span class="string">'quit'</span>:</div><div class="line">        <span class="keyword">break</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'Length of the string is'</span>, len(s)</div><div class="line"><span class="keyword">print</span> <span class="string">'Done'</span></div></pre></td></tr></table></figure>
<h4 id="continue语句"><a href="#continue语句" class="headerlink" title="continue语句"></a>continue语句</h4><ul>
<li>跳过当前循环块中的剩余语句，然后进行下一轮循环。</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment">#-*- coding: utf-8 -*-</span></div><div class="line">runing = <span class="keyword">True</span></div><div class="line"><span class="keyword">while</span> runing:</div><div class="line">    s = raw_input(<span class="string">'Enter something:'</span>)</div><div class="line">    <span class="keyword">if</span> s == <span class="string">'quit'</span>:</div><div class="line">        <span class="keyword">break</span></div><div class="line">    <span class="keyword">if</span> len(s) &lt; <span class="number">3</span>:</div><div class="line">        <span class="keyword">continue</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'Input is of sufficient length'</span></div></pre></td></tr></table></figure>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><ul>
<li>函数是重用的程序段。它们允许你给一块语句一个名称，然后你可以在你的程序的任何地方使用这个名称任意多次<br>地运行这个语句块，这称为调用函数。函数通过def关键字定义。def关键字后跟一个函数的标识符名称，然后跟一对<br>圆括号。圆括号可以包括一些变量名，该行以冒号结尾，接下来的是一块语句，它们是函数体。</li>
</ul>
<h3 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment">#-*- coding: utf-8 -*-</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sayHello</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'Hello World！'</span><span class="comment">#block belonging to the function</span></div><div class="line">sayHello()<span class="comment">#call the function</span></div></pre></td></tr></table></figure>
<h3 id="使用函数形参"><a href="#使用函数形参" class="headerlink" title="使用函数形参"></a>使用函数形参</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment">#-*- coding: utf-8 -*-</span></div><div class="line"><span class="comment">#Filename:func_param.py</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">printMax</span><span class="params">(a,b)</span>:</span></div><div class="line">    <span class="keyword">if</span> a&gt;b:</div><div class="line">        <span class="keyword">print</span> a, <span class="string">'is max number'</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">print</span> b, <span class="string">'is max number'</span></div><div class="line">printMax(<span class="number">3</span>,<span class="number">4</span>)<span class="comment">#directly give litter values</span></div><div class="line">x = <span class="number">5</span></div><div class="line">y = <span class="number">7</span></div><div class="line">printMax(x,y)<span class="comment">#give variables as arguments</span></div></pre></td></tr></table></figure>
<h3 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment">#Filename: func_local.py</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(x)</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'x is'</span>, x</div><div class="line">    x = <span class="number">2</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'Changed local x to'</span>, x</div><div class="line">x = <span class="number">50</span></div><div class="line">func(x)</div><div class="line"><span class="keyword">print</span> <span class="string">'x is still'</span>, x</div></pre></td></tr></table></figure>
<h3 id="global语句"><a href="#global语句" class="headerlink" title="global语句"></a>global语句</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment">#-*- coding: utf-8 -*-</span></div><div class="line"><span class="comment">#Todo: func_global.py</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">global</span> x</div><div class="line">    <span class="keyword">print</span> <span class="string">'x is'</span>, x</div><div class="line">    x = <span class="number">2</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'Changed local x to'</span>, x</div><div class="line">x = <span class="number">50</span></div><div class="line">func()</div><div class="line"><span class="keyword">print</span> <span class="string">'Value of x is'</span>, x</div></pre></td></tr></table></figure>
<h3 id="使用默认参数值"><a href="#使用默认参数值" class="headerlink" title="使用默认参数值"></a>使用默认参数值</h3><ul>
<li>默认参数值是一个参数，默认参数值应该是不可变的，只有在形参表末尾的那些参数可以有默认参数值，即<br>你不能在声明函数形参的时候，先声明有默认值的形参而后声明没有默认值的形参，例如：def func（a，b=5）<br>是有效地，但是def func（a=5， b）是无效的</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment">#-*- coding: utf-8</span></div><div class="line"><span class="comment">#Todo: func_default.py</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">say</span> <span class="params">(message, times=<span class="number">1</span>)</span>:</span></div><div class="line">    <span class="keyword">print</span> message*times</div><div class="line">say(<span class="string">'Hello'</span>)</div><div class="line">say(<span class="string">'World'</span>,<span class="number">5</span>)</div></pre></td></tr></table></figure>
<h3 id="关键参数"><a href="#关键参数" class="headerlink" title="关键参数"></a>关键参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment">#-*- coding: utf-8 -*-</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(a,b = <span class="number">5</span>, c=<span class="number">10</span>)</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'a is'</span>, a, <span class="string">'and b is'</span>, b, <span class="string">'and c is'</span>, c</div><div class="line">func(<span class="number">3</span>, <span class="number">7</span>)</div><div class="line">func(<span class="number">25</span>, c=<span class="number">24</span>)</div><div class="line">func(c= <span class="number">50</span>, a= <span class="number">100</span>)</div><div class="line"><span class="comment">###Output</span></div><div class="line">[root@Mo arvon_python]<span class="comment"># python func_key.py</span></div><div class="line">a <span class="keyword">is</span> <span class="number">3</span> <span class="keyword">and</span> b <span class="keyword">is</span> <span class="number">7</span> <span class="keyword">and</span> c <span class="keyword">is</span> <span class="number">10</span></div><div class="line">a <span class="keyword">is</span> <span class="number">25</span> <span class="keyword">and</span> b <span class="keyword">is</span> <span class="number">5</span> <span class="keyword">and</span> c <span class="keyword">is</span> <span class="number">24</span></div><div class="line">a <span class="keyword">is</span> <span class="number">100</span> <span class="keyword">and</span> b <span class="keyword">is</span> <span class="number">5</span> <span class="keyword">and</span> c <span class="keyword">is</span> <span class="number">50</span></div></pre></td></tr></table></figure>
<h3 id="return语句"><a href="#return语句" class="headerlink" title="return语句"></a>return语句</h3><ul>
<li>return语句用来从一个函数返回即跳出函数。也可选函数返回一个值</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment">#-*- coding: utf-8 -*-</span></div><div class="line"><span class="comment">#Todo: func_return.py</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">maximum</span><span class="params">(x, y)</span>:</span></div><div class="line">    <span class="keyword">if</span> x&gt;y:</div><div class="line">        <span class="keyword">return</span> x</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> y</div><div class="line"><span class="keyword">print</span> maximum(<span class="number">2</span>, <span class="number">3</span>)</div><div class="line"><span class="comment">###Output</span></div><div class="line">[root@Mo arvon_python]<span class="comment"># python func_return.py</span></div><div class="line"><span class="number">3</span></div></pre></td></tr></table></figure>
<h3 id="文档字符串（DocStrings）"><a href="#文档字符串（DocStrings）" class="headerlink" title="文档字符串（DocStrings）"></a>文档字符串（DocStrings）</h3><ul>
<li>在函数的第一个逻辑行的字符串是这个函数的文档那个字符串</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment">#-*- coding: utf-8 -*-</span></div><div class="line"><span class="comment">#Todo: func_doc.py</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">printMax</span><span class="params">(x, y)</span>:</span></div><div class="line">    <span class="string">'''Prints the max num of tow numbers.</span></div><div class="line">    The two values must be in tetgers.'''</div><div class="line">    x = int(x)<span class="comment">#convert to in tegers, if possible</span></div><div class="line">    y = int(y)</div><div class="line">    <span class="keyword">if</span> x&gt;y:</div><div class="line">        <span class="keyword">print</span> x, <span class="string">'is max num'</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">print</span> y, <span class="string">'is max num'</span></div><div class="line">printMax(<span class="number">3</span>, <span class="number">5</span>)</div><div class="line"><span class="keyword">print</span> printMax.__doc__</div><div class="line"><span class="comment">###Out put</span></div><div class="line">[root@Mo arvon_python]<span class="comment"># python func_doc.py</span></div><div class="line"><span class="number">5</span> <span class="keyword">is</span> max num</div><div class="line">Prints the max num of tow numbers.</div><div class="line">    The two values must be <span class="keyword">in</span> tetgers.</div></pre></td></tr></table></figure>
<h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><h3 id="模块概述"><a href="#模块概述" class="headerlink" title="模块概述"></a>模块概述</h3><ul>
<li>模块的用处在于它能为你在别的程序中重用它提供的服务和功能。Python附带的标准库就是这<br>样一组模块的例子。</li>
</ul>
<h3 id="使用sys模块"><a href="#使用sys模块" class="headerlink" title="使用sys模块"></a>使用sys模块</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment">#-*- coding: utf-8 -*-</span></div><div class="line"><span class="comment">#Todo: using_sys.py</span></div><div class="line"><span class="keyword">import</span> sys  <span class="comment">#sys是system的缩写</span></div><div class="line"><span class="keyword">print</span> <span class="string">'The command line arguments are:'</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> sys.argv:</div><div class="line"><span class="comment">#脚本的名称总是sys.argv列表的第一个参数</span></div><div class="line">    <span class="keyword">print</span> i</div><div class="line"><span class="keyword">print</span> <span class="string">'\n\nThe PYTHON PATH is'</span>, sys.path, <span class="string">'\n'</span></div><div class="line"><span class="comment">###Output</span></div><div class="line">[root@Mo arvon_python]<span class="comment"># python using_sys.py</span></div><div class="line">The command line arguments are:</div><div class="line">using_sys.py</div><div class="line"></div><div class="line"></div><div class="line">The PYTHON PATH <span class="keyword">is</span> [<span class="string">'/root/arvon_python'</span>, <span class="string">'/usr/lib64/python26.zip'</span>, <span class="string">'/usr/lib64/python2.6'</span>, <span class="string">'/usr/lib64/python2.6/plat-linux2'</span>, <span class="string">'/usr/lib64/python2.6/lib-tk'</span>, <span class="string">'/usr/lib64/python2.6/lib-old'</span>, <span class="string">'/usr/lib64/python2.6/lib-dynload'</span>, <span class="string">'/usr/lib64/python2.6/site-packages'</span>, <span class="string">'/usr/lib/python2.6/site-packages'</span>]</div></pre></td></tr></table></figure>
<h3 id="字节编译的-pyc文件"><a href="#字节编译的-pyc文件" class="headerlink" title="字节编译的.pyc文件"></a>字节编译的.pyc文件</h3><ul>
<li>输入一个模块相对来说是一个比较费时的事情，所以Python做了一些技巧，以便使输入模块更<br>加快一些。一种方法是创建 字节编译的文件 ，这些文件以.pyc作为扩展名。字节编译的文件与<br>Python变换程序的中间状态有关（是否还记得Python如何工作的介绍？）。当你在下次从别的<br>程序输入这个模块的时候，.pyc文件是十分有用的——它会快得多，因为一部分输入模块所需<br>的处理已经完成了。另外，这些字节编译的文件也是与平台无关的。所以，现在你知道了那<br>些.pyc文件事实上是什么了。</li>
</ul>
<h3 id="from-import语句"><a href="#from-import语句" class="headerlink" title="from..import语句"></a>from..import语句</h3><ul>
<li>如果你想要直接输入argv变量到你的程序中（避免在每次使用它时打sys.），那么你可以使用<br>from sys import argv语句。如果你想要输入所有sys模块使用的名字，那么你可以使用from sys<br>import *语句。这对于所有模块都适用。一般说来，应该避免使用from..import而使用import语<br>句，因为这样可以使你的程序更加易读，也可以避免名称的冲突。</li>
<li>不建议使用，尽量使用sys.argv这样的</li>
</ul>
<h3 id="模块的name-这里左右都是两个下划线"><a href="#模块的name-这里左右都是两个下划线" class="headerlink" title="模块的name(这里左右都是两个下划线)"></a>模块的<strong>name</strong>(这里左右都是两个下划线)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment">#-*- coding: utf-8 -*-</span></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">' __main__ '</span>:</div><div class="line"><span class="comment">#模块是对象，并且所有的模块都有一个内置属性 __name__。一个模块的 __name__ 的值取决于您如何应用模块。如果 import 一个模块，那么模块__name__ 的值通常为模块文件名，不带路径或者文件扩展名。但是您也可以像一个标准的程序样直接运行模块，在这 种情况下, __name__ 的值将是一个特别缺省"__main__"</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'This program is being run by itself'</span></div><div class="line"><span class="keyword">else</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">'I am being imorted form another module'</span></div></pre></td></tr></table></figure>
<h3 id="创造自己的module"><a href="#创造自己的module" class="headerlink" title="创造自己的module"></a>创造自己的module</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment">#-*- coding: utf-8 -*-</span></div><div class="line"><span class="comment">#Todo: creat own module.py</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sayHi</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'Hi, this is my wife pikachu.'</span></div><div class="line">version = <span class="string">'0.1'</span></div><div class="line"><span class="comment">#End of  my module.py</span></div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python   #使用自己创建的模块</span></div><div class="line"><span class="comment">#-*- coding: utf-8 -*-</span></div><div class="line"><span class="comment">#Todo: use my own module</span></div><div class="line"><span class="keyword">import</span> myModule</div><div class="line">myModule.sayHi()</div><div class="line"><span class="keyword">print</span> <span class="string">'Version'</span>,myModule.version</div><div class="line"></div><div class="line"><span class="comment">### Output</span></div><div class="line"></div><div class="line">[root@Mo arvon_python]<span class="comment"># python usemyModule.py</span></div><div class="line">Hi, this <span class="keyword">is</span> my wife pikachu.</div><div class="line">Version <span class="number">0.1</span></div></pre></td></tr></table></figure>
<h3 id="使用dir函数"><a href="#使用dir函数" class="headerlink" title="使用dir函数"></a>使用dir函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> sys</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dir(sys)</div><div class="line">[<span class="string">'__displayhook__'</span>, <span class="string">'__doc__'</span>, <span class="string">'__excepthook__'</span>, <span class="string">'__name__'</span>, <span class="string">'__package__'</span>, <span class="string">'__stderr__'</span>, <span class="string">'__stdin__'</span>, <span class="string">'__stdout__'</span>, <span class="string">'_clear_type_cache'</span>, <span class="string">'_current_frames'</span>, <span class="string">'_getframe'</span>, <span class="string">'api_version'</span>, <span class="string">'argv'</span>, <span class="string">'builtin_module_names'</span>, <span class="string">'byteorder'</span>, <span class="string">'call_tracing'</span>, <span class="string">'callstats'</span>, <span class="string">'copyright'</span>, <span class="string">'displayhook'</span>, <span class="string">'dont_write_bytecode'</span>, <span class="string">'exc_clear'</span>, <span class="string">'exc_info'</span>, <span class="string">'exc_type'</span>, <span class="string">'excepthook'</span>, <span class="string">'exec_prefix'</span>, <span class="string">'executable'</span>, <span class="string">'exit'</span>, <span class="string">'flags'</span>, <span class="string">'float_info'</span>, <span class="string">'getcheckinterval'</span>, <span class="string">'getdefaultencoding'</span>, <span class="string">'getdlopenflags'</span>, <span class="string">'getfilesystemencoding'</span>, <span class="string">'getprofile'</span>, <span class="string">'getrecursionlimit'</span>, <span class="string">'getrefcount'</span>, <span class="string">'getsizeof'</span>, <span class="string">'gettrace'</span>, <span class="string">'hexversion'</span>, <span class="string">'maxint'</span>, <span class="string">'maxsize'</span>, <span class="string">'maxunicode'</span>, <span class="string">'meta_path'</span>, <span class="string">'modules'</span>, <span class="string">'path'</span>, <span class="string">'path_hooks'</span>, <span class="string">'path_importer_cache'</span>, <span class="string">'platform'</span>, <span class="string">'prefix'</span>, <span class="string">'ps1'</span>, <span class="string">'ps2'</span>, <span class="string">'py3kwarning'</span>, <span class="string">'setcheckinterval'</span>, <span class="string">'setdlopenflags'</span>, <span class="string">'setprofile'</span>, <span class="string">'setrecursionlimit'</span>, <span class="string">'settrace'</span>, <span class="string">'stderr'</span>, <span class="string">'stdin'</span>, <span class="string">'stdout'</span>, <span class="string">'subversion'</span>, <span class="string">'version'</span>, <span class="string">'version_info'</span>, <span class="string">'warnoptions'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dir()</div><div class="line">[<span class="string">'__builtins__'</span>, <span class="string">'__doc__'</span>, <span class="string">'__name__'</span>, <span class="string">'__package__'</span>, <span class="string">'sys'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dir()</div><div class="line">[<span class="string">'__builtins__'</span>, <span class="string">'__doc__'</span>, <span class="string">'__name__'</span>, <span class="string">'__package__'</span>, <span class="string">'a'</span>, <span class="string">'sys'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dela</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">NameError: name <span class="string">'dela'</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dir()</div><div class="line">[<span class="string">'__builtins__'</span>, <span class="string">'__doc__'</span>, <span class="string">'__name__'</span>, <span class="string">'__package__'</span>, <span class="string">'a'</span>, <span class="string">'sys'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> a</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dir ()</div><div class="line">[<span class="string">'__builtins__'</span>, <span class="string">'__doc__'</span>, <span class="string">'__name__'</span>, <span class="string">'__package__'</span>, <span class="string">'sys'</span>]</div><div class="line"><span class="comment">###说明</span></div><div class="line"><span class="comment">#首先，我们来看一下在输入的sys模块上使用dir。我们看到它包含一个庞大的属性列表。</span></div><div class="line"><span class="comment">#接下来，我们不给dir函数传递参数而使用它——默认地，它返回当前模块的属性列表。注</span></div><div class="line"><span class="comment">#意，输入的模块同样是列表的一部分。</span></div><div class="line"><span class="comment">#为了观察dir的作用，我们定义一个新的变量a并且给它赋一个值，然后检验dir，我们观察到在</span></div><div class="line"><span class="comment">#列表中增加了以上相同的值。我们使用del语句删除当前模块中的变量/属性，这个变化再一次</span></div><div class="line"><span class="comment">#反映在dir的输出中。</span></div><div class="line"><span class="comment">#关于del的一点注释——这个语句在运行后被用来 删除 一个变量/名称。在这个例子中，del a，</span></div><div class="line"><span class="comment">#你将无法再使用变量a——它就好像从来没有存在过一样。</span></div></pre></td></tr></table></figure>
<h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><ul>
<li>数据结构基本上就是它们可以处理一些数据的结构，或说，它们是用来存储一组相关数据的。<br>在Python中有三种内建的数据结构——列表、元组和字典。</li>
</ul>
<h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><ul>
<li>list是处理一组有序项目的数据结构，即你可以在一个列表中存储一个 序列 的项目。假想你有<br>一个购物列表，上面记载着你要买的东西，你就容易理解列表了。只不过在你的购物表上，可<br>能每样东西都独自占有一行，而在Python中，你在每个项目之间用逗号分割。<br>列表中的项目应该包括在方括号中，这样Python就知道你是在指明一个列表。一旦你创建了一<br>个列表，你可以添加、删除或是搜索列表中的项目。由于你可以增加或删除项目，我们说列表<br>是 可变的 数据类型，即这种类型是可以被改变的。</li>
<li>eggs:<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment">#-*- coding: utf-8 -*-</span></div><div class="line"><span class="comment">#Todo: using_list.py</span></div><div class="line">likelist = [<span class="string">'apple'</span>, <span class="string">'mango'</span>, <span class="string">'pikachu'</span>, <span class="string">'mo'</span>]</div><div class="line"><span class="keyword">print</span> <span class="string">'I have'</span>, len(likelist), <span class="string">'Just do.'</span></div><div class="line"><span class="keyword">print</span> <span class="string">'These things include:'</span>,</div><div class="line"><span class="keyword">for</span> eachone <span class="keyword">in</span> likelist:</div><div class="line">    <span class="keyword">print</span> eachone,</div><div class="line"><span class="keyword">print</span> <span class="string">'\nI just like live with her.'</span></div><div class="line">likelist.append(<span class="string">'Arvon'</span>)</div><div class="line"><span class="keyword">print</span> <span class="string">'My life now is include:'</span>, likelist</div><div class="line"><span class="keyword">print</span> <span class="string">'I want sort mylist now'</span></div><div class="line">likelist.sort()</div><div class="line"><span class="keyword">print</span> <span class="string">'Have done, Now the list is:'</span>, likelist</div><div class="line"><span class="keyword">print</span> <span class="string">'The first item now is'</span>, likelist[<span class="number">0</span>]</div><div class="line">oldlist = likelist[<span class="number">0</span>]</div><div class="line"><span class="keyword">del</span> likelist[<span class="number">0</span>]</div><div class="line"><span class="keyword">print</span> <span class="string">'I am'</span>, oldlist</div><div class="line"><span class="keyword">print</span> <span class="string">'My list now is:'</span>, likelist</div><div class="line"><span class="comment">##[root@Mo arvon_python]# python useing_list.py</span></div><div class="line">I have <span class="number">4</span> Just do.</div><div class="line">These things include: apple mango pikachu mo</div><div class="line">I just like live <span class="keyword">with</span> her.</div><div class="line">My life now <span class="keyword">is</span> include: [<span class="string">'apple'</span>, <span class="string">'mango'</span>, <span class="string">'pikachu'</span>, <span class="string">'mo'</span>, <span class="string">'Arvon'</span>]</div><div class="line">I want sort mylist now</div><div class="line">Have done, Now the list <span class="keyword">is</span>: [<span class="string">'Arvon'</span>, <span class="string">'apple'</span>, <span class="string">'mango'</span>, <span class="string">'mo'</span>, <span class="string">'pikachu'</span>]</div><div class="line">The first item now <span class="keyword">is</span> Arvon</div><div class="line">I am Arvon</div><div class="line">My list now <span class="keyword">is</span>: [<span class="string">'apple'</span>, <span class="string">'mango'</span>, <span class="string">'mo'</span>, <span class="string">'pikachu'</span>]</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="对象和类简介"><a href="#对象和类简介" class="headerlink" title="对象和类简介"></a>对象和类简介</h3><ul>
<li>列表是使用对象和类的一个例子。当你使用变量i并给它赋值的时候，比如赋整数5，你可以认<br>为你创建了一个类（类型）int的对象（实例）i。事实上，你可以看一下help(int)以更好地理解<br>这一点。<br>类也有方法，即仅仅为类而定义地函数。仅仅在你有一个该类的对象的时候，你才可以使用这<br>些功能。例如，Python为list类提供了append方法，这个方法让你在列表尾添加一个项目。例如<br>mylist.append(‘an item’)列表mylist中增加那个字符串。注意，使用点号来使用对象的方法。<br>一个类也有域，它是仅仅为类而定义的变量。仅仅在你有一个该类的对象的时候，你才可以使<br>用这些变量/名称。类也通过点号使用，例如mylist.field。</li>
</ul>
<h3 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h3><ul>
<li>元组和列表十分类似，只不过元组和字符串一样是 不可变的 即你不能修改元组。元组通过圆<br>括号中用逗号分割的项目定义。元组通常用在使语句或用户定义的函数能够安全地采用一组值<br>的时候，即被使用的元组的值不会改变。<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment">#-*- coding: utf-8 -*-</span></div><div class="line">home = (<span class="string">'Mo'</span>, <span class="string">'Arvon'</span>, <span class="string">'Pikachu'</span>)</div><div class="line"><span class="keyword">print</span> <span class="string">'Numble of home is'</span>, len(home)</div><div class="line">ourhome = (<span class="string">'Mo'</span>, <span class="string">'Arvon'</span>, <span class="string">'SmallArvon'</span>)</div><div class="line"><span class="keyword">print</span> <span class="string">'Number of ourhome is'</span>, len(ourhome)</div><div class="line"><span class="keyword">print</span> <span class="string">'All member in ourhome are'</span>, ourhome</div><div class="line"><span class="keyword">print</span> <span class="string">'come here in later'</span>, ourhome[<span class="number">2</span>]</div><div class="line"><span class="keyword">print</span> <span class="string">'Last member is'</span>, ourhome[<span class="number">2</span>][<span class="number">2</span>]</div><div class="line"><span class="comment">### Output</span></div><div class="line">root@Mo arvon_python]<span class="comment"># python using_tuple.py</span></div><div class="line">Numble of home <span class="keyword">is</span> <span class="number">3</span></div><div class="line">Number of ourhome <span class="keyword">is</span> <span class="number">3</span></div><div class="line">All member <span class="keyword">in</span> ourhome are (<span class="string">'Mo'</span>, <span class="string">'Arvon'</span>, <span class="string">'SmallArvon'</span>)</div><div class="line">come here <span class="keyword">in</span> later SmallArvon</div><div class="line">Last member <span class="keyword">is</span> a</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="元组与打印语句"><a href="#元组与打印语句" class="headerlink" title="元组与打印语句"></a>元组与打印语句</h4><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/python</div><div class="line">#-*- coding: utf-8 -*-</div><div class="line">#Todo: print_tuple.py</div><div class="line">age = 23</div><div class="line">name = 'Arvon'</div><div class="line">print '%s is %d years lold' % (name, age)</div><div class="line">#print语句可以使用跟着%符号的项目元组的字符串。这些字符串具备定制的功能。定制让输出</div><div class="line">#满足某种特定的格式。定制可以是%s表示字符串或%d表示整数。元组必须按照相同的顺序来</div><div class="line">#对应这些定制。</div><div class="line">print 'Why is %s playing with that python?' % name</div><div class="line"></div><div class="line">###Output</div><div class="line">[root@Mo arvon_python]# python print_tuple.py</div><div class="line">Arvon is 23 years lold</div><div class="line">Why is Arvon playing with that python?</div></pre></td></tr></table></figure>
<p>###字典</p>
<ul>
<li><p>只能使用不可变的对象（比如字符串）来作为字典的键，但是你可以把不可变或可变<br>的对象作为字典的值。基本说来就是，你应该只使用简单的对象作为键。</p>
</li>
<li><p>键值对在字典中以这样的方式标记：d = {key1 : value1, key2 : value2 }。注意它们的键/值对用冒<br>号分割，而各个对用逗号分割，所有这些都包括在花括号中。</p>
</li>
<li><p>字典中的键/值对是没有顺序的。如果你想要一个特定的顺序，那么你应该在使用前自己<br>对它们排序。</p>
</li>
<li><p>字典是dict类的实例/对象。</p>
</li>
</ul>
<p>####使用字典实例<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment">#-*- coding: utf-8 -*-</span></div><div class="line"><span class="comment">#Todo: script's name is using_dict.py</span></div><div class="line">ad = &#123;<span class="string">'arvon'</span>:<span class="string">'126@126.com'</span>,</div><div class="line">    <span class="string">'Mo'</span>:<span class="string">'Mo@mo.com'</span>,</div><div class="line">    <span class="string">'Pikachu'</span>:<span class="string">'pikachu@love.com'</span>,</div><div class="line">    <span class="string">'marry'</span>:<span class="string">'love@you.com'</span></div><div class="line">    &#125;</div><div class="line"><span class="keyword">print</span> <span class="string">"Arvon's email is %s"</span> % ad[<span class="string">'arvon'</span>]</div><div class="line"><span class="comment">#Adding a key/value pair</span></div><div class="line">ad[<span class="string">'life'</span>] = <span class="string">'travl@world.com'</span></div><div class="line"><span class="comment">#Deleting a key/value pair</span></div><div class="line"><span class="keyword">del</span> ad[<span class="string">'marry'</span>]</div><div class="line"><span class="keyword">print</span> <span class="string">'\n There are %d contacts in the address-book\n'</span> % len(ad)</div><div class="line"><span class="keyword">for</span> name,address <span class="keyword">in</span> ad.items():</div><div class="line">    <span class="keyword">print</span> <span class="string">'Contact %s at %s'</span> % (name, address)</div><div class="line"><span class="keyword">if</span> <span class="string">'life'</span> <span class="keyword">in</span> ad:</div><div class="line">   <span class="keyword">print</span> <span class="string">"\n life's address is %s"</span> % ad[<span class="string">'life'</span>]</div></pre></td></tr></table></figure></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">[root@Mo arvon_python]# python using_dict.py</div><div class="line">Arvon's email is 126@126.com</div><div class="line"></div><div class="line"> There are 4 contacts in the address-book</div><div class="line"></div><div class="line">Contact Mo at Mo@mo.com</div><div class="line">Contact arvon at 126@126.com</div><div class="line">Contact life at travl@world.com</div><div class="line">Contact Pikachu at pikachu@love.com</div><div class="line"></div><div class="line"> life's address is travl@world.com</div></pre></td></tr></table></figure>
<p>###序列<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment">#-*- coding: utf-8 -*-</span></div><div class="line"><span class="comment">#Todo: The script's name is seq.py</span></div><div class="line"><span class="comment">#</span></div><div class="line">shoplist = [<span class="string">'apple'</span>, <span class="string">'mango'</span>, <span class="string">'carrot'</span>, <span class="string">'banana'</span>]</div><div class="line"><span class="comment">#</span></div><div class="line"><span class="keyword">print</span> <span class="string">'Item 0 is'</span>, shoplist[<span class="number">0</span>]</div><div class="line"><span class="keyword">print</span> <span class="string">'Item 1 is'</span>, shoplist[<span class="number">1</span>]</div><div class="line"><span class="keyword">print</span> <span class="string">'Item 2 is'</span>, shoplist[<span class="number">2</span>]</div><div class="line"><span class="keyword">print</span> <span class="string">'Item 3 is'</span>, shoplist[<span class="number">3</span>]</div><div class="line"><span class="keyword">print</span> <span class="string">'Item -1 is'</span>, shoplist[<span class="number">-1</span>]</div><div class="line"><span class="keyword">print</span> <span class="string">'Item -2 is'</span>, shoplist[<span class="number">-2</span>]</div><div class="line"><span class="comment"># Slicing on a list</span></div><div class="line"><span class="keyword">print</span> <span class="string">'Item 1 to 3 is'</span>, shoplist[<span class="number">1</span>:<span class="number">3</span>]</div><div class="line"><span class="keyword">print</span> <span class="string">'Item 2 to end is'</span>, shoplist[<span class="number">2</span>:]</div><div class="line"><span class="keyword">print</span> <span class="string">'Item 1 to -1 is'</span>, shoplist[<span class="number">1</span>:<span class="number">-1</span>]</div><div class="line"><span class="keyword">print</span> <span class="string">'Item start to end is'</span>, shoplist[:]</div><div class="line"><span class="comment"># Slicing on a string</span></div><div class="line">name = <span class="string">'swaroop'</span></div><div class="line"><span class="keyword">print</span> <span class="string">'characters 1 to 3 is'</span>, name[<span class="number">1</span>:<span class="number">3</span>]</div><div class="line"><span class="keyword">print</span> <span class="string">'characters 2 to end is'</span>, name[<span class="number">2</span>:]</div><div class="line"><span class="keyword">print</span> <span class="string">'characters 1 to -1 is'</span>, name[<span class="number">1</span>:<span class="number">-1</span>]</div><div class="line"><span class="keyword">print</span> <span class="string">'characters start to end is'</span>, name[:]</div></pre></td></tr></table></figure></p>
<p><strong>输出：</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">[root@Mo arvon_python]<span class="comment"># python seq.py</span></div><div class="line">Item <span class="number">0</span> <span class="keyword">is</span> apple</div><div class="line">Item <span class="number">1</span> <span class="keyword">is</span> mango</div><div class="line">Item <span class="number">2</span> <span class="keyword">is</span> carrot</div><div class="line">Item <span class="number">3</span> <span class="keyword">is</span> banana</div><div class="line">Item <span class="number">-1</span> <span class="keyword">is</span> banana</div><div class="line">Item <span class="number">-2</span> <span class="keyword">is</span> carrot</div><div class="line">Item <span class="number">1</span> to <span class="number">3</span> <span class="keyword">is</span> [<span class="string">'mango'</span>, <span class="string">'carrot'</span>]</div><div class="line">Item <span class="number">2</span> to end <span class="keyword">is</span> [<span class="string">'carrot'</span>, <span class="string">'banana'</span>]</div><div class="line">Item <span class="number">1</span> to <span class="number">-1</span> <span class="keyword">is</span> [<span class="string">'mango'</span>, <span class="string">'carrot'</span>]</div><div class="line">Item start to end <span class="keyword">is</span> [<span class="string">'apple'</span>, <span class="string">'mango'</span>, <span class="string">'carrot'</span>, <span class="string">'banana'</span>]</div><div class="line">characters <span class="number">1</span> to <span class="number">3</span> <span class="keyword">is</span> wa</div><div class="line">characters <span class="number">2</span> to end <span class="keyword">is</span> aroop</div><div class="line">characters <span class="number">1</span> to <span class="number">-1</span> <span class="keyword">is</span> waroo</div><div class="line">characters start to end <span class="keyword">is</span> swaroop</div></pre></td></tr></table></figure></p>
<p>###引用</p>
<ul>
<li>当你创建一个对象并给它赋一个变量的时候，这个变量仅仅 引用 那个对象，而不是表示这个<br>对象本身！也就是说，变量名指向你计算机中存储那个对象的内存。这被称作名称到对象的绑<br>定。</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment">#-*- coding: utf-8 -*-</span></div><div class="line"><span class="comment">#Todo: refernce.py</span></div><div class="line"><span class="keyword">print</span> <span class="string">'Simple Assignment'</span></div><div class="line">shoplist = [<span class="string">'apple'</span>, <span class="string">'mango'</span>, <span class="string">'carrot'</span>, <span class="string">'banana'</span>]</div><div class="line">mylist = shoplist <span class="comment"># mylist is just another name pointing to the same object!</span></div><div class="line"><span class="keyword">del</span> shoplist[<span class="number">0</span>]</div><div class="line"><span class="keyword">print</span> <span class="string">'shoplist is'</span>, shoplist</div><div class="line"><span class="keyword">print</span> <span class="string">'mylist is'</span>, mylist</div><div class="line"><span class="comment"># notice that both shoplist and mylist both print the same list without</span></div><div class="line"><span class="comment"># the 'apple' confirming that they point to the same object</span></div><div class="line"><span class="keyword">print</span> <span class="string">'Copy by making a full slice'</span></div><div class="line">mylist = shoplist[:] <span class="comment"># make a copy by doing a full slice</span></div><div class="line"><span class="keyword">del</span> mylist[<span class="number">0</span>] <span class="comment"># remove first item</span></div><div class="line"><span class="keyword">print</span> <span class="string">'shoplist is'</span>, shoplist</div><div class="line"><span class="keyword">print</span> <span class="string">'mylist is'</span>, mylist</div><div class="line"><span class="comment"># notice that now the two lists are different</span></div></pre></td></tr></table></figure>
<p><strong>Output:</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[root@Mo arvon_python]<span class="comment"># python referen.py</span></div><div class="line">Simple Assignment</div><div class="line">shoplist <span class="keyword">is</span> [<span class="string">'mango'</span>, <span class="string">'carrot'</span>, <span class="string">'banana'</span>]</div><div class="line">mylist <span class="keyword">is</span> [<span class="string">'mango'</span>, <span class="string">'carrot'</span>, <span class="string">'banana'</span>]</div><div class="line">Copy by making a full slice</div><div class="line">shoplist <span class="keyword">is</span> [<span class="string">'mango'</span>, <span class="string">'carrot'</span>, <span class="string">'banana'</span>]</div><div class="line">mylist <span class="keyword">is</span> [<span class="string">'carrot'</span>, <span class="string">'banana'</span>]</div></pre></td></tr></table></figure></p>
<p>##编写脚本实例</p>
<p>###备份脚本<br><strong>Question：</strong></p>
<ol>
<li>需要备份的文件和目录由一个列表指定。</li>
<li>备份应该保存在主备份目录中。</li>
<li>文件备份成一个zip文件。</li>
<li>zip存档的名称是当前的日期和时间。</li>
<li>我们使用标准的zip命令，它通常默认地随Linux/Unix发行版提供。Windows用户可以使<br>用Info-Zip程序。注意你可以使用任何地存档命令，只要它有命令行界面就可以了，那<br>样的话我们可以从我们的脚本中传递参数给它。</li>
</ol>
<p>####Answer_1<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment">#-*- coding: utf-8 -*-</span></div><div class="line"><span class="comment">#Todo: backup_verl.py</span></div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="comment"># 1. The files and directories to be backed up are specified in a list.</span></div><div class="line"><span class="comment">#source = ['/home/swaroop/byte', '/home/swaroop/bin']</span></div><div class="line">source = [ <span class="string">'/etc'</span>]</div><div class="line"><span class="comment"># If you are using Windows, use source = [r'C:\Documents', r'D:\Work'] or something like that</span></div><div class="line"><span class="comment"># 2. The backup must be stored in a main backup directory</span></div><div class="line">target_dir = <span class="string">'/mnt/e/backup/'</span> <span class="comment"># Remember to change this to what you will be using</span></div><div class="line"><span class="comment"># 3. The files are backed up into a zip file.</span></div><div class="line"><span class="comment"># 4. The name of the zip archive is the current date and time</span></div><div class="line">target = target_dir + time.strftime(<span class="string">'%Y%m%d%H%M%S'</span>) + <span class="string">'.zip'</span></div><div class="line"><span class="comment"># 5. We use the zip command (in Unix/Linux) to put the files in a zip archive</span></div><div class="line">zip_command = <span class="string">"zip -qr '%s' %s"</span> % (target, <span class="string">' '</span>.join(source))</div><div class="line"><span class="comment"># Run the backup</span></div><div class="line"><span class="keyword">if</span> os.system(zip_command) == <span class="number">0</span>:</div><div class="line"> <span class="keyword">print</span> <span class="string">'Successful backup to'</span>, target</div><div class="line"><span class="keyword">else</span>:</div><div class="line"> <span class="keyword">print</span> <span class="string">'Backup FAILED'</span></div></pre></td></tr></table></figure></p>
<p>####Answer_2</p>
<ul>
<li>注意os.sep变量的用法——这会根据你的操作系统给出目录分隔符，即在Linux、Unix下它<br>是’/‘，在Windows下它是’\‘，而在Mac OS下它是’:’。使用os.sep而非直接使用字符，会使我们的<br>程序具有移植性，可以在上述这些系统下工作。<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment">#-*- coding: utf-8 -*-</span></div><div class="line"><span class="comment">#Todo: backup_ver2.py</span></div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="comment">#1.The files and directoryes to be backed up are specified in a list.</span></div><div class="line">source = [<span class="string">'/etc/fstab'</span>, <span class="string">'etc'</span>]</div><div class="line"><span class="comment">#if you are using Windows, use source = [r'C:\Documents',r'D:\work']</span></div><div class="line"><span class="comment">#2.The backup must be stored in a main backup directory</span></div><div class="line">target_dir = <span class="string">'/mnt/'</span></div><div class="line"><span class="comment">#3.The files are backed up into a zip file.</span></div><div class="line"><span class="comment">#4.The current_dir + time.strftime('%Y%m%d')</span></div><div class="line">today = target_dir + time.strftime(<span class="string">'%Y%m%d'</span>)</div><div class="line"><span class="comment">#The current time is the name of the zip archive</span></div><div class="line">now = time.strftime(<span class="string">'%H%M%S'</span>)</div><div class="line"><span class="comment">#Create the subdirectory if it isn't already threre</span></div><div class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(today):</div><div class="line">    os.mkdir(today)</div><div class="line">    <span class="keyword">print</span> <span class="string">'Successfully creatd directory'</span>, today</div><div class="line"><span class="comment">#The name of the zip file</span></div><div class="line">target = today + os.sep + now + <span class="string">'.zip'</span></div><div class="line"><span class="comment">#5.We use the zip command(in Unix/Linux) to put the files in a zip archive</span></div><div class="line">zip_command = <span class="string">"zip -qr '%s' %s"</span> % (target, <span class="string">' '</span>.join(source))</div><div class="line"><span class="comment">#Run the backup</span></div><div class="line"><span class="keyword">if</span> os.system(zip_command) == <span class="number">0</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">'Successful backup to'</span>, target</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">'Backup FAILED'</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>####Answer_3<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment">#-*- coding: utf-8 -*-</span></div><div class="line"><span class="comment">#Todo: backup_ver3.py</span></div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="comment">#1.The files and directories to be backed up are specified in a list.</span></div><div class="line">source = [<span class="string">'/etc/'</span>, <span class="string">'/etc/fstab'</span>]</div><div class="line">target_dir = <span class="string">'/mnt/'</span></div><div class="line">today = target_dir + time.strftime(<span class="string">'%Y%m%d'</span>)</div><div class="line">now = time.strftime(<span class="string">'%H%M%S'</span>)</div><div class="line">comment = raw_input(<span class="string">"Enter a commnet--&gt;"</span>)</div><div class="line"><span class="keyword">if</span> len(comment) == <span class="number">0</span>:<span class="comment">#check if a comment was entered</span></div><div class="line">    target = today + os.sep + now + <span class="string">'.zip'</span></div><div class="line"><span class="keyword">else</span>:</div><div class="line">    target = today + os.sep + now + <span class="string">'_'</span> +\</div><div class="line">    comment.replace(<span class="string">' '</span>, <span class="string">' '</span>) + <span class="string">'.zip'</span></div><div class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(today):</div><div class="line">    os.mkdir(today)</div><div class="line">    <span class="keyword">print</span> <span class="string">'Successfully created directory'</span>, today</div><div class="line">zip_command = <span class="string">"zip -qr '%s' %s"</span> % (target, <span class="string">' '</span>.join(source))</div><div class="line"><span class="keyword">if</span> os.system(zip_command) == <span class="number">0</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">"Successfule backup to"</span>, target</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">'Backup FAILED'</span></div></pre></td></tr></table></figure></p>
<p>##面向对象的编程</p>
<p>###面向对象介绍<br>到目前为止，在我们的程序中，我们都是根据操作数据的函数或语句块来设计程序的。这被称<br>为<code>面向过程的</code>编程。还有一种把数据和功能结合起来，用称为对象的东西包裹起来组织程序<br>的方法。这种方法称为<code>面向对象</code>的编程理念。在大多数时候你可以使用过程性编程，但是有<br>些时候当你想要编写大型程序或是寻求一个更加合适的解决方案的时候，你就得使用面向对象<br>的编程技术。<br>类和对象是面向对象编程的两个主要方面。类创建一个新类型，而对象是这个类的实例 。这类<br>似于你有一个int类型的变量，存储整数的变量是int类的实例（对象）。<br>给C/C++/Java/C#程序员的注释<br>注意，即便是整数也被作为对象（属于int类）。这和C++、Java（1.5版之前）把整数纯粹作为<br>类型是不同的。通过help(int)了解更多这个类的详情。 C#和Java 1.5程序员会熟悉这个概念，因<br>为它类似与 封装与解封装 的概念。<br>对象可以使用普通的 属于 对象的变量存储数据。属于一个对象或类的变量被称为域。对象也<br>可以使用 属于 类的函数来具有功能。这样的函数被称为类的方法。这些术语帮助我们把它们<br>与孤立的函数和变量区分开来。域和方法可以合称为类的属性。<br>域有两种类型——属于每个实例/类的对象或属于类本身。它们分别被称为实例变量和类变量。<br>类使用class关键字创建。类的域和方法被列在一个缩进块中。</p>
<p>###self<br>类的方法与普通的函数只有一个特别的区别——它们必须有一个额外的第一个参数名称，但是<br>在调用这个方法的时候你不为这个参数赋值，Python会提供这个值。这个特别的变量指对象本<br>身，按照惯例它的名称是self。<br>虽然你可以给这个参数任何名称，但是 强烈建议 你使用self这个名称——其他名称都是不赞成<br>你使用的。使用一个标准的名称有很多优点——你的程序读者可以迅速识别它，如果使用self<br>的话，还有些IDE（集成开发环境）也可以帮助你。<br>给C++/Java/C#程序员的注释<br>Python中的self等价于C++中的self指针和Java、C#中的this参考。<br>你一定很奇怪Python如何给self赋值以及为何你不需要给它赋值。举一个例子会使此变得清<br>晰。假如你有一个类称为MyClass和这个类的一个实例MyObject。当你调用这个对象的方法<br>MyObject.method(arg1, arg2)的时候，这会由Python自动转为MyClass.method(MyObject, arg1,<br>arg2)——这就是self的原理了。<br>这也意味着如果你有一个不需要参数的方法，你还是得给这个方法定义一个self参数。</p>
<p>###类</p>
<p>####创建一个类<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment">#-*- coding: utf-8 -*-</span></div><div class="line"><span class="comment">#Todo: simplest_class.py</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></div><div class="line">    <span class="keyword">pass</span><span class="comment">#Anempty block</span></div><div class="line">p = Person()</div><div class="line"><span class="keyword">print</span> p</div><div class="line"></div><div class="line"><span class="comment">#**输出：**</span></div><div class="line">[root@Mo arvon_python]<span class="comment"># python simplestclass.py</span></div><div class="line">&lt;__main__.Person instance at <span class="number">0x7fdec3490d88</span>&gt;</div></pre></td></tr></table></figure></p>
<p><strong>说明：</strong>我们使用class语句后跟类名，创建了一个新的类。这后面跟着一个缩进的语句块形成类体。在<br>这个例子中，我们使用了一个空白块，它由pass语句表示。<br>我们简单地打印了这个变量的类型。它告诉我们我们已经在<strong>main</strong>模块中有了一个Person类的实例。<br>可以注意到存储对象的计算机内存地址也打印了出来。这个地址在你的计算机上会是另外一个<br>值，因为Python可以在任何空位存储对象。</p>
<p>###对象的方法</p>
<p>####使用对象的方法<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/python</div><div class="line">#-*- coding: utf-8 -*-</div><div class="line">#Todo: method.py</div><div class="line">class Person:</div><div class="line">    def sayHi(self):</div><div class="line">        print 'Hello, how are you?'</div><div class="line">p = Person()</div><div class="line">p.sayHi()</div><div class="line">#This short example can also be written as Person().sayHi()</div><div class="line"></div><div class="line">###Output</div><div class="line">[root@Mo arvon_python]# python method.py</div><div class="line">Hello, how are you?</div></pre></td></tr></table></figure></p>
<p>###使用<strong>init</strong>方法</p>
<ul>
<li><strong>init</strong>方法在类的一个对象被建立时，马上运行。这个方法可以用来对你的对象做一些你希<br>望的 初始化 。注意，这个名称的开始和结尾都是双下划线。</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment">#-*- coding: utf-8 -*-</span></div><div class="line"><span class="comment">#Todo: class_init.py</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></div><div class="line">        self.name = name</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sayHi</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'Hello, my name is'</span>, self.name</div><div class="line">p = Person(<span class="string">'Arvon'</span>)</div><div class="line">p.sayHi()</div><div class="line"><span class="comment">#This short example can also be written as Person('Arvon').sayHi()</span></div><div class="line"></div><div class="line"><span class="comment">###Output</span></div><div class="line">[root@Mo arvon_python]<span class="comment"># python class_init.py</span></div><div class="line">Hello, my name <span class="keyword">is</span> Arvon</div></pre></td></tr></table></figure>
<p>###类与对象的方法</p>
<ul>
<li>事实上，类与对象的数据部分只是与类和对象的名称空间<code>绑定</code>的普通变量，即这些名称只<br>在这些类与对象的前提下有效。<br>有两种类型的<code>域</code> ——类的变量和对象的变量，它们根据是类还是对象拥有这个变量而区分。<br><code>类的变量</code>由一个类的所有对象（实例）共享使用。只有一个类变量的拷贝，所以当某个对象<br>对类的变量做了改动的时候，这个改动会反映到所有其他的实例上。<br><code>对象的变量</code>由类的每个对象/实例拥有。因此每个对象有自己对这个域的一份拷贝，即它们不<br>是共享的，在同一个类的不同实例中，虽然对象的变量有相同的名称，但是是互不相关的。通<br>过一个例子会使这个易于理解。</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment">#-*- coding: utf-8 -*-</span></div><div class="line"><span class="comment">#Todo: obj_var.py</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></div><div class="line">    <span class="string">'''Represents a person.'''</span></div><div class="line">    population = <span class="number">0</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></div><div class="line">        <span class="string">'''INitializes the person's data.'''</span></div><div class="line">        self.name = name</div><div class="line">        <span class="keyword">print</span> <span class="string">'(Initializing %s)'</span> % self.name</div><div class="line">        <span class="comment">#When this person is created, he/she</span></div><div class="line">        <span class="comment">#adds to population</span></div><div class="line">        Person.population += <span class="number">1</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">'''I am dying.'''</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'%s says bye.'</span>% self.name</div><div class="line">        Person.population == <span class="number">1</span></div><div class="line">        <span class="keyword">if</span> Person.population == <span class="number">0</span>:</div><div class="line">            <span class="keyword">print</span> <span class="string">'I am the lase one.'</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">print</span> <span class="string">'These are still %d people left.'</span>% Person.population</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sayHi</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">'''Greeting by the person.</span></div><div class="line"></div><div class="line">           Really, that's all it does.'''</div><div class="line">        <span class="keyword">print</span> <span class="string">'Hi, my name is %s.'</span>% self.name</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">howMany</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">'''Prints the curent population.'''</span></div><div class="line">        <span class="keyword">if</span> Person.population == <span class="number">1</span>:</div><div class="line">            <span class="keyword">print</span> <span class="string">'I am the only person here.'</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">print</span> <span class="string">"We have %d persons here."</span>% Person.population</div><div class="line">swaroop = Person(<span class="string">'Arvon'</span>)</div><div class="line">swaroop.sayHi()</div><div class="line">swaroop.howMany()</div><div class="line"></div><div class="line"><span class="comment">###Output</span></div><div class="line">[root@Mo arvon_python]<span class="comment"># python obj_var.py</span></div><div class="line">(Initializing Arvon)</div><div class="line">Hi, my name <span class="keyword">is</span> Arvon.</div><div class="line">I am the only person here.</div><div class="line">Arvon says bye.</div><div class="line">These are still <span class="number">1</span> people left.</div></pre></td></tr></table></figure>
<ul>
<li>How to work:<br>这是一个很长的例子，但是它有助于说明类与对象的变量的本质。这里，population属于Person<br>类，因此是一个类的变量。name变量属于对象（它使用self赋值）因此是对象的变量。<br>观察可以发现<strong>init</strong>方法用一个名字来初始化Person实例。在这个方法中，我们让population<br>增加1，这是因为我们增加了一个人。同样可以发现，self.name的值根据每个对象指定，这表<br>明了它作为对象的变量的本质。<br>记住，你只能使用self变量来参考同一个对象的变量和方法。这被称为 属性参考 。<br>在这个程序中，我们还看到docstring对于类和方法同样有用。我们可以在运行时使用Person.<br><strong>doc</strong>和Person.sayHi.<strong>doc</strong>来分别访问类与方法的文档字符串。<br>就如同<strong>init</strong>方法一样，还有一个特殊的方法<strong>del</strong>，它在对象消逝的时候被调用。对象消<br>逝即对象不再被使用，它所占用的内存将返回给系统作它用。在这个方法里面，我们只是简单<br>地把Person.population减1。<br>当对象不再被使用时，<strong>del</strong>方法运行，但是很难保证这个方法究竟在 什么时候 运行。如果<br>你想要指明它的运行，你就得使用del语句，就如同我们在以前的例子中使用的那样。<br>给C++/Java/C#程序员的注释<br>Python中所有的类成员（包括数据成员）都是 公共的 ，所有的方法都是 有效的 。<br>只有一个例外：如果你使用的数据成员名称以 双下划线前缀 比如<strong>privatevar，Python的名称<br>管理体系会有效地把它作为私有变量。<br>这样就有一个惯例，如果某个变量只想在类或对象中使用，就应该以单下划线前缀。而其他的<br>名称都将作为公共的，可以被其他类/对象使用。记住这只是一个惯例，并不是Python所要求<br>的（与双下划线前缀不同）。<br>同样，注意</strong>del__方法与 destructor 的概念类似。</li>
</ul>
<p>###继承<br>面向对象的编程带来的主要好处之一是代码的重用，实现这种重用的方法之一是通过 继承 机<br>制。继承完全可以理解成类之间的<code>类型和子类型</code>关系。<br>假设你想要写一个程序来记录学校之中的教师和学生情况。他们有一些共同属性，比如姓名、<br>年龄和地址。他们也有专有的属性，比如教师的薪水、课程和假期，学生的成绩和学费。<br>你可以为教师和学生建立两个独立的类来处理它们，但是这样做的话，如果要增加一个新的共<br>有属性，就意味着要在这两个独立的类中都增加这个属性。这很快就会显得不实用。<br>一个比较好的方法是创建一个共同的类称为SchoolMember然后让教师和学生的类 继承 这个共<br>同的类。即它们都是这个类型（类）的子类型，然后我们再为这些子类型添加专有的属性。<br>使用这种方法有很多优点。如果我们增加/改变了SchoolMember中的任何功能，它会自动地反<br>映到子类型之中。例如，你要为教师和学生都增加一个新的身份证域，那么你只需简单地把它<br>加到SchoolMember类中。然而，在一个子类型之中做的改动不会影响到别的子类型。另外一个<br>优点是你可以把教师和学生对象都作为SchoolMember对象来使用，这在某些场合特别有用，比<br>如统计学校成员的人数。一个子类型在任何需要父类型的场合可以被替换成父类型，即对象可<br>以被视作是父类的实例，这种现象被称为多态现象。<br>另外，我们会发现在 重用 父类的代码的时候，我们无需在不同的类中重复它。而如果我们使<br>用独立的类的话，我们就不得不这么做了。<br>在上述的场合中，SchoolMember类被称为 基本类 或 超类 。而Teacher和Student类被称为 导出<br>类 或 子类 。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment">#-*- coding: utf-8 -*-</span></div><div class="line"><span class="comment">#Todo: inherit.py</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SchooMember</span>:</span></div><div class="line">    <span class="string">'''Represents any school member.'''</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age)</span>:</span></div><div class="line">        self.name = name</div><div class="line">        self.age = age</div><div class="line">        <span class="keyword">print</span> <span class="string">'(Initialized SchooMember: %s)'</span>% self.name</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tell</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">'''Tell my details.'''</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'Name: "%s" Age: "%s"'</span>% (self.name, self.age)</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span><span class="params">(SchooMember)</span>:</span></div><div class="line">    <span class="string">'''Represents a teacher.'''</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age, salary)</span>:</span></div><div class="line">        SchooMember.__init__(self, name, age)</div><div class="line">        self.salary = salary</div><div class="line">        <span class="keyword">print</span> <span class="string">'(Initialized Teacher: %s)'</span>% self.name</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tell</span><span class="params">(self)</span>:</span></div><div class="line">        SchooMember.tell(self)</div><div class="line">        <span class="keyword">print</span> <span class="string">'Salary: "%d"'</span>% self.salary</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(SchooMember)</span>:</span></div><div class="line">    <span class="string">'''Represents a student.'''</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age, marks)</span>:</span></div><div class="line">        SchooMember.__init__(self, name, age)</div><div class="line">        self.marks = marks</div><div class="line">        <span class="keyword">print</span> <span class="string">'(Initialized Student: %s)'</span>% self.name</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tell</span><span class="params">(self)</span>:</span></div><div class="line">        SchooMember.tell(self)</div><div class="line">        <span class="keyword">print</span> <span class="string">'Marks: "%d"'</span>% self.marks</div><div class="line">t = Teacher(<span class="string">'Mo'</span>, <span class="number">23</span>, <span class="number">5201314</span>)</div><div class="line">s = Student(<span class="string">'Arvon'</span>, <span class="number">24</span>, <span class="number">75</span>)</div><div class="line"><span class="keyword">print</span><span class="comment">#prints a blank line</span></div><div class="line">members = [t, s]</div><div class="line"><span class="keyword">for</span> member <span class="keyword">in</span> members:</div><div class="line">    member.tell()<span class="comment">#works for both Teachers and Students</span></div><div class="line"></div><div class="line"><span class="comment">###Output</span></div><div class="line">[root@Mo arvon_python]<span class="comment"># python inherit.py</span></div><div class="line">(Initialized SchooMember: Mo)</div><div class="line">(Initialized Teacher: Mo)</div><div class="line">(Initialized SchooMember: Arvon)</div><div class="line">(Initialized Student: Arvon)</div><div class="line"></div><div class="line">Name: <span class="string">"Mo"</span> Age: <span class="string">"23"</span></div><div class="line">Salary: <span class="string">"5201314"</span></div><div class="line">Name: <span class="string">"Arvon"</span> Age: <span class="string">"24"</span></div><div class="line">Marks: <span class="string">"75"</span></div></pre></td></tr></table></figure>
<ul>
<li>How tow work<br>为了使用继承，我们把基本类的名称作为一个元组跟在定义类时的类名称之后。然后，我们注<br>意到基本类的<strong>init</strong>方法专门使用self变量调用，这样我们就可以初始化对象的基本类部分。<br>这一点十分重要——Python不会自动调用基本类的constructor，你得亲自专门调用它。<br>我们还观察到我们在方法调用之前加上类名称前缀，然后把self变量及其他参数传递给它。<br>注意，在我们使用SchoolMember类的tell方法的时候，我们把Teacher和Student的实例仅仅作为<br>SchoolMember的实例。<br>另外，在这个例子中，我们调用了子类型的tell方法，而不是SchoolMember类的tell方法。可以<br>这样来理解，Python总是首先查找对应类型的方法，在这个例子中就是如此。如果它不能在导<br>出类中找到对应的方法，它才开始到基本类中逐个查找。基本类是在类定义的时候，在元组之<br>中指明的。<br>一个术语的注释——如果在继承元组中列了一个以上的类，那么它就被称作 多重继承 。</li>
</ul>
<p>##输入/输出</p>
<p>###文件</p>
<ul>
<li>通过创建一个file类的对象来打开一个文件，分别使用file类的read、readline或write方法来<br>恰当地读写文件。对文件的读写能力依赖于你在打开文件时指定的模式。最后，当你完成对文<br>件的操作的时候，你调用close方法来告诉Python我们完成了对文件的使用。</li>
</ul>
<p>####使用文件<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment">#-*- coding: utf-8 -*-</span></div><div class="line">poem = <span class="string">'''\</span></div><div class="line">Programming is fun</div><div class="line">When the work is done</div><div class="line">if you wanna make your work also fun:</div><div class="line">    use Python!</div><div class="line">'''</div><div class="line">f = file(<span class="string">'poem.txt'</span>, <span class="string">'w'</span>)<span class="comment">#open for 'w'riting</span></div><div class="line">f.write(poem)<span class="comment">#write text to file</span></div><div class="line">f.close()<span class="comment">#close the file</span></div><div class="line">f = file(<span class="string">'poem.txt'</span>)</div><div class="line"><span class="comment">#if no mode is specified, 'r'ead mode is assumed by default</span></div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">    line = f.readline()</div><div class="line">    <span class="keyword">if</span> len(line) == <span class="number">0</span>:<span class="comment">#Zero length indicatesEOF</span></div><div class="line">        <span class="keyword">break</span></div><div class="line">    <span class="keyword">print</span> line,</div><div class="line">    <span class="comment">#Notice comma to avoid automatice new line added by Python</span></div><div class="line">f.close()<span class="comment">#close the file</span></div><div class="line"></div><div class="line"><span class="comment">###Output</span></div><div class="line">[root@Mo arvon_python]<span class="comment"># !p</span></div><div class="line">python using_file.py</div><div class="line">Programming <span class="keyword">is</span> fun</div><div class="line">When the work <span class="keyword">is</span> done</div><div class="line"><span class="keyword">if</span> you wanna make your work also fun:</div><div class="line">    use Python!</div></pre></td></tr></table></figure></p>
<p>###储存器</p>
<ul>
<li>Python提供一个标准的模块，称为pickle。使用它你可以在一个文件中储存任何Python对象，之<br>后你又可以把它完整无缺地取出来。这被称为 持久地 储存对象。<br>还有另一个模块称为cPickle，它的功能和pickle模块完全相同，只不过它是用C语言编写的，因<br>此要快得多（比pickle快1000倍）。你可以使用它们中的任一个，而我们在这里将使用cPickle模<br>块。记住，我们把这两个模块都简称为pickle模块。</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment">#-*- coding: utf-8 -*-</span></div><div class="line"><span class="comment">#Todo: pickling.py</span></div><div class="line"><span class="keyword">import</span> cPickle <span class="keyword">as</span> p</div><div class="line"><span class="comment">#import pickleasp</span></div><div class="line">shoplistfile = <span class="string">'shoplist.data'</span></div><div class="line"><span class="comment">#the name of the file where we will store the object</span></div><div class="line">shoplist = [<span class="string">'apple'</span>, <span class="string">'mango'</span>, <span class="string">'carrot'</span>]</div><div class="line"><span class="comment">#Write to the file</span></div><div class="line">f = file(shoplistfile, <span class="string">'w'</span>)</div><div class="line">p.dump(shoplist, f)<span class="comment">#dump the object to a file</span></div><div class="line">f.close()</div><div class="line"><span class="keyword">del</span> shoplist<span class="comment">#remove the shoplist</span></div><div class="line"><span class="comment">#Read back from the storage</span></div><div class="line">f = file(shoplistfile)</div><div class="line">storedlist = p.load(f)</div><div class="line"><span class="keyword">print</span> storedlist</div><div class="line"></div><div class="line"><span class="comment">###Output</span></div><div class="line">[root@Mo arvon_python]<span class="comment"># python pickling.py</span></div><div class="line">[<span class="string">'apple'</span>, <span class="string">'mango'</span>, <span class="string">'carrot'</span>]</div></pre></td></tr></table></figure>
<ul>
<li>How to work<br>首先，请注意我们使用了import..as语法。这是一种便利方法，以便于我们可以使用更短的模块<br>名称。在这个例子中，它还让我们能够通过简单地改变一行就切换到另一个模块（cPickle或者<br>pickle）！在程序的其余部分的时候，我们简单地把这个模块称为p。<br>为了在文件里储存一个对象，首先以写模式打开一个file对象，然后调用储存器模块的dump函<br>数，把对象储存到打开的文件中。这个过程称为 储存 。<br>接下来，我们使用pickle模块的load函数的返回来取回对象。这个过程称为 取储存 。</li>
</ul>
<p>##异常</p>
<p>###处理异常</p>
<ul>
<li>使用try..except语句来处理异常。我们把通常的语句放在try-块中，而把我们的错误处<br>理语句放在except-块中。</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/python</div><div class="line">#-*- coding: utf-8 -*-</div><div class="line">#Todo: try_except.py</div><div class="line">import sys</div><div class="line">try:</div><div class="line">    s = raw_input("Entersomething --&gt;")</div><div class="line">except EOFError:</div><div class="line">    print '\nWhy did you do an EOF on me?'</div><div class="line">    sys.exit()#exit the program</div><div class="line">except:</div><div class="line">    print '\nSome error/exception occurred.'</div><div class="line">    #here, we are not exiting the program</div><div class="line">print 'Done'</div><div class="line"></div><div class="line">###Output</div><div class="line">[root@Mo arvon_python]# python try_except.py</div><div class="line">Entersomething --&gt;hello</div><div class="line">Done</div><div class="line">[root@Mo arvon_python]# python try_except.py</div><div class="line">Entersomething --&gt;</div><div class="line">Why did you do an EOF on me?</div></pre></td></tr></table></figure>
<ul>
<li>How to work<br>我们把所有可能引发错误的语句放在try块中，然后在except从句/块中处理所有的错误和异常。<br>except从句可以专门处理单一的错误或异常，或者一组包括在圆括号内的错误/异常。如果没有<br>给出错误或异常的名称，它会处理 所有的 错误和异常。对于每个try从句，至少都有一个相关<br>联的except从句。<br>如果某个错误或异常没有被处理，默认的Python处理器就会被调用。它会终止程序的运行，并<br>且打印一个消息，我们已经看到了这样的处理。<br>你还可以让try..catch块关联上一个else从句。当没有异常发生的时候，else从句将被执行。<br>我们还可以得到异常对象，从而获取更多有个这个异常的信息。</li>
</ul>
<p>###引发异常</p>
<ul>
<li>可以使用raise语句 引发 异常。你还得指明错误/异常的名称和伴随异常 触发的 异常对象。你<br>可以引发的错误或异常应该分别是一个Error或Exception类的直接或间接导出类。</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/python</div><div class="line">#-*- coding: utf-8 -*-</div><div class="line">class ShortINputException(Exception):</div><div class="line">    '''A user defined exception class.'''</div><div class="line">    def __init__(self, length, atleast):</div><div class="line">        Exception.__init__(self)</div><div class="line">        self.length = length</div><div class="line">        self.atleast = atleast</div><div class="line">try:</div><div class="line">    s = raw_input('Enter something --&gt;')</div><div class="line">    if len(s) &lt; 3:</div><div class="line">        raise ShortINputException(len(s), 3)</div><div class="line">    #Other work can continue as usual here</div><div class="line">except EOFError:</div><div class="line">    print '\nWhy did you do an EOF on me?'</div><div class="line">except ShortINputException, x:</div><div class="line">    print 'ShortINputException: The Input was of length %d,\</div><div class="line">        was expecting at least %d' % (x.length, x.atleast)</div><div class="line">else:</div><div class="line">    print 'No exception was raised.'</div><div class="line"></div><div class="line">###Output</div><div class="line">[root@Mo arvon_python]# python raising.py</div><div class="line">Enter something --&gt;</div><div class="line">Why did you do an EOF on me?</div><div class="line">[root@Mo arvon_python]# python raising.py</div><div class="line">Enter something --&gt;a</div><div class="line">ShortINputException: The Input was of length 1,        was expecting at least 3</div><div class="line">[root@Mo arvon_python]# python raising.py</div><div class="line">Enter something --&gt;abc</div><div class="line">No exception was raised.</div></pre></td></tr></table></figure>
<p>###Try finally</p>
<ul>
<li>假如你在读一个文件的时候，希望在无论异常发生与否的情况下都关闭文件，该怎么做呢？这<br>可以使用finally块来完成。注意，在一个try块下，你可以同时使用except从句和finally块。如果<br>你要同时使用它们的话，需要把一个嵌入另外一个。</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment">#-*- coding: utf-8 -*-</span></div><div class="line"><span class="comment">#Todo: finally.py</span></div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">try</span>:</div><div class="line">    f = file(<span class="string">'poem.txt'</span>)</div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:<span class="comment">#our usual file-reading idiom(成语、习语、土话)</span></div><div class="line">        line = f.readline()</div><div class="line">        <span class="keyword">if</span> len(line) == <span class="number">0</span>:</div><div class="line">            <span class="keyword">break</span></div><div class="line">        time.sleep(<span class="number">2</span>)</div><div class="line">        <span class="keyword">print</span> line,</div><div class="line"><span class="keyword">finally</span>:</div><div class="line">    f.close()</div><div class="line">    <span class="keyword">print</span> <span class="string">'Cleaning up... closed the file'</span></div><div class="line"></div><div class="line"><span class="comment">###Output</span></div><div class="line">[root@Mo arvon_python]<span class="comment"># python finally.py</span></div><div class="line">Programming <span class="keyword">is</span> fun</div><div class="line">When the work <span class="keyword">is</span> done</div><div class="line"><span class="keyword">if</span> you wanna make your work also fun:</div><div class="line">    use Python!</div><div class="line">Cleaning up... closed the file</div></pre></td></tr></table></figure>
<ul>
<li>How to work<br>我们进行通常的读文件工作，但是我有意在每打印一行之前用time.sleep方法暂停2秒钟。这样<br>做的原因是让程序运行得慢一些（Python由于其本质通常运行得很快）。在程序运行的时候，<br>按Ctrl-c中断/取消程序。<br>我们可以观察到KeyboardInterrupt异常被触发，程序退出。但是在程序退出之前，finally从句仍<br>然被执行，把文件关闭</li>
</ul>
<p>##Python的标准库</p>
<ul>
<li>Python标准库是随Python附带安装的，它包含大量极其有用的模块。熟悉Python标准库是十分<br>重要的，因为如果你熟悉这些库中的模块，那么你的大多数问题都可以简单快捷地使用它们来<br>解决。</li>
</ul>
<p>###sys模块</p>
<ul>
<li>sys模块包含系统对应的功能。<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment">#-*- coding: utf-8 -*-</span></div><div class="line"><span class="comment">#Todo: cat.py</span></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">readfile</span><span class="params">(filename)</span>:</span></div><div class="line">    <span class="string">'''Print a file to the standard output'''</span></div><div class="line">    f = file(filename)</div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        line = f.readline()</div><div class="line">        <span class="keyword">if</span> len(line) == <span class="number">0</span>:</div><div class="line">            <span class="keyword">break</span></div><div class="line">        <span class="keyword">print</span> line,<span class="comment">#notice commma</span></div><div class="line">    f.close()</div><div class="line"><span class="comment">#Script starts from here</span></div><div class="line"><span class="keyword">if</span> len(sys.argv) &lt; <span class="number">2</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">'No action specified.'</span></div><div class="line">    sys.exit()</div><div class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>].startswith(<span class="string">'--'</span>):</div><div class="line">    option = sys.argv[<span class="number">1</span>][<span class="number">2</span>:]</div><div class="line">    <span class="comment">#fetch sys.argv[1] but without the first two characters</span></div><div class="line">    <span class="keyword">if</span> option == <span class="string">'version'</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">'Version 1.2'</span></div><div class="line">    <span class="keyword">elif</span> option == <span class="string">'help'</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">'''\</span></div><div class="line">This program prints files to the standard output.</div><div class="line">Any number of files can be specified.</div><div class="line">Options include:</div><div class="line"> --version : Prints the version number</div><div class="line"> --help : Display this help'''</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">'Unknown option.'</span></div><div class="line">    sys.exit()</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    <span class="keyword">for</span> filename <span class="keyword">in</span> sys.argv[<span class="number">1</span>:]:</div><div class="line">        readfile(filename)</div><div class="line"></div><div class="line"><span class="comment">###Output</span></div><div class="line">[root@Mo arvon_python]<span class="comment"># python cat.py --help</span></div><div class="line">This program prints files to the standard output.</div><div class="line">Any number of files can be specified.</div><div class="line">Options include:</div><div class="line"> --version : Prints the version number</div><div class="line"> --help : Display this help</div><div class="line">[root@Mo arvon_python]<span class="comment"># python cat.py --version</span></div><div class="line">Version <span class="number">1.2</span></div><div class="line">[root@Mo arvon_python]<span class="comment"># python cat.py --love</span></div><div class="line">Unknown option.</div><div class="line">[root@Mo arvon_python]<span class="comment"># python cat.py poem.txt</span></div><div class="line">Programming <span class="keyword">is</span> fun</div><div class="line">When the work <span class="keyword">is</span> done</div><div class="line"><span class="keyword">if</span> you wanna make your work also fun:</div><div class="line">    use Python!</div></pre></td></tr></table></figure>
</li>
</ul>
<p>###OS模块</p>
<ul>
<li>简略<br>● os.name字符串指示你正在使用的平台。比如对于Windows，它是’nt’，而对于Linux/Unix<br>用户，它是’posix’。<br>● os.getcwd()函数得到当前工作目录，即当前Python脚本工作的目录路径。<br>● os.getenv()和os.putenv()函数分别用来读取和设置环境变量。<br>● os.listdir()返回指定目录下的所有文件和目录名。<br>● os.remove()函数用来删除一个文件。<br>● os.system()函数用来运行shell命令。<br>● os.linesep字符串给出当前平台使用的行终止符。例如，Windows使用’\r\n’，Linux使<br>用’\n’而Mac使用’\r’。<br>● os.path.split()函数返回一个路径的目录名和文件名。<br>os.path.split(‘/home/swaroop/byte/code/poem.txt’)<br>(‘/home/swaroop/byte/code’, ‘poem.txt’)<br>● os.path.isfile()和os.path.isdir()函数分别检验给出的路径是一个文件还是目录。类似地，os.<br>path.exists()函数用来检验给出的路径是否真地存在。</li>
</ul>
<p>##参考</p>
<p>###特殊的方法</p>
<ul>
<li><strong>init</strong>(self, …)<br>这个方法在新建对象恰好要被返回使用之前被调用</li>
<li><strong>del</strong>(self)<br>恰好在对象要被删除之前调用</li>
<li><strong>str</strong>(self, other)<br>当使用小于运算符（&lt;）的时候调用。类似地，对于说有的运算符（+， &gt;等等）都有特殊的方法</li>
<li><strong>getitem</strong>(self, key)<br>使用x[key]索引操作符的时候调用</li>
<li><strong>len</strong>(self)<br>对序列对象使用内建的len（）函数的时候调用</li>
</ul>
<p>###参考书籍<br><a href="https://docs.python.org/3/" target="_blank" rel="external">Python标准文档（英文）</a><br><a href="http://code.activestate.com/recipes/langs/python/" target="_blank" rel="external">Python实用大全（英文）</a><br><a href="http://daqinbuyi.iteye.com/blog/1668678" target="_blank" rel="external">Python常用类库（Blog）</a><br><a href="http://wiki.woodpecker.org.cn/moin/PythonStandardLib" target="_blank" rel="external">Python类库手册（中文）</a><br><a href="http://python.usyiyi.cn/" target="_blank" rel="external">Python官方文档（中文）</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[awk用法实例]]></title>
      <url>http://arvon.top/2015/07/29/awk%E7%94%A8%E6%B3%95%E5%AE%9E%E4%BE%8B/</url>
      <content type="html"><![CDATA[<p><strong>简介：</strong>awk一种优秀的文本处理工具，Linux和Unix环境中现有的功能最强大的数据处理引擎之一。这个编程及数据操作语言其名称得自于它的创始人阿尔佛雷德·艾侯、彼得·温伯格和布莱恩·柯林汉姓氏的首个字母。awk的处理文本和数据的方式是这样的，它逐行扫描文件，从第一行到最后一行，寻找匹配的特定模式的行，并在这些行上进行你想要的操作。如果没有指定处理动作，则把匹配的行显示到标准输出(屏幕)，如果没有指定模式，则所有被操作所指定的行都被处理，awk有3个不同版本: awk、nawk和gawk，未作特别说明，一般指gawk，gawk 是 AWK 的 GNU 版本。</p>
<a id="more"></a>
<h3 id="简单使用方法"><a href="#简单使用方法" class="headerlink" title="简单使用方法"></a>简单使用方法</h3><ul>
<li><p>使用方法：</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">awk  <span class="string">'&#123;pattern + action&#125;'</span> <span class="string">&#123;filenames&#125;</span></div></pre></td></tr></table></figure>
<p>尽管操作可能会很复杂，但语法总是这样，其中 pattern 表示 AWK 在数据中查找的内容，而 action 是在找到匹配内容时所执行的一系列命令。花括号（{}）不需要在程序中始终出现，但它们用于根据特定的模式对一系列指令进行分组。 pattern就是要表示的正则表达式，用斜杠括起来。awk语言的最基本功能是在文件或者字符串中基于指定规则浏览和抽取信息，awk抽取信息后，才能进行其他文本操作。完整的awk脚本通常用来格式化文本文件中的信息。通常，awk是以文件的一行为处理单位的。awk每接收文件的一行，然后执行相应的命令，来处理文本。</p>
</li>
<li>三种调用方式<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span>. 命令行方式</div><div class="line"><span class="comment">#tail /etc/fstab |awk '&#123;print $1&#125;'</span></div><div class="line"><span class="comment">#cat /etc/passwd |awk  -F ':'  '&#123;print $1&#125;'</span></div><div class="line"><span class="comment">#cat /etc/passwd |awk  -F ':'  '&#123;print $1"\t"$7&#125;'</span></div><div class="line"><span class="number">2</span>. shell脚本方式</div><div class="line"><span class="number">3</span>. awk命令插入为单独文件的方式</div><div class="line"><span class="comment">#awk -f awk-script-file input-file(s)</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="大实例"><a href="#大实例" class="headerlink" title="大实例"></a>大实例</h3><ul>
<li><p>显示/etc/passwd的账户和账户对应的shell,而账户与shell之间以逗号分割,而且在所有行添加列名name,shell,在最后一行添加”blue,/bin/nosh”。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">cat /etc/passwd |awk  -F ':'  'BEGIN &#123;print "name,shell"&#125;  &#123;print $1","$7&#125; END &#123;print "blue,/bin/nosh"&#125;'</div><div class="line">name,shell</div><div class="line">root,/bin/bash</div><div class="line">daemon,/bin/sh</div><div class="line">bin,/bin/sh</div><div class="line">sys,/bin/sh</div><div class="line">....</div><div class="line">blue,/bin/nosh</div></pre></td></tr></table></figure>
</li>
<li><p>搜索/etc/passwd有root关键字的所有行</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#awk -F: '/root/' /etc/passwd</span></div><div class="line">root:<span class="keyword">x</span>:<span class="number">0</span>:<span class="number">0</span>:root:<span class="regexp">/root:/bin</span><span class="regexp">/bash</span></div><div class="line">```   </div><div class="line">* 统计/etc<span class="regexp">/passwd:文件名，每行的行号，每行的列数，对应的完整行内容:</span></div><div class="line">```perl</div><div class="line">#awk  -F ':'  '&#123;print "filename:" FILENAME ",linenumber:" NR ",columns:" NF ",linecontent:"$0&#125;' /etc<span class="regexp">/passwd</span></div><div class="line">filename:/etc<span class="regexp">/passwd,linenumber:1,columns:7,linecontent:root:x:0:0:root:/root</span>:<span class="regexp">/bin/bash</span></div><div class="line">filename:<span class="regexp">/etc/passwd</span>,linenumber:<span class="number">2</span>,columns:<span class="number">7</span>,linecontent:daemon:<span class="keyword">x</span>:<span class="number">1</span>:<span class="number">1</span>:daemon:<span class="regexp">/usr/sbin</span>:<span class="regexp">/bin/sh</span></div><div class="line">filename:<span class="regexp">/etc/passwd</span>,linenumber:<span class="number">3</span>,columns:<span class="number">7</span>,linecontent:bin:<span class="keyword">x</span>:<span class="number">2</span>:<span class="number">2</span>:bin:<span class="regexp">/bin:/bin</span><span class="regexp">/sh</span></div><div class="line">filename:/etc<span class="regexp">/passwd,linenumber:4,columns:7,linecontent:sys:x:3:3:sys:/dev</span>:<span class="regexp">/bin/sh</span></div></pre></td></tr></table></figure>
</li>
<li><p>使用printf替代print,可以让代码更加简洁，易读</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">awk  -F <span class="string">':'</span>  <span class="string">'&#123;printf("filename:%10s,linenumber:%s,columns:%s,linecontent:%s\n",FILENAME,NR,NF,$0)&#125;'</span> /etc/passwd</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="参考这里"><a href="#参考这里" class="headerlink" title="参考这里"></a>参考这里</h3><p><a href="http://www.gnu.org/software/gawk/manual/gawk.html" title="awk官网" target="_blank" rel="external">awk官网</a><br><a href="http://man.lupaworld.com/content/manage/ringkee/awk.htm" title="awk学习笔记" target="_blank" rel="external">awk学习笔记</a><br><a href="http://www.aslibra.com/doc/awk.htm" title="awk手册" target="_blank" rel="external">awk手册</a><br><a href="http://www.cnblogs.com/ggjucheng/archive/2013/01/13/2858470.html" target="_blank" rel="external">参考博客</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SA运维资源]]></title>
      <url>http://arvon.top/2015/07/28/SA%E8%BF%90%E7%BB%B4%E8%B5%84%E6%BA%90/</url>
      <content type="html"><![CDATA[<p>运维是个杂学呀~~</p>
<a id="more"></a>
<h3 id="需学习技能"><a href="#需学习技能" class="headerlink" title="需学习技能"></a>需学习技能</h3><ol>
<li>系统管理语言<ul>
<li><del>Shell脚本语言</del></li>
<li>perl</li>
<li>python</li>
</ul>
</li>
<li>监控工具<ul>
<li>zabbix</li>
<li>nagios</li>
</ul>
</li>
<li>运维自动化工具<ul>
<li>saltstack</li>
<li>Ansible</li>
<li>puppet</li>
</ul>
</li>
<li>大数据</li>
<li>云计算<ul>
<li>OPenStack</li>
<li>Docker</li>
</ul>
</li>
<li>虚拟化<ul>
<li>KVM</li>
<li>VMware</li>
</ul>
</li>
</ol>
<h3 id="Linux系统技能要求"><a href="#Linux系统技能要求" class="headerlink" title="Linux系统技能要求"></a>Linux系统技能要求</h3><ol>
<li>Keepalived、lvs高可用及负载均衡技术</li>
<li>Mysql</li>
<li>正则表达式<ul>
<li>sed</li>
<li>awk</li>
</ul>
</li>
<li>常用协议（SSH、telnet、rlogin、RDP、VNC）</li>
<li>熟悉Kernel调优</li>
<li>Web服务<ul>
<li>appache</li>
<li>nginx</li>
</ul>
</li>
</ol>
<p>###资源网站<br><a href="http://www.osyunwei.com/" target="_blank" rel="external">系统运维之家</a><br><a href="http://www.lupaworld.com/article-242275-1.html" target="_blank" rel="external">兴趣看看</a><br><a href="http://linux.cn/" target="_blank" rel="external">中文Linux社区</a><br><a href="http://www.linux.com/" target="_blank" rel="external">英文版参考学习主站</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux下搭建VSFTP服务器]]></title>
      <url>http://arvon.top/2015/07/28/Linux%E4%B8%8B%E6%90%AD%E5%BB%BAvsftp%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      <content type="html"><![CDATA[<p><strong>简介：</strong>VSFTP（Very Secure FTP）是一个基于GPL发布的类Unix系统上使用的FTP服务器软件，设计者的初衷是代码的安全，<br>另外速度在使用ASCII代码的模式下在数据时，VSFTP的速度为Wu-FTp的两倍，如果Linux主机使用2.4.x的内核，在千兆以太网的<br>下的下载速度可以达到86MB/S。而且很稳定，在单机上支持4000以上的并发用户同时连接，根据RedHat和Ftp服务器的数据，VSFTP<br>服务器可以支持15000个并发用户</p>
<a id="more"></a>
<h3 id="VSFTP的优点"><a href="#VSFTP的优点" class="headerlink" title="VSFTP的优点"></a>VSFTP的优点</h3><ol>
<li>它是一个安全、高速、稳定的FTP服务器；</li>
<li>它可以做基于多个IP的虚拟FTP主机服务器；</li>
<li>匿名服务设置十分方便；</li>
<li>匿名FTP的根目录不需要任何特殊的目录结构，或系统程序或其它的系统文件；</li>
<li>不执行任何外部程序，从而减少了安全隐患；</li>
<li>支持虚拟用户，并且每个虚拟用户可以具有独立的属性配置；</li>
<li>可以设置从inetd中启动，或者独立的FTP服务器两种运行方式；</li>
<li>支持两种认证方式（PAP或xinetd/ tcp_wrappers）；</li>
<li>支持带宽限制；<br>VSFTP市场应用十分广范，很多国际性的大公司和自由开源组织在使用，如：Red Hat, Suse，Debian，OpenBSD</li>
</ol>
<h3 id="VSFTP的缺点"><a href="#VSFTP的缺点" class="headerlink" title="VSFTP的缺点"></a>VSFTP的缺点</h3><ol>
<li>VSFTP从没有处理文件编码转换的windows客户端访问时有乱码现象</li>
<li>解决方法：<ul>
<li>使用vsftp的补丁</li>
<li>转换服务器目录文件编码</li>
</ul>
</li>
</ol>
<h3 id="安装VSFTP"><a href="#安装VSFTP" class="headerlink" title="安装VSFTP"></a>安装VSFTP</h3><ol>
<li><p>检查是否已安装vsftp服务</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@Mo ~]# rpm -q vsftpd</div><div class="line">package vsftpd is not installed</div></pre></td></tr></table></figure>
</li>
<li><p>安装vsftp服务</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@Mo ~]# yum install -y vsftpd db4-utils	#安装vsftpd服务</div><div class="line">[root@Mo ~]# rpm -q vsftpd 		#vsftpd服务已安装</div><div class="line">vsftpd-2.2.2-13.el6_6.1.x86_64</div><div class="line">[root@Mo vsftp]# yum install lrzsz		#安装后可以把windows的文件直接通过xshell拉到目标主机</div></pre></td></tr></table></figure>
</li>
<li><p>vsftp配置文件</p>
<ul>
<li>官方wiki有处理脚本：<a href="http://wiki.centos.org/HowTos/Chroot_Vsftpd_with_non-system_users" target="_blank" rel="external">脚本地址</a></li>
<li>将脚本放至linux主机，然后执行该脚本</li>
</ul>
</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux查看系统信息命令]]></title>
      <url>http://arvon.top/2015/07/27/Linux%E7%B3%BB%E7%BB%9F%E6%9F%A5%E7%9C%8B%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<p><strong>Command Include：</strong>disk、memory、hostname、find</p>
<a id="more"></a>
<h3 id="查看磁盘空间"><a href="#查看磁盘空间" class="headerlink" title="查看磁盘空间"></a>查看磁盘空间</h3><ul>
<li>常用命令<br>df -hl 查看磁盘剩余空间<br>df -h 查看每个根路径的分区大小<br>du -sh [目录名] 返回该目录的大小<br>du -sm [文件夹] 返回该文件夹总M数</li>
<li>命令演示<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">[root@cloud ~]# cat /proc/cpuinfo	#查看cpu的核心数</div><div class="line">[root@cloud ~]# df -h	#磁盘使用情况</div><div class="line">[root@cloud ~]# df -hl</div><div class="line">Filesystem      Size  Used Avail Use% Mounted on</div><div class="line">/dev/sda1       9.1G  2.2G  6.4G  26% /</div><div class="line">tmpfs           487M     0  487M   0% /dev/shm</div><div class="line">/dev/sdb1       4.5G  1.9M  4.3G   1% /data</div><div class="line">[root@cloud ~]# du --max-depth=1 -h	#查看当前文件夹下的磁盘使用情况</div><div class="line">25M	./.nvm</div><div class="line">8.0K	./.pki</div><div class="line">4.0K	./Blog</div><div class="line">25M		.</div><div class="line">[root@cloud ~]# du -sh	#显示当前目录的大小</div><div class="line">25M	.</div><div class="line">[root@cloud ~]# du -sh /opt/	#显示指定路径的大小</div><div class="line">4.0K	/opt/</div><div class="line">[root@cloud ~]# du -h test.txt	#显示指定文件的大小</div><div class="line">0	test.txt</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="查看内存"><a href="#查看内存" class="headerlink" title="查看内存"></a>查看内存</h3><ul>
<li>常用命令<br>cat /proc/meminfo    #查看内存使用信息</li>
<li>命令实例<br>空闲内存 =free+buffers+cached =total-used<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">[root@cloud ~]# free -m	#查看内存使用状况</div><div class="line">           total       used       free     shared    buffers     cached</div><div class="line">Mem:           972        667        304          0         41        497</div><div class="line">-/+ buffers/cache:        128        843</div><div class="line">Swap:          999          0        999</div><div class="line">说明：	 shared：多个进程共享的内存总额</div><div class="line">		Buffers/cached		</div><div class="line">[root@cloud ~]# cat /proc/meminfo</div><div class="line">MemTotal:         995648 kB</div><div class="line">MemFree:          312228 kB</div><div class="line">Buffers:           42836 kB</div><div class="line">Cached:           509164 kB</div><div class="line">SwapCached:          352 kB</div><div class="line">Active:           413060 kB</div><div class="line">Inactive:         145136 kB		</div><div class="line">[root@cloud ~]# ll -h /proc/kcore	#查看/proc/kcore文件的大小（内存镜像）</div><div class="line">-r-------- 1 root root 4.0K Jul 27 16:31 /proc/kcore</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="查看cpu使用率"><a href="#查看cpu使用率" class="headerlink" title="查看cpu使用率"></a>查看cpu使用率</h3><ul>
<li>使用top命令<br>具体介绍：<a href="http://www.cnblogs.com/xd502djj/archive/2011/03/01/1968041.html" target="_blank" rel="external">top命输出解释</a></li>
<li><p>产看内核信息</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@cloud ~]# uname -a</div><div class="line">Linux cloud 2.6.32-504.1.3.el6.x86_64 #1 SMP Tue Nov 11 17:57:25 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux</div></pre></td></tr></table></figure>
</li>
<li><p>查看发行版信息</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@cloud ~]# cat /etc/issue</div><div class="line">CentOS release 6.6 (Final)</div><div class="line">Kernel \r on an \m</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Find命令"><a href="#Find命令" class="headerlink" title="Find命令"></a>Find命令</h3><ul>
<li><p>命令实例</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">[root@cloud ~]# find / -name fstab</div><div class="line">/etc/fstab</div><div class="line">[root@cloud ~]# find / -name access_log 2&gt;/dev/null		#无错误查找</div><div class="line">[root@cloud ~]# find / etc -name '*fst*'	#模糊查找，支持通配符</div><div class="line">/lib/udev/fstab_import</div><div class="line">/lib/udev/rules.d/79-fstab_import.rules</div><div class="line">/etc/fstab</div><div class="line">/usr/bin/psfstriptable</div><div class="line">find  /home  -size  +512k	#查大于512k的文档</div><div class="line"><span class="meta">$</span><span class="bash"> find logs -type f -mtime +5 -exec  -ok  rm &#123;&#125; \;	<span class="comment">#在/ l o g s目录中查找更改时间在5日以前的文档并删除他们：</span></span></div><div class="line"><span class="meta">#</span><span class="bash"> A=`find ./ -name <span class="string">"*php"</span>` |  ls <span class="_">-l</span> --full-time <span class="variable">$A</span> 2&gt;/dev/null | grep <span class="string">"2004-11-30 16:36:37"</span>		<span class="comment">#查找2004-11-30   16:36:37时更改过的文档</span></span></div></pre></td></tr></table></figure>
</li>
<li><p>参考网址<br><a href="http://linux.chinaunix.net/techdoc/system/2008/07/25/1020339.shtml" target="_blank" rel="external">参考实例</a><br><a href="http://www.chinaz.com/server/2009/0807/85796.shtml" target="_blank" rel="external">与或非的find介绍</a></p>
</li>
</ul>
<h3 id="修改常见配置"><a href="#修改常见配置" class="headerlink" title="修改常见配置"></a>修改常见配置</h3><ul>
<li>修改主机名<br>参考这里:[北南南北的博客，修改Linux主机名]<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@cloud ~]# hostname Mo		#临时修改hostname</div><div class="line">[root@Mo ~]# vim /etc/sysconfig/network		#两个都要改</div><div class="line">[root@Mo ~]# vim /etc/hosts</div><div class="line">[root@linuxsir01 ~]# hostname -i	#显示主机名的IP</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<p>以上</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[mysql自用命令手册]]></title>
      <url>http://arvon.top/2015/07/22/mysql%E8%87%AA%E7%94%A8%E5%91%BD%E4%BB%A4%E6%89%8B%E5%86%8C/</url>
      <content type="html"><![CDATA[<h3 id="连接登录数据库"><a href="#连接登录数据库" class="headerlink" title="连接登录数据库"></a>连接登录数据库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">mysql –u用户名 [–h主机名或者IP地址] –p密码</div><div class="line">eggs: mysql -uusername -hIPaddress -p(password)</div><div class="line"><span class="meta">#</span><span class="bash">1. 连接到本机上的MYSQL。</span></div><div class="line"><span class="meta">#</span><span class="bash">首先打开DOS窗口，然后进入目录mysql\bin，再键入命令mysql -u root -p，回车后提示你输密码.注意用户名前可以有空格也可以没有空格，但是密码前必须没有空格，否则让你重新输入密码.</span></div><div class="line"><span class="meta">#</span><span class="bash">如果刚安装好MYSQL，超级用户root是没有密码的，故直接回车即可进入到MYSQL中了，MYSQL的提示符是： mysql&gt;</span></div><div class="line"><span class="meta">#</span><span class="bash">2. 连接到远程主机上的MYSQL。假设远程主机的IP为：110.110.110.110，用户名为root,密码为abcd123。则键入以下命令：</span></div><div class="line"><span class="meta">#</span><span class="bash">mysql -h110.110.110.110 -u root -p 123;（注:u与root之间可以不用加空格，其它也一样）</span></div><div class="line"><span class="meta">#</span><span class="bash">3. 退出MYSQL命令： <span class="built_in">exit</span> （回车） 或者 \q</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">**格式：**mysqladmin -u用户名 -p旧密码 password 新密码(注：因为开始时root没有密码，所以-p旧密码一项就可以省略)</span></div><div class="line">mysqladmin -u root password ab12</div><div class="line">再将root的密码改为djg345</div><div class="line">mysqladmin -u root -p ab12 password djg345</div></pre></td></tr></table></figure>
<h3 id="查看mysql数据库中所有用户及拥有的权限"><a href="#查看mysql数据库中所有用户及拥有的权限" class="headerlink" title="查看mysql数据库中所有用户及拥有的权限"></a>查看mysql数据库中所有用户及拥有的权限</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SELECT DISTINCT CONCAT('User: ''',user,'''@''',host,''';') AS query FROM mysql.user;</div></pre></td></tr></table></figure>
<h3 id="添加新用户"><a href="#添加新用户" class="headerlink" title="添加新用户"></a>添加新用户</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">**格式：**grant select on 数据库.* to 用户名@登录主机 identified by “密码”</span></div><div class="line"><span class="meta">#</span><span class="bash">1.增加一个用户<span class="built_in">test</span>1密码为abc，让他可以在任何主机上登录，并对所有数据库有查询、插入、修改、删除的权限。首先用root用户连入MYSQL，然后键入以下命令：</span></div><div class="line">grant select,insert,update,delete on *.* to test1@”%” Identified by “abc”;</div><div class="line"><span class="meta">#</span><span class="bash">2.增加一个用户<span class="built_in">test</span>2密码为abc,让他只可以在localhost上登录，并可以对数据库mydb进行查询、插入、修改、删除的操作（localhost指本地主机，即MYSQL数据库所在的那台主机），</span></div><div class="line">这样用户即使用知道test2的密码，他也无法从internet上直接访问数据库，只能通过MYSQL主机上的web页来访问了。</div><div class="line"><span class="meta">#</span><span class="bash">grant select,insert,update,delete on mydb.* to <span class="built_in">test</span>2@localhost identified by “abc”;</span></div><div class="line"><span class="meta">#</span><span class="bash">如果你不想<span class="built_in">test</span>2有密码，可以再打一个命令将密码消掉:</span></div><div class="line">grant select,insert,update,delete on mydb.* to test2@localhost identified by “”;</div></pre></td></tr></table></figure>
<h3 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">mysql&gt;</span><span class="bash">Delete FROM user Where User=<span class="string">'test'</span> and Host=<span class="string">'localhost'</span>;</span></div><div class="line"><span class="meta">mysql&gt;</span><span class="bash">flush privileges;</span></div><div class="line"><span class="meta">mysql&gt;</span><span class="bash">drop database <span class="built_in">test</span>DB; //删除用户的数据库</span></div></pre></td></tr></table></figure>
<h3 id="查看命令"><a href="#查看命令" class="headerlink" title="查看命令"></a>查看命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">mysql&gt;</span><span class="bash"> SHOW DATABASES;	<span class="comment">#显示当前数据库服务器中的数据库列表(注意：mysql库里面有MYSQL的系统信息，我们改密码和新增用户，实际上就是用这个库进行操作。)</span></span></div><div class="line"><span class="meta">mysql&gt;</span><span class="bash"> USE 库名；	<span class="comment">##显示数据库中的数据表</span></span></div><div class="line"><span class="meta">mysql&gt;</span><span class="bash"> SHOW TABLES;</span></div><div class="line"><span class="meta">mysql&gt;</span><span class="bash"> DESCRIBE 表名;	<span class="comment">#显示数据表的结构</span></span></div><div class="line"><span class="meta">mysql&gt;</span><span class="bash"> CREATE DATABASE 库名;	<span class="comment">#建立数据库</span></span></div><div class="line"><span class="meta">mysql&gt;</span><span class="bash"> USE 库名;	<span class="comment">#;建立数据表</span></span></div><div class="line"><span class="meta">mysql&gt;</span><span class="bash"> CREATE TABLE 表名 (字段名 VARCHAR(20), 字段名 CHAR(1))</span></div><div class="line"><span class="meta">mysql&gt;</span><span class="bash"> DROP DATABASE 	<span class="comment">#库名;删除数据库</span></span></div><div class="line"><span class="meta">mysql&gt;</span><span class="bash"> DROP TABLE 表名；	<span class="comment">#删除数据表</span></span></div><div class="line"><span class="meta">mysql&gt;</span><span class="bash"> DELETE FROM 表名;	<span class="comment">#将表中记录清空</span></span></div><div class="line"><span class="meta">mysql&gt;</span><span class="bash"> SELECT * FROM 表名;	<span class="comment">#显示表中的记录</span></span></div><div class="line"><span class="meta">mysql&gt;</span><span class="bash"> INSERT INTO 表名 VALUES (”hyq”,”M”);	<span class="comment">#往表中插入记录</span></span></div><div class="line"><span class="meta">mysql&gt;</span><span class="bash"> UPDATE 表名 SET 字段名1=<span class="string">'a'</span>,字段名2=<span class="string">'b'</span> WHERE 字段名3=<span class="string">'c'</span>;	<span class="comment">#更新表中数据</span></span></div><div class="line"><span class="meta">mysql&gt;</span><span class="bash"> LOAD DATA LOCAL INFILE “D:/mysql.txt” INTO TABLE 表名;	<span class="comment">#用文本方式将数据装入数据表中</span></span></div><div class="line"><span class="meta">mysql&gt;</span><span class="bash"> USE 数据库名;</span></div><div class="line"><span class="meta">mysql&gt;</span><span class="bash"> SOURCE d:/mysql.sql;	<span class="comment">#导入.sql文件命令：</span></span></div><div class="line"><span class="meta">mysql&gt;</span><span class="bash"> UPDATE mysql.user SET password=PASSWORD(<span class="string">'新密码'</span>) WHERE User=<span class="string">'root'</span>;</span></div><div class="line"><span class="meta">mysql&gt;</span><span class="bash"> FLUSH PRIVILEGES;	<span class="comment">#命令行修改root密码</span></span></div><div class="line"><span class="meta">mysql&gt;</span><span class="bash"> SELECT DATABASE();	<span class="comment">#显示use的数据库名</span></span></div><div class="line"><span class="meta">mysql&gt;</span><span class="bash"> SELECT USER();	<span class="comment">#显示当前的user</span></span></div></pre></td></tr></table></figure>
<h4 id="命令实例"><a href="#命令实例" class="headerlink" title="命令实例"></a>命令实例</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">drop database if exists school;	#如果存在SCHOOL则删除</div><div class="line">create database school;	#建立库SCHOOL</div><div class="line">use school;	#打开库SCHOOL</div><div class="line">create table teacher;	#(进入SCHOOL库后)简历表teacher</div><div class="line"> (</div><div class="line"> id int(3) auto_increment not null primary key,</div><div class="line"> name char(10) not null,</div><div class="line"> address varchar(50) default ‘深圳',</div><div class="line"> year date</div><div class="line"> );	#建表结束</div><div class="line">insert into teacher values(”,'allen','大连一中','1976-10-10′);	#插入字段</div><div class="line">insert into teacher values(”,'jack','大连二中','1975-12-23′);</div></pre></td></tr></table></figure>
<h3 id="导出数据库"><a href="#导出数据库" class="headerlink" title="导出数据库"></a>导出数据库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">1. 导出整个数据库（导出文件默认是存在mysql\bin目录下；在linux下为/var/lib/mysql）</span></div><div class="line">mysqldump -u 用户名 -p 数据库名 &gt; 导出的文件名</div><div class="line">mysqldump -u user_name -p123456 database_name &gt; outfile_name.sql</div><div class="line"><span class="meta">#</span><span class="bash">2. 导出一个表</span></div><div class="line">mysqldump -u 用户名 -p 数据库名 表名&gt; 导出的文件名</div><div class="line">mysqldump -u user_name -p database_name table_name &gt; outfile_name.sql</div><div class="line"><span class="meta">#</span><span class="bash">3. 导出一个数据库结构</span></div><div class="line">mysqldump -u user_name -p -d –add-drop-table database_name &gt; outfile_name.sql</div><div class="line"><span class="meta">#</span><span class="bash"><span class="_">-d</span> 没有数据 –add-drop-table 在每个create语句之前增加一个drop table</span></div><div class="line"><span class="meta">#</span><span class="bash">4. 带语言参数导出</span></div><div class="line">mysqldump -uroot -p –default-character-set=latin1 –set-charset=gbk –skip-opt database_name &gt; outfile_name.sql</div></pre></td></tr></table></figure>
<h3 id="备份恢复数据库"><a href="#备份恢复数据库" class="headerlink" title="备份恢复数据库"></a>备份恢复数据库</h3><ol>
<li><p>备份数据库</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">mysqldump -uroot -p test_db &gt; test_db.sql</div><div class="line">mysqldump -h$&#123;ipaddr&#125; -u$&#123;username&#125; -p$&#123;password&#125; --default-character-set=utf8 \</div><div class="line">--comments=FALSE --tables --no-create-info=FALSE --add-drop-table=TRUE --no-data=FALSE \</div><div class="line"><span class="meta">$</span><span class="bash">&#123;area&#125; | sed <span class="string">'s/AUTO_INCREMENT=[0-9]*\s//g'</span> &gt;<span class="variable">$&#123;dest_dir&#125;</span>/<span class="variable">$&#123;area&#125;</span>.sql</span></div></pre></td></tr></table></figure>
</li>
<li><p>恢复数据库</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">mysql -uroot -p test_db &lt; test_db.sql</div><div class="line">mysql -h$&#123;ipaddr&#125; -u$&#123;username&#125; -p$&#123;password&#125; --default-character-set=utf8 --execute="DROP DATABASE IF EXISTS    $&#123;area&#125;";</div><div class="line">mysql -h$&#123;ipaddr&#125; -u$&#123;username&#125; -p$&#123;password&#125; --default-character-set=utf8 --execute="CREATE DATABASE IF NOT   EXISTS  $&#123;area&#125; DEFAULT CHARACTER SET utf8";</div><div class="line">mysql -h$&#123;ipaddr&#125; -u$&#123;username&#125; -p$&#123;password&#125; --default-character-set=utf8 --database= $&#123;area&#125; &lt;$&#123;area&#125;.sql;</div></pre></td></tr></table></figure>
</li>
<li><p>创建权限</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">grant all privileges on test_db.* to test_db@'localhost' identified by '123456';</div><div class="line"><span class="meta">#</span><span class="bash">兼容4.1之前的版本：</span></div><div class="line">update mysql.user set password=old_password('123456') where user='test_db';</div><div class="line"><span class="meta">#</span><span class="bash">4. 忘记密码</span></div><div class="line">在“my.cnf”或“my.ini”文件的“mysqld”配置段添加“skip-grant-tables”，然后重新启动mysql即可登录修改root密码。</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="http://www.jb51.net/article/24345.htm" target="_blank" rel="external">mysql常用命令集锦</a><br><a href="http://www.jb51.net/article/25652.htm" target="_blank" rel="external">Mysql常用命令 详细整理版</a><br><a href="http://www.cnblogs.com/fly1988happy/archive/2011/12/15/2288554.html" target="_blank" rel="external">Mysql 用户权限</a><br><a href="http://www.cnblogs.com/fly1988happy/archive/2011/12/15/2288554.html" target="_blank" rel="external">Mysql 命令大全</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Tmux 使用简记]]></title>
      <url>http://arvon.top/2015/07/22/Tmux-%E4%BD%BF%E7%94%A8%E7%AE%80%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p>简述：tmux是指通过一个终端登录远程主机并运行后，在其中可以开启多个控制台的终端复用软件。tmux是一个优秀的终端复用软件，类似GNU Screen，但来自于OpenBSD，采用BSD授权。使用它最直观的好处就是，通过一个终端登录远程主机并运行tmux后，在其中可以开启多个控制台而无需再“浪费”多余的终端来连接这台远程主机；个人更注重工作环境的连续性，可以进行会话保持(保证可以在网络情况不佳的情况下工作现场不丢失)。</p>
<a id="more"></a>
<h3 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">tmux new-session -s session-name	#创建一个新的tmux对话</div><div class="line">tmux ls	#列出已有的tmux列表，相当于Ctrl-B s</div><div class="line">tmux attach-session -t sessionname = tmux a -t sessionname（支持缩写匹配）	#进入一个tmux会话窗</div><div class="line">使用Ctrl-B d返回主shell界面，tmux仍旧在后台运行，里面的命令也保持运行状态</div><div class="line">tmux kill-session -t session-name	#关闭开启在后台的终端；在终端下也可以使用exit进行退出</div></pre></td></tr></table></figure>
<h3 id="快捷键操作"><a href="#快捷键操作" class="headerlink" title="快捷键操作"></a>快捷键操作</h3><blockquote>
<p>C-b c    #创建一个新的窗口<br>C-b n    #切换到下一个窗口<br>C-b p    #切换到上一个窗口<br>C-b d    #临时断开会话，还可以连上的<br>C-b pageup/pagedown    #向上或向下翻页</p>
</blockquote>
<h3 id="参考教程"><a href="#参考教程" class="headerlink" title="参考教程"></a>参考教程</h3><p><a href="http://my.oschina.net/cshell/blog/135261" target="_blank" rel="external">使用大全（桔子空间）</a><br><a href="http://coolshell.cn/articles/7829.html" target="_blank" rel="external">不明觉厉（命令行神器）</a></p>
<h3 id="Tmux源码安装"><a href="#Tmux源码安装" class="headerlink" title="Tmux源码安装"></a>Tmux源码安装</h3><blockquote>
<p>yum install tmux -y    #<br>wget <a href="http://downloads.sourceforge.net/tmux/tmux-1.6.tar.gz" target="_blank" rel="external">http://downloads.sourceforge.net/tmux/tmux-1.6.tar.gz</a><br>cd tmux-1.6<br>./configure<br>make<br>make install</p>
</blockquote>
<h3 id="配置手册"><a href="#配置手册" class="headerlink" title="配置手册"></a>配置手册</h3><p><a href="http://www.doc88.com/p-386623377619.html" target="_blank" rel="external">个性配置参考</a><br><a href="http://www.doc88.com/p-386623377619.html" target="_blank" rel="external">配置地址二</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Markdown Introduction]]></title>
      <url>http://arvon.top/2015/07/21/Markdown-Introduction/</url>
      <content type="html"><![CDATA[<p><strong>简介：</strong>Markdown是一个web上使用的文本到HTML的转换工具，目前github、Stackoverflow等网站均支持这种格式，还有简书也是<br>很支持的呦。它存在的宗旨就是实现易读易写，称为适用于网络的书写语言。自我感觉也确实不错，很适合做IT的人记笔记用。</p>
<a id="more"></a>
<h2 id="语法介绍"><a href="#语法介绍" class="headerlink" title="语法介绍"></a>语法介绍</h2><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><ul>
<li>在Markdown中，<em>、-、+3个符号的效果一致，称为Markdown符号，我习惯用\</em>号</li>
<li>空白行表示另起一个段落</li>
<li>-是表示inline代码，tab是用来标记代码段，分别对应html的code、pre标签</li>
</ul>
<h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><ul>
<li>可以用#、-、=一样的效果，个人偏爱#</li>
<li>#    一级标题</li>
<li>##    二级标题        </li>
<li>…    以此类推</li>
<li>######    六级标题</li>
</ul>
<h3 id="文本强调"><a href="#文本强调" class="headerlink" title="文本强调"></a>文本强调</h3><ul>
<li><em>斜体</em> or <em>强调</em></li>
<li><strong>加粗</strong> or <strong>加粗</strong></li>
<li><strong><em>粗斜体</em></strong> or <strong><em>粗斜体</em></strong></li>
</ul>
<h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><ul>
<li>like this<blockquote>
<p>tag: [tag1, tag2]</p>
</blockquote>
</li>
</ul>
<h3 id="List列表"><a href="#List列表" class="headerlink" title="List列表"></a>List列表</h3><ul>
<li>*无序列表（unordered）</li>
</ul>
<ul>
<li>+无序列表</li>
</ul>
<ul>
<li>-无序列表</li>
</ul>
<ol>
<li><ol>
<li>第一行（ordered有序列表）</li>
</ol>
</li>
<li>2.或- 第二行</li>
<li>3.或- 第三行</li>
</ol>
<h3 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h3><p>~~文字~~   效果为   <del>文字</del>  </p>
<h3 id="组合用法"><a href="#组合用法" class="headerlink" title="组合用法"></a>组合用法</h3><ul>
<li>产品介绍（子项目符号）<br>  此时子项，要以一个制表符或者四个空格缩进</li>
</ul>
<ul>
<li>产品特点<ol>
<li>特点1</li>
</ol>
<ul>
<li>特点2</li>
<li>特点3</li>
</ul>
</li>
</ul>
<ul>
<li>产品功能<ol>
<li>功能1</li>
</ol>
<ul>
<li>功能2</li>
<li>功能3</li>
</ul>
</li>
</ul>
<ul>
<li>可能有时会出现这样的情况，首行内容是以日期或数字开头：2013.公司的年度目标，为了避免也转换成有序列表，可以在.前面<br>加上\:2013. 公司的年度目标</li>
</ul>
<h3 id="Links网站链接"><a href="#Links网站链接" class="headerlink" title="Links网站链接"></a>Links网站链接</h3><blockquote>
<p>Inline-style 内嵌方式：<br>[link text](<a href="https://www.google.com" target="_blank" rel="external">https://www.google.com</a> “title text”)</p>
<p>Reference-style 引用方式：<br>[link text][id]<br>[id]: <a href="https://www.mozilla.org" target="_blank" rel="external">https://www.mozilla.org</a> “title text”</p>
<p>Relative reference to a repository file 引用存储文件：<br>[link text](../path/file/readme.text “title text”)</p>
<p>还能这样使用：<br>[link text][]<br>[link text]: <a href="http://www.reddit.com" target="_blank" rel="external">http://www.reddit.com</a></p>
<p>Email 邮件：<br><a href="&#109;&#97;&#105;&#108;&#x74;&#x6f;&#x3a;&#101;&#x78;&#x61;&#109;&#x70;&#108;&#x65;&#x40;&#x65;&#x78;&#x61;&#x6d;&#112;&#108;&#x65;&#x2e;&#x63;&#111;&#x6d;">&#101;&#x78;&#x61;&#109;&#x70;&#108;&#x65;&#x40;&#x65;&#x78;&#x61;&#x6d;&#112;&#108;&#x65;&#x2e;&#x63;&#111;&#x6d;</a></p>
</blockquote>
<h3 id="images图片链接"><a href="#images图片链接" class="headerlink" title="images图片链接"></a>images图片链接</h3><p><code>图片外链</code>必须记着，很好用<a href="http://i2.tietuku.com/" target="_blank" rel="external">贴图</a></p>
<blockquote>
<p>Inline-style 内嵌方式：<br>![alt text](<a href="https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png" target="_blank" rel="external">https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png</a> “title text”)</p>
<p>Reference-style 引用方式：<br>![alt text][logo]<br>[logo]: <a href="https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png" target="_blank" rel="external">https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png</a> “title text”<br>Inline-style 内嵌方式：<br><img src="https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png" alt="alt text" title="title text"></p>
<p>Reference-style 引用方式：<br>![alt text][logo]</p>
<p>[logo]: <a href="https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png" target="_blank" rel="external">https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png</a> “title text”</p>
<p>###code and Syntax HIghlighting 代码语法高亮：</p>
<ul>
<li>使用`` 包裹起来 ``效果为： <code>包裹起来</code></li>
</ul>
</blockquote>
<ul>
<li>语法高亮</li>
<li><p>例如：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">s = <span class="string">"Python syntax highlighting"</span></div><div class="line"><span class="keyword">print</span> s</div></pre></td></tr></table></figure>
</li>
<li><p>Block Code代码分组（代码区块）：<br>在该行开头缩进4个空格或一个制表符(tab)</p>
</li>
</ul>
<p><strong>Blockquotes 引用：</strong></p>
<blockquote>
<p>Email-style angle brackets<br>are used for blockquotes.</p>
<blockquote>
<p>And, they can be nested.</p>
<h4 id="Headers-in-blockquotes"><a href="#Headers-in-blockquotes" class="headerlink" title="Headers in blockquotes"></a>Headers in blockquotes</h4><ul>
<li>You can quote a list.</li>
<li>Etc.</li>
</ul>
</blockquote>
</blockquote>
<h3 id="Hard-LIne-Breaks换行："><a href="#Hard-LIne-Breaks换行：" class="headerlink" title="Hard LIne Breaks换行："></a>Hard LIne Breaks换行：</h3><p>在一行的结尾处加上2个或2个以上的空格，也可以使用标签<br>第一行文字，<br>第二行文字</p>
<p>###水平分割线：<br>*<em>*<br>\</em> <em> </em><br>- - -</p>
<h3 id="Escape-charecter转义符（反斜杠）："><a href="#Escape-charecter转义符（反斜杠）：" class="headerlink" title="Escape charecter转义符（反斜杠）："></a>Escape charecter转义符（反斜杠）：</h3><p>Markdown 可以利用反斜杠来插入一些在语法中有其它意义的符号，例如：如果你想要用星号加在文字旁边的方式来做出强调效果，你可以在星号的前面加上反斜杠：<br>*literal asterisks*<br>Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：<br>\反斜杠  `反引号  *星号  _下划线  {}花括号  []方括号  ()括弧  #井字号  +加号  -减号  .英文句 !感叹号</p>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="http://daringfireball.net/projects/markdown/" target="_blank" rel="external">Markdown官网</a><br><a href="http://www.markdown.cn/" target="_blank" rel="external">Markdown语法说明</a><br><a href="http://www.bluesdream.com/blog/markdown-cheatsheet-syntax-manual.html" target="_blank" rel="external">参照地址</a><br><a href="http://blog.maxwi.com/2014/03/20/learn-mardown-in-5-minutes/" target="_blank" rel="external">good</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hexo简明]]></title>
      <url>http://arvon.top/2015/07/20/Hexo%E7%AE%80%E6%98%8E/</url>
      <content type="html"><![CDATA[<p><strong>简介</strong>：出自台湾某大学生之手，说是叫tommy351，感觉是叼了个扎天。是一个基于Node.js的静态博客程序，其<br>编译上百篇文字只需要几秒。hexo生成静态网页可以直接放到Github Pages，BAE，SAE等平台上。</p>
<p>###常用的命令</p>
<ul>
<li>hexo n “我的博客” == hexo new “我的博客”    #新建文章</li>
<li>hexo p == hexo publish    #将_drafts下的文件放到_post下，也就是发布草稿</li>
<li>hexo g == hexo generate    #生成静态网页</li>
<li>hexo d == hexo deploy    #发布到远程服务器，开启–generate选项可以在deploy前自动generate</li>
</ul>
<a id="more"></a>
<p>###服务器命令</p>
<ul>
<li>hexo server #Hexo 会监视文件变动并自动更新，您无须重启服务器。</li>
<li>hexo server -s #静态模式</li>
<li>hexo server -p 5000 #更改端口</li>
<li>hexo server -i 192.168.1.1 #自定义 IP</li>
<li>hexo clean #清除缓存 网页正常情况下可以忽略此条命令</li>
<li>hexo g #生成静态网页</li>
<li>hexo d #开始部署</li>
</ul>
<p>###监视文件是否变动</p>
<ul>
<li>hexo generate    #使hexo生成静态文件快速而且简单</li>
<li>hexo generate –watch    #监视文件变动</li>
</ul>
<p>###完成后部署</p>
<ul>
<li>hexo deploy -g 或hexo server -g</li>
<li>hexo henerate –deploy 或hexo deploy –generate</li>
</ul>
<p>###草稿</p>
<ul>
<li>hexo publish [layout]<title></title></li>
</ul>
<p>###模板</p>
<ul>
<li>hexo new “postName” #新建文章</li>
<li>hexo new page “pageName” #新建页面</li>
<li>hexo generate #生成静态页面至public目录</li>
<li>hexo server #开启预览访问端口（默认端口4000，’ctrl + c’关闭server）</li>
<li>hexo deploy #将.deploy目录部署到GitHub</li>
<li>hexo new [layout] <title></title></li>
<li>hexo new photo “My Gallery”</li>
<li>hexo new “Hello World” –lang tw</li>
</ul>
<h3 id="问题记录"><a href="#问题记录" class="headerlink" title="问题记录"></a>问题记录</h3><ol>
<li><strong>Question：</strong>如何设置首页的卡片摘要效果<br><code>Answer:</code>将_config.yml文件中的index：下的expand设置为false，然后在文中添加&lt;!–more–&gt;字段来截取摘要</li>
<li><strong>Question:</strong>出现了很大的问题，描述：本人准备做一个看起来很厉害的简历，but我按教程做的结果是hexo反复报错报错如下<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">FATAL Something<span class="string">'s wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.html</span></div><div class="line">Error: expected end of comment, got end of file</div><div class="line">    at Tokenizer.nextToken (/home/fenghao/blog/node_modules/hexo/node_modules/nunjucks/src/lexer.js:282:23)</div><div class="line">    at Object.extend.nextToken (/home/fenghao/blog/node_modules/hexo/node_modules/nunjucks/src/parser.js:32:27)</div><div class="line">    at Object.extend.peekToken (/home/fenghao/blog/node_modules/hexo/node_modules/nunjucks/src/parser.js:44:43)</div><div class="line">    at Object.extend.parseNodes (/home/fenghao/blog/node_modules/hexo/node_modules/nunjucks/src/parser.js:1124:38)</div><div class="line">    at Object.extend.parseAsRoot (/home/fenghao/blog/node_modules/hexo/node_modules/nunjucks/src/parser.js:1177:42)</div><div class="line">    at Object.module.exports.parse (/home/fenghao/blog/node_modules/hexo/node_modules/nunjucks/src/parser.js:1199:18)</div><div class="line">    at Object.module.exports.compile (/home/fenghao/blog/node_modules/hexo/node_modules/nunjucks/src/compiler.js:1118:48)</div><div class="line">    at Obj.extend._compile (/home/fenghao/blog/node_modules/hexo/node_modules/nunjucks/src/environment.js:444:35)</div><div class="line">    at Obj.extend.compile (/home/fenghao/blog/node_modules/hexo/node_modules/nunjucks/src/environment.js:433:18)</div><div class="line">    at null.&lt;anonymous&gt; (/home/fenghao/blog/node_modules/hexo/node_modules/nunjucks/src/environment.js:378:22)</div><div class="line">    at Object.exports.withPrettyErrors (/home/fenghao/blog/node_modules/hexo/node_modules/nunjucks/src/lib.js:24:16)</div><div class="line">    at Obj.extend.render (/home/fenghao/blog/node_modules/hexo/node_modules/nunjucks/src/environment.js:374:20)</div><div class="line">    at Obj.extend.renderString (/home/fenghao/blog/node_modules/hexo/node_modules/nunjucks/src/environment.js:261:21)</div><div class="line">    at /home/fenghao/blog/node_modules/hexo/lib/extend/tag.js:56:9</div><div class="line">    at tryCatcher (/home/fenghao/blog/node_modules/hexo/node_modules/bluebird/js/main/util.js:24:31)</div><div class="line">    at Promise._resolveFromResolver (/home/fenghao/blog/node_modules/hexo/node_modules/bluebird/js/main/promise.js:427:31)</div><div class="line">    at new Promise (/home/fenghao/blog/node_modules/hexo/node_modules/bluebird/js/main/promise.js:53:37)</div><div class="line">    at Tag.render (/home/fenghao/blog/node_modules/hexo/lib/extend/tag.js:55:10)</div></pre></td></tr></table></figure>
</li>
</ol>
<p>诸如此类报错，还原之前备份后再倒入md文件，问题依旧，也怪自己没想法，本该料到是markdown文件出错了的，ba~la~ba~la,最后还是google拯救了我，不得不吐槽一下某度，真不是东西，屁都查不出来、、、<br><code>解决方法</code>只要将一个markdown文件中的内容去掉以后就好了，好像是#的问题，真是邪了门了，我都打不出来，只能嵌在代码里了。他们讲版本2.8.3没有这个问题。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">“Error $&#123;<span class="comment">#v0&#125; $&#123;#v1&#125;”</span></div></pre></td></tr></table></figure></p>
<p>###摘抄地址</p>
<ul>
<li>地址一：<a href="https://segmentfault.com/a/1190000002632530" title="hexo命令详解" target="_blank" rel="external">Hexo命令详解</a></li>
<li>地址二：<a href="http://c4fun.cn/blog/2014/03/03/use-hexo-blog/" title="##可以不加的嘿嘿##" target="_blank" rel="external">Hexo搭建博客</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用Hexo和Github搭建Blog]]></title>
      <url>http://arvon.top/2015/07/17/%E4%BD%BF%E7%94%A8Hexo%E5%92%8CGithub%E6%90%AD%E5%BB%BABlog/</url>
      <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=25706279&auto=1&height=66"></iframe>

<p><strong>Update</strong>:添加了云音乐外链，方法非常简单粗暴，直接在网易云音乐上生成外链然后放进文章里就行了，如图<br><img src="http://img.arvon.top:80/images/2019/08/12/20150717-hexoblog-1.jpg" alt="20150717-hexoblog-1"><br><img src="http://img.arvon.top:80/images/2019/08/12/20150717-hexoblog-2.jpg" alt="20150717-hexoblog-2"><br>Tips：最近几天都在折腾这个东西，网上有很多的教程，但终究还是有点费劲，在这里总结一下。我是在win7上做的，我尽可能把我出问题的地方着重描述，希望让有兴趣玩这个伙伴们可以顺利点，嘻嘻。特别鸣谢陈素封的博客，帮助很大，话不多说，开始整理。win上多有不便，还会在linux上进行搭建。</p>
<a id="more"></a>
<h1 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h1><p> 2015/07/17第一次记录，因对markdown语法不熟练，Blog功能尚不完善，所以待补充修改</p>
<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><ol>
<li>github账户设置<br>平台为win，需注册<a href="http://www.github.com" title="github account" target="_blank" rel="external">github account</a>登陆github后需要创建一个repository,然后就写个REpositoryname，<strong>注意要和Owner的name一致</strong>（注意），然后勾选那个Initaalize this…什么的选项，然后就这样成了，不然就是像我一样不停的犯错，为何还有待考量，反正现在听话就ok。</li>
<li>软件设置<br>需要的软件有node.js和git，实际最好再来个Visual Studio Code，你会发现有语法高亮就是舒心</li>
<li>待补充昂<br>为了可以清晰一点，决定把Markdown和这个Blog分开记录。恩，就是这样</li>
</ol>
<h1 id="开始搭建"><a href="#开始搭建" class="headerlink" title="开始搭建"></a>开始搭建</h1><h3 id="安装node-js软件"><a href="#安装node-js软件" class="headerlink" title="安装node.js软件"></a>安装node.js软件</h3><ul>
<li>下载地址戳：<a href="http://www.nodejs.org/download/" title="node.js" target="_blank" rel="external">node.js</a>,然后就开始一路下一步吧，然后你的发现带cmd多了一条np</li>
</ul>
<h3 id="安装git软件"><a href="#安装git软件" class="headerlink" title="安装git软件"></a>安装git软件</h3><ul>
<li>下载地址戳：<a href="http://git-scm.com/download/" title="git" target="_blank" rel="external">git</a>,依旧下一步到底。昨天做着的时候没记录，真是一大败笔</li>
</ul>
<h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><ol>
<li><p>进入Git bash,输入命令</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">npm install -g hexo	#hexo表示全局安装hexo</div><div class="line"><span class="meta">#</span><span class="bash">创建hexo文件夹，如/user/arvon/hexo-lxc</span></div><div class="line">hexo init	#初始化hexo</div><div class="line">npm install</div><div class="line">npm generate</div><div class="line">npm server</div></pre></td></tr></table></figure>
</li>
<li><p>然后可以通过访问localhost查看预览http：//localhost:4000/</p>
</li>
</ol>
<h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><ol>
<li>将在github上创建的Repository，找到https那个url将其复制</li>
<li><p>然后编辑位于你创建的文件夹下的文件，例如我就是：/user/arvon/hexo-lxc/_config.yml</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">deploy:</span></div><div class="line">type: git</div><div class="line">repository: https://github.com/arvon2014/arvon2014.github.com</div><div class="line">branch: master</div><div class="line">github上的地址：https://github.com/Arvon2014/arvon2014.github.com.git</div><div class="line"><span class="meta">#</span><span class="bash">web上访问的为：http://arvon2014.github.io</span></div></pre></td></tr></table></figure>
</li>
<li><p>设置ssh免密码访问</p>
<ul>
<li>先查看本地是否已经存在ssh文件，如不存在直接跳过下面第二步</li>
<li>删除已有的ssh的文件</li>
<li><p>输入命令</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -t rsa -C "邮件地址@youremail.com" Generating public/private rsa key pair. Enter file in which to save the key (/Users/your_user_directory/.ssh/id_rsa):</div><div class="line">Enter passphrase (empty for no passphrase):&lt;输入加密串&gt; Enter same passphrase again:&lt;再次输入加密串&gt;</div><div class="line">ssh -T git@github.com	#测试</div><div class="line">The authenticity of host 'github.com (207.97.227.239)' can't be established. RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48. Are you sure you want to continue connecting (yes/no)?	#说明成功</div><div class="line"><span class="meta"> $</span><span class="bash"> git config --global user.name <span class="string">"你的名字"</span> $ git config --global user.email <span class="string">"your_email@youremail.com"</span>	<span class="comment">#设置你的信息</span></span></div></pre></td></tr></table></figure>
</li>
<li><p>现在已经可以顺利将环境搭建完毕</p>
</li>
<li>进入你的Hexo目录，开始试验吧<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hexo generate = hexo g</div><div class="line">hexo server = hexo s	#部署本地预览</div><div class="line">hexo deploy = hexo d	#生成部署</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
<hr>
<p>以上，歌曲为一万次悲伤，推荐使用网易云音乐生成外链</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[安装hexo记录]]></title>
      <url>http://arvon.top/2015/06/13/CentOS%E5%AE%89%E8%A3%85hexo%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<p>简要记录一下在centos上安装hexo的过程<br>记录在CentOS环境下配置hexo博客环境记录</p>
<h2 id="Install-Git"><a href="#Install-Git" class="headerlink" title="Install Git"></a>Install Git</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">yum remove git</div><div class="line">yum install git-core</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="Install-node-js"><a href="#Install-node-js" class="headerlink" title="Install node.js"></a>Install node.js</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh</div><div class="line"><span class="meta">#</span><span class="bash">需要重新加载环境变量</span></div><div class="line">nvm install 0.10</div><div class="line">nvm use 0.10</div></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">mac 下的方法</span></div><div class="line"> curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.31.3/install.sh | bash</div><div class="line"> export NVM_DIR="$HOME/.nvm"[ -s "$NVM_DIR/nvm.sh" ] &amp;&amp; . "$NVM_DIR/nvm.sh" # This loads nvm</div><div class="line"> nvm install stable</div><div class="line"> npm install -g hexo-cli</div></pre></td></tr></table></figure>
<h2 id="Install-hexo"><a href="#Install-hexo" class="headerlink" title="Install hexo"></a>Install hexo</h2> <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"> npm install hexo -g</div><div class="line"></div><div class="line"> hexo init blog</div><div class="line"><span class="meta">#</span><span class="bash">初始化blog目录</span></div><div class="line"> hexo s --debug</div><div class="line"><span class="meta">#</span><span class="bash">测试页面</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux下关于文件属性的三个时间]]></title>
      <url>http://arvon.top/2015/05/13/Linux%E4%B8%8B%E5%85%B3%E4%BA%8E%E6%96%87%E4%BB%B6%E5%B1%9E%E6%80%A7%E7%9A%84%E4%B8%89%E4%B8%AA%E6%97%B6%E9%97%B4/</url>
      <content type="html"><![CDATA[<p>Tips: 主要区分linux下文件的三个时间属性，atime、mtime、ctime</p>
<blockquote>
<ul>
<li>文件的 Access time，atime 是在读取文件或者执行文件时更改的任何对inode的访问都会使此处改变。</li>
<li>文件的Modified time，mtime 是在写入文件时随文件内容的更改而更改的。</li>
<li>文件的 Change time，ctime 是在写入文件、更改所有者、权限或链接设置时随 Inode 的内容更改而更改的。只要stat出来的内容发生改变就会发生改变。mtime的改变必然导致ctime的改变。</li>
</ul>
</blockquote>
<a id="more"></a>
<h3 id="关于directory"><a href="#关于directory" class="headerlink" title="关于directory"></a>关于directory</h3><ul>
<li>文件夹的 Access time，atime 是在读取文件或者执行文件时更改的（只cd进入一个目录然后cd ..不会引起atime的改变，但ls一下就不同了）。</li>
<li>文件夹的 Modified time，mtime 是在文件夹中有文件的新建、删除才会改变（如果只是改变文件内容不会引起mtime的改变，换句话说如果ls -f <directory>的结果发生改变mtime就会被刷新。这里可能有人要争论了：我进入dd这个文件夹vi了一个文件然后退出，前后ls -f <directory>的结果没有改变但是文件夹的mtime发生改变了……这点请主意vi命令在编辑文件时会在本文件夹下产生一 个”.file.swp”临时文件，该文件随着vi的退出而被删除……这就导致了mtime的改变 [Auxten:p]不信你可以用nano修改文件来试验）。</directory></directory></li>
<li>文件夹的 Change time，ctime 基本同文件的ctime，其体现的是inode的change time。</li>
<li>这里还要补充一点：mount -o noatime(mount -o remount,atime / 可以在线重新挂载根目录) 可以选择不记录文件的atime的改变，这意味着什么呢？当你创建了这个文件后这个文件的atime就定格了，除非你用touch或者touch -a强制刷新文件的atime。这样在可以在一定程度上提升文件系统的读写性能，特别是网站这种系统中在fstab里面加上noatime是个好主意</li>
</ul>
<h3 id="关于find"><a href="#关于find" class="headerlink" title="关于find"></a>关于find</h3><ul>
<li>含义：<br>文件的 Access time，atime 是在读取文件或者执行文件时更改的；<br>文件的 Modified time，mtime 是在写入文件时随文件内容的更改而更改的；<br>文件的 Create time，ctime 是在写入文件、更改所有者、权限或链接设置时随 Inode 的内容更改而更改的。</li>
<li>文件各种事件标记的显示方法<br>ls -lc filename         列出文件的 ctime<br>ls -lu filename         列出文件的 atime<br>ls -l filename          列出文件的 mtime</li>
</ul>
<hr>
<p>以上</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux查看主机信息]]></title>
      <url>http://arvon.top/2015/04/13/Linux%E6%9F%A5%E7%9C%8B%E4%B8%BB%E6%9C%BA%E4%BF%A1%E6%81%AF/</url>
      <content type="html"><![CDATA[<p>这篇包括（系统版本、内核信息、核心数、主机名）还有一个关于系统信息查看的，<a href="http://blog.arvon.top/2015/07/27/Linux%E7%B3%BB%E7%BB%9F%E6%9F%A5%E7%9C%8B%E5%91%BD%E4%BB%A4/" target="_blank" rel="external">–&gt;飞机票</a></p>
<a id="more"></a>
<h3 id="查看主机版本信息"><a href="#查看主机版本信息" class="headerlink" title="查看主机版本信息"></a>查看主机版本信息</h3><ul>
<li><p>系统信息</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# cat /etc/redhat-release</div><div class="line">CentOS release 6.7 (Final)</div><div class="line"><span class="meta">#</span><span class="bash">or</span></div><div class="line">[root@localhost ~]# cat /etc/issue</div><div class="line">CentOS release 6.7 (Final)</div><div class="line">Kernel \r on an \m</div><div class="line"><span class="meta">#</span><span class="bash">or</span></div><div class="line">[root@localhost ~]# lsb_release -a</div><div class="line">LSB Version:    :base-4.0-ia32:base-4.0-noarch:core-4.0-ia32:core-4.0-noarch</div><div class="line">Distributor ID:    CentOS</div><div class="line">Description:    CentOS release 6.7 (Final)</div><div class="line">Release:    6.7</div><div class="line">Codename:    Final</div><div class="line"><span class="meta">#</span><span class="bash">yum provides */lsb_release</span></div><div class="line"><span class="meta">#</span><span class="bash">yum install -y redhat-lsb-core-4.0-7.el6.centos.i686</span></div></pre></td></tr></table></figure>
</li>
<li><p>内核信息</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# cat /proc/version</div><div class="line">Linux version 2.6.32-573.el6.x86_64 (mockbuild@c6b9.bsys.dev.centos.org) (gcc version 4.4.7 20120313 (Red Hat 4.4.7-16) (GCC) ) #1 SMP Thu Jul 23 15:44:03 UTC 2015</div><div class="line"><span class="meta">#</span><span class="bash">or</span></div><div class="line">[root@localhost ~]# uname -a</div><div class="line">Linux localhost.localdomain 2.6.32-573.el6.x86_64 #1 SMP Thu Jul 23 15:44:03 UTC 2015 x86_64 x86_64 x86_64 GNU/Linux</div><div class="line"><span class="meta">#</span><span class="bash">or</span></div><div class="line">[root@localhost ~]# uname -r</div><div class="line">2.6.32-573.el6.x86_64</div></pre></td></tr></table></figure>
</li>
<li><p>查看当前运行环境是32还是64，是32也不代表不支持64</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# getconf LONG_BIT</div><div class="line">64</div><div class="line"><span class="meta">#</span><span class="bash">or</span></div><div class="line">[root@localhost ~]# file /sbin/init</div><div class="line">/sbin/init: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.18, stripped</div><div class="line">[root@localhost ~]# file /bin/ls</div><div class="line">/bin/ls: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.18, stripped</div><div class="line"><span class="meta">#</span><span class="bash">or</span></div><div class="line">[root@localhost ~]# uname -a</div><div class="line">Linux localhost.localdomain 2.6.32-573.el6.x86_64 #1 SMP Thu Jul 23 15:44:03 UTC 2015 x86_64 x86_64 x86_64 GNU/Linux</div><div class="line">[root@localhost ~]# uname -m</div><div class="line">x86_64</div><div class="line"><span class="meta">#</span><span class="bash">or</span></div><div class="line">[root@localhost ~]# arch</div><div class="line">x86_64</div><div class="line"><span class="meta">#</span><span class="bash">or</span></div><div class="line">[root@localhost ~]# echo $HOSTTYPE</div><div class="line">x86_64</div><div class="line"><span class="meta">#</span><span class="bash">or</span></div><div class="line">[root@localhost ~]# getconf -a</div><div class="line"><span class="meta">#</span><span class="bash">or</span></div><div class="line">[root@localhost ~]# more /proc/cpuinfo</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="查看其他"><a href="#查看其他" class="headerlink" title="查看其他"></a>查看其他</h3><ul>
<li>查看cpu核心数<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<p>以上</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[top输出详解]]></title>
      <url>http://arvon.top/2015/03/30/top%E8%BE%93%E5%87%BA%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h3 id="常用快捷"><a href="#常用快捷" class="headerlink" title="常用快捷"></a>常用快捷</h3><blockquote>
<p>按键“1”：查看每颗cpu负载<br>按键“c”：查看进程启动命令</p>
</blockquote>
<h3 id="top输出解释"><a href="#top输出解释" class="headerlink" title="top输出解释"></a>top输出解释</h3><ul>
<li>Introduction title</li>
</ul>
<table>
<thead>
<tr>
<th>task</th>
<th>explanation</th>
</tr>
</thead>
<tbody>
<tr>
<td>02:41:47</td>
<td>系统当前时间</td>
</tr>
<tr>
<td>up</td>
<td>系统运行时间64天</td>
</tr>
<tr>
<td>user</td>
<td>当前登录用户数,可以使用w系统命令进行查看具体用户登录信息</td>
</tr>
<tr>
<td>load average</td>
<td>系统cpu负载，表示任务队列1分钟、5分钟、15分钟的<strong>平均负载</strong>,该数值理论上应该小于cpu核心数</td>
</tr>
<tr>
<td>Tasks</td>
<td>系统当前共有99个进程，1个处于运行状态（running），98个处于睡眠状态（sleeping），0个处于停止状态（stopped），0个处于僵尸状态（zombie）</td>
</tr>
<tr>
<td>us</td>
<td><strong>user</strong>,用户进程占用cpu</td>
</tr>
<tr>
<td>sy</td>
<td><strong>system</strong>，系统进程占用cpu</td>
</tr>
<tr>
<td>ni</td>
<td><strong>nice</strong>，用户的进程nice值，表示优先级，没有改变过就是0</td>
</tr>
<tr>
<td>id</td>
<td><strong>idle</strong>，处于空闲的cpu</td>
</tr>
<tr>
<td>wa</td>
<td><strong>wait</strong>，等待的io输入输出</td>
</tr>
<tr>
<td>hi</td>
<td><strong>hardware interrupt</strong>,硬件中断请求占cpu的时间</td>
</tr>
<tr>
<td>si</td>
<td><strong>software interrupt</strong>,软件中断请求占cpu的时间</td>
</tr>
<tr>
<td>st</td>
<td><strong>steal time</strong>,虚拟服务占用cpu时间的百分比，一般应用的机器上都是0， IBM解释为当 hypervisor 服务另一个虚拟处理器的时候，虚拟 CPU 等待实际 CPU 的时间的百分比</td>
</tr>
<tr>
<td>Mem</td>
<td>总共的内存为16，已使用15G，还剩1G空闲，buffers和cached都属于缓存，后面写buffer和cache的区别</td>
</tr>
<tr>
<td>Swap</td>
<td>交换分区大小为0</td>
</tr>
</tbody>
</table>
<blockquote>
<p><strong>Steal 值比较高的话</strong>，你需要向主机供应商申请扩容虚拟机。服务器上的另一个虚拟机可能拥有更大更多的 CPU时间片，你可能需要申请升级以与之竞争。另外，高 steal 值可能意味着主机供应商在服务器上过量地出售虚拟机。如果升级了虚拟机， steal 值还是不降的话，你应该寻找另一家服务供应商。<br><strong>低 steal</strong> 值意味着你的应用程序在目前的虚拟机上运作良好。因为你的虚拟机不会经常地为了 CPU 时间与其它虚拟机激烈竞争，你的虚拟机会更快地响应。这一点也暗示了，你的主机供应商没有过量地出售虚拟服务，绝对是一件好事情。</p>
</blockquote>
<ul>
<li>processes info</li>
</ul>
<table>
<thead>
<tr>
<th>name</th>
<th>explanation</th>
</tr>
</thead>
<tbody>
<tr>
<td>PID</td>
<td>进程标识符</td>
</tr>
<tr>
<td>USER</td>
<td>进程所有者</td>
</tr>
<tr>
<td>PR</td>
<td>进程执行优先级</td>
</tr>
<tr>
<td>NI</td>
<td>nice值，负值表示高优先级</td>
</tr>
<tr>
<td>VIRT</td>
<td>进程使用的虚拟内存,单位kb,VIRT=swap+RES</td>
</tr>
<tr>
<td>RES</td>
<td>进程使用的未被换出的内存大小，RES=CODE+DATA</td>
</tr>
<tr>
<td>SHR</td>
<td>共享内存大小</td>
</tr>
<tr>
<td>S</td>
<td>进程状态</td>
</tr>
<tr>
<td>%CPU</td>
<td>上次更新到现在的cpu时间占用百分比</td>
</tr>
<tr>
<td>%MEM</td>
<td>进程使用武力内存百分比</td>
</tr>
<tr>
<td>TIME+</td>
<td>进程使用cpu内存总计，单位1/100s</td>
</tr>
<tr>
<td>COMMAND</td>
<td>进程被执行的命令名称</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux下hexo配置]]></title>
      <url>http://arvon.top/2015/03/13/Linux%E4%B8%8Bhexo%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<h3 id="本地环境"><a href="#本地环境" class="headerlink" title="本地环境"></a>本地环境</h3><blockquote>
<ul>
<li>CentOS6</li>
<li>下载nvm（Node.js的版本管理器）软件<br>wget -qO- <a href="https://raw.github.com/creationix/nvm/master/install.sh" target="_blank" rel="external">https://raw.github.com/creationix/nvm/master/install.sh</a> | sh    #下载安装nvm（安装目录在/root/.nvm/）</li>
<li>安装nvm软件<br>nvm install 0.10    #选择Node.js的安装版本<br>nvm ls    #查看node.js的版本</li>
</ul>
</blockquote>
<a id="more"></a>
<h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><ul>
<li><p>安装hexo</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">npm install -g hexo	#使用npm安装hexo(此处安装并未完成)</div><div class="line"><span class="meta">#</span><span class="bash">如果显示<span class="built_in">command</span> not found，就重启终端，然后使用nvm ls检查当前版本，如果没有使用命令</span></div><div class="line">nvm use 0.10	#即使用方才装的版本（使用此命令后安装成功）</div><div class="line"><span class="meta">#</span><span class="bash">或使用一下命令直接设置全局默认的node.js版本</span></div><div class="line">nvm alias default 0.10.26</div></pre></td></tr></table></figure>
</li>
<li><p>安装失败的原因可能是无法连接到官方服务器，或者是GFW（Great Firewall，中国国家防火墙或长城防火墙）的问题。<br>需修改npm镜像源使用config命令</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> npm config <span class="built_in">set</span> registry http://registry.cnpmjs.org  </span></div><div class="line"><span class="meta">$</span><span class="bash"> npm info underscore (如果上面配置成功，使用这个命令会有以下提示)  </span></div><div class="line"><span class="meta">$</span><span class="bash"> npm http GET http://registry.cnpmjs.org/underscore  </span></div><div class="line"><span class="meta">$</span><span class="bash"> npm http 200 http://registry.cnpmjs.org/underscore</span></div></pre></td></tr></table></figure>
</li>
<li><p>命令行指定  </p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> npm --registry http://registry.cnpmjs.org info underscore   </span></div><div class="line">编辑 ~/.npmrc 加入以下内容可以使配置永久生效，就不用每次npm安装时都要运行指定源命令了  </div><div class="line"><span class="meta">$</span><span class="bash"> registry = http://registry.cnpmjs.org</span></div></pre></td></tr></table></figure>
</li>
<li><p>使用以下命令对hexo进行初始化<br>这里我位于~目录，而且我想把我的个人博客放在~/hexo目录，需要放在其他目录直接改一下自己需要的目录就可以了</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> hexo install hexo --save</span></div><div class="line"><span class="meta">$</span><span class="bash"> hexo init hexo</span></div></pre></td></tr></table></figure>
</li>
<li><p>本地环境到此结束，有木有很easy</p>
</li>
</ul>
<h3 id="初步预览"><a href="#初步预览" class="headerlink" title="初步预览"></a>初步预览</h3>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo generate 或 hexo g	#生成静态文件</div><div class="line">hexo server 或 hexo s	#打开本地预览（http:localhost:4000）</div></pre></td></tr></table></figure>
<h3 id="配置git并发布"><a href="#配置git并发布" class="headerlink" title="配置git并发布"></a>配置git并发布</h3><p>配置git并发布基于hexo和github的个人博客<br>首先编辑个人安装目录的_config.yml文件，找到一下内容并修改为git</p>
<blockquote>
<p>deploy:<br>type: git<br>repository: <a href="https://github.com/Arvon2014/arvon2014.github.com.git(直接将github上的https项复制并粘贴" target="_blank" rel="external">https://github.com/Arvon2014/arvon2014.github.com.git(直接将github上的https项复制并粘贴</a>)<br>branch: master<br>运行以下命令设置git全局变量，即设置用户名和邮箱(需要先和github建立免密码登陆)<br>git config –global user.name “Arvon”<br>git config –global user.email “yafeng2011@126.com”</p>
</blockquote>
<h3 id="免密码ssh公钥设置"><a href="#免密码ssh公钥设置" class="headerlink" title="免密码ssh公钥设置"></a>免密码ssh公钥设置</h3><ol>
<li>是否安装了ssh，未装执行<blockquote>
<p>yum install ssh  </p>
</blockquote>
</li>
<li>检查公钥<blockquote>
<p>cd ~/.ssh    #存在就删了  </p>
</blockquote>
</li>
<li>生成公钥私钥对<blockquote>
<p>ssh-keygen -t rsa -C “you_email@youremail.com”<br>cd ~/.ssh    #验证  </p>
</blockquote>
</li>
<li>添加ssh公钥到github<blockquote>
<p>将公钥（pub）的内容复制到Deploykeys里面  </p>
</blockquote>
</li>
<li>测试是否生效<blockquote>
<p>ssh -T git@github.com  </p>
</blockquote>
</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Centos搭建nginx+php环境]]></title>
      <url>http://arvon.top/2015/02/13/Centos%E6%90%AD%E5%BB%BAnginx-php%E7%8E%AF%E5%A2%83/</url>
      <content type="html"><![CDATA[<p>Tips：线上pfsense中添加bandwidthd监控流量的功能存在问题，需要配置一个支持php的web环境来进行支持，这里选择了nginx+php。</p>
<h3 id="Environment"><a href="#Environment" class="headerlink" title="Environment"></a>Environment</h3><ul>
<li><p>yum</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget http://mirrors.opencas.cn/epel/6/i386/epel-release-6-8.noarch.rpm</div></pre></td></tr></table></figure>
</li>
<li><p>CentOS6.3_x64</p>
</li>
</ul>
<a id="more"></a>
<h3 id="Install-software"><a href="#Install-software" class="headerlink" title="Install software"></a>Install software</h3><ul>
<li><p>Install nginx</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">yum install nginx</div><div class="line"><span class="comment">#GeoIP.x86_64 0:1.6.5-1.el6                                         </span></div><div class="line"><span class="comment">#GeoIP-GeoLite-data.noarch 0:2015.04-2.el6                          </span></div><div class="line"><span class="comment">#GeoIP-GeoLite-data-extra.noarch 0:2015.04-2.el6                    </span></div><div class="line"><span class="comment">#geoipupdate.x86_64 0:2.2.1-2.el6                                   </span></div><div class="line"><span class="comment">#libxslt.x86_64 0:1.1.26-2.el6_3.1                                  </span></div><div class="line"><span class="comment">#nginx-filesystem.noarch 0:1.0.15-12.el6</span></div><div class="line">chkconfig nginx on</div><div class="line">/etc/init.d/nginx restart</div></pre></td></tr></table></figure>
</li>
<li><p>Install php-fpm</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">yum install php-fpm</div><div class="line"><span class="comment">#Installing : php-common-5.3.3-46.el6_6.x86_64                  1/2</span></div><div class="line"><span class="comment">#Installing : php-fpm-5.3.3-46.el6_6.x86_64                     2/2</span></div><div class="line"><span class="comment">#Verifying  : php-fpm-5.3.3-46.el6_6.x86_64                     1/2</span></div><div class="line"><span class="comment">#Verifying  : php-common-5.3.3-46.el6_6.x86_64                  2/2</span></div><div class="line">chkconfig php-fpm on</div><div class="line">/etc/init.d/php-fpm restart</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Edit-config"><a href="#Edit-config" class="headerlink" title="Edit config"></a>Edit config</h3><ul>
<li><p>备份配置文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cp /etc/nginx/conf.d/default.conf /tmp/</div></pre></td></tr></table></figure>
</li>
<li><p>修改配置文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#vim /etc/nginx/conf.d/default.conf</span></div><div class="line">server &#123;</div><div class="line">    listen       80;</div><div class="line">    server_name  localhost;</div><div class="line">    autoindex    on;</div><div class="line">    <span class="comment">#charset koi8-r;  </span></div><div class="line">    <span class="comment">#access_log  /var/log/nginx/log/host.access.log  main;  </span></div><div class="line"></div><div class="line">    location / &#123;</div><div class="line">        root   /var/www/html;</div><div class="line">        index  index.html index.htm index.php;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    location ~ \.php$ &#123;</div><div class="line">        root           /var/www/html;</div><div class="line">        fastcgi_pass   127.0.0.1:9000;</div><div class="line">        fastcgi_index  index.php;</div><div class="line">        fastcgi_param  SCRIPT_FILENAME  /var/www/html<span class="variable">$fastcgi_script_name</span>;</div><div class="line">        include        fastcgi_params;</div><div class="line">    &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h3><ul>
<li><p>需确认/var/www/html存在，在此目录下创建测试文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#vim /var/www/html/index.php    #内容如下</span></div><div class="line">&lt;?php</div><div class="line">           phpinfo();</div><div class="line">       ?&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>从浏览器访问查看效果<br>url：IP<br><img src="http://i5.tietuku.com/0c55e4e5fbfb6ca3.png" alt=""></p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[windows批量修改文件后缀]]></title>
      <url>http://arvon.top/2015/01/23/windows%E6%89%B9%E9%87%8F%E4%BF%AE%E6%94%B9%E6%96%87%E4%BB%B6%E5%90%8E%E7%BC%80/</url>
      <content type="html"><![CDATA[<p>Ren命令可用于修改文件的名称，包括后缀名。比如，将D盘中的1.jpg重命名为2.png，只需在命令提示符中输入下面的命令，然后回车即可。<br><a id="more"></a></p>
<blockquote>
<p>ren D:\1.jpg 2.png<br>注意，如果提示权限不足，那么你需要以管理员身份运行命令提示符。<br>如果要批量修改后缀名，可借助通配符来实现。比如将D盘中的所有文件后缀名改为jpg的命令为：</p>
<p>ren D:* *.png<br>如果只想将某一类型文件（具有相同后缀名）修改为另一个类型，比如，将D盘中的所有jpg文件后缀修改为png，其命令为：</p>
<p>ren D:*.jpg *.png<br>如果你经常需要批量修改后缀名，可以把下面两条命令复制到txt文本文档中:</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd /d %~dp0</div><div class="line">ren * *.jpg</div></pre></td></tr></table></figure>
<p>保存后将其后缀txt修改为bat。以后只需要把这个bat文件与需要修改的文件放到同一目录中，然后以管理员身份运行这个bat文件即可将该目录下的所有文件后缀名改为jpg。</p>
<hr>
<p>以上</p>
]]></content>
    </entry>
    
  
  
</search>
