<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Linux管理员的瑞士军刀-AWK]]></title>
      <url>http://arvon.top/2017/06/24/Linux%E7%AE%A1%E7%90%86%E5%91%98%E7%9A%84%E7%91%9E%E5%A3%AB%E5%86%9B%E5%88%80-AWK/</url>
      <content type="html"><![CDATA[<p><img src="http://oqfz9mxmq.bkt.clouddn.com/20170624-awkcommand-1.jpeg" alt="1"><br>作为Linux系统管理员的瑞士小军刀，awk的作用是显而易见的，但是一般情况下使用的都是很简单的分割打印，但有时候需要稍微复杂一些的用法，这里进行一下我的总结。其实之前有写过一篇awk的博客，不过写的比较基础，这次作为补充并尽可能覆盖常用用法，之前的地址<a href="http://arvon.top/2015/07/29/awk%E7%94%A8%E6%B3%95%E5%AE%9E%E4%BE%8B/">戳这里</a><br><a id="more"></a></p>
<h4 id="感受一下"><a href="#感受一下" class="headerlink" title="感受一下"></a>感受一下</h4><p>通过一个简单的实例来进行说明，实例数据如下,其他介绍放在后面，毕竟实例比理论来的直观嘛：</p>
<table>
<thead>
<tr>
<th>NumID</th>
<th>Name</th>
<th>Math</th>
<th>English</th>
<th>Chinese</th>
</tr>
</thead>
<tbody>
<tr>
<td>M5</td>
<td>Arvon</td>
<td>13</td>
<td>14</td>
<td>15</td>
</tr>
<tr>
<td>F3</td>
<td>Mo</td>
<td>92</td>
<td>02</td>
<td>26</td>
</tr>
<tr>
<td>F4</td>
<td>Pikachu</td>
<td>52</td>
<td>10</td>
<td>11</td>
</tr>
<tr>
<td>M1</td>
<td>Steavn</td>
<td>1</td>
<td>2</td>
<td>3</td>
</tr>
<tr>
<td>F2</td>
<td>World</td>
<td>4</td>
<td>5</td>
<td>56</td>
</tr>
</tbody>
</table>
<h4 id="鲜活的小栗子"><a href="#鲜活的小栗子" class="headerlink" title="鲜活的小栗子"></a>鲜活的小栗子</h4><ul>
<li><p>基础1：获取姓名和英语成绩</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">awk -F<span class="string">' '</span> <span class="string">'&#123;print $2,$4&#125;'</span> xxx.txt</div></pre></td></tr></table></figure>
</li>
<li><p>基础2：设置输入和输出分隔符的姓名和成绩</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">awk <span class="string">'BEGIN&#123;FS=" ";OFS="---"&#125;&#123;print $2,$4&#125;'</span> xxx.txt</div></pre></td></tr></table></figure>
</li>
<li><p>基础3： 输出行号列数带描述的姓名和成绩</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">awk <span class="string">'BEGIN&#123;FS=" ";OFS="---"&#125;&#123;print "filename:" FILENAME, "lineNum:"NR, "leishu:"NF, $2,$4&#125;'</span> xxx.txt</div></pre></td></tr></table></figure>
</li>
<li><p>基础4：添加Title和结束符并设置输入输出分隔符的例子</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">awk <span class="string">'BEGIN&#123;print "T1","T2","T3","T4"&#125;&#123;FS=" ";OFS="---"&#125;&#123;print "filename:" FILENAME, "lineNum:"NR, "leishu:"NF, $2,$4&#125;END&#123;print "Game Over"&#125;'</span> xxx.txt</div></pre></td></tr></table></figure>
</li>
<li><p>基础5： 带匹配的，例如匹配Arvon并输出成绩</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">awk <span class="string">'BEGIN&#123;FS=" "&#125;/Arvon/&#123;print $0&#125;'</span> xxx.txt</div><div class="line">awk <span class="string">'BEGIN&#123;FS=" "&#125;/M[1-9]/&#123;print $0&#125;'</span> xxx.txt</div><div class="line">awk <span class="string">'BEGIN&#123;FS=" "&#125;/M./&#123;print $0&#125;'</span> xxx.txt</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="嗨嗨的大栗子"><a href="#嗨嗨的大栗子" class="headerlink" title="嗨嗨的大栗子"></a>嗨嗨的大栗子</h4><p><strong>说明一下：</strong>awk的条件是从C语言借鉴而来，反正C我也不会，但awk应该会，关于AWK变成的资料极多，我这里就写一些常用简单的啦~<br><strong>还有还有–&gt;awk工作流程：</strong>先执行BEGIN，然后读取文件，读入有/n换行符分割的一条记录，然后将记录按指定的域分隔符划分域，填充域，$0则表示所有域,$1表示第一个域,$n表示第n个域,随后开始执行模式所对应的动作action。接着开始读入第二条记录······直到所有的记录都读完，最后执行END操作。</p>
<ul>
<li><p>高阶1：行计数累加，获取每个人的成绩总和</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">awk <span class="string">'BEGIN&#123;FS=" "&#125;/M[1-9]|F[1-9]/&#123;print $0,$3+$4+$5&#125;'</span> xxx.txt</div></pre></td></tr></table></figure>
</li>
<li><p>高阶2：列累加，获取所有人每科成绩的总和</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">awk <span class="string">'BEGIN&#123;FS=" "&#125;/F[1-9]|M[1-9]/&#123;sMath=sMath+$3;sEnglish=sEnglish+$4;sChinese=sChinese+$5&#125;END&#123;print sMath,sEnglish,sChinese&#125;'</span> xxx.txt</div></pre></td></tr></table></figure>
</li>
<li><p>高阶3：数据筛选计数，获取数学成绩大于10的人数，并列出是谁</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">awk <span class="string">'BEGIN&#123;renshu=0&#125;&#123;FS=" "&#125;/F[1-9]|M[1-9]/&#123;if ($3&gt;10) &#123;print $0; renshu+=1&#125;&#125;END&#123;print "totleNum:" renshu&#125;'</span> xxx.txt</div></pre></td></tr></table></figure>
</li>
<li><p>高阶5：带过滤筛选的求和，求英语成绩大于等于5的人的各科成绩总和</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">awk <span class="string">'BEGIN&#123;sMath=0;sEng=0;sChi=0&#125;/F[1-9]|M[1-9]/&#123;if($4&gt;=5)&#123;print $0;sMath+=$3;sEng+=$4;sChi+=$5&#125;&#125;END&#123;print "sMath:" sMath, "sEng:" sEng, "sChi:" sChi&#125;'</span> xxx.txt</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h4><ul>
<li>内建变量</li>
<li>Record（记录）:awk从数据文件上读取数据的基本单位，默认内建变量RS为换行<br>如：例子中的“M5    Arvon    13    14    15”就是一条记录</li>
<li>Field（字段）：记录中被分隔开的子字符串，默认内建变量FS为空格<br>如：例子中第一条记录的第一个字符串为M5，第二个为Arvon</li>
</ul>
<h4 id="内建变量"><a href="#内建变量" class="headerlink" title="内建变量"></a>内建变量</h4><table>
<thead>
<tr>
<th>变量名称</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>\$n</td>
<td>当前记录的第n个字段，字段间由FS分隔</td>
</tr>
<tr>
<td>$0</td>
<td>完整的输入记录</td>
</tr>
<tr>
<td>ARGC</td>
<td>命令行参数的数目</td>
</tr>
<tr>
<td>ARGIND</td>
<td>命令行中当前文件的位置(从0开始算)</td>
</tr>
<tr>
<td>ARGV</td>
<td>包含命令行参数的数组</td>
</tr>
<tr>
<td>CONVFMT</td>
<td>数字转换格式(默认值为%.6g)ENVIRON环境变量关联数组</td>
</tr>
<tr>
<td>ERRNO</td>
<td>最后一个系统错误的描述</td>
</tr>
<tr>
<td>FIELDWIDTHS</td>
<td>字段宽度列表(用空格键分隔)</td>
</tr>
<tr>
<td>FILENAME</td>
<td>当前文件名</td>
</tr>
<tr>
<td>FNR</td>
<td>各文件分别计数的行号</td>
</tr>
<tr>
<td>FS</td>
<td>字段分隔符(默认是任何空格)</td>
</tr>
<tr>
<td>IGNORECASE</td>
<td>如果为真，则进行忽略大小写的匹配</td>
</tr>
<tr>
<td>NF</td>
<td>输入字段分割符</td>
</tr>
<tr>
<td>NR</td>
<td>已经读出的记录数，就是行号，从1开始</td>
</tr>
<tr>
<td>OFMT</td>
<td>数字的输出格式(默认值是%.6g)</td>
</tr>
<tr>
<td>OFS</td>
<td>输出记录分隔符（输出换行符），输出时用指定的符号代替换行符</td>
</tr>
<tr>
<td>ORS</td>
<td>输出记录分隔符(默认值是一个换行符)</td>
</tr>
<tr>
<td>RLENGTH</td>
<td>由match函数所匹配的字符串的长度</td>
</tr>
<tr>
<td>RS</td>
<td>记录分隔符(默认是一个换行符)</td>
</tr>
<tr>
<td>RSTART</td>
<td>由match函数所匹配的字符串的第一个位置</td>
</tr>
<tr>
<td>SUBSEP</td>
<td>数组下标分隔符(默认值是/034)</td>
</tr>
</tbody>
</table>
<hr>
<p>以上，还有很多用法暂时就先这样吧，有了再补充，awk编程也是厉害了</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[GTX直压上云技术实践]]></title>
      <url>http://arvon.top/2017/06/01/GTX%E7%9B%B4%E5%8E%8B%E4%B8%8A%E4%BA%91%E6%8A%80%E6%9C%AF%E5%AE%9E%E8%B7%B5/</url>
      <content type="html"><![CDATA[<p><strong>update:</strong>测试时出现二进制文件大小恰好为256M整数倍时解压不退出的bug,提交至维护人员后已经解决，不得不说反馈速度真的是快，从我提出到解决总共用了不到1天时间。给点个赞，棒棒哒<br>GTX Compressor(直压上云技术)调研,由于现业务存在大规模业务数据上传云存储，云厂商提供接口具有一些局限性，现在尝试gtz这个工具。该工具目前支持阿里云及AWS非常符合业务场景，具有高压缩比、高性能、高速直压云等特点，且有数据校验机制，而且开包即用，<strong>不依赖当前系统其他任何库</strong>。</p>
<blockquote>
<p><strong>介绍：</strong>GTX Compressor是Genetalks公司GTX Lab实验室开发的面向大型数据（数GB甚至数TB数据，尤其是生物信息数据）上云，而量身定制的复杂通用数据压缩打包系统，可以对任意基因测序数据以及数据目录进行高压缩率的快速打包，形成单个压缩数据文件，以方便存储档与远程传输、校验。区别于以往的压缩工具，GT Compressor系统着力于 高压缩率，高速率，方便的数据抽取 。<br>——————摘自<a href="https://github.com/Genetalks/gtz/blob/master/README_chs.md" target="_blank" rel="external">Github上该项目官方介绍</a></p>
</blockquote>
<a id="more"></a>
<h4 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h4><ul>
<li>64位 Linux 系统（CentOS 6.5以上或Ubuntu 12.04以上，推荐Ububtu 14.04及以上64位操作系统)</li>
<li>4核以上，最小8GB内存的主机系统（若要达到最大并发性，推荐32核 64GB内存，或与AWS C4.8xlarge机器相同配置）</li>
<li><strong>我的测试环境为</strong>：Centos7.3_x64</li>
</ul>
<h4 id="安装及使用"><a href="#安装及使用" class="headerlink" title="安装及使用"></a>安装及使用</h4><blockquote>
<p>安装非常简单暴力，直接就是开包即用，下载对应系统版本即可</p>
</blockquote>
<ul>
<li><p>安装</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">wget https://github.com/Genetalks/gtz/archive/master.zip</div><div class="line">unzip xvf master.zip</div><div class="line">tar xvf gtz_0.2.2b_centos_pre_release.tgz</div></pre></td></tr></table></figure>
</li>
<li><p>使用方法</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">USAGE:</div><div class="line">./gtz  [--list] [<span class="_">-e</span> &lt;string&gt;] [<span class="_">-f</span>] [--endpoint &lt;string&gt;] [--timeout &lt;string&gt;]</div><div class="line">          [--secret-access-key &lt;string&gt;] [--access-key-id &lt;string&gt;] [-b</div><div class="line">          &lt;string&gt;] [<span class="_">-s</span> &lt;string&gt;] [-c] [-n &lt;string&gt;] [<span class="_">-l</span> &lt;string&gt;] [-i]</div><div class="line">          [<span class="_">-d</span>] [--delete] [<span class="_">-a</span>] [-g &lt;number&gt;] [-o &lt;string&gt;] [--] [--version]</div><div class="line">          [-h] &lt;file names&gt; ...</div></pre></td></tr></table></figure>
</li>
<li><p>压缩解压选项解释</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">### 通用选项</span></div><div class="line">-h：输出以上命令行帮助信息</div><div class="line">--version：输出gt_compress程序的版本号</div><div class="line">--access-key-id : 指定云平台用户ID</div><div class="line">--secret-access-key： 指定云平台用户密钥</div><div class="line">--endpoint ： 指定阿里云OSS平台的访问域名和数据中心</div><div class="line"><span class="comment">### 压缩选项参数</span></div><div class="line"><span class="_">-f</span>, --force ： 强制删除容器内的object</div><div class="line">--timeout ： 指定上传超时阀值</div><div class="line">-i：压缩时增加索引，主要用于在压缩文件中快速检索fastq文件的某段内容，该选项会降低压缩速度</div><div class="line"><span class="_">-a</span>：追加模式，本次压缩的内容会追加到压缩文件中</div><div class="line">-g：分组加速压缩，分组越多，需要的cpu和内存越多，压缩速度越快。不指定该值时，程序会根据cpu和内存自动选择最优值</div><div class="line">-o：指定压缩文件名，不指定时，默认为out.gtz</div><div class="line">file_name：需要压缩的文件或目录, 若不指定，则从标准输入中读入数据</div><div class="line"><span class="comment">### 解压选项参数</span></div><div class="line"><span class="_">-d</span>,--decode : 解压模式 --list	: 列出压缩包中所有的压缩文件名，与<span class="_">-d</span>参数一起使用 <span class="_">-e</span>, --extract	: 解压压缩包中指定的压缩文件，文件名之间用冒号:分割，与<span class="_">-d</span>参数一起使用</div><div class="line">--timeout ： 指定下载超时阀值</div><div class="line">-c,--stdout           :   解压数据输出至标准输出, 只能与 <span class="_">-d</span> 参数一起使用</div><div class="line">-o：指定输出文件名，使用-n或<span class="_">-l</span>时需要指定该选项，否则不需要该选项</div><div class="line">file_name：需要压缩的文件, 若不指定，则从标准输入中读入数据</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="使用范例"><a href="#使用范例" class="headerlink" title="使用范例"></a>使用范例</h4><blockquote>
<p><strong>注意：</strong>使用时可以使用命令行参数指定key变量和endpoint变量，也可以使用export声明，如<br>export access_key_id=xxxxxx<br>export secret_access_key=xxxxxx<br>export endpoint=xxxxxx （该环境变量只有上传至OSS时才需设置）</p>
</blockquote>
<ul>
<li><p>本地压缩解压</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">####----压缩----</span></div><div class="line"><span class="comment">#直接压缩，1G的数据压到68k了，不过源数据不具备参考性，dd出来的数据</span></div><div class="line">./gtz -o test.gtz up_data_test/gtz-test3.log</div><div class="line"><span class="comment">#通过zcat和管道压缩，支持二进制文件</span></div><div class="line">zcat up_data_test/gtz-test3.log |./gtz -o <span class="built_in">test</span>2.gtz</div><div class="line"><span class="comment">####----解压----</span></div><div class="line"><span class="comment">#解压单个文件，解压路径为压缩时的路径</span></div><div class="line">./gtz <span class="_">-d</span> ./test.gtz</div></pre></td></tr></table></figure>
</li>
<li><p>压缩上传AWS例子<br>上传文件在S3上显示为目录gtz-test4.name，该目录里面下面为原文件同名目录及一个gtz.meta文件，如图<br><img src="http://oqfz9mxmq.bkt.clouddn.com/20170601-gtztools-1.jpeg" alt="1"></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> AWS_ACCESS_KEY_ID=<span class="string">'your_key'</span></div><div class="line"><span class="built_in">export</span> AWS_SECRET_ACCESS_KEY=<span class="string">'Your_key'</span></div><div class="line"><span class="built_in">export</span> AWS_DEFAULT_REGION=<span class="string">'your_region'</span></div><div class="line"><span class="comment">#上传单个文件，上传1G的测试数据需要50s左右</span></div><div class="line">./gtz -o s3://arvon-gtz-test/gtz-test4.name up_data_test/gtz-test4.db</div><div class="line"><span class="comment">#追加文件到压缩包，如果不加-a参数会覆盖原来的文件</span></div><div class="line">./gtz -o s3://arvon-gtz-test/ up_data_test/gtz-test3.log</div></pre></td></tr></table></figure>
</li>
<li><p>解压缩AWS上S3到本地</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./gtz  <span class="_">-d</span> s3://arvon-gtz-test/<span class="built_in">test</span>3</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h4><p><a href="https://github.com/Genetalks/gtz" target="_blank" rel="external">Github项目地址</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[常见压缩格式对比]]></title>
      <url>http://arvon.top/2017/05/30/%E5%B8%B8%E8%A7%81%E5%8E%8B%E7%BC%A9%E6%A0%BC%E5%BC%8F%E5%AF%B9%E6%AF%94/</url>
      <content type="html"><![CDATA[<p><strong>数据压缩</strong>可以分为无损压缩和有损压缩，有损，指的是压缩之后就无法完整还原原始信息，但是压缩率可以很高，主要应用于视频、话音等数据的压缩，因为损失了一点信息，人是很难察觉的，或者说，也没必要那么清晰照样可以看可以听；无损压缩则用于文件等等必须完整还原信息的场合。目前只归纳zip、rar、tar.gz、tar.bz常见的这几种，其他的以后接触了再进行补充。<br><a id="more"></a><br><strong>注意</strong>：压缩率大小直接受源文件影响，所以不同类型源文件压缩效率差别会很大，以下数值仅可作参考，压缩率越低压缩效率越高，例如：100G压缩到10G压缩率为10%</p>
<h3 id="普通文本文件压缩率对比"><a href="#普通文本文件压缩率对比" class="headerlink" title="普通文本文件压缩率对比"></a>普通文本文件压缩率对比</h3><table>
<thead>
<tr>
<th>压缩格式</th>
<th>压缩率</th>
<th>占用cpu</th>
<th>耗时</th>
</tr>
</thead>
<tbody>
<tr>
<td>7-zip</td>
<td>10%</td>
<td>50%</td>
<td>600s</td>
</tr>
<tr>
<td>win-zip</td>
<td>30%</td>
<td>65%</td>
<td>200s</td>
</tr>
<tr>
<td>WinRAR</td>
<td>25%</td>
<td>80%</td>
<td>240s</td>
</tr>
<tr>
<td>tar.gz</td>
<td>11%</td>
<td>55%</td>
<td>500s</td>
</tr>
<tr>
<td>tar.bz2</td>
<td>15%</td>
<td>65%</td>
<td>550s</td>
</tr>
</tbody>
</table>
<h3 id="影音文件压缩率对比"><a href="#影音文件压缩率对比" class="headerlink" title="影音文件压缩率对比"></a>影音文件压缩率对比</h3><table>
<thead>
<tr>
<th>压缩格式</th>
<th>压缩率</th>
<th>占用cpu</th>
<th>耗时</th>
</tr>
</thead>
<tbody>
<tr>
<td>7-zip</td>
<td>40%</td>
<td>80%</td>
<td>500s</td>
</tr>
<tr>
<td>win-zip</td>
<td>80%</td>
<td>80%</td>
<td>150s</td>
</tr>
<tr>
<td>WinRAR</td>
<td>45%</td>
<td>70%</td>
<td>450s</td>
</tr>
<tr>
<td>tar.gz</td>
<td>45%</td>
<td>65%</td>
<td>400s</td>
</tr>
<tr>
<td>tar.bz2</td>
<td>43%</td>
<td>70%</td>
<td>450s</td>
</tr>
</tbody>
</table>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="http://www.codeceo.com/article/zip-method.html" target="_blank" rel="external">zip压缩原理分析</a><br><a href="http://blog.csdn.net/21aspnet/article/details/232316" target="_blank" rel="external">zip压缩原理及实现</a><br><a href="http://zhangyu.blog.51cto.com/197148/1592013/" target="_blank" rel="external">tar压缩原理</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Nginx重定向及域名CNAME问题]]></title>
      <url>http://arvon.top/2017/05/29/Nginx%E9%87%8D%E5%AE%9A%E5%90%91%E5%8F%8A%E5%9F%9F%E5%90%8DCNAME%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<p><img src="http://oqfz9mxmq.bkt.clouddn.com/20170529-nginxcname-1.jpeg" alt="20170529-nginxcname-1"><br><strong>关于域名解析</strong>的几个问题整理，最近换了博客评论系统，原因是多说马上就停止支持了，所以现在转用网易云跟帖，个人感觉还可以。期间有个域名解析的问题我觉得可以记录下。主要就是DNS的CNAME记录以及Nginx的301、302重定向。</p>
<h3 id="关于DNS的CNAME解析"><a href="#关于DNS的CNAME解析" class="headerlink" title="关于DNS的CNAME解析"></a>关于DNS的CNAME解析</h3><blockquote>
<p>其实这个也蛮好理解，不涉及数据报内容的改变，就是将要解析的域名指向另一个域名解析。对比A记录就更清晰了，A记录是域名到IP的解析，而CNAME记录是域名解析到域名。所以通过域名的CNAME记录对web访问时没有任何影响的，它只是改变了域名解析的过程而已。</p>
</blockquote>
<a id="more"></a>
<h3 id="关于URL重定向"><a href="#关于URL重定向" class="headerlink" title="关于URL重定向"></a>关于URL重定向</h3><blockquote>
<p>所谓URL重定向其实就是URL跳转，这个可以通过Nginx的HttpRewriteModule设置重写http请求头。URL重定向氛围302临时重定向和301永久重定向，301永久重定向会使搜索引擎抓取新的内容时使用重定向后的新地址，而302临时重定向会使搜索引擎抓取新内容时保留重定向前的旧地址。<br>nginx的rewrite相当于apache的rewriterule(大多数情况下可以把原有apache的rewrite规则加上引号就可以直接使用)，它可以用在server,location 和IF条件判断块中,命令格式如下：<br>rewrite 正则表达式 替换目标 flag标记<br>flag标记可以用以下几种格式：<br>last – 基本上都用这个Flag。<br>break – 中止Rewirte，不在继续匹配<br>redirect – 返回临时重定向的HTTP状态302<br>permanent – 返回永久重定向的HTTP状态301</p>
</blockquote>
<ul>
<li><p>301永久重定向Nginx代码</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">        listen       80;</div><div class="line">        server_name  arvon.top;</div><div class="line">        if ($host = 'www.arvon.top' ) &#123;</div><div class="line">            rewrite ^/(.*)$ http://arvon.top/$1 permanent;</div><div class="line">                   &#125;</div><div class="line">        location / &#123;</div><div class="line">            root   html/public;</div><div class="line">            index  index.html;</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>302临时重定向Nginx代码</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">        listen       80;</div><div class="line">        server_name  arvon.top;</div><div class="line">        if ($host = 'blog.arvon.top' ) &#123;</div><div class="line">            rewrite ^/(.*)$ http://arvon.top/$1 redirect;</div><div class="line">                   &#125;</div><div class="line">        location / &#123;</div><div class="line">            root   html/public;</div><div class="line">            index  index.html;</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Nginx地址重定向"><a href="#Nginx地址重定向" class="headerlink" title="Nginx地址重定向"></a>Nginx地址重定向</h3><blockquote>
<p>使用alias或root进行网站路径定义，也可进行资源路径重定向。</p>
</blockquote>
<ul>
<li><p>使用root定义<br>语法：root path;<br>默认：root html;<br>配置块：http、server、location、if</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">location /download/ &#123;  </div><div class="line">root /opt/web/html/;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>使用alias定义<br>语法：alias path;<br>配置块： location;</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">location /conf &#123;  </div><div class="line">    alias /usr/local/nginx/conf/;      </div><div class="line">&#125;</div><div class="line"><span class="meta">#</span><span class="bash">如果用root，则如</span></div><div class="line">location /conf &#123;  </div><div class="line">       root /usr/local/nginx/;          </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>使用alias时，在URI向实际文件路径的映射过程中，已经把location后配置的/conf这部分字符串丢弃掉，因此，/conf/nginx.conf请求将根据alias path映射为path/nginx.conf。root则不然，它会根据完整的URI请求来映射，因此，/conf/nginx.conf请求会根据root path映射为path/conf/nginx.conf。这也是root可以放置到http、server、location或if块中，而alias只能放置到location块中的原因。</p>
</blockquote>
<h3 id="更详细的说明"><a href="#更详细的说明" class="headerlink" title="更详细的说明"></a>更详细的说明</h3><p><a href="http://lansgg.blog.51cto.com/5675165/1575274" target="_blank" rel="external">1. 大风的博客：nginx配置url重定向-反向代理</a><br><a href="http://blief.blog.51cto.com/6170059/1736787" target="_blank" rel="external">2. 网站路径定义</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Jumpserver实践记录]]></title>
      <url>http://arvon.top/2017/05/24/Jumpserver%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<p><img src="http://oqfz9mxmq.bkt.clouddn.com/20170524-jumpserver-1.jpeg" alt="20170524-jumpserver-1"><br><strong>Jumpserver</strong>是一个由一群有理想有抱负的大牛们开发的开源跳板机及资产管理系统，最近在整理搭建，发现还是蛮好用的，过程记录如下，感谢<a href="https://github.com/jumpserver/jumpserver/tree/0.3.2" target="_blank" rel="external">作者</a>开源！！</p>
<a id="more"></a>
<h3 id="Environment"><a href="#Environment" class="headerlink" title="Environment"></a>Environment</h3><ul>
<li>aws ec2</li>
<li>centos7.3</li>
<li>Python: 3.5</li>
<li>Django: 1.11</li>
<li>Mysql</li>
</ul>
<h3 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h3><ul>
<li><p>install rely env(使用Redhat)</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">wget http://dev.mysql.com/get/mysql57-community-release-el7-7.noarch.rpm</div><div class="line">rpm -ivh mysql57-community-release-el7-7.noarch.rpm</div><div class="line">yum install -y mysql-community-server</div><div class="line">systemctl start mysqld.service</div><div class="line">mysqladmin -uroot -p password <span class="string">"your_password"</span></div><div class="line">pip uninstall pycrypto</div><div class="line">rm -rf /usr/lib64/python2.6/site-packages/Crypto/</div><div class="line">rm -rf  /usr/lib64/python2.6/site-packages/pycrypto-2.6.1-py2.6-linux-x86_64.egg</div><div class="line">pip install pycrypto==2.4.1</div><div class="line">wget https://www.python.org/ftp/python/3.6.0/Python-3.6.0.tar.xz</div><div class="line">tar xvf Python-3.6.0.tar.xz;<span class="built_in">cd</span> Python-3.6.0</div><div class="line">./configure --prefix=/usr/<span class="built_in">local</span>/python3</div><div class="line">make &amp;&amp; make install</div></pre></td></tr></table></figure>
</li>
<li><p>modify config</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#My path: vim /data/jumpserver_pkg/jumpserver-master/install/install.py</span></div><div class="line">python install.py <span class="comment">#直接执行即可</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Solve-the-problem"><a href="#Solve-the-problem" class="headerlink" title="Solve the problem"></a>Solve the problem</h3><ul>
<li>mysql error:报错为django相关<blockquote>
<p>使用utf8创建database<br>CREATE DATABASE IF NOT EXISTS  jumpserver DEFAULT CHARACTER SET utf8;</p>
</blockquote>
</li>
</ul>
<h3 id="Aws-ec2-批量添加主机脚本"><a href="#Aws-ec2-批量添加主机脚本" class="headerlink" title="Aws ec2 批量添加主机脚本"></a>Aws ec2 批量添加主机脚本</h3><ul>
<li><p>获取aws ec2运行主机列表</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">---</span></div><div class="line"><span class="comment">#name:get_ec2_host_list.yml</span></div><div class="line"><span class="attr">- hosts:</span> <span class="string">localhost</span></div><div class="line"><span class="attr">  connection:</span> <span class="string">local</span></div><div class="line"><span class="attr">  gather_facts:</span> <span class="literal">True</span></div><div class="line"><span class="attr">  tasks:</span></div><div class="line"><span class="attr">    - name:</span> <span class="string">ec2</span> <span class="string">instance</span> <span class="string">facts</span></div><div class="line"><span class="attr">      ec2_remote_facts:</span></div><div class="line"><span class="attr">        region:</span> <span class="string">cn-north-1</span></div><div class="line"><span class="attr">        filters:</span></div><div class="line"><span class="attr">          instance-state-name:</span>  <span class="string">running</span></div><div class="line"><span class="attr">      register:</span> <span class="string">ec2</span></div><div class="line"><span class="attr">    - set_fact:</span> <span class="string">ec2_out=&#123;&#123;</span> <span class="string">ec2</span> <span class="string">&#125;&#125;</span></div><div class="line"><span class="attr">    - shell:</span> <span class="string">rm</span> <span class="bullet">-rf</span> <span class="string">running_ec2_list.txt</span></div><div class="line"><span class="attr">    - shell:</span> <span class="string">echo</span> <span class="string">"<span class="template-variable">&#123;&#123; item.0.private_ip_address &#125;&#125;</span>"</span>  <span class="string">"<span class="template-variable">&#123;&#123;item.0.tags.Name&#125;&#125;</span>"</span> <span class="string">&gt;&gt;</span> <span class="string">running_ec2_list.txt</span></div><div class="line"><span class="attr">      with_together:</span></div><div class="line"><span class="bullet">        -</span> <span class="string">"<span class="template-variable">&#123;&#123; ec2_out.instances &#125;&#125;</span>"</span></div></pre></td></tr></table></figure>
</li>
<li><p>生成Excel文件</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment"># -*- coding:utf-8 -*-</span></div><div class="line"><span class="comment">###############################################################################</span></div><div class="line"><span class="comment">#Author: arvon</span></div><div class="line"><span class="comment">#Email: yafeng2011@126.com</span></div><div class="line"><span class="comment">#Blog: http://blog.arvon.top/</span></div><div class="line"><span class="comment">#Date: 2017-05-23</span></div><div class="line"><span class="comment">#Filename: write_jumpserver_host.py</span></div><div class="line"><span class="comment">#Revision: 1.0</span></div><div class="line"><span class="comment">#License: GPL</span></div><div class="line"><span class="comment">#Description: use ansible get host list then use xlrd module write excel</span></div><div class="line"><span class="comment">#Notes:</span></div><div class="line"><span class="comment">###############################################################################</span></div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> openpyxl</div><div class="line"><span class="comment">#vars</span></div><div class="line">port=<span class="string">'22'</span></div><div class="line">host_group=<span class="string">'group_name'</span></div><div class="line">aws_access_id=<span class="string">'your_id'</span></div><div class="line">aws_secret_id=<span class="string">'your_id'</span></div><div class="line">server_file_name=<span class="string">'./running_ec2_list.txt'</span></div><div class="line">dest_filename = <span class="string">'asset_cn_dev.xlsx'</span></div><div class="line"><span class="comment">##functions</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_server_file</span><span class="params">()</span>:</span></div><div class="line">  os.environ[<span class="string">'AWS_ACCESS_KEY_ID'</span>] = aws_access_id</div><div class="line">  os.environ[<span class="string">'AWS_SECRET_ACCESS_KEY'</span>] = aws_secret_id</div><div class="line">  os.system(<span class="string">'ansible-playbook get_ec2_host_list.yml'</span>)</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_jumpserver_excel</span><span class="params">()</span>:</span></div><div class="line">  wb = openpyxl.Workbook()</div><div class="line">  ws1 = wb.active</div><div class="line">  ws1.title = <span class="string">'Assets'</span></div><div class="line">  ws1.append([<span class="string">'IP地址'</span>,<span class="string">'端口号'</span>,<span class="string">'主机名'</span>,<span class="string">'管理账号'</span>,<span class="string">'用户名'</span>,<span class="string">'密码'</span>,<span class="string">'主机组'</span>])</div><div class="line">  <span class="keyword">with</span> open (server_file_name, <span class="string">'r'</span>) <span class="keyword">as</span> f1:</div><div class="line">      server_num = len(open(server_file_name,<span class="string">'rU'</span>).readlines())</div><div class="line">      row = int(<span class="number">2</span>)</div><div class="line">      <span class="keyword">for</span> eachline <span class="keyword">in</span> f1:</div><div class="line">          server_info=eachline.split()</div><div class="line">          private_ip=server_info[<span class="number">0</span>]</div><div class="line">          tag_name=server_info[<span class="number">1</span>]</div><div class="line">          ws1.cell(column=<span class="number">1</span>,row=row,value=private_ip)</div><div class="line">          ws1.cell(column=<span class="number">2</span>,row=row,value=port)</div><div class="line">          ws1.cell(column=<span class="number">3</span>,row=row,value=tag_name)</div><div class="line">          ws1.cell(column=<span class="number">4</span>,row=row,value=<span class="string">'默认'</span>)</div><div class="line">          ws1.cell(column=<span class="number">5</span>,row=row,value=<span class="string">''</span>)</div><div class="line">          ws1.cell(column=<span class="number">6</span>, row=row, value=<span class="string">''</span>)</div><div class="line">          ws1.cell(column=<span class="number">7</span>, row=row, value=host_group)</div><div class="line">          wb.save(filename=dest_filename)</div><div class="line">          row=row+<span class="number">1</span></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</div><div class="line">  write_jumpserver_excel()</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="设置教程"><a href="#设置教程" class="headerlink" title="设置教程"></a>设置教程</h3><ul>
<li>使用jumpserver账户密码登录，如果未设置就是admin及默认密码（如果没有改端口默认为8000）<br><img src="http://oqfz9mxmq.bkt.clouddn.com/20170524-jumpserver-2.png" alt="2"></li>
<li>进入设置页面，<strong>注意</strong>这里填写的用户只能一次，新添加一个会覆盖原来的设置<br><img src="http://oqfz9mxmq.bkt.clouddn.com/20170524-jumpserver-3.jpeg" alt="3"></li>
<li>建立用户组，然后建立用户时关联用户组，这里的用户和组都是相对jumpserver其实在服务器上并不需要存在这些<br><img src="http://oqfz9mxmq.bkt.clouddn.com/20170524-jumpserver-4.jpeg" alt="4"></li>
<li>添加资产，可以使用上面的python脚本进行批量添加<br><img src="http://oqfz9mxmq.bkt.clouddn.com/20170524-jumpserver-5.jpeg" alt="5"></li>
<li>创建sudo权限控制组，方便对权限进行精细控制<br><img src="http://oqfz9mxmq.bkt.clouddn.com/20170524-jumpserver-6.jpeg" alt="6"></li>
<li>创建用户，这时并没有真正创建，需要保存后进行推送，推送需要选择资产或资产组，选择完成点击推送后会在对应资产上创建该用户<br><img src="http://oqfz9mxmq.bkt.clouddn.com/20170524-jumpserver-7.jpeg" alt="7"></li>
<li>确定jumpserver用户以哪个系统用户访问对应资产<br><img src="http://oqfz9mxmq.bkt.clouddn.com/20170524-jumpserver-8.jpeg" alt="8"></li>
<li>设置完成，此时jumpserver新建用户可以通过接收到的邮件信息进行访问了<ul>
<li>上传下载这个比较好理解直接操作一遍就清楚了</li>
<li>另外有审计功能也是很不错，方便问题定位，也是点着看看就清楚了</li>
</ul>
</li>
</ul>
<hr>
<p>再次感谢jumpserver的开发团队！！！<br>以上</p>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul>
<li><a href="https://github.com/jumpserver/jumpserver" target="_blank" rel="external">jumpserver_doc</a></li>
<li><a href="https://github.com/jumpserver/jumpserver/wiki/%E5%AE%89%E8%A3%85%E5%9B%BE%E8%A7%A3" target="_blank" rel="external">install doc</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Iptables整理笔记]]></title>
      <url>http://arvon.top/2016/11/17/Iptables%E6%95%B4%E7%90%86%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p><img src="http://oqfz9mxmq.bkt.clouddn.com/20161117-iptables-1.png" alt="20161117-iptables-1"><br>iptabels还是很实用的，分享下我的整理笔记<br><a id="more"></a></p>
<h2 id="场景规则"><a href="#场景规则" class="headerlink" title="场景规则"></a>场景规则</h2> <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#对本机lo回环地址放开</span></div><div class="line">iptables -I INPUT -i lo -j ACCEPT</div><div class="line"><span class="comment">#对本机访问外部网络放开(ESTABLISHED表示tcp的一种状态，RELETED为ftp的一种状态)</span></div><div class="line">iptabels -I INPUT -m state --state ESTABLISHED,RELETED -j ACCEPT</div><div class="line"><span class="comment">#对所有地址开放本机tcp（80，22，10-21）端口</span></div><div class="line">iptabels -I INPUT -p tcp --dport 22 -j ACCEPT</div><div class="line">iptabels -I INPUT -p tcp --dports 10:21 -j ACCEPT -m comment --comment <span class="string">" 2015-09-24 by arvon"</span></div><div class="line"><span class="comment">#允许所有的地址开放本机的基于ICMP协议的数据包访问</span></div><div class="line">iptables -I INPUT -p icmp -j ACCEPT</div><div class="line"><span class="comment">#ftp主动模式下规则</span></div><div class="line">iptables -I INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT</div><div class="line">iptables -I INPUT -p tcp --dport 21 -j ACCEPT</div><div class="line"><span class="comment">#ftp被动模式下规则</span></div><div class="line">iptables -I INPUT -p tcp --dport 21 -j ACCEPT</div><div class="line">  <span class="comment">##vim /etc/vsftpd/vsftpd.conf</span></div><div class="line">  <span class="comment">#pasv_min_port=50000</span></div><div class="line">  <span class="comment">#pasv_max_port=60000</span></div><div class="line">iptables -I INPUT -p tcp --dports 50000:60000 -j ACCEPT</div><div class="line"><span class="comment">#ftp被动模式下规则二</span></div><div class="line">iptables —I INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT</div><div class="line">iptables -I INPUT -p tcp --dport 21 -j ACCEPT</div><div class="line">  <span class="comment">#modprobe nf_conntrack_ftp #临时开启内核连接追踪模块ftp</span></div><div class="line">  <span class="comment">#vim /etc/sysconfig/iptables-config    #开机自动加载</span></div><div class="line">  <span class="comment">##IPTABLES_MODULES="nf_conntrack_ftp"</span></div><div class="line"><span class="comment">#防CC攻击</span></div><div class="line"><span class="comment">#对源地址为12并且并发大于10的数据包进行拒绝并返回错误信息</span></div><div class="line">iptables -I INPUT -p tcp --dport 80 <span class="_">-s</span> 192.168.1.12 -m connlimit --connlimit-above 10 -j REJECT</div><div class="line"><span class="comment">#当icmp不超过10个时放行，当超过10个每分钟放行1个</span></div><div class="line">iptables -A INPUT -p icmp -m <span class="built_in">limit</span> --limit 1/m --limit-burst 10 -j ACCEPT</div><div class="line">iptables -A INPUT -p icmp DROP</div><div class="line"><span class="comment">#防SYN攻击</span></div><div class="line">iptables -N syn-flood</div><div class="line">iptables -A INPUT -p tcp --syn -j syn-flood</div><div class="line">iptables -I syn-flood -p tcp -m <span class="built_in">limit</span> --limit 3/s --limit-burst 6 -j RETURN</div><div class="line">iptables -A syn-flood -j REJECT</div><div class="line"><span class="comment">#转发</span></div><div class="line">iptables -A FORWARD -p tcp <span class="_">-s</span> 10.10.0.0/24 -m multiport --dports 80,110,21 -j ACCEPT</div><div class="line"><span class="comment">#工作日工作时间禁止访问tencent的域名</span></div><div class="line">iptables -I FORWARD -p udp --dport 53 -m string --string <span class="string">"tencent"</span> -m time --timestart 8:00 --timestop 12:00 --days Mon,Tue,Wed,Thu,Fri,Sat -j DROP</div><div class="line"><span class="comment">#内核参数调整</span></div><div class="line">sysctl -w net.ipv4.ip_forward=1 <span class="comment">#开启内核数据包转发功能</span></div><div class="line">sysctl -w net.ipv4.tcp_syncookies=1 <span class="comment">#开启cookies验证，一定程度防止syn攻击</span></div></pre></td></tr></table></figure>
<h2 id="Iptables命令"><a href="#Iptables命令" class="headerlink" title="Iptables命令"></a>Iptables命令</h2> <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#列出所有规则</span></div><div class="line">iptables -nVL</div><div class="line"><span class="comment">#添加规则</span></div><div class="line">iptables -I INPUT <span class="_">-s</span> 192.168.1.0/24 -p tcp -m multiport --dport 22,80 -j ACCEPT</div><div class="line"><span class="comment">#删除一条规则</span></div><div class="line">iptables -D INPUT -p icmp -j ACCEPT</div><div class="line">iptables -D INPUT 2</div><div class="line"><span class="comment">#清除所有规则</span></div><div class="line">iptables -F</div><div class="line"><span class="comment">#SNAT</span></div><div class="line">iptables -t nat -A POSTROUTING <span class="_">-s</span> 10.10.10.177.0/24 -j SNAT --to 10.10.188.111</div><div class="line"><span class="comment">#DNAT</span></div><div class="line">iptables -t nat -A PREROUTING <span class="_">-d</span> 10.10.188.111 -p tcp --dport 80 -j DNAT --to 10.10.177.222:80</div><div class="line"><span class="comment">#在最后添加默认拒绝的规则</span></div><div class="line">iptables -P INPUT DROP</div></pre></td></tr></table></figure>
<h2 id="iptables规则组成"><a href="#iptables规则组成" class="headerlink" title="iptables规则组成"></a>iptables规则组成</h2><ul>
<li>Usage： 四张表 + 五条链(hook point) + 规则<h3 id="四张表"><a href="#四张表" class="headerlink" title="四张表"></a>四张表</h3></li>
<li>filter表<br>  访问控制，规则匹配</li>
<li>nat表<br>  请求转发</li>
<li>mangle表<br>  修改数据包，改变包头中内容（TTL，TOS，MARK），需要对应交换机的支持</li>
<li>raw表<h3 id="五条链"><a href="#五条链" class="headerlink" title="五条链"></a>五条链</h3></li>
<li>INPUT</li>
<li>OUTPUT</li>
<li>FORWARD</li>
<li>PREROUTING</li>
<li>POSTROUTING</li>
</ul>
<h3 id="数据包访问控制"><a href="#数据包访问控制" class="headerlink" title="数据包访问控制"></a>数据包访问控制</h3><ul>
<li>ACCEPT<br>  接收数据包</li>
<li>DROP<br>  直接丢弃数据包，不给客户端返回信息</li>
<li>REJECT<br>  丢弃数据包并给客户端返回信息<h3 id="数据包改写"><a href="#数据包改写" class="headerlink" title="数据包改写"></a>数据包改写</h3></li>
<li>SNAT<br>  对源地址进行改写</li>
<li>DNAT<br>  对目标地址进行改写<h3 id="信息记录"><a href="#信息记录" class="headerlink" title="信息记录"></a>信息记录</h3></li>
<li>LOG<br>  将访问信息记录到log</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[yum安装ffmpeg记录]]></title>
      <url>http://arvon.top/2016/10/25/yum%E5%AE%89%E8%A3%85ffmpeg%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<p>Tips：最近安装一个名为ffmpeg的包，但是epel和ali的源都没有这个包。所以<br><a id="more"></a><br>就google了一下，但是网上提供的方案在我实际环境中并不好使，贴在后面了</p>
<h3 id="个人好使"><a href="#个人好使" class="headerlink" title="个人好使"></a>个人好使</h3><ul>
<li>code<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="常规不好使"><a href="#常规不好使" class="headerlink" title="常规不好使"></a>常规不好使</h3><ul>
<li><p>yum源代码添加如下</p>
<blockquote>
<p>yum install -y automake autoconf libtool gcc gcc-c++</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[dag]</div><div class="line">name=Dag RPM Repository <span class="keyword">for</span> Red Hat Enterprise Linux</div><div class="line">baseurl=http://apt.sw.be/redhat/el<span class="variable">$releasever</span>/en/<span class="variable">$basearch</span>/dag</div><div class="line">gpgcheck=0</div><div class="line">enabled=1</div></pre></td></tr></table></figure>
<p>yum install -y ffmpeg ffmpeg-devel</p>
</blockquote>
</li>
<li><p>好使的</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-7</div><div class="line">rpm --import http://li.nux.ro/download/nux/RPM-GPG-KEY-nux.ro</div><div class="line">rpm -Uvh http://li.nux.ro/download/nux/dextop/el7/x86_64/nux-dextop-release-0-1.el7.nux.noarch.rpm</div><div class="line">yum repolist</div><div class="line">yum install -y ffmpeg</div><div class="line">ffmpeg -version</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Notes：第一本Docker书]]></title>
      <url>http://arvon.top/2016/10/11/Notes%EF%BC%9A%E7%AC%AC%E4%B8%80%E6%9C%ACDocker%E4%B9%A6/</url>
      <content type="html"><![CDATA[<p><img src="http://oqfz9mxmq.bkt.clouddn.com/20161011-notedocker-1.jpeg" alt=""><br>图解http已经阅读完毕，现在开始转向docker的学习，先读《第一本Docker书》，就这样，简要记录读书笔记。</p>
<a id="more"></a>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><ul>
<li>Docker组件<blockquote>
<ul>
<li>Docker客户端和服务器</li>
<li>Docker镜像</li>
<li>Registry: 用来保存用户构建的镜像，分为公共和私有两种</li>
<li>Docker容器</li>
</ul>
</blockquote>
</li>
<li>常用命令<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">yum install docker</div><div class="line">systemctl enable docker</div><div class="line">systemctl start docker</div><div class="line">docker info</div><div class="line"><span class="meta">#</span><span class="bash">查看docker信息</span></div><div class="line">docker run -i -t ubuntu /bin/bash</div><div class="line"><span class="meta">#</span><span class="bash">以ubuntu为基础镜像创建容易完成后并运行/bin/bash启动一个shell，-i保证STDIN开启-t创建一个可以与之交互的伪终端这两个是创建可交互容器的最基本参数</span></div><div class="line">docker run --name arvon_web -i -t ubuntu /bin/bash</div><div class="line"><span class="meta">#</span><span class="bash">创建arvon_web为容器名的容器，可以使用容器名代替容器ID操作容器</span></div><div class="line">docker ps</div><div class="line"><span class="meta">#</span><span class="bash">查看正在运行的容器</span></div><div class="line">docker ps -a</div><div class="line"><span class="meta">#</span><span class="bash">查看所有容器，包括运行的和停止的</span></div><div class="line">docker start arvon_web</div><div class="line"><span class="meta">#</span><span class="bash">启动一个容器，可以使用容器名也可以使用容器ID，启动时会沿用docker run启动时指定的参数，因此会运行交互式会话的shell，使用docker attach可以附着到启动的容器</span></div><div class="line">docker attach arvon_web</div><div class="line"><span class="meta">#</span><span class="bash">附着到arvon_web这个容器，如果退出容器的shell，容器也会随之停止运行</span></div><div class="line">docker run --name demo_arvon -d ubuntu /bin/sh -c "while true;do echo hello world; sleep 1; done"</div><div class="line"><span class="meta">#</span><span class="bash">创建一个守护式进程，并一直输出helloworld，运行后不进入容器，容器在后台运行，可以通过docker ps查看到</span></div><div class="line">docker logs demo_arvon</div><div class="line"><span class="meta">#</span><span class="bash">可以查看demo_arvon这个容器的日志，是即时输出</span></div><div class="line">docker logs -f demo_arvon</div><div class="line"><span class="meta">#</span><span class="bash">相当于tailf，是实时输出的日志</span></div><div class="line">docker logs -ft demo_arvon</div><div class="line"><span class="meta">#</span><span class="bash">带时间戳的实时输出</span></div><div class="line">docker top demo_arvon</div><div class="line"><span class="meta">#</span><span class="bash">查看容器内的进程</span></div><div class="line">docker exec -d demo_arvon touch /etc/new_config_file</div><div class="line"><span class="meta">#</span><span class="bash">在demo_arvon这个容器中创建一个new_config_file的空文件</span></div><div class="line">docker stop demo_arvon</div><div class="line"><span class="meta">#</span><span class="bash">停止容器运行</span></div><div class="line">docker ps -n x</div><div class="line"><span class="meta">#</span><span class="bash">显示最后的x的容器，不管这些容器是否在运行都会列出来</span></div><div class="line">docker inspect demo_arvon</div><div class="line"><span class="meta">#</span><span class="bash">检查容器然后返回容器的配置信息，包括名称、网络配置等</span></div><div class="line">docker inspect --format='&#123;&#123; .State.Running &#125;&#125;' demo_arvon</div><div class="line"><span class="meta">#</span><span class="bash">查看容器的运行状态，<span class="literal">true</span>为运行，<span class="literal">false</span>为停止</span></div><div class="line">docker inspect --format '&#123;&#123; .NetworkSettings.IPAddress &#125;&#125;' demo_arvon</div><div class="line"><span class="meta">#</span><span class="bash">查看容器的IP地址,对运行中的容器有效，为运行的容器返回为空</span></div><div class="line">docker inspect --format='&#123;&#123; .State.Running &#125;&#125;' arvon_web demo_arvon</div><div class="line"><span class="meta">#</span><span class="bash">可以一次指定多个容器，会显示每个容器的输出结果</span></div><div class="line">docker rm arvon_web</div><div class="line"><span class="meta">#</span><span class="bash">删除容器</span></div><div class="line">docker rm `docker ps -a -q`</div><div class="line"><span class="meta">#</span><span class="bash">删除所有容器</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="镜像使用及构建"><a href="#镜像使用及构建" class="headerlink" title="镜像使用及构建"></a>镜像使用及构建</h3><ul>
<li>使用镜像<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">docker images</div><div class="line"><span class="comment">#列出镜像列表</span></div><div class="line">docker pull fedora</div><div class="line"><span class="comment">#将fedora镜像拉取到本地</span></div><div class="line">docker search puppet</div><div class="line"><span class="comment">#查找Docker Hub上公共可用的镜像</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="使用dockercommit构建镜像"><a href="#使用dockercommit构建镜像" class="headerlink" title="使用dockercommit构建镜像"></a>使用dockercommit构建镜像</h3><ul>
<li>Command<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#使用docker commit创建镜像，不推荐</span></div><div class="line">docker login</div><div class="line">Username: arvon2014</div><div class="line">Password:</div><div class="line">Email: mail@126.com</div><div class="line">Login Succeeded</div><div class="line"><span class="comment">#</span></div><div class="line">docker run --name t_img -i -t ubuntu /bin/bash</div><div class="line">docker commit -m=<span class="string">"A new custom image"</span> --author=<span class="string">"arvon"</span> t_img arvon2014/web_test：webserver</div><div class="line"><span class="comment">#其中t_img为容器名可以为容器ID， arvon2014为镜像的用户名web_rest为仓库名；webserver为标签-m为描述-author为作者信息，这些都可以省略</span></div><div class="line">docker inspect arvon2014/web_test:webserver</div><div class="line"><span class="comment">#查看新创建镜像的信息</span></div><div class="line">docker run -t -i arvon2014/web_test:webserver /bin/bash</div><div class="line"><span class="comment">#使用新创建的镜像运行一个容器</span></div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[yum 报错：rpmdb open failed]]></title>
      <url>http://arvon.top/2016/09/30/yum-%E6%8A%A5%E9%94%99%EF%BC%9Arpmdb-open-failed/</url>
      <content type="html"><![CDATA[<p><strong>背景：</strong>刚刚直接kill掉yum进程后，yum报了rpmdb的报错，记一下解决方法<br><a id="more"></a></p>
<ul>
<li><p>报错如下</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">rpmdb: Thread/process 17502/140092449953536 failed: Thread died <span class="keyword">in</span> Berkeley DB library</div><div class="line">error: db3 error(-30974) from dbenv-&gt;failchk: DB_RUNRECOVERY: Fatal error, run database recovery</div><div class="line">error: cannot open Packages index using db3 -  (-30974)</div><div class="line">error: cannot open Packages database <span class="keyword">in</span> /var/lib/rpm</div><div class="line">CRITICAL:yum.main:</div><div class="line">Error: rpmdb open failed</div></pre></td></tr></table></figure>
</li>
<li><p>解决方法</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /var/lib/rpm/</div><div class="line">rm -rf __db.*</div><div class="line">rpm --rebuilddb</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python复习笔记]]></title>
      <url>http://arvon.top/2016/09/19/Python%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<blockquote>
<p>python复习笔记<br>记录一下观看milo在网易云课堂上《疯狂的python》的复习笔记，源视频地址<a href="http://study.163.com/course/courseLearn.htm?courseId=302001#/learn/video?lessonId=417020&amp;courseId=302001" target="_blank" rel="external">戳这里</a></p>
</blockquote>
<a id="more"></a>
<h4 id="第一章：导论"><a href="#第一章：导论" class="headerlink" title="第一章：导论"></a>第一章：导论</h4><h5 id="课时1-2：简介"><a href="#课时1-2：简介" class="headerlink" title="课时1-2：简介"></a>课时1-2：简介</h5><ul>
<li><p>编译python文件,生成pyc文件</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#编译1.py文件生成1.pyc的二进制文件</span></div><div class="line"><span class="keyword">import</span> py_compile</div><div class="line">py_compile.compile(<span class="string">'1.py'</span>)</div></pre></td></tr></table></figure>
</li>
<li><p>编译python文件，生成pyo文件</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#pyo为优化的二进制文件</span></div><div class="line">python -O -m py_compile <span class="number">1.</span>py</div></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="课时3：变量"><a href="#课时3：变量" class="headerlink" title="课时3：变量"></a>课时3：变量</h5><ul>
<li><p>变量赋值</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">a = <span class="number">1</span></div><div class="line">b_c = <span class="string">'abc'</span></div><div class="line">_bc3 = <span class="string">'a2b3'</span></div></pre></td></tr></table></figure>
</li>
<li><p>python变量特性</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#python的变量和C等语言不一样，python是以数据申请内存空间，即同个变量不用数据使用不同的内存空间，使用id函数可以查看数据对应的内存空间。</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a=<span class="number">1</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a</div><div class="line"><span class="number">1</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>id(a)</div><div class="line"><span class="number">22053688</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a=<span class="number">2</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a</div><div class="line"><span class="number">2</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>id(a)</div><div class="line"><span class="number">22053664</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b=<span class="number">2</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b</div><div class="line"><span class="number">2</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>id(b)</div><div class="line"><span class="number">22053664</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="课时4：运算符和表达式"><a href="#课时4：运算符和表达式" class="headerlink" title="课时4：运算符和表达式"></a>课时4：运算符和表达式</h5><ul>
<li><p>赋值运算符</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a=<span class="number">1</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a+=<span class="number">2</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a</div><div class="line"><span class="number">3</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a+=<span class="number">3</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a</div><div class="line"><span class="number">6</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a-=<span class="number">4</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a</div><div class="line"><span class="number">2</span></div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>算术运算符</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">+ - *    基础加减乘</div><div class="line">/    要小数点<span class="number">1.0</span>/<span class="number">2</span>  整除<span class="number">3.0</span>//<span class="number">2</span></div><div class="line">%    取余数</div><div class="line">**   取幂运算</div></pre></td></tr></table></figure>
</li>
<li><p>关系运算符</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span> &lt; <span class="number">2</span></div><div class="line"><span class="number">2</span> &gt; <span class="number">1</span></div><div class="line"><span class="number">1</span> == <span class="number">1</span></div><div class="line"><span class="number">1</span> &lt;= <span class="number">1</span></div><div class="line"><span class="number">2</span> &gt;= <span class="number">2</span></div><div class="line"><span class="number">1</span> != <span class="number">2</span></div></pre></td></tr></table></figure>
</li>
<li><p>逻辑运算符</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span> &lt; <span class="number">2</span> <span class="keyword">and</span> <span class="number">2</span> &lt; <span class="number">3</span></div><div class="line"><span class="number">1</span> &lt; <span class="number">2</span> <span class="keyword">or</span> <span class="number">2</span> &gt; <span class="number">3</span></div><div class="line"><span class="keyword">not</span> <span class="number">1</span> &gt; <span class="number">2</span></div></pre></td></tr></table></figure>
</li>
<li><p>小练习</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">a=int(raw_input(<span class="string">'number1 = '</span>))</div><div class="line">b=int(raw_input(<span class="string">'number2 = '</span>))</div><div class="line">c = a+b</div><div class="line"><span class="keyword">print</span> str(a)+<span class="string">' + '</span>+str(b)+<span class="string">' = '</span>+str(c)</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="第二章：数据类型"><a href="#第二章：数据类型" class="headerlink" title="第二章：数据类型"></a>第二章：数据类型</h4><p>主要数据类型五种包括数字、字符串、元组、列表和字典</p>
<h5 id="课时5：数字和字符串"><a href="#课时5：数字和字符串" class="headerlink" title="课时5：数字和字符串"></a>课时5：数字和字符串</h5><ul>
<li><p>数字类型包括整型、长整型、浮点型、复数型</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>num1 = <span class="number">123</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>type(num1)</div><div class="line">&lt;type <span class="string">'int'</span>&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>num2 = <span class="number">123L</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>type(num2)</div><div class="line">&lt;type <span class="string">'long'</span>&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>num3 = <span class="number">99999999999999999999</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>type(num3)</div><div class="line">&lt;type <span class="string">'long'</span>&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>num4 = <span class="number">1.23</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>type(num4)</div><div class="line">&lt;type <span class="string">'float'</span>&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>num5 = <span class="number">1.23j</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>type(num5)</div><div class="line">&lt;type <span class="string">'complex'</span>&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>字符串类型可以使用单引号、双引号、三单引定义</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">123</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>stra = <span class="string">'123'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>type(a)</div><div class="line">&lt;type <span class="string">'int'</span>&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>type(stra)</div><div class="line">&lt;type <span class="string">'str'</span>&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>strb = <span class="string">"let's say \"hello\""</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> strb</div><div class="line">let<span class="string">'s say "hello"</span></div></pre></td></tr></table></figure>
</li>
<li><p>字符串切片</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">'abcde'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">1</span>:<span class="number">4</span>]</div><div class="line"><span class="string">'bcd'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a[:]</div><div class="line"><span class="string">'abcde'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a[:<span class="number">4</span>]</div><div class="line"><span class="string">'abcd'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">4</span>:]</div><div class="line"><span class="string">'e'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a[::<span class="number">1</span>]</div><div class="line"><span class="string">'abcde'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a[::<span class="number">2</span>]</div><div class="line"><span class="string">'ace'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">-1</span>]</div><div class="line"><span class="string">'e'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">-4</span>:<span class="number">-1</span>]</div><div class="line"><span class="string">'bcd'</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="课时6：元组"><a href="#课时6：元组" class="headerlink" title="课时6：元组"></a>课时6：元组</h5><p>列表、元组和字符串都是序列，序列的主要特点是索引操作符合切片操作符</p>
<ul>
<li><p>序列的基本操作</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">len()  <span class="comment">#求序列长度</span></div><div class="line">+  <span class="comment">#连接两个序列</span></div><div class="line">*  <span class="comment">#重复序列元素</span></div><div class="line"><span class="keyword">in</span> <span class="comment">#判断元素是否在序列中</span></div><div class="line">max()  <span class="comment">#返回最大的值</span></div><div class="line">min()  <span class="comment">#返回最小的值</span></div><div class="line">cmp(tuple1, tuple2)    <span class="comment">#比较两个序列值是否相同</span></div><div class="line"><span class="comment">#EX---</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>str1 = <span class="string">'abcde'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>str2 = <span class="string">'12345'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>str1 + str2</div><div class="line"><span class="string">'abcde12345'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>str1 * <span class="number">5</span></div><div class="line"><span class="string">'abcdeabcdeabcdeabcdeabcde'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'a'</span> <span class="keyword">in</span> str1</div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>max(str1)</div><div class="line"><span class="string">'e'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>min(str2)</div><div class="line"><span class="string">'1'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>cmp(str1, str2)</div><div class="line"><span class="number">1</span></div></pre></td></tr></table></figure>
</li>
<li><p>元组<br>通过小括号定义()，元组和列表类似，不过元组被使用元组的值也<strong>不改变</strong>。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>userinfo1=(<span class="string">"zou"</span>, <span class="number">31</span>, <span class="string">"female"</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>userinfo1[<span class="number">1</span>]</div><div class="line"><span class="number">31</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>userinfo1[<span class="number">0</span>]</div><div class="line"><span class="string">'zou'</span></div><div class="line"><span class="comment">#单一元素的元组定义时要加逗号</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="课时7：列表"><a href="#课时7：列表" class="headerlink" title="课时7：列表"></a>课时7：列表</h5><ul>
<li><p>列表操作方法<br>通过中括号定义[]，列表是可变类型的数据</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">listmilo=[<span class="string">'arvon'</span>, <span class="number">24</span>, <span class="string">'male'</span>]</div><div class="line"><span class="comment">#取值</span></div><div class="line">age=listmilo[<span class="number">1</span>]</div><div class="line"><span class="comment">#添加</span></div><div class="line">listmilo.append(<span class="string">'Linux'</span>)</div><div class="line"><span class="comment">#删除</span></div><div class="line">listmilo.remove(listmilo[<span class="number">2</span>])</div><div class="line"><span class="keyword">del</span>(listmilo[<span class="number">2</span>])</div><div class="line"><span class="comment">#修改</span></div><div class="line">listmilo[<span class="number">1</span>]=<span class="number">18</span></div><div class="line"><span class="comment">#查看</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>listmilo [<span class="string">'arvon'</span>, <span class="number">18</span>, <span class="string">'Linux'</span>]</div><div class="line"><span class="comment">#查找</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"Linux"</span> <span class="keyword">in</span> listmilo</div><div class="line"><span class="keyword">True</span></div></pre></td></tr></table></figure>
</li>
<li><p>对象和类快速入门<br>对象=属性+方法</p>
</li>
</ul>
<h5 id="课时8：字典"><a href="#课时8：字典" class="headerlink" title="课时8：字典"></a>课时8：字典</h5><p>使用花括号定义，字典是python中唯一的映射类型（哈希表），字典的对象是可变的，但字典的键必须使用不可变对象，并且一个字典中可以使用不同类型的键<br>keys()或者values()返回键列表或者值列表，items()返回包含键值对的元组。</p>
<ul>
<li><p>例子<br>可以直接使用key访问，key不存在会报错，可以使用had_key()方法或者in/not in来判断，另had_key()方法即将弃用</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a=<span class="number">123</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b=<span class="number">456</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dic4=&#123;a:<span class="string">'aaa'</span>,b:<span class="string">'bbb'</span>,<span class="string">'c'</span>:<span class="string">'ccc'</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dic4</div><div class="line">&#123;<span class="number">456</span>: <span class="string">'bbb'</span>, <span class="string">'c'</span>: <span class="string">'ccc'</span>, <span class="number">123</span>: <span class="string">'aaa'</span>&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>使用dict方法生成字典和使用fromkeys生成字典</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">fdict=dict([<span class="string">'x'</span>,<span class="number">1</span>],[<span class="string">'y'</span>,<span class="number">2</span>])</div><div class="line">ddict=&#123;&#125;.fromkeys((<span class="string">'x'</span>,<span class="string">'y'</span>),<span class="number">-1</span>)</div></pre></td></tr></table></figure>
</li>
<li><p>字典的添加和删除<br>字典是无序的所以可以任意添加元素，列表就不行</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#添加和修改元素元素</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dic1=&#123;<span class="string">'name'</span>:<span class="string">'arvon'</span>,<span class="string">'age'</span>:<span class="number">24</span>,<span class="string">'work'</span>:<span class="string">'BJ'</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dic1[<span class="string">'tel'</span>]=<span class="number">123456</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dic1</div><div class="line">&#123;<span class="string">'age'</span>: <span class="number">24</span>, <span class="string">'work'</span>: <span class="string">'BJ'</span>, <span class="string">'tel'</span>: <span class="number">123456</span>, <span class="string">'name'</span>: <span class="string">'arvon'</span>&#125;</div><div class="line"><span class="comment">#删除元素</span></div><div class="line">dict1.clear()  <span class="comment">#删除dict1字典的所有元素</span></div><div class="line"><span class="keyword">del</span> dict1  <span class="comment">#删除dict1这个字典</span></div><div class="line"><span class="comment">#取值</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dic1=&#123;<span class="string">'a'</span>:<span class="number">1</span>, <span class="string">'b'</span>:<span class="number">2</span>, <span class="string">'c'</span>:<span class="number">3</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dic1[<span class="string">'a'</span>]</div><div class="line"><span class="number">1</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dic.get(<span class="string">'c'</span>)</div><div class="line"><span class="number">3</span></div><div class="line"><span class="comment">#返回字典可key列表和values列表</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dic1=&#123;<span class="string">'a'</span>:<span class="number">1</span>, <span class="string">'b'</span>:<span class="number">2</span>, <span class="string">'c'</span>:<span class="number">3</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dict.keys(dic1)</div><div class="line">[<span class="string">'a'</span>, <span class="string">'c'</span>, <span class="string">'b'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dict.values(dic1)</div><div class="line">[<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>]</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="第三章：流程控制"><a href="#第三章：流程控制" class="headerlink" title="第三章：流程控制"></a>第三章：流程控制</h4><p>主要包括判断和循环</p>
<h5 id="课时9：分支结构"><a href="#课时9：分支结构" class="headerlink" title="课时9：分支结构"></a>课时9：分支结构</h5><p>逻辑值（bool）用来表示诸如：对和错、真和假、空与非空等概念。逻辑值True表示非空的量如（string，tuple，list，set，dictonary等），逻辑值False表示0，None，空的量等。</p>
<ul>
<li><p>if else判断</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> <span class="number">1</span>&lt;<span class="number">2</span>:</div><div class="line">   <span class="keyword">print</span> <span class="string">'Yes'</span></div><div class="line"><span class="keyword">else</span>:</div><div class="line">   <span class="keyword">print</span> <span class="string">'No'</span></div></pre></td></tr></table></figure>
</li>
<li><p>elif 多条件判断</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">a=raw_input(<span class="string">"Input a num: "</span>)</div><div class="line"><span class="keyword">if</span> <span class="number">1</span> &lt; a &lt; <span class="number">3</span>:</div><div class="line">    <span class="keyword">print</span> str(a)+<span class="string">" is 1-3"</span></div><div class="line"><span class="keyword">elif</span> a &gt;= <span class="number">3</span>:</div><div class="line">    <span class="keyword">print</span> str(a)+<span class="string">" is 3-*"</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="课时10：逻辑运算符"><a href="#课时10：逻辑运算符" class="headerlink" title="课时10：逻辑运算符"></a>课时10：逻辑运算符</h5><p>逻辑运算符包括”and”,”or”,”not”</p>
<ul>
<li><p>无聊的例子</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">a = <span class="number">5</span></div><div class="line"><span class="keyword">if</span> a &gt; <span class="number">1</span> <span class="keyword">and</span> a !=<span class="number">2</span>:</div><div class="line">    <span class="keyword">if</span> a==<span class="number">4</span> <span class="keyword">or</span> <span class="number">1</span>&lt;<span class="number">2</span>:</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> a !=<span class="number">5</span>:</div><div class="line">            <span class="keyword">print</span> <span class="string">"Oh"</span></div></pre></td></tr></table></figure>
</li>
<li><p>有用的not</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> <span class="keyword">not</span> fun():</div><div class="line">    <span class="keyword">print</span> <span class="string">"ok"</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="课时11：for循环"><a href="#课时11：for循环" class="headerlink" title="课时11：for循环"></a>课时11：for循环</h5><p>使用for可以循环字符串、元组和列表</p>
<ul>
<li><p>使用for循环字符串</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">'abcde'</span>:</div><div class="line">   <span class="keyword">print</span> i</div></pre></td></tr></table></figure>
</li>
<li><p>使用range方法快速生成序列</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#第一参数为开始值不设置默认为0，第二个为结束值，第三个为步长不写默认为步值为1</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">100</span>,<span class="number">2</span>):</div><div class="line">   <span class="keyword">print</span> i</div></pre></td></tr></table></figure>
</li>
<li><p>小题：计算1到100累加的值</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">num=<span class="number">0</span></div><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">101</span>):</div><div class="line">    num=num+x</div><div class="line"><span class="keyword">print</span> num</div></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="课时12：遍历"><a href="#课时12：遍历" class="headerlink" title="课时12：遍历"></a>课时12：遍历</h5><p>遍历对象可以是字符串、元组、列表</p>
<ul>
<li><p>使用索引遍历</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(len(<span class="string">"hello"</span>)):</div><div class="line">   <span class="keyword">print</span> <span class="string">"hello"</span>[x]</div></pre></td></tr></table></figure>
</li>
<li><p>字典的遍历</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">d = &#123;<span class="number">1</span>:<span class="number">111</span>, <span class="number">2</span>:<span class="number">222</span>, <span class="number">4</span>:<span class="number">444</span>, <span class="number">3</span>:<span class="number">333</span>&#125;</div><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> d:</div><div class="line">    <span class="keyword">print</span> x</div><div class="line">    <span class="keyword">print</span> d[x]</div></pre></td></tr></table></figure>
</li>
<li><p>字典元组拆分法</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">d = &#123;<span class="number">1</span>:<span class="number">111</span>, <span class="number">2</span>:<span class="number">222</span>, <span class="number">4</span>:<span class="number">444</span>, <span class="number">3</span>:<span class="number">333</span>&#125;</div><div class="line">f = d.items()</div><div class="line"><span class="keyword">print</span> f</div><div class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> f:</div><div class="line">    <span class="keyword">print</span> k</div><div class="line">    <span class="keyword">print</span> v</div></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="课时13：循环控制"><a href="#课时13：循环控制" class="headerlink" title="课时13：循环控制"></a>课时13：循环控制</h5><p>主要使用for和while进行循环控制</p>
<ul>
<li><p>Python特殊的for循环，在python中for循环是可以有else的</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#在循环遍历结束时最后会打印一次ending，如果程序未正常遍历结束则不会触发</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</div><div class="line">   <span class="keyword">print</span> i</div><div class="line"><span class="keyword">else</span>:</div><div class="line">   <span class="keyword">print</span> <span class="string">"ending"</span></div></pre></td></tr></table></figure>
</li>
<li><p>使用break跳出循环</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</div><div class="line">    <span class="keyword">print</span> <span class="string">"hello"</span>+str(i)</div><div class="line">    <span class="keyword">if</span> i == <span class="number">3</span>:</div><div class="line">        <span class="keyword">print</span> i</div><div class="line">        <span class="keyword">break</span></div><div class="line"><span class="keyword">else</span>:</div><div class="line">   <span class="keyword">print</span> <span class="string">"ending"</span></div></pre></td></tr></table></figure>
</li>
<li><p>使用continue跳出本次循环</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</div><div class="line">    <span class="keyword">print</span> <span class="string">"hello"</span>+str(i)</div><div class="line">    <span class="keyword">if</span> i == <span class="number">2</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">"22222222"</span></div><div class="line">        <span class="keyword">continue</span></div><div class="line">    <span class="keyword">if</span> i == <span class="number">3</span>:</div><div class="line">        <span class="keyword">print</span> i</div><div class="line">        <span class="keyword">break</span></div><div class="line"><span class="keyword">else</span>:</div><div class="line">   <span class="keyword">print</span> <span class="string">"ending"</span></div></pre></td></tr></table></figure>
</li>
<li><p>使用pass进行占位操作（代码桩）</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</div><div class="line">    <span class="keyword">pass</span></div><div class="line"><span class="keyword">print</span> <span class="string">"Go"</span></div></pre></td></tr></table></figure>
</li>
<li><p>使用exit退出程序</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</div><div class="line">    <span class="keyword">print</span> i</div><div class="line">    exit</div></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="课时14：while循环"><a href="#课时14：while循环" class="headerlink" title="课时14：while循环"></a>课时14：while循环</h5><p>主要做条件循环，直到表达式为假跳出循环,在设计while循环时一定要让有条件退出</p>
<ul>
<li><p>最简单的死循环</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#while 1:</span></div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">"hello"</span></div></pre></td></tr></table></figure>
</li>
<li><p>使用条件退出while</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">"Haha"</span></div><div class="line">    x = raw_input(<span class="string">"Input q for quit: "</span>)</div><div class="line">    <span class="keyword">if</span> x == <span class="string">'q'</span>:</div><div class="line">        <span class="keyword">break</span></div></pre></td></tr></table></figure>
</li>
<li><p>使用while表达式进行条件判断退出</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">x = <span class="string">''</span></div><div class="line"><span class="keyword">while</span> x != <span class="string">'q'</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">"hello"</span></div><div class="line">    x = raw_input(<span class="string">"please input a str, q for quit: "</span>)</div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> x:</div><div class="line">        <span class="keyword">break</span></div></pre></td></tr></table></figure>
</li>
<li><p>while中的else</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">x = <span class="string">''</span></div><div class="line"><span class="keyword">while</span> x != <span class="string">'q'</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">"hello"</span></div><div class="line">    x = raw_input(<span class="string">"please input a str, q for quit: "</span>)</div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> x:</div><div class="line">        <span class="keyword">break</span></div><div class="line"><span class="keyword">else</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">"ending"</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="第四章：函数"><a href="#第四章：函数" class="headerlink" title="第四章：函数"></a>第四章：函数</h4><p>函数就是完成特定功能的语句组，可以通过函数名在程序不同位置多次执行（函数调用）。</p>
<h5 id="课时15：函数定义和调用"><a href="#课时15：函数定义和调用" class="headerlink" title="课时15：函数定义和调用"></a>课时15：函数定义和调用</h5><ul>
<li><p>使用def定义函数，括号里面是参数列表()</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(a,b)</span>:</span></div><div class="line">    c = a + b</div><div class="line">    <span class="keyword">print</span> c</div><div class="line">add(<span class="number">1</span>,<span class="number">2</span>)</div><div class="line">add(<span class="number">3</span>,<span class="number">4</span>)</div></pre></td></tr></table></figure>
</li>
<li><p>基本函数和返回值初探</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">a = <span class="number">100</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">False</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">"Hello"</span></div><div class="line">    <span class="keyword">print</span> a</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span></div><div class="line"><span class="comment">#fun()</span></div><div class="line"><span class="keyword">if</span> <span class="keyword">not</span> fun():</div><div class="line">    <span class="keyword">print</span> <span class="string">"ok"</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="课时16：函数形参、实参、默认参数"><a href="#课时16：函数形参、实参、默认参数" class="headerlink" title="课时16：函数形参、实参、默认参数"></a>课时16：函数形参、实参、默认参数</h5><p>在<strong>定义函数</strong>时函数名后面括号中的变量叫做形参，在<strong>调用函数</strong>时函数名后面的括号中的变量叫做实参</p>
<ul>
<li><p>简单例子</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(x)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"ok"</span></div><div class="line">        <span class="keyword">print</span> x</div><div class="line">s = raw_input(<span class="string">"Input something: "</span>)</div><div class="line">fun(s)</div></pre></td></tr></table></figure>
</li>
<li><p>默认参数例子</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(x,y=<span class="string">'lalala'</span>)</span>:</span></div><div class="line">        <span class="keyword">print</span> x,y</div><div class="line">s = raw_input(<span class="string">"Input something: "</span>)</div><div class="line">fun(<span class="number">4</span>)</div><div class="line">fun(y=<span class="string">'cacaca'</span>)</div><div class="line">fun(<span class="number">2</span>,<span class="string">'goog'</span>)</div></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="课时17：变量作用域"><a href="#课时17：变量作用域" class="headerlink" title="课时17：变量作用域"></a>课时17：变量作用域</h5><p>在python中任何变量都有其特定的作用域，一般在函数中定义的变量只能在函数内部使用，也叫局部变量。在一个文件顶部定义的变量可以提供给该文件中的任何函数调用，也叫全局变量。</p>
<ul>
<li><p>一个例子</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">a = <span class="number">150</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">()</span>:</span></div><div class="line">    a = <span class="number">100</span></div><div class="line">    <span class="keyword">print</span>  <span class="string">'in'</span>,a</div><div class="line">    <span class="comment">#这里打印出的是100</span></div><div class="line">fun()</div><div class="line"><span class="keyword">print</span> <span class="string">'out'</span>,a</div><div class="line"><span class="comment">#out打印出是150</span></div></pre></td></tr></table></figure>
</li>
<li><p>使用global将局部变量声明为全局变量</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">a = <span class="number">150</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">()</span>:</span></div><div class="line">    a = <span class="number">100</span></div><div class="line">    <span class="keyword">global</span> b</div><div class="line">    b = <span class="number">12345</span></div><div class="line">    <span class="keyword">print</span>  <span class="string">'in'</span>,a</div><div class="line">fun()</div><div class="line"><span class="keyword">print</span> <span class="string">'out'</span>,a</div><div class="line"><span class="keyword">print</span> b</div></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="课时18：函数返回值"><a href="#课时18：函数返回值" class="headerlink" title="课时18：函数返回值"></a>课时18：函数返回值</h5><p>函数被调用后会返回一个指定的值即返回值，不指定默认返回None，可以使用return直接指定，返回值可以是任意类型，return执行后函数终止</p>
<ul>
<li>一个例子<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding:utf8</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x,y)</span>:</span></div><div class="line">    t=x+y</div><div class="line">    <span class="keyword">return</span> t</div><div class="line">z = f(<span class="number">2</span>,<span class="number">3</span>)</div><div class="line"><span class="keyword">print</span> z</div><div class="line"><span class="comment">#此时z为None</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="课时19：冗余参数处理"><a href="#课时19：冗余参数处理" class="headerlink" title="课时19：冗余参数处理"></a>课时19：冗余参数处理</h5><ul>
<li><p>正常多类型传值</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x)</span>:</span></div><div class="line">    <span class="keyword">print</span> x</div><div class="line">f(<span class="number">1</span>)</div><div class="line">f(<span class="string">'abc'</span>)</div><div class="line">f([<span class="string">'arvon'</span>,<span class="string">'mo'</span>])</div><div class="line">f(&#123;<span class="string">'arvon'</span>:<span class="number">123</span>,<span class="string">'blog'</span>:<span class="string">'arvon.top'</span>&#125;)</div><div class="line">f(range(<span class="number">10</span>))</div></pre></td></tr></table></figure>
</li>
<li><p>传递元组到多个参数,<em>号和**的使用<br>传递元组使用</em>，传递字典使用<strong>，推荐使用</strong>，原因看例子</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(name=<span class="string">'name'</span>,age=<span class="string">'0'</span>)</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'name: %s'</span> % name</div><div class="line">    <span class="keyword">print</span> <span class="string">'age: %s'</span> % age</div><div class="line">f()</div><div class="line">f(<span class="string">'test'</span>,<span class="number">12</span>)</div><div class="line">t=(<span class="string">'arvon'</span>,<span class="number">24</span>)</div><div class="line">tt=&#123;<span class="string">'age'</span>:<span class="number">23</span>, <span class="string">'name'</span>:<span class="string">'mo'</span>&#125;</div><div class="line">f(*t)</div><div class="line">f(**tt)</div></pre></td></tr></table></figure>
</li>
<li><p>冗余例子,<em>args的使用<br>关于</em>args的意思是接收多余的参数，把这些参数当做一个元组，这个元组名称为args,使用**args冗余字典方式的参数</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">go</span><span class="params">(x,*args,**dargs)</span>:</span></div><div class="line">    <span class="keyword">print</span> x</div><div class="line">    <span class="keyword">print</span> args</div><div class="line">    <span class="keyword">print</span> dargs</div><div class="line">go(<span class="number">1</span>,<span class="number">2</span>)</div><div class="line">go(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</div><div class="line">go(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</div><div class="line">go(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="string">'m'</span>=<span class="number">5</span>)</div></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="课时20：匿名函数lambda"><a href="#课时20：匿名函数lambda" class="headerlink" title="课时20：匿名函数lambda"></a>课时20：匿名函数lambda</h5><p>lambda表达式函数是一种快速定义单行的最小函数，从Lisp借用而来，可使用在任何需要函数的地方。</p>
<ul>
<li><p>最简实例</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x,y)</span>:</span></div><div class="line"><span class="meta">... </span>    <span class="keyword">return</span> x*y</div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f(<span class="number">2</span>,<span class="number">3</span>)</div><div class="line"><span class="number">6</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">lambda</span> x,y:x*y</div><div class="line">&lt;function &lt;<span class="keyword">lambda</span>&gt; at <span class="number">0x7fa5c3e7ea28</span>&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>g = <span class="keyword">lambda</span> x,y:x*y</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>g(<span class="number">2</span>,<span class="number">3</span>)</div><div class="line"><span class="number">6</span></div></pre></td></tr></table></figure>
</li>
<li><p>reduce函数的使用<br>括号中第一项为函数，第二项为列表，一次作用两个值，配合lambda很好用。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">l = range(<span class="number">1</span>,<span class="number">6</span>)</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x,y)</span>:</span></div><div class="line">    <span class="keyword">return</span> x*y</div><div class="line">one=reduce(f,l)</div><div class="line">g = <span class="keyword">lambda</span> x,y:x+y</div><div class="line">two=reduce(g,l)</div><div class="line"><span class="keyword">print</span> one,two</div></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="课时21：实现分支结构"><a href="#课时21：实现分支结构" class="headerlink" title="课时21：实现分支结构"></a>课时21：实现分支结构</h5><p>switch语句用于编写多分支结构的程序类似if else，但python并未提供switch语句。在python当中使用字典来实现相同的功能。</p>
<ul>
<li><p>精简的例子</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;<span class="number">1</span>:case1,<span class="number">2</span>:case2&#125;.get(x,<span class="keyword">lambda</span> *arg, **key:)()</div></pre></td></tr></table></figure>
</li>
<li><p>通过字典调用函数</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding:utf-8</span></div><div class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> division</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">jia</span><span class="params">(x,y)</span>:</span></div><div class="line">    <span class="keyword">return</span> x+y</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">jian</span><span class="params">(x,y)</span>:</span></div><div class="line">    <span class="keyword">return</span> x-y</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">cheng</span><span class="params">(x,y)</span>:</span></div><div class="line">    <span class="keyword">return</span> x*y</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">chu</span><span class="params">(x,y)</span>:</span></div><div class="line">    <span class="keyword">return</span> x/y</div><div class="line">operator = &#123;<span class="string">'+'</span>:jia,<span class="string">'-'</span>:jian,<span class="string">'*'</span>:cheng,<span class="string">'/'</span>:chu&#125;</div><div class="line"><span class="comment">#print operator['+'](3,2)</span></div><div class="line"><span class="comment">#print operator['/'](3,2)</span></div><div class="line"><span class="comment">#print jia(3,2)</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fff</span><span class="params">(x,o,y)</span>:</span></div><div class="line">    <span class="keyword">print</span> operator.get(o)(x,y)</div><div class="line">fff(<span class="number">3</span>,<span class="string">'+'</span>,<span class="number">2</span>)</div><div class="line">fff(<span class="number">3</span>,<span class="string">'/'</span>,<span class="number">2</span>)</div></pre></td></tr></table></figure>
</li>
<li><p>上个例子的复杂方式，有多余的判断方便和上面例子对比</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding:utf-8</span></div><div class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> division</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">jia</span><span class="params">(x,y)</span>:</span></div><div class="line">    <span class="keyword">return</span> x+y</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">jian</span><span class="params">(x,y)</span>:</span></div><div class="line">    <span class="keyword">return</span> x-y</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">cheng</span><span class="params">(x,y)</span>:</span></div><div class="line">    <span class="keyword">return</span> x*y</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">chu</span><span class="params">(x,y)</span>:</span></div><div class="line">    <span class="keyword">return</span> x/y</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">operator</span><span class="params">(x,o,y)</span>:</span></div><div class="line">    <span class="keyword">if</span> o == <span class="string">'+'</span>:</div><div class="line">        <span class="keyword">print</span> jia(x,y)</div><div class="line">    <span class="keyword">elif</span> o == <span class="string">'-'</span>:</div><div class="line">        <span class="keyword">print</span> jian(x,y)</div><div class="line">    <span class="keyword">elif</span> o == <span class="string">'*'</span>:</div><div class="line">        <span class="keyword">print</span> cheng(x,y)</div><div class="line">    <span class="keyword">elif</span> o == <span class="string">'/'</span>:</div><div class="line">        <span class="keyword">print</span> chu(x,y)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">pass</span></div><div class="line">operator(<span class="number">4</span>, <span class="string">'+'</span>, <span class="number">2</span>)</div><div class="line">operator(<span class="number">4</span>, <span class="string">'-'</span>, <span class="number">2</span>)</div><div class="line">operator(<span class="number">4</span>, <span class="string">'*'</span>, <span class="number">2</span>)</div></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="课时22：常用内置函数"><a href="#课时22：常用内置函数" class="headerlink" title="课时22：常用内置函数"></a>课时22：常用内置函数</h5><ul>
<li><p>使用callable检测是否可以直接调用函数</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>callable(min)</div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>callable(f)</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">NameError: name <span class="string">'f'</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>callable(divmod)</div><div class="line"><span class="keyword">True</span></div></pre></td></tr></table></figure>
</li>
<li><p>使用abs取绝对值</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#def a(x):</span></div><div class="line"><span class="comment">#    if x &lt; 0:</span></div><div class="line"><span class="comment">#        return -x</span></div><div class="line"><span class="comment">#    else:</span></div><div class="line"><span class="comment">#        return x</span></div><div class="line"><span class="comment">#print a(10)</span></div><div class="line"><span class="comment">#print a(-9)</span></div><div class="line"><span class="keyword">print</span> abs(<span class="number">-9</span>)</div></pre></td></tr></table></figure>
</li>
<li><p>使用max取最大值,使用min取最小值</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">l = range(<span class="number">12</span>)</div><div class="line"><span class="keyword">print</span> max(l)</div><div class="line"><span class="keyword">print</span> min(l)</div></pre></td></tr></table></figure>
</li>
<li><p>取列表长度</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding:utf8</span></div><div class="line">l=[<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</div><div class="line"><span class="comment">#取列表元素个数</span></div><div class="line"><span class="keyword">print</span> len(l)</div><div class="line"><span class="comment">#取商和摩</span></div><div class="line"><span class="keyword">print</span> divmod(<span class="number">5</span>,<span class="number">2</span>)</div></pre></td></tr></table></figure>
</li>
<li><p>测试数据类型是否相同</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#if type(l) == type([]):</span></div><div class="line">isinstance(l,list)</div><div class="line">isinstance(l,int)</div><div class="line">isinstance(l,str)</div></pre></td></tr></table></figure>
</li>
<li><p>使用cmp判断字符串是否一样</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># if l == 'strxxx':</span></div><div class="line">cmp(l,<span class="string">'strxxx'</span>)</div><div class="line"><span class="comment">#相同返回0，0在判断时为假，需使用not</span></div></pre></td></tr></table></figure>
</li>
<li><p>类型转换函数</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">long() <span class="comment">#长整形</span></div><div class="line">int()</div><div class="line">float()</div><div class="line">str()</div><div class="line">list()  <span class="comment">#列表</span></div><div class="line">tuple() <span class="comment">#元组</span></div><div class="line">hex()  <span class="comment">#16进制转换</span></div><div class="line">oct()  <span class="comment">#8进制转换</span></div><div class="line">chr()  </div><div class="line">ord()</div></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="课时23：与类相关的内置函数"><a href="#课时23：与类相关的内置函数" class="headerlink" title="课时23：与类相关的内置函数"></a>课时23：与类相关的内置函数</h5><ul>
<li><p>与string相关的几个函数</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#首字母大写</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">'hello world'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s.capitalize()</div><div class="line"><span class="string">'Hello world'</span></div><div class="line"><span class="comment">#字符串替换,查看帮助使用help(str.capitalize)</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s.replace(<span class="string">'hello'</span>,<span class="string">'good'</span>)</div><div class="line"><span class="string">'good world'</span></div><div class="line"><span class="comment">#字符串切割</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>ip=<span class="string">'192.168.1.123'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>ip.split(<span class="string">'.'</span>)</div><div class="line">[<span class="string">'192'</span>, <span class="string">'168'</span>, <span class="string">'1'</span>, <span class="string">'123'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>ip.split(<span class="string">'.'</span>,<span class="number">1</span>)</div><div class="line">[<span class="string">'192'</span>, <span class="string">'168.1.123'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>ip.split(<span class="string">'.'</span>,<span class="number">2</span>)</div><div class="line">[<span class="string">'192'</span>, <span class="string">'168'</span>, <span class="string">'1.123'</span>]</div></pre></td></tr></table></figure>
</li>
<li><p>直接使用内置函数跟使用import导入的小区别</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">s = <span class="string">'hello world'</span></div><div class="line">s.replace(<span class="string">'hello'</span>,<span class="string">'good'</span>)</div><div class="line"><span class="comment">##---使用import</span></div><div class="line"><span class="keyword">import</span> string</div><div class="line">string.replace(s,<span class="string">'hello'</span>,<span class="string">'good'</span>)</div></pre></td></tr></table></figure>
</li>
<li><p>使用filter函数过滤</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#filter（function，list），会把函数判断为Ture时list的元素取出来</span></div><div class="line">l=range(<span class="number">10</span>)</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x)</span>:</span></div><div class="line">    <span class="keyword">if</span> x &gt; <span class="number">5</span>:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line"><span class="keyword">print</span> filter(f,l)</div></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="课时24：序列处理函数"><a href="#课时24：序列处理函数" class="headerlink" title="课时24：序列处理函数"></a>课时24：序列处理函数</h5><ul>
<li><p>使用zip或map进行并行遍历<br>使用zip只能对元素数量一样的，map可以将数量不同的地方用None代替</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>name=[<span class="string">'arvon'</span>, <span class="string">'mo'</span>, <span class="string">'lover'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>age=[<span class="string">'23'</span>, <span class="string">'25'</span>, <span class="string">'26'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>tel=[<span class="string">'123456'</span>, <span class="string">'324566'</span>, <span class="string">'54334123'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>zip(name,age,tel)</div><div class="line">[(<span class="string">'arvon'</span>, <span class="string">'23'</span>, <span class="string">'123456'</span>), (<span class="string">'mo'</span>, <span class="string">'25'</span>, <span class="string">'324566'</span>), (<span class="string">'lover'</span>, <span class="string">'26'</span>, <span class="string">'54334123'</span>)]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>map(<span class="keyword">None</span>,name,age,tel)</div><div class="line">[(<span class="string">'arvon'</span>, <span class="string">'23'</span>, <span class="string">'123456'</span>), (<span class="string">'mo'</span>, <span class="string">'25'</span>, <span class="string">'324566'</span>), (<span class="string">'lover'</span>, <span class="string">'26'</span>, <span class="string">'54334123'</span>)]</div></pre></td></tr></table></figure>
</li>
<li><p>map函数高阶用法，可以对遍历后的数据进行函数操作</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a=[<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b=[<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">mf</span><span class="params">(x,y)</span>:</span></div><div class="line"><span class="meta">... </span>    <span class="keyword">return</span> x*y</div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>map(<span class="keyword">None</span>,a,b)</div><div class="line">[(<span class="number">1</span>, <span class="number">2</span>), (<span class="number">3</span>, <span class="number">4</span>), (<span class="number">5</span>, <span class="number">6</span>)]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>map(mf,a,b)</div><div class="line">[<span class="number">2</span>, <span class="number">12</span>, <span class="number">30</span>]</div></pre></td></tr></table></figure>
</li>
<li><p>reduce阶乘例子</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>l=range(<span class="number">1</span>,<span class="number">100</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">xf</span><span class="params">(x,y)</span>:</span></div><div class="line"><span class="meta">... </span>    <span class="keyword">return</span> x +y</div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>reduce(xf,l)</div><div class="line"><span class="number">4950</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>reduce(<span class="keyword">lambda</span> x,y:x+y,l)</div><div class="line"><span class="number">4950</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>filter(<span class="keyword">lambda</span> x:x%<span class="number">2</span> == <span class="number">0</span>,l)</div><div class="line">[<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">12</span>, <span class="number">14</span>, <span class="number">16</span>, <span class="number">18</span>, <span class="number">20</span>, <span class="number">22</span>, <span class="number">24</span>, <span class="number">26</span>, <span class="number">28</span>, <span class="number">30</span>, <span class="number">32</span>, <span class="number">34</span>, <span class="number">36</span>, <span class="number">38</span>, <span class="number">40</span>, <span class="number">42</span>, <span class="number">44</span>, <span class="number">46</span>, <span class="number">48</span>, <span class="number">50</span>, <span class="number">52</span>, <span class="number">54</span>, <span class="number">56</span>, <span class="number">58</span>, <span class="number">60</span>, <span class="number">62</span>, <span class="number">64</span>, <span class="number">66</span>, <span class="number">68</span>, <span class="number">70</span>, <span class="number">72</span>, <span class="number">74</span>, <span class="number">76</span>, <span class="number">78</span>, <span class="number">80</span>, <span class="number">82</span>, <span class="number">84</span>, <span class="number">86</span>, <span class="number">88</span>, <span class="number">90</span>, <span class="number">92</span>, <span class="number">94</span>, <span class="number">96</span>, <span class="number">98</span>]</div></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="课时25：模块和包"><a href="#课时25：模块和包" class="headerlink" title="课时25：模块和包"></a>课时25：模块和包</h5><p>模块是python组织代码的基本方式，python脚本都是以py为扩展名的文件保存，一个脚本可以单独运行也可以导入另一个脚本运行，当导入运行时，被导入的脚本就称作模块（module）。模块名与脚本名字相同，如test.py的模块名就是test可以通过import test导入。</p>
<ul>
<li><p>python找寻模块路径优先级</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#当前目录&gt;lib下&gt;其他</span></div><div class="line"><span class="comment">#查找导入模块的路径</span></div><div class="line"><span class="keyword">import</span> a_module</div><div class="line"><span class="keyword">print</span> a_module.__file__</div></pre></td></tr></table></figure>
</li>
<li><p>实用的<strong>name</strong>,python内置当直接运行脚本返回为<strong>main</strong>，当被调用执行返回为脚本名。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> division</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">jia</span><span class="params">(x,y)</span>:</span></div><div class="line">    <span class="keyword">return</span> x+y</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">jian</span><span class="params">(x,y)</span>:</span></div><div class="line">    <span class="keyword">return</span> x-y</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">cheng</span><span class="params">(x,y)</span>:</span></div><div class="line">    <span class="keyword">return</span> x*y</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">chu</span><span class="params">(x,y)</span>:</span></div><div class="line">    <span class="keyword">return</span> x/y</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">operator</span><span class="params">(x,o,y)</span>:</span></div><div class="line">    <span class="keyword">if</span> o == <span class="string">'+'</span>:</div><div class="line">        <span class="keyword">print</span> jia(x,y)</div><div class="line">    <span class="keyword">elif</span> o == <span class="string">'-'</span>:</div><div class="line">        <span class="keyword">print</span> jian(x,y)</div><div class="line">    <span class="keyword">elif</span> o == <span class="string">'*'</span>:</div><div class="line">        <span class="keyword">print</span> cheng(x,y)</div><div class="line">    <span class="keyword">elif</span> o == <span class="string">'/'</span>:</div><div class="line">        <span class="keyword">print</span> chu(x,y)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">pass</span></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    operator(<span class="number">4</span>, <span class="string">'+'</span>, <span class="number">2</span>)</div><div class="line">    operator(<span class="number">4</span>, <span class="string">'-'</span>, <span class="number">2</span>)</div><div class="line">    operator(<span class="number">4</span>, <span class="string">'*'</span>, <span class="number">2</span>)</div><div class="line">    operator(<span class="number">4</span>, <span class="string">'/'</span>, <span class="number">2</span>)</div></pre></td></tr></table></figure>
</li>
<li><p>简单例子</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> cal</div><div class="line"><span class="keyword">print</span> cal.jia(<span class="number">1</span>,<span class="number">2</span>)</div><div class="line"><span class="comment">#实用cal调用模块，实用.符号调用模块内的函数也叫方法</span></div></pre></td></tr></table></figure>
</li>
<li><p>Python模块可以按目录组织成包</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">###创建一个包的步骤</span></div><div class="line"><span class="comment">#- 建立一个名字为包名字的目录</span></div><div class="line"><span class="comment">#- 在该目录下创建一个__init__.py文件</span></div><div class="line"><span class="comment">#- 根据需要在该目录下存放脚本文件、已编译扩展及子包</span></div><div class="line"><span class="comment">#- import pack.m1, pack.m2, pack.m3</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="第五章：正则表达式"><a href="#第五章：正则表达式" class="headerlink" title="第五章：正则表达式"></a>第五章：正则表达式</h4><h5 id="课时26：简介"><a href="#课时26：简介" class="headerlink" title="课时26：简介"></a>课时26：简介</h5><p>正则表达式（RE）是一种小型的、高度专业化的编程语言，它内嵌在python中，并通过re模块实现。</p>
<ul>
<li>小例子<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> re</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">'abc'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">r'abc'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>re.findall(s,<span class="string">'aaaaaaaa'</span>)</div><div class="line">[]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>re.findall(s,<span class="string">'aaaaaabcaa'</span>)</div><div class="line">[<span class="string">'abc'</span>]</div></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="课时27：元字符"><a href="#课时27：元字符" class="headerlink" title="课时27：元字符"></a>课时27：元字符</h5><ul>
<li><p>普通字符包括大多数字母和字符以及数字等都匹配自身</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>st = <span class="string">'top tip tqp twp tep'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>res=<span class="string">r'top'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>re.findall(res,st)</div><div class="line">[<span class="string">'top'</span>]</div></pre></td></tr></table></figure>
</li>
<li><p>元字符包括.^$*+?{}[]|()</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>str=<span class="string">'I can say "tip top t4p world ^go" and I say hello world'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>rs1 = <span class="string">r'I'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>re.findall(rs1,str)</div><div class="line">[<span class="string">'I'</span>, <span class="string">'I'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>rs2 = <span class="string">r'^I'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>re.findall(rs2,str)</div><div class="line">[<span class="string">'I'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>rs3 = <span class="string">r't[io]p'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>re.findall(rs3,str)</div><div class="line">[<span class="string">'tip'</span>, <span class="string">'top'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>rs4 = <span class="string">r'\^go'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>re.findall(rs4.str)</div><div class="line">[^go]</div></pre></td></tr></table></figure>
</li>
<li><p>关于转义的列表</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">\d <span class="comment">#匹配任何十进制数相当于[0-9]</span></div><div class="line">\D <span class="comment">#匹配任何非数字字符，相当于[^0-9]</span></div><div class="line">\s <span class="comment">#匹配任何空白字符，相当于[\t\n\r\f\v]</span></div><div class="line">\S <span class="comment">#匹配任何非空白字符，相当于[^\t\n\r\f\v]</span></div><div class="line">\w <span class="comment">#匹配任何字母数字字符，相当于[a-zA-Z0-9_]</span></div><div class="line">\W <span class="comment">#匹配任何非字符数字字符，相当于[^a-zA-Z0-9_]</span></div></pre></td></tr></table></figure>
</li>
<li><p>关于重复的正则<br>其中*表示0次或多次、+表示一次或多次，？表示0次或一次，”.”表示匹配一次</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>tel = <span class="string">'010-123456'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>rs = <span class="string">r'010-\d&#123;6&#125;'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>re.findall(rs,tel)</div><div class="line">[<span class="string">'010-123456'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>re.findall(rs,tel)</div><div class="line">[<span class="string">'010-123456'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>rs = <span class="string">r'010-\d*'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>re.findall(rs,tel)</div><div class="line">[<span class="string">'010-123456'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>rs = <span class="string">r'010-\d+'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>re.findall(rs,tel)</div><div class="line">[<span class="string">'010-123456'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>rs = <span class="string">r'010-\d&#123;5&#125;?'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>re.findall(rs,tel)</div><div class="line">[<span class="string">'010-12345'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>rs = <span class="string">r'010-\d?'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>re.findall(rs,tel)</div><div class="line">[<span class="string">'010-1'</span>]</div></pre></td></tr></table></figure>
</li>
<li><p>关于花括号灵活用法</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#可控制匹配次数，如1到5此</span></div><div class="line">rs = <span class="string">r'a&#123;1,5&#125;'</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="课时28：正则表达式常用函数"><a href="#课时28：正则表达式常用函数" class="headerlink" title="课时28：正则表达式常用函数"></a>课时28：正则表达式常用函数</h5><ul>
<li><p>正则表达式编译执行，经常用的话建议采用这种方法</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> re</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>r1 = <span class="string">"\d&#123;3,4&#125;-?\d&#123;6&#125;"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>p_tel = re.compile(r1)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>p_tel</div><div class="line">&lt;_sre.SRE_Pattern object at <span class="number">0x7f44193a2f10</span>&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>re.findall(p_tel,<span class="string">'010-123456'</span>)</div><div class="line">[<span class="string">'010-123456'</span>]</div></pre></td></tr></table></figure>
</li>
<li><p>match和search方法</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#group()返回被re匹配的字符串</span></div><div class="line"><span class="comment">#start()返回匹配开始的位置</span></div><div class="line"><span class="comment">#end()返回匹配结束的位置</span></div><div class="line"><span class="comment">#span()返回一个元组包含匹配的位置</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> re</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>csvt_re = re.compile(<span class="string">r'csvt'</span>,re.I)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>csvt_re.findall(<span class="string">'csVt'</span>)</div><div class="line">[<span class="string">'csVt'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>csvt_re.findall(<span class="string">'csVt csvt CsVt'</span>)</div><div class="line">[<span class="string">'csVt'</span>, <span class="string">'csvt'</span>, <span class="string">'CsVt'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>csvt_re.match(<span class="string">'csvt hello'</span>)</div><div class="line">&lt;_sre.SRE_Match object at <span class="number">0x7f44192f1648</span>&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>csvt_re.search(<span class="string">'csvt hello'</span>)</div><div class="line">&lt;_sre.SRE_Match object at <span class="number">0x7f44192f16b0</span>&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>sub函数替换字符串</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>s</div><div class="line"><span class="string">'hello csvt'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s.replace(<span class="string">'csvt'</span>,<span class="string">'good'</span>)</div><div class="line"><span class="string">'hello good'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s</div><div class="line"><span class="string">'hello csvt'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>rs = <span class="string">r'c..t'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>re.sub(rs,<span class="string">'python'</span>,<span class="string">'csvt caat cvvt cccc'</span>)</div><div class="line"><span class="string">'python python python cccc'</span></div></pre></td></tr></table></figure>
</li>
<li><p>使用re.split进行带正则的分割</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>ip = <span class="string">'1.2.3.4'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>ip.split(<span class="string">'.'</span>)</div><div class="line">[<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">"123*456-789+000"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>re.split(<span class="string">r'[\+\-\*]'</span>,s)</div><div class="line">[<span class="string">'123'</span>, <span class="string">'456'</span>, <span class="string">'789'</span>, <span class="string">'000'</span>]</div></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="课时29：正则表达式内置属性及分组"><a href="#课时29：正则表达式内置属性及分组" class="headerlink" title="课时29：正则表达式内置属性及分组"></a>课时29：正则表达式内置属性及分组</h5><ul>
<li><p>正则编译标志</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">DOTALL,S    <span class="comment">#使.匹配包括换行在内的所有字符</span></div><div class="line">IGNORECASE,I    <span class="comment">#使匹配对大小写不敏感</span></div><div class="line">LOCALE,L    <span class="comment">#做本地化识别，匹配法语等。。。</span></div><div class="line">MULTILINE,M <span class="comment">#多行匹配，影响^和$</span></div><div class="line">VERBOSE,X   <span class="comment">#能够使用REs的verbose状态，使之被组织更清晰易懂</span></div></pre></td></tr></table></figure>
</li>
<li><p>关于S的例子</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>r1 = <span class="string">r"csvt.net"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>re.findall(r1,<span class="string">'vsvt.net'</span>)</div><div class="line">[]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>r1 = <span class="string">r"csvt.net"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>re.findall(r1,<span class="string">'csvt.net'</span>)</div><div class="line">[<span class="string">'csvt.net'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>re.findall(r1,<span class="string">'csvtonet'</span>)</div><div class="line">[<span class="string">'csvtonet'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>re.findall(r1,<span class="string">'csvtonet'</span>,re.S)</div><div class="line">[<span class="string">'csvtonet'</span>]</div></pre></td></tr></table></figure>
</li>
<li><p>关于M的例子</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>s =<span class="string">"""</span></div><div class="line"><span class="meta">... </span>hello csvt</div><div class="line"><span class="meta">... </span>csvt hello</div><div class="line"><span class="meta">... </span>hello csvt hello</div><div class="line"><span class="meta">... </span>csvt hehe</div><div class="line"><span class="meta">... </span>"""</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>r = <span class="string">r"^csvt"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>re.findall(r,s)</div><div class="line">[]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>re.findall(r,s,re.M)</div><div class="line">[<span class="string">'csvt'</span>, <span class="string">'csvt'</span>]</div></pre></td></tr></table></figure>
</li>
<li><p>关于X的例子，当正则是多行时使用</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>tel = <span class="string">r"""</span></div><div class="line"><span class="meta">... </span>\d&#123;3,4&#125;</div><div class="line"><span class="meta">... </span>-?</div><div class="line"><span class="meta">... </span>\d&#123;8&#125;</div><div class="line"><span class="meta">... </span>"""</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>re.findall(tel,<span class="string">'010-12345678'</span>)</div><div class="line">[]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>re.findall(tel,<span class="string">'010-12345678'</span>,re.X)</div><div class="line">[<span class="string">'010-12345678'</span>]</div></pre></td></tr></table></figure>
</li>
<li><p>分组匹配</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>email = <span class="string">r"\w&#123;3&#125;@\w+(\.com|\.cn)"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>re.match(email,<span class="string">'zzz@csvt.cn'</span>)</div><div class="line">&lt;_sre.SRE_Match object at <span class="number">0x7f44192fca08</span>&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>re.match(email,<span class="string">'zzz@csvt.com'</span>)</div><div class="line">&lt;_sre.SRE_Match object at <span class="number">0x7f44192fc990</span>&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>re.match(email,<span class="string">'zzz@csvt.org'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>re.findall(email,<span class="string">'zzz@csvt.com'</span>)</div><div class="line"><span class="comment">#使用findall会优先返回分组匹配的数据，所以一般用match做判断即可</span></div><div class="line">[<span class="string">'.com'</span>]</div></pre></td></tr></table></figure>
</li>
<li><p>利用分组特性的例子</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>s =<span class="string">"""</span></div><div class="line"><span class="meta">... </span>hhsdj dskj hello src=arvon yes jdasdfa</div><div class="line"><span class="meta">... </span>adsfasd src=mo yes dasfasdf</div><div class="line"><span class="meta">... </span>src=lover</div><div class="line"><span class="meta">... </span>hello src=python asdfas</div><div class="line"><span class="meta">... </span>"""</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>r1 = <span class="string">r"hello src=.+ "</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>re.findall(r1,s)</div><div class="line">[<span class="string">'hello src=arvon yes '</span>, <span class="string">'hello src=python '</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>r1 = <span class="string">r"hello src=(.+) +yes"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>re.findall(r1,s)</div><div class="line">[<span class="string">'arvon'</span>]</div></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="课时30：一个小爬虫"><a href="#课时30：一个小爬虫" class="headerlink" title="课时30：一个小爬虫"></a>课时30：一个小爬虫</h5><ul>
<li>下载贴吧或空间中所有图片<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment">#coding:utf-8</span></div><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">import</span> urllib</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getHtml</span><span class="params">(url)</span>:</span></div><div class="line">    page = urllib.urlopen(url)</div><div class="line">    html = page.read()</div><div class="line">    <span class="keyword">return</span> html</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getImg</span><span class="params">(html)</span>:</span></div><div class="line">    reg = <span class="string">r'src="(.*?\.jpg)" size'</span></div><div class="line">    imgre = re.compile(reg)</div><div class="line">    imglist = re.findall(imgre,html)</div><div class="line">    <span class="comment">#print imglist</span></div><div class="line">    imgnum = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> imgurl <span class="keyword">in</span> imglist:</div><div class="line">        urllib.urlretrieve(imgurl,<span class="string">'%s.jpg'</span> % imgnum)</div><div class="line">        imgnum +=<span class="number">1</span></div><div class="line"><span class="comment">#wantUrl = raw_input('Input URL: ')</span></div><div class="line">wantUrl = <span class="string">'http://tieba.baidu.com/p/4637471656'</span></div><div class="line">html = getHtml(wantUrl)</div><div class="line">getImg(html)</div></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="课时31：数据结构之深拷贝和浅拷贝"><a href="#课时31：数据结构之深拷贝和浅拷贝" class="headerlink" title="课时31：数据结构之深拷贝和浅拷贝"></a>课时31：数据结构之深拷贝和浅拷贝</h5><p>python对内存的使用，浅拷贝就是对引用的拷贝，而深拷贝是对对象资源的拷贝</p>
<ul>
<li>实例特点<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> copy</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b=a</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>c = copy.copy(a)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>c</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>id(a)</div><div class="line"><span class="number">140296085124304</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>id(b)</div><div class="line"><span class="number">140296085124304</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>id(c)</div><div class="line"><span class="number">140296085139680</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a.append(<span class="string">'d'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>], <span class="string">'d'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>], <span class="string">'d'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>c</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>id(a[<span class="number">0</span>])</div><div class="line"><span class="number">30618424</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>id(c[<span class="number">0</span>])</div><div class="line"><span class="number">30618424</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">3</span>].append(<span class="string">'d'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>], <span class="string">'d'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>c</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>]]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d = copy.deepcopy(a)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>], <span class="string">'d'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>], <span class="string">'d'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">3</span>].append(<span class="string">'e'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>], <span class="string">'d'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>], <span class="string">'d'</span>]</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="高级功能"><a href="#高级功能" class="headerlink" title="高级功能"></a>高级功能</h4><h5 id="课时32：文件读写"><a href="#课时32：文件读写" class="headerlink" title="课时32：文件读写"></a>课时32：文件读写</h5><ul>
<li><p>文件的读写，使用open或file函数实现</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#usage: file_handler = open(filename, mode)</span></div><div class="line"><span class="comment">#mode</span></div><div class="line">r  <span class="comment">#只读，默认</span></div><div class="line">r+ <span class="comment">#读写</span></div><div class="line">w  <span class="comment">#写入，先删除原文件，再重新写入，如果没有就创建文件</span></div><div class="line">w+ <span class="comment">#读写，先删除源文件，如果文件没有就创建（可以写入输出）</span></div><div class="line">a  <span class="comment">#写入，在文件末尾追加新的内容，文件不存在就创建</span></div><div class="line">a+ <span class="comment">#读写，在文件末尾追加新的内容，文件不存在就创建</span></div><div class="line">b  <span class="comment">#打开二进制文件，可以与r，w，a，+结合使用</span></div><div class="line">U  <span class="comment">#支持所有的换行符号。如\r,\n,\r\n</span></div></pre></td></tr></table></figure>
</li>
<li><p>使用open和file打开、读取、关闭文件</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>fo = open(<span class="string">'/data/python/tmp/file/test.txt'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fo.read()</div><div class="line"><span class="string">'hello world\n'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fo.close()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fo.read()</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">ValueError: I/O operation on closed file</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fo1 = file(<span class="string">'/data/python/tmp/file/test.txt'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fo1.read()</div><div class="line"><span class="string">'hello world\n'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fo1.close()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fo1.read()</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">ValueError: I/O operation on closed file</div></pre></td></tr></table></figure>
</li>
<li><p>使用write对文件写入</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>fnew = open(<span class="string">'new.txt'</span>, <span class="string">'w'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fnew.write(<span class="string">"hello world\nMy name is arvon\n"</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fnew.close()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>rnew = open(<span class="string">'new.txt'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>rnew.read()</div><div class="line"><span class="string">'hello world\nMy name is arvon\n'</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="课时33：文件对象方法"><a href="#课时33：文件对象方法" class="headerlink" title="课时33：文件对象方法"></a>课时33：文件对象方法</h5><ul>
<li><p>文件对象方法</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">FileObject.close() <span class="comment">#关闭文件</span></div><div class="line">String = FileObject.readline([size])</div><div class="line">List = FileObject.readlines([size])</div><div class="line">String = FileObject.read([size])</div><div class="line">FileObject.next()</div><div class="line">FileObject.write(string)</div><div class="line">FileObject.writelines(List)</div><div class="line">FileObject.seek(偏移量，选项)</div><div class="line">FileObject.flush()</div></pre></td></tr></table></figure>
</li>
<li><p>使用for遍历文件行</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> open(<span class="string">'new.txt'</span>):</div><div class="line"><span class="meta">... </span>    <span class="keyword">print</span> i</div><div class="line">...</div><div class="line">hello world</div><div class="line"></div><div class="line">My name <span class="keyword">is</span> arvon</div><div class="line"></div><div class="line">go go go</div><div class="line"></div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>使用readline读取行,使用readlines返回列表</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>f1 = open(<span class="string">'new.txt'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f1.readline()</div><div class="line"><span class="string">'hello world\n'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f1.readline()</div><div class="line"><span class="string">'My name is arvon\n'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f1.readline()</div><div class="line"><span class="string">'go go go\n'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f1.readline()</div><div class="line"><span class="string">''</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f1 = open(<span class="string">'new.txt'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f1.readlines()</div><div class="line">[<span class="string">'hello world\n'</span>, <span class="string">'My name is arvon\n'</span>, <span class="string">'go go go\n'</span>]</div></pre></td></tr></table></figure>
</li>
<li><p>使用next，返回当前行，并将指针指到下一行</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#readline会读取结束会读取空字符串，而next不会</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f1 = open(<span class="string">'new.txt'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f1.next()</div><div class="line"><span class="string">'hello world\n'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f1.next()</div><div class="line"><span class="string">'My name is arvon\n'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f1.next()</div><div class="line"><span class="string">'go go go\n'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f1.next()</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">StopIteration</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>使用writelines实现多行写入<br>可以多行写，效率比write高，速度快</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>f1 = open(<span class="string">'new.txt'</span>, <span class="string">'a'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>l = [<span class="string">'one\n'</span>, <span class="string">'two\n'</span>, <span class="string">'three\n'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f1 = open(<span class="string">'new.txt'</span>, <span class="string">'a'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f1.writelines(l)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f1.close()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f2 = open(<span class="string">'new.txt'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f2.read()</div><div class="line"><span class="string">'hello world\nMy name is arvon\ngo go go\none\ntwo\nthree\n'</span></div></pre></td></tr></table></figure>
</li>
<li><p>关于指针seek简单操作</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#说明FileObject.seek(偏移量，选项)</span></div><div class="line"><span class="comment">#选项=0，表示将文件指针指向文件头部到偏移量字节处</span></div><div class="line"><span class="comment">#选项=1，表示将文件指针指向文件的当前位置，向后移动偏移量字节</span></div><div class="line"><span class="comment">#选项=2，表示将文件指针指向从文件的尾部，向前移动偏移量字节</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f2 = open(<span class="string">'new.txt'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f2.read()</div><div class="line"><span class="string">'hello world\nMy name is arvon\ngo go go\none\ntwo\nthree\n'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f2.read()</div><div class="line"><span class="string">''</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f2.seek(<span class="number">0</span>,<span class="number">0</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f2.seek(<span class="number">0</span>,<span class="number">0</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f2.read()</div><div class="line"><span class="string">'hello world\nMy name is arvon\ngo go go\none\ntwo\nthree\n'</span></div></pre></td></tr></table></figure>
</li>
<li><p>使用flush提交更新，可以在不使用close的情况下查看文件的写入情况</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>f1=open(<span class="string">'new.txt'</span>,<span class="string">'w'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f1.writelines(l)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f1.flush()</div></pre></td></tr></table></figure>
</li>
<li><p>查找hello的个数</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> re</div><div class="line">f1 = open(<span class="string">'a.t'</span>)</div><div class="line"><span class="keyword">print</span> len(re.findall(<span class="string">'hello'</span>,f1.read()))</div><div class="line">f1.close</div><div class="line"><span class="comment">#----two</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f1 = open(<span class="string">'a.t'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f1.read()</div><div class="line"><span class="string">'hello world\nhello hello world\n'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>re1 = <span class="string">r'(hello) '</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> re</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f1.seek(<span class="number">0</span>,<span class="number">0</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>re.findall(re1,f1.read())</div><div class="line">[<span class="string">'hello'</span>, <span class="string">'hello'</span>, <span class="string">'hello'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>re.findall(re1,f1.read())</div><div class="line">[]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f1.seek(<span class="number">0</span>,<span class="number">0</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>len(re.findall(re1,f1.read()))</div><div class="line"><span class="number">3</span></div></pre></td></tr></table></figure>
</li>
<li><p>文件内容替换</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">f1 = open(<span class="string">'a.t'</span>)</div><div class="line">f2 = open(<span class="string">'a2.t'</span>)</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> f1:</div><div class="line">    f2.write(i.replace(<span class="string">'hello'</span>, <span class="string">'csvt'</span>)</div><div class="line">f1.close()</div><div class="line">f2.close()</div><div class="line"><span class="comment">#---2</span></div><div class="line">fp1 = file(<span class="string">'a.t'</span>, <span class="string">'w+'</span>)</div><div class="line">s = f1.read()</div><div class="line">f1.seek(<span class="number">0</span>,<span class="number">0</span>)</div><div class="line">f1.write(s.replace(<span class="string">"hello"</span>, <span class="string">"csvt"</span>))</div><div class="line">fp1.close()</div></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="课时34：OS模块"><a href="#课时34：OS模块" class="headerlink" title="课时34：OS模块"></a>课时34：OS模块</h5><ul>
<li><p>os模块常用函数</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">mkdir(path[,mode=0777])</div><div class="line">makedirs(name,mode=511)</div><div class="line">rmdir(path)</div><div class="line">removedirs(path)</div><div class="line">listdir(path)</div><div class="line">getcwd()</div><div class="line"><span class="built_in">chdir</span>(path)</div><div class="line">walk(top,topdown=True, onerror=None)</div></pre></td></tr></table></figure>
</li>
<li><p>实例参照</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#codeing:utf8</span></div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="comment">#创建单个目录= mkdir</span></div><div class="line">os.mkdir(<span class="string">'./mydir'</span>)</div><div class="line"><span class="comment">#创建多级目录= mkdir -p</span></div><div class="line">os.mkdirs(<span class="string">'./a/b/c'</span>)</div><div class="line"><span class="comment">#删除空目录</span></div><div class="line">os.rmdir(<span class="string">'./mydir'</span>)</div><div class="line"><span class="comment">#删除多级空目录</span></div><div class="line">os.rmdirs(<span class="string">'./a/b/c'</span>)</div><div class="line"><span class="comment">#列出当前目录下文件,不包含子目录= ls</span></div><div class="line">os.listdir(<span class="string">'.'</span>)</div><div class="line"><span class="comment">#获取当前路径= pwd</span></div><div class="line">os.getcwd(<span class="string">'.'</span>)</div><div class="line"><span class="comment">#切换目录= cd</span></div><div class="line">os.chdir(<span class="string">'./a'</span>)</div></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="课时35：目录遍历"><a href="#课时35：目录遍历" class="headerlink" title="课时35：目录遍历"></a>课时35：目录遍历</h5><ul>
<li><p>列出多级目录中的文件路径(自写)</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">dirList</span><span class="params">(path)</span>:</span></div><div class="line">    filelist = os.listdir(path)</div><div class="line">    fpath = os.getcwd()</div><div class="line">    <span class="keyword">for</span> filename <span class="keyword">in</span> filelist:</div><div class="line">        filepath = os.path.join(fpath,path,filename)</div><div class="line">        <span class="keyword">if</span> os.path.isdir(filepath):</div><div class="line">            dirList(filepath)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">print</span> filepath</div><div class="line">dirList(<span class="string">'testdir'</span>)</div></pre></td></tr></table></figure>
</li>
<li><p>利用walk模块递归</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> os</div><div class="line">allDate = os.walk(<span class="string">'testdir'</span>)</div><div class="line"><span class="keyword">for</span> dirpath,zidir,filenames <span class="keyword">in</span> allDate:</div><div class="line">    <span class="keyword">for</span> eachfile <span class="keyword">in</span> filenames:</div><div class="line">        eachfilepath = os.path.join(dirpath,eachfile)</div><div class="line">        <span class="keyword">print</span>  eachfilepath</div></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="课时36：异常处理"><a href="#课时36：异常处理" class="headerlink" title="课时36：异常处理"></a>课时36：异常处理</h5><ul>
<li><p>常见python异常</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">AssertionError <span class="comment">#assert语句失败</span></div><div class="line">AttributerError    <span class="comment">#试图访问一个对象没有的属性</span></div><div class="line">IOError    <span class="comment">#输入输出异常，基本是无法打开文件</span></div><div class="line">ImportError    <span class="comment">#无法引入模块或包，基本是路径问题</span></div><div class="line">IndentationError   <span class="comment">#语法错误，代码没有正确对齐</span></div><div class="line">IndexError <span class="comment">#下标索引超出序列边界</span></div><div class="line">KeyError   <span class="comment">#试图访问字典中不存在的键</span></div><div class="line">KeyboardInterrupt  <span class="comment">#Ctrl-c终止</span></div><div class="line">NameError  <span class="comment">#使用一个还未赋予对象的变量</span></div><div class="line">SyntaxError    <span class="comment">#python代码逻辑语法错误</span></div><div class="line">TypeError  <span class="comment">#传入的对象类型与要求不符</span></div><div class="line">UnboundLocalError  <span class="comment">#试图访问一个还未设置的全局变量，基本上由于另有一个同名全局变量</span></div><div class="line">ValueError <span class="comment">#传入一个不被期望的值，即使类型正确</span></div></pre></td></tr></table></figure>
</li>
<li><p>异常及异常抛出<br>使用try时报错会终止执行错误语句以下的语句</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding:utf8</span></div><div class="line">filename = raw_input(<span class="string">"要操作的文件："</span>)</div><div class="line"><span class="keyword">try</span>:</div><div class="line">   open(filename)</div><div class="line">   <span class="keyword">print</span> filename</div><div class="line"><span class="keyword">except</span> IOError,msg:</div><div class="line">    <span class="keyword">print</span> <span class="string">"该文件不存在"</span></div><div class="line"><span class="keyword">except</span> NameError,msg:</div><div class="line">    <span class="keyword">pass</span></div></pre></td></tr></table></figure>
</li>
<li><p>finally子句，不关心捕获什么异常，代码必须执行，如文件关闭、释放锁、把数据库连接返还给连接池等。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span>:</div><div class="line">    f = open(filename)</div><div class="line">    <span class="keyword">print</span> hello</div><div class="line"><span class="keyword">except</span> IOError,msg:</div><div class="line">    <span class="keyword">pass</span></div><div class="line"><span class="keyword">finally</span>:</div><div class="line">    f.close()</div><div class="line">    <span class="keyword">print</span> <span class="string">"ok"</span></div></pre></td></tr></table></figure>
</li>
<li><p>使用raise抛出异常,抛出的异常类型必须是python中已定义的类型，不能随意起名</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">filename = raw_input(<span class="string">"something: "</span>)</div><div class="line"><span class="keyword">if</span> filename == <span class="string">"hello"</span>:</div><div class="line">    <span class="keyword">raise</span> TypeError(<span class="string">"nothing!!!!"</span>)</div></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="课时37：mysql数据库模块"><a href="#课时37：mysql数据库模块" class="headerlink" title="课时37：mysql数据库模块"></a>课时37：mysql数据库模块</h5><ul>
<li><p>安装MySQL-python模块</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install MySQL-python</div></pre></td></tr></table></figure>
</li>
<li><p>使用MySQLdb模块,交互模式下</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> MySQLdb</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>conn = MySQLdb.connect(user=<span class="string">'root'</span>,passwd=<span class="string">'admin'</span>,host=<span class="string">'127.0.0.1'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>cur = conn.cursor()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>conn.select_db(<span class="string">'test'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>cur.execute(<span class="string">"insert into mytable(id,username) value(2,'mo');"</span>)</div><div class="line"><span class="number">1L</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>sqli = <span class="string">"insert into mytable(id,username) value(%s, %s);"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>cur.execute(sqli,(<span class="number">3</span>,<span class="string">'lover'</span>))</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>sqlim = <span class="string">"insert into mytable(id,username) values(%s,%s);"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>cur.executemany(sqli,[(<span class="number">4</span>,<span class="string">'haha'</span>),(<span class="number">5</span>,<span class="string">'papa'</span>),(<span class="number">6</span>,<span class="string">'dada'</span>)])</div><div class="line"><span class="number">3L</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>cur.execute(<span class="string">'delete from mytable where id=4'</span>)</div><div class="line"><span class="number">1L</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>cur.execute(<span class="string">"update mytable set username='gogo' where id=5"</span>)</div><div class="line"><span class="number">1L</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>cur.execute(<span class="string">"select * from mytable"</span>)</div><div class="line"><span class="number">6L</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>cur.fetchone()</div><div class="line">(<span class="number">1L</span>, <span class="string">'arvon'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>cur.execute(<span class="string">"select * from mytable"</span>)</div><div class="line"><span class="number">6L</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>cur.fetchone()</div><div class="line">(<span class="number">1L</span>, <span class="string">'arvon'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>cur.fetchone()</div><div class="line">(<span class="number">1L</span>, <span class="string">'arvon'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>cur.scroll(<span class="number">0</span>,<span class="string">'absolute'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>cur.fetchone()</div><div class="line">(<span class="number">1L</span>, <span class="string">'arvon'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>cur.fetchmany(cur.execute(<span class="string">"select* from mytable"</span>))</div><div class="line">((<span class="number">1L</span>, <span class="string">'arvon'</span>), (<span class="number">2L</span>, <span class="string">'mo'</span>), (<span class="number">3L</span>, <span class="string">'lover'</span>), (<span class="number">5L</span>, <span class="string">'gogo'</span>), (<span class="number">6L</span>, <span class="string">'dada'</span>), (<span class="number">7L</span>, <span class="string">'dudu'</span>))</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>cur.close()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>conn.close()</div></pre></td></tr></table></figure>
</li>
<li><p>在脚本中使用的例子</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> MySQLdb</div><div class="line"><span class="comment">#coding:utf-8</span></div><div class="line"><span class="comment">#mysql&gt;create table mytable (id int , username char(20));</span></div><div class="line">conn = MySQLdb.connect(user=<span class="string">'root'</span>,passwd=<span class="string">'admin'</span>,host=<span class="string">'127.0.0.1'</span>)</div><div class="line"><span class="comment">#连接到数据库服务器</span></div><div class="line">cur = conn.cursor()</div><div class="line"><span class="comment">#连接到数据库后游标的定义</span></div><div class="line">conn.select_db(<span class="string">'test'</span>)</div><div class="line"><span class="comment">#连接到test数据库</span></div><div class="line">cur.execute(<span class="string">"insert into mytable(id,username) value(2,'mo');"</span>)</div><div class="line"><span class="comment">#插入一条数据</span></div><div class="line">sqlim = <span class="string">"insert into mytable(id,username) values(%s,%s);"</span></div><div class="line">cur.executemany(sqli,[(<span class="number">4</span>,<span class="string">'haha'</span>),(<span class="number">5</span>,<span class="string">'papa'</span>),(<span class="number">6</span>,<span class="string">'dada'</span>)])</div><div class="line"><span class="comment">#使用格式化字符串，一次添加多条数据，同理可应用于修改和删除</span></div><div class="line">cur.execute(<span class="string">'delete from mytable where id=4'</span>)</div><div class="line"><span class="comment">#删除一条数据</span></div><div class="line">cur.execute(<span class="string">"update mytable set username='gogo' where id=5"</span>)</div><div class="line"><span class="comment">#修改一条数据</span></div><div class="line">cur.execute(<span class="string">"select * from mytable"</span>)</div><div class="line">cur.fetchone()</div><div class="line">cur.scroll(<span class="number">0</span>,<span class="string">'absolute'</span>)</div><div class="line">cur.fetchmany()</div><div class="line"><span class="comment">#查询一条数据，先select出数据条目数量，再通过fetchone依次取值,取值完成后可以通&gt;过scroll重新定义游标位置，如上为让游标在到开头，使用getchmany可以以元组形式取出</span></div><div class="line">所有值</div><div class="line">cur.fetchmany(cur.execute(<span class="string">"select* from mytable"</span>))</div><div class="line"><span class="comment">#使用这种方法可以直接取出所有值</span></div><div class="line">cur.close()</div><div class="line"><span class="comment">#关闭游标</span></div><div class="line">conn.close()</div><div class="line"><span class="comment">#关闭数据库连接</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="课时38：面向对象编程之类和对象"><a href="#课时38：面向对象编程之类和对象" class="headerlink" title="课时38：面向对象编程之类和对象"></a>课时38：面向对象编程之类和对象</h5><p>在python中将所有类型都当做对象</p>
<ul>
<li>类和对象<blockquote>
<ul>
<li>面向过程和面向对象的编程<br>面向过程的编程：函数式编程、c程序等<br>面向对象的编程：C++，Java，Python等</li>
<li>类和对象是面向对象中的两个重要概念<br>类：是对事物的抽象，如汽车模型<br>对象：是类的一个实例，如轿车、客车</li>
<li>范例说明<br>汽车模型可以对汽车的特征和行为进行抽象，然后可以实例化为一台真实的汽车实体出来。</li>
</ul>
</blockquote>
</li>
<li>Python类定义<blockquote>
<ul>
<li>Python类的定义<br>使用class关键字定义一个类，并且类名的首字母要大写；当程序员需要创建的类型不能用简单类型表示时就需要创建类；类把需要的变量和函数结合在一起，这种包含也称为<strong>封装</strong>。</li>
<li>Python类的结构<blockquote>
<blockquote>
<p>class 类名:<br>…    成员变量<br>…    成员函数(至少有一个形参self)<br>…</p>
</blockquote>
</blockquote>
</li>
</ul>
</blockquote>
</li>
<li><p>简单的例子</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Test</span>:</span></div><div class="line"><span class="meta">... </span>    first = <span class="number">123</span></div><div class="line"><span class="meta">... </span>    second = <span class="number">456</span></div><div class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(self)</span>:</span></div><div class="line"><span class="meta">... </span>        <span class="keyword">return</span> <span class="string">'test'</span></div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dog = Test()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dog.f()</div><div class="line"><span class="string">'test'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dog.first</div><div class="line"><span class="number">123</span></div></pre></td></tr></table></figure>
</li>
<li><p>对象的创建<br>创建对象的过程称之为实例化；当一个对象被创建后，包括三方面的特征：对象的句柄、属性和方法。<br>句柄用于区分不同的对象<br>对象的属性和方法与类中的成员变量和成员函数对应</p>
<blockquote>
<p>小例</p>
<blockquote>
<blockquote>
<p>if <strong>name</strong> == “<strong>main</strong>“<br>…    myClass1 = MyClass()</p>
</blockquote>
</blockquote>
</blockquote>
</li>
</ul>
<hr>
<p>ok, python复习告一段落,下一阶段docker进阶</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Centos下搭建svn服务器]]></title>
      <url>http://arvon.top/2016/09/09/Centos%E4%B8%8B%E6%90%AD%E5%BB%BAsvn%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      <content type="html"><![CDATA[<p><strong>前言：</strong>因需求需搭建一个svn服务器，这里顺带记录一下svn的搭建及使用方法。<br><a id="more"></a></p>
<h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><ul>
<li>centos6.7 x_64</li>
<li>yum源</li>
<li>windows客户端测试</li>
</ul>
<h3 id="搭建记录"><a href="#搭建记录" class="headerlink" title="搭建记录"></a>搭建记录</h3><h4 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h4><ul>
<li><p>安装svn软件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install subversion -y</div></pre></td></tr></table></figure>
</li>
<li><p>创建版本库目录</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mkdir -pv /data/svn/svnrepos</div></pre></td></tr></table></figure>
</li>
<li><p>创建版本库</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">svnadmin create /data/svn/svnrepos</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="配置修改"><a href="#配置修改" class="headerlink" title="配置修改"></a>配置修改</h4><p>配置文件路径均在版本库目录下，以我的为例即/data/svn/svnrepos/conf下</p>
<ul>
<li><p>修改svnserve.conf文件，打开以下代码注释</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">anon-access = <span class="built_in">read</span> <span class="comment">#匿名用户可读</span></div><div class="line">auth-access = write <span class="comment">#授权用户可写</span></div><div class="line">password-db = /data/svn/svnrepos/conf/passwd <span class="comment">#使用哪个文件作为账号文件</span></div><div class="line">authz-db = /data/svn/svnrepos/conf/authz <span class="comment">#使用哪个文件作为权限文件</span></div><div class="line">realm = Arvon Test Repository <span class="comment">#提示信息</span></div></pre></td></tr></table></figure>
</li>
<li><p>修改passwd文件<br>如下在[users]下面添加用户名和密码,此文件就是管理账户密码的文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[users]</div><div class="line">arvon = arovn.top</div></pre></td></tr></table></figure>
</li>
<li><p>修改authz文件<br>如下在[groups]下添加目录或子目录做到更细致的权限控制，在目录下控制用户权限</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[groups]</div><div class="line">[/]</div><div class="line"><span class="comment">#/ 表示对根目录（即/svn/project目录）下的所有子目录范围设置权限；</span></div><div class="line"><span class="comment">#[/abc] 表示对资料库中abc项目设置权限；</span></div><div class="line">arvon = rw</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="启动svn服务"><a href="#启动svn服务" class="headerlink" title="启动svn服务"></a>启动svn服务</h4><ul>
<li><p>直接使用命令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">svnserver <span class="_">-d</span> -r /data/svn/svnrepos/</div></pre></td></tr></table></figure>
</li>
<li><p>使用守护进程启动（需修改启动配置）</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#vi /etc/init.d/svnserve</span></div><div class="line">daemon --pidfile=<span class="variable">$&#123;pidfile&#125;</span> <span class="variable">$exec</span> <span class="variable">$args</span> -r /data/svn/svnrepos</div><div class="line"><span class="comment">#然后使用命令启动</span></div><div class="line">/etc/init.d/svnserve start</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="使用测试"><a href="#使用测试" class="headerlink" title="使用测试"></a>使用测试</h3><h4 id="客户端下载"><a href="#客户端下载" class="headerlink" title="客户端下载"></a>客户端下载</h4><ul>
<li><a href="https://pan.baidu.com/s/1bpBRA83" target="_blank" rel="external">windows</a></li>
<li><a href="https://tortoisesvn.net/downloads.html" target="_blank" rel="external">mac/linxu</a></li>
</ul>
<h4 id="客户端测试使用"><a href="#客户端测试使用" class="headerlink" title="客户端测试使用"></a>客户端测试使用</h4><p>由于目前好用的贴图网不好找就参考被人吧,感谢感谢~~</p>
<ul>
<li><a href="http://www.uml.org.cn/pzgl/200904246.asp" target="_blank" rel="external">TortoiseSVN使用简介</a></li>
<li><a href="https://www.google.com.hk/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=2&amp;ved=0ahUKEwiM_83j_YHPAhVDWT4KHTVaCQcQFgghMAE&amp;url=%68%74%74%70%3a%2f%2f%62%62%73%2e%73%63%69%65%6e%63%65%6e%65%74%2e%63%6e%2f%68%6f%6d%65%2e%70%68%70%3f%6d%6f%64%3d%61%74%74%61%63%68%6d%65%6e%74%26%69%64%3d%31%38%35%34%33&amp;usg=AFQjCNExAzbLuWZTTnzUECCzYGcn2qy3jg" target="_blank" rel="external">中文教程pdf版下载</a></li>
<li><a href="http://www.cnblogs.com/sw926/p/3309619.html" target="_blank" rel="external">TortoiseSVN使用方法</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CentOS6.8搭建个人dokuwiki]]></title>
      <url>http://arvon.top/2016/08/20/CentOS6-8%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BAdokuwiki/</url>
      <content type="html"><![CDATA[<p><strong>摘要：</strong><a href="https://www.dokuwiki.org/wiki:dokuwiki" target="_blank" rel="external">dokuwiki</a>是一个开源的wiki引擎程序，非常适合知识库管理，因为有的东西知识不完善不好用blog写，有时也许即时记录一下想法什么的，所以这个还是很有必要的。之前也对比过其他的wiki程序，不过这个比较符合我的要求，所以就用这个程序，这里主要对安装配置做一下记录。</p>
<a id="more"></a>
<h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><ul>
<li>这里使用的是CentOS6.8系统安装。</li>
<li>使用nginx+php发布,另外dokuwiki不需要数据库，这点我很喜欢。</li>
</ul>
<h4 id="nginx-php环境准备"><a href="#nginx-php环境准备" class="headerlink" title="nginx+php环境准备"></a>nginx+php环境准备</h4><ul>
<li>参照我之前的<a href="http://blog.arvon.top/2015/02/13/Centos%E6%90%AD%E5%BB%BAnginx-php%E7%8E%AF%E5%A2%83/" target="_blank" rel="external">nginx+php环境搭建</a></li>
<li>注意安装完成php-fpm完成后记得查看php进程是否正常，php-fpm进程默认是9000端口</li>
</ul>
<h4 id="安装dokuwiki"><a href="#安装dokuwiki" class="headerlink" title="安装dokuwiki"></a>安装dokuwiki</h4><ul>
<li>下载dokuwiki<br>下载地址<a href="https://download.dokuwiki.org/" target="_blank" rel="external">https://download.dokuwiki.org/</a><br><code>注意:</code>下载的时候会让选择语言，这里我没直接贴链接的原因也是这个，选一个中文即可，英文默认必须安装。</li>
<li>安装dokuwiki<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#解压</span></div><div class="line">tar xvf dokuwiki<span class="_">-a</span>1b9b25f129b085a00920bd821719ccd.tgz</div><div class="line"><span class="comment">#移动到nginx网页存放目录</span></div><div class="line">mv dokuwiki /usr/share/nginx/html/</div><div class="line"><span class="comment">#修改权限</span></div><div class="line">chmod -R 777 /usr/share/nginx/html/dokuwiki/data/</div><div class="line">chmod -R 777 /usr/share/nginx/html/dokuwiki/conf/</div><div class="line"><span class="comment">#重启nginx和php-fpm</span></div><div class="line">/etc/init.d/nginx restart</div><div class="line">/etc/init.d/php-fpm restart</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="网页安装配置"><a href="#网页安装配置" class="headerlink" title="网页安装配置"></a>网页安装配置</h4><ul>
<li>登陆<a href="http://yourIP/dokuwiki/install.php" target="_blank" rel="external">http://yourIP/dokuwiki/install.php</a></li>
<li>然后可以选择右上角的语言，之后就可以注册超级用户使用了。安装配置之后记得删除网站目录下的install.php文件</li>
<li>前面如果不注意会出现很多问题，比如，提示/data/pages无法写入的就是权限修改问题这个用上面的chmod命令可以解决</li>
<li>还会就是网页配置的时候有个bug，如果直接<a href="http://yourIP/install.php不安装反倒下载这个文件的时候，修改nginx配置文件将这个url修改为我上面写的那个url即可，其实就是换个路径就好了，`另外`需先确认nginx+php是正常的。" target="_blank" rel="external">http://yourIP/install.php不安装反倒下载这个文件的时候，修改nginx配置文件将这个url修改为我上面写的那个url即可，其实就是换个路径就好了，`另外`需先确认nginx+php是正常的。</a></li>
</ul>
<hr>
<p>ok，以上，附我的wiki地址:<a href="http://wiki.arvon.top" target="_blank" rel="external">http://wiki.arvon.top</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Ubuntu14.04命令行连接无线网络]]></title>
      <url>http://arvon.top/2016/08/17/Ubuntu14-04%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%BF%9E%E6%8E%A5%E6%97%A0%E7%BA%BF%E7%BD%91%E7%BB%9C/</url>
      <content type="html"><![CDATA[<p><strong><em>摘要：</em></strong>自己有个性能一般的ThinkPad本子，装了Ubuntu14.04，不过最近感觉触摸板很不好用，就打算使用命令行直接使用不用图形界面了，也更省资源。命令行启动后遇见个问题，我不会用命令行直接连接无线网络，真是尴尬，这里记录一下解决过程。</p>
<a id="more"></a>
<h3 id="设置开机启动命令行"><a href="#设置开机启动命令行" class="headerlink" title="设置开机启动命令行"></a>设置开机启动命令行</h3><p> 我这里使用的是方法一</p>
<h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><ul>
<li><p>修改grup文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#sudo vim /etc/default/grub</span></div><div class="line"><span class="comment">#将以下注释行末尾添加text</span></div><div class="line"><span class="comment">#GRUB_CMDLINE_LINUX_DEFAULT="quiet splash"</span></div><div class="line">GRUB_CMDLINE_LINUX_DEFAULT=<span class="string">"quiet splash text"</span></div></pre></td></tr></table></figure>
</li>
<li><p>刷新grub</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo update-grup</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><ul>
<li><p>编写配置文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#sudo chmod +w /boot/grub/grub.cfg</span></div><div class="line"><span class="comment">#sudo vim /boot/grub/grub.cfg</span></div><div class="line"><span class="comment">#复制以下内容</span></div><div class="line"> menuentry <span class="string">'Ubuntu，Linux 3.2.0-24-generic-pae'</span> --class ubuntu --class gnu-linux --class gnu --class os &#123;</div><div class="line">    recordfail</div><div class="line">    gfxmode <span class="variable">$linux_gfx_mode</span></div><div class="line">    insmod gzio</div><div class="line">    insmod part_msdos</div><div class="line">    insmod ext2</div><div class="line">    <span class="built_in">set</span> root=<span class="string">'(hd0,msdos8)'</span></div><div class="line">    search --no-floppy --fs-uuid --set=root 689a61a1-06fd-4ffe-95d7-8671e97bbe81</div><div class="line">    linux    /boot/vmlinuz-3.2.0-24-generic-pae root=UUID=689a61a1-06fd-4ffe-95d7-8671e97bbe81 ro   quiet splash <span class="variable">$vt_handoff</span></div><div class="line">    initrd    /boot/initrd.img-3.2.0-24-generic-pae</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>粘贴复制的内容并修改</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#参照如下</span></div><div class="line">menuentry <span class="string">'Ubuntu，Linux 3.2.0-24-generic-pae(command mode)'</span> --class ubuntu --class gnu-linux --class gnu --class os &#123;</div><div class="line">    recordfail</div><div class="line">    gfxmode <span class="variable">$linux_gfx_mode</span></div><div class="line">    insmod gzio</div><div class="line">    insmod part_msdos</div><div class="line">    insmod ext2</div><div class="line">    <span class="built_in">set</span> root=<span class="string">'(hd0,msdos8)'</span></div><div class="line">    search --no-floppy --fs-uuid --set=root 689a61a1-06fd-4ffe-95d7-8671e97bbe81</div><div class="line">    linux    /boot/vmlinuz-3.2.0-24-generic-pae root=UUID=689a61a1-06fd-4ffe-95d7-8671e97bbe81 ro text</div><div class="line">    initrd    /boot/initrd.img-3.2.0-24-generic-pae</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>关闭grub隐藏菜单</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#vim /etc/default/grub</span></div><div class="line">GRUB_HIDDEN_TIMEOUT=7</div><div class="line"><span class="comment">#修改以上的数值原值为0修改为非0即可</span></div></pre></td></tr></table></figure>
</li>
<li><p>刷新Grub</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo update-grub</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="命令行连接无线网络"><a href="#命令行连接无线网络" class="headerlink" title="命令行连接无线网络"></a>命令行连接无线网络</h3><h4 id="可用的方法"><a href="#可用的方法" class="headerlink" title="可用的方法"></a>可用的方法</h4><ul>
<li><p>查看哪个网卡支持无线网络</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo iwconfig</div><div class="line"><span class="comment">#我的网卡名称是wlan0，可以看IEEE802.11bgn作为参照</span></div></pre></td></tr></table></figure>
</li>
<li><p>确认网卡启动</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo ip link <span class="built_in">set</span> wlan0 up</div><div class="line"><span class="comment">#sudo ifconfig wlan0 up</span></div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>扫描无线网络</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo iw dev wlan0 scan | less</div><div class="line"><span class="comment">#sudo iwlist wlan0 scan | more</span></div></pre></td></tr></table></figure>
</li>
<li><p>连接无线网络<br>这里就分多种情况了（因为加密方式有3种，WEP、WPA、WPA2）</p>
<ol>
<li><p>对于常用的WPA方式加密</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#先生成要连接的无线网络的账号密码配置文件，借助wpa_passphrase命令</span></div><div class="line">sudo wpa_passphrase ESSID PWD &gt; ssidname.conf</div><div class="line"><span class="comment">#ssidname.conf这个文件名字可以自己随便起，位置也可以随便放，ESSID为无线名称，PWD为ESSID这个无线的连接密码</span></div><div class="line">sudo wpa_supplicant -B -i wlan0 -Dwext -c ./ssidname.conf</div><div class="line"><span class="comment">#连接该无线网络，此时还不能上网，需要获取IP</span></div><div class="line">sudo iwconfig wlan0</div><div class="line"><span class="comment">#查看此时wlan0网卡的状态</span></div><div class="line">sudo dhclient wlan0</div><div class="line"><span class="comment">#sudo dhcpcd wlan0</span></div><div class="line"><span class="comment">#获取IP,现在就可以看是不是能上网了</span></div></pre></td></tr></table></figure>
</li>
<li><p>对于WEB加密的无线</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo iw dev wlan0 connect [网络 SSID] key 0:[WEP 密钥]</div></pre></td></tr></table></figure>
</li>
<li><p>对于没有密码的</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo iw dev wlan0 connect [网络 SSID]</div></pre></td></tr></table></figure>
</li>
</ol>
</li>
</ul>
<h4 id="遇见的问题"><a href="#遇见的问题" class="headerlink" title="遇见的问题"></a>遇见的问题</h4><ul>
<li>关于”opertion not possible due to RF-kill”问题<br>描述：遇见这个问题是我已经用命令行连接上了无线，然后重启打算再熟悉一遍的时候，启动网卡就报这个错误。<br>解决：<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo rfkill block all</div><div class="line"><span class="comment">#软件上关闭所有的(网卡、蓝牙、红外)</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul>
<li><a href="http://blog.csdn.net/odaynot/article/details/7667251" target="_blank" rel="external">点滴的blog</a></li>
<li><a href="http://www.ahlinux.com/ubuntu/21063.html" target="_blank" rel="external">Linux技术网</a></li>
<li><a href="https://linux.cn/article-4015-1.html" target="_blank" rel="external">Linux开源中文社区</a></li>
<li><a href="http://www.2cto.com/os/201210/160117.html" target="_blank" rel="external">红黑联盟</a></li>
<li><a href="http://tieba.baidu.com/p/2097205543" target="_blank" rel="external">Linux吧</a></li>
</ul>
<hr>
<p>以上，属于归纳整理</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[DNS端口使用解释]]></title>
      <url>http://arvon.top/2016/08/16/DNS%E7%AB%AF%E5%8F%A3%E4%BD%BF%E7%94%A8%E8%A7%A3%E9%87%8A/</url>
      <content type="html"><![CDATA[<p><strong>前言：</strong>我们公司有个面试题很有意思，DNS的默认查询端口是什么？可能大家都很熟悉dns使用53端口，那究竟是使用udp协议还是tcp协议呢，恩，我也不清楚，所以就看了个科普贴！<br><a id="more"></a></p>
<h3 id="DNS端口有TCP53和UDP53两个端口"><a href="#DNS端口有TCP53和UDP53两个端口" class="headerlink" title="DNS端口有TCP53和UDP53两个端口"></a>DNS端口有TCP53和UDP53两个端口</h3><p>DNS在进行区域传输的时候使用TCP协议，其他时候则使用UDP协议</p>
<h4 id="使用TCP53端口的情况"><a href="#使用TCP53端口的情况" class="headerlink" title="使用TCP53端口的情况"></a>使用TCP53端口的情况</h4><ul>
<li>区域传送时使用TCP，主要有一下两点考虑：<ol>
<li>辅域名服务器会定时（一般时3小时）向主域名服务器进行查询以便了解数据是否有变动。如有变动，则会执行一次区域传送，进行数据同步。区域传送将使用TCP而不是UDP，因为数据同步传送的数据量比一 个请求和应答的数据量要多得多</li>
<li>TCP是一种可靠的连接，保证了数据的准确性。</li>
</ol>
</li>
</ul>
<h4 id="使用UDP53端口的情况"><a href="#使用UDP53端口的情况" class="headerlink" title="使用UDP53端口的情况"></a>使用UDP53端口的情况</h4><ul>
<li>域名解析时使用UDP协议<ol>
<li>客户端向DNS服务器查询域名，一般返回的内容都不超过512字节，用UDP传输即可。不用经过TCP三次握手，这样DNS服务器负载更低，响应更快。虽然从理论上说，客户端也可以指定向DNS服务器查询的时候使用TCP，但事实上，很多DNS服务器进行配置的时候，仅支持UDP查询包。</li>
<li>使用TCP的情况非常罕见，神秘兮兮。其实当解析器发出一个request后，返回的response中的tc删节标志比特位被置1时，说明反馈报文因为超长而有删节。这是因为UDP的报文最大长度为512字节。解析器发现后，将使用TCP重发request，TCP允许报文长度超过512字节。既然TCP能将data stream分成多个segment，它就能用更多的segment来传送任意长度的数据。</li>
</ol>
</li>
<li>为什么既使用UDP协议又使用TCP协议<ol>
<li>TCP与UDP传送字节的长度限制：UDP报文的最大长度为512字节，而TCP则允许报文长度超过512字节。当DNS查询超过512字节时，协议的TC标志出现删除标志，这时则使用TCP发送。通常传统的UDP报文一般不会大于512字节。</li>
</ol>
</li>
</ul>
<h3 id="TCP和UDP连接的简单区别说明"><a href="#TCP和UDP连接的简单区别说明" class="headerlink" title="TCP和UDP连接的简单区别说明"></a>TCP和UDP连接的简单区别说明</h3><p> TCP是一种面向连接的协议，提供可靠的数据传输，一般服务质量要求比较高的情况，使用这个协议。UDP—用户数据报协议，是一种无连接的传输层协议，提供面向事务的简单不可靠信息传送服务。</p>
<h4 id="TCP与UDP的区别"><a href="#TCP与UDP的区别" class="headerlink" title="TCP与UDP的区别"></a>TCP与UDP的区别</h4><ol>
<li>UDP和TCP协议的主要区别是两者在如何实现信息的可靠传递方面不同。TCP协议中包含了专门的传递保证机制，当数据接收方收到发送方传来的信息时，会自动向发送方发出确认消息；发送方只有在接收到该确认消息之后才继续传送其它信息，否则将一直等待直到收到确认信息为止。 与TCP不同，UDP协议并不提供数据传送的保证机制。如果在从发送方到接收方的传递过程中出现数据报的丢失，协议本身并不能做出任何检测或提示。因此，通常人们把UDP协议称为不可靠的传输协议。相对于TCP协议，UDP协议的另外一个不同之处在于如何接收突发性的多个数据报。不同于TCP，UDP并不能确保数据的发送和接收顺序。事实上，UDP协议的这种乱序性基本上很少出现，通常只会在网络非常拥挤的情况下才有可能发生。</li>
<li>既然UDP是一种不可靠的网络协议，那么还有什么使用价值或必要呢？其实不然，在有些情况下UDP协议可能会变得非常有用。因为UDP具有TCP所望尘莫及的速度优势。虽然TCP协议中植入了各种安全保障功能，但是在实际执行的过程中会占用大量的系统开销，无疑使速度受到严重的影响。反观UDP由于排除了信息可靠传递机制，将安全和排序等功能移交给上层应用来完成，极大降低了执行时间，使速度得到了保证。</li>
<li>DNS的规范规定了2种类型的DNS服务器，一个叫主DNS服务器，一个叫辅助DNS服务器。在一个区中主DNS服务器从自己本机的数据文件中读取该区的DNS数据信息，而辅助DNS服务器则从区的主DNS服务器中读取该区的DNS数据信息。当一个辅助DNS服务器启动时，它需要与主DNS服务器通信，并加载数据信息，这就叫做区传送（zone transfer）。</li>
</ol>
<hr>
<p>以上，致谢<a href="http://bbs.51cto.com/thread-1010537-1.html" target="_blank" rel="external">bbs版主小侠唐在飞</a>,以上内容均由bbs内容整理而来</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[hexo之Next主题设置]]></title>
      <url>http://arvon.top/2016/08/15/hexo%E4%B9%8BNext%E4%B8%BB%E9%A2%98%E5%A4%B4%E5%83%8F%E8%AE%BE%E7%BD%AE/</url>
      <content type="html"><![CDATA[<p><strong>摘要：</strong>使用Next主题搭建了博客，虽然说头像什么的都是浮云，但是没有还是略显不爽，但恕我愚昧只按照<a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="external">Next官方文档</a>没弄出来，官方写的太简略了，记录一下较为详细的步骤。<br>更新：打赏<br>更新：站内搜索</p>
<a id="more"></a>
<h3 id="设置头像"><a href="#设置头像" class="headerlink" title="设置头像"></a>设置头像</h3><p>这个头像就是站内侧边栏上那个头像</p>
<ul>
<li>第一步找个jpg图片</li>
<li><p>将图片放到站点配置目录images目录下（并没有规定非放在这）</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#我图片放的路径</span></div><div class="line">themes/next/<span class="built_in">source</span>/images/suolong.jpg</div></pre></td></tr></table></figure>
</li>
<li><p>修改主题配置文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#vim themes/next/_config.yml</span></div><div class="line"><span class="comment">#在任意位置添加如下内容</span></div><div class="line">avatar: images/suolong.jpg</div></pre></td></tr></table></figure>
</li>
<li><p>完成（hexo s测试）</p>
</li>
</ul>
<h3 id="设置网站logo"><a href="#设置网站logo" class="headerlink" title="设置网站logo"></a>设置网站logo</h3><p>也就是浏览器标签上的显示图标,这个图片是有要求的，可以使用在线工具生成。</p>
<ul>
<li><p>图片位置</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">themes/next/<span class="built_in">source</span>/images/favicon.ico</div></pre></td></tr></table></figure>
</li>
<li><p>修改站点配置文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#vim themes/next/_config.yml</span></div><div class="line">favicon: images/favicon.ico</div></pre></td></tr></table></figure>
</li>
<li><p>完成（测试即可）</p>
</li>
</ul>
<h3 id="打赏功能"><a href="#打赏功能" class="headerlink" title="打赏功能"></a>打赏功能</h3><p>如果url的话很简单，直接参照<a href="http://theme-next.iissnan.com/theme-settings.html#reward" target="_blank" rel="external">官网</a>就可以,对于不使用外链，图片放本地的话需要注意下路径</p>
<ul>
<li><p>图片位置</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">themes/next/<span class="built_in">source</span>/images/uploads/zhipay.jpg</div><div class="line">themes/next/<span class="built_in">source</span>/images/uploads/weipay.jpg</div></pre></td></tr></table></figure>
</li>
<li><p>修改主题配置文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#vim themes/next/_config.yml</span></div><div class="line"><span class="comment">#使用外链的话很简单，如下，直接写外链地址就可以了</span></div><div class="line"><span class="comment">#wechatpay: http://i2.piimg.com/517630/8ef419c517319dd1.jpg</span></div><div class="line"><span class="comment">#alipay: http://i2.piimg.com/517630/cac5f15767848576.jpg</span></div><div class="line">alipay: /images/uploads/zhipay.jpg</div><div class="line">wechatpay: /images/uploads/weipay.jpg</div></pre></td></tr></table></figure>
</li>
<li><p>好了，配置完成</p>
</li>
</ul>
<h3 id="站内搜索"><a href="#站内搜索" class="headerlink" title="站内搜索"></a>站内搜索</h3><ul>
<li><p>安装sitemap</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-generator-search --save</div></pre></td></tr></table></figure>
</li>
<li><p>修改站点配置文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">search:</div><div class="line">    path: sitemap.xml</div><div class="line">        field: post</div></pre></td></tr></table></figure>
</li>
<li><p>修改localsearch文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#vim themes/next/layout/_partials/search/localsearch.swig</span></div><div class="line"><span class="comment">#修改如下：</span></div><div class="line">&lt;div class=<span class="string">"popup"</span>&gt;</div><div class="line">&lt;span class=<span class="string">"search-icon fa fa-search"</span>&gt;&lt;/span&gt;</div><div class="line">&lt;input <span class="built_in">type</span>=<span class="string">"text"</span> id=<span class="string">"local-search-input"</span> placeholder=<span class="string">"search my blog..."</span>&gt;</div><div class="line">&lt;div id=<span class="string">"local-search-result"</span>&gt;&lt;/div&gt;</div><div class="line">&lt;span class=<span class="string">"popup-btn-close"</span>&gt;close&lt;/span&gt;</div><div class="line">&lt;/div&gt;</div><div class="line"><span class="comment">#原文件如下：</span></div><div class="line">&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line">   var search_path = <span class="string">"&lt;%= config.search.path %&gt;"</span>;</div><div class="line">   <span class="keyword">if</span> (search_path.length == 0) &#123;</div><div class="line">       search_path = <span class="string">"search.xml"</span>;</div><div class="line">   &#125;</div><div class="line">   var path = <span class="string">"&lt;%= config.root %&gt;"</span> + search_path;</div><div class="line">   searchFunc(path, <span class="string">'local-search-input'</span>, <span class="string">'local-search-result'</span>);</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>站内搜索完成</p>
</li>
</ul>
<hr>
<p>以上</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[8月读书计划]]></title>
      <url>http://arvon.top/2016/08/13/8%E6%9C%88%E8%AF%BB%E4%B9%A6%E8%AE%A1%E5%88%92/</url>
      <content type="html"><![CDATA[<p><img src="http://oqfz9mxmq.bkt.clouddn.com/20160813-augustread-1.jpg" alt="20160813-augustread-1"><br>前天入了三本图灵的图解系列丛书，要计划读一下，这里做个记录。</p>
<h3 id="书单"><a href="#书单" class="headerlink" title="书单"></a>书单</h3><ul>
<li><a href="https://www.amazon.cn/%E5%9B%BE%E8%A7%A3%E7%BD%91%E7%BB%9C%E7%A1%AC%E4%BB%B6-%E4%B8%89%E8%BD%AE%E8%B4%A4%E4%B8%80/dp/B00LZZADJC/ref=pd_bxgy_14_img_3?ie=UTF8&amp;psc=1&amp;refRID=F6ZZB1SS4HR0R286HEJA" target="_blank" rel="external">图解网络硬件</a></li>
<li><a href="https://www.amazon.cn/%E5%9B%BE%E7%81%B5%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E4%B8%9B%E4%B9%A6-%E5%9B%BE%E8%A7%A3TCP-IP-%E7%AB%B9%E4%B8%8B%E9%9A%86%E5%8F%B2/dp/B00DMS9990/ref=sr_1_1?ie=UTF8&amp;qid=1471020135&amp;sr=8-1&amp;keywords=%E5%9B%BE%E8%A7%A3tcp+ip" target="_blank" rel="external">图解tcp/ip</a></li>
<li><a href="https://www.amazon.cn/%E5%9B%BE%E7%81%B5%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E4%B8%9B%E4%B9%A6-%E5%9B%BE%E8%A7%A3HTTP-%E4%B8%8A%E9%87%8E%E5%AE%A3/dp/B00JTQK1L4/ref=pd_bxgy_14_img_3?ie=UTF8&amp;psc=1&amp;refRID=X611PHYM2A37XZX7CZZW" target="_blank" rel="external">图解http</a><a id="more"></a>
</li>
</ul>
<h3 id="为什么读"><a href="#为什么读" class="headerlink" title="为什么读"></a>为什么读</h3><ul>
<li>抓包分析能力是我之前就想学习的技能，但是苦于对协议什么的理解的不够系统，没有完善的知识体系所以心有余而力不足，刚好看到这个系列介绍协议的书就想买了看看，看过之后就可以研读我另外两本关于网络分析的书了。</li>
</ul>
<h3 id="网络分析读书清单"><a href="#网络分析读书清单" class="headerlink" title="网络分析读书清单"></a>网络分析读书清单</h3><ul>
<li><a href="https://www.amazon.cn/Wireshark%E7%BD%91%E7%BB%9C%E5%88%86%E6%9E%90%E7%9A%84%E8%89%BA%E6%9C%AF-%E6%9E%97%E6%B2%9B%E6%BB%A1/dp/B01AS1OS8A/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1471020453&amp;sr=1-1&amp;keywords=wireshark" target="_blank" rel="external">wireshark网络分析的艺术</a></li>
<li><a href="http://item.jd.com/10067343.html" target="_blank" rel="external">实用网络流量分析技术</a></li>
</ul>
<h3 id="关于blog"><a href="#关于blog" class="headerlink" title="关于blog"></a>关于blog</h3><p>读书和写blog这两个是应该坚持的，应该养成记录技术问题的习惯，以后尽量加大blog更新的频率，该做的实验还是要积极去实践和记录的</p>
<hr>
<p>以上</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Git钩子在hexo中的应用]]></title>
      <url>http://arvon.top/2016/08/12/Git%E9%92%A9%E5%AD%90%E5%9C%A8hexo%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/</url>
      <content type="html"><![CDATA[<p><strong>摘要：</strong>早该记录了，最开始我的blog是使用hexo+github搭建的使用jacman主题，也是因为对git不够了解，当时绑定域名是使用直接在github上写CNAME文件。感觉太麻烦了，就买了空间换了WordPress，wp也是用了要有快一年，然后感觉markdown支持的真是不好，而且迁移很不爽，然后就换了现在的。关于现在这套blog架构，依然使用hexo作为blog框架，我自己的电脑用作服务器，然后VPS作为web服务器提供发布，使用git hook进行更新blog。</p>
<h3 id="git钩子简介-–摘自git-scm"><a href="#git钩子简介-–摘自git-scm" class="headerlink" title="git钩子简介 –摘自git-scm"></a>git钩子简介 –摘自<a href="https://git-scm.com/book/zh/v2/%E8%87%AA%E5%AE%9A%E4%B9%89-Git-Git-%E9%92%A9%E5%AD%90" target="_blank" rel="external">git-scm</a></h3><p>Git 能在特定的重要动作发生时触发自定义脚本。 有两组这样的钩子：客户端的和服务器端的。 客户端钩子由诸如提交和合并这样的操作所调用，而服务器端钩子作用于诸如接收被推送的提交这样的联网操作。 你可以随心所欲地运用这些钩子。</p>
<a id="more"></a>
<h4 id="git-hook概述"><a href="#git-hook概述" class="headerlink" title="git hook概述"></a>git hook概述</h4><p>钩子都被存储在 Git 目录下的 hooks 子目录中。 也即绝大部分项目中的 .git/hooks 。 当你用 git init 初始化一个新版本库时，Git 默认会在这个目录中放置一些示例脚本。这些脚本除了本身可以被调用外，它们还透露了被触发时所传入的参数。 所有的示例都是 shell 脚本，其中一些还混杂了 Perl 代码，不过，任何正确命名的可执行脚本都可以正常使用 —— 你可以用 Ruby 或 Python，或其它语言编写它们。 这些示例的名字都是以 .sample 结尾，如果你想启用它们，得先移除这个后缀。把一个正确命名且可执行的文件放入 Git 目录下的 hooks 子目录中，即可激活该钩子脚本。 这样一来，它就能被 Git 调用。Git Hooks 就是一些触发特定事件的脚本。比如 commit、push、merge 等等，也区分本地 Hooks 和服务端 Hooks。</p>
<h4 id="使用post-reveive"><a href="#使用post-reveive" class="headerlink" title="使用post-reveive"></a>使用post-reveive</h4><p>当用户在本地仓库执行git-push命令时，服务器上远程仓库就会对应执行git-receive-pack命令，而git-receive-pack命令会调用pre-receive钩子。使用git部署时的流程：本地git-push –&gt; VPS上Git服务器更新并Hook –&gt;VPS上执行pre-receive脚本，同步到服务器本地仓库目录</p>
<h3 id="git部署blog过程记录"><a href="#git部署blog过程记录" class="headerlink" title="git部署blog过程记录"></a>git部署blog过程记录</h3><h4 id="VPS安装git"><a href="#VPS安装git" class="headerlink" title="VPS安装git"></a>VPS安装git</h4><ul>
<li>安装初始化<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">yum install git-core -y</div><div class="line">adduser git-blog</div><div class="line"><span class="built_in">cd</span> /home/git-blog</div><div class="line">git init --bare blog.git</div><div class="line"><span class="comment">#使用--bare参数是创建一个裸仓库，没有工作区，这里不再裸仓库进行操作，只为共享而存在</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="创建信任"><a href="#创建信任" class="headerlink" title="创建信任"></a>创建信任</h4><ul>
<li>创建从我本机到VPS上git-blog用户的信任<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ssh-copy-id git-blog@VPShost</div><div class="line"><span class="comment">#就是把~/.ssh/id_rsa.pub中的内容添加到VPS主机上~/.ssh/authorized_keys文件中</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="本地配置git发布"><a href="#本地配置git发布" class="headerlink" title="本地配置git发布"></a>本地配置git发布</h4><ul>
<li>Hexo主配置文件_config.yml如下<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line"> <span class="built_in">type</span>: git</div><div class="line"> message: Arvon</div><div class="line"> repo: ssh://git-blog@blog.arvon.top:12345/home/arvon/blog.git</div><div class="line"> <span class="comment">#repo: git-blog@blog.arvon.top:/home/arvon/blog.git</span></div><div class="line"> branch: master</div><div class="line"><span class="comment">#注意的地方，搬来repo那是直接写主机地址就可以了但是，我这主机ssh端口不是默认端口所以就需要写成ssh的形式。</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="服务器配置git-hook"><a href="#服务器配置git-hook" class="headerlink" title="服务器配置git hook"></a>服务器配置git hook</h4><ul>
<li>编辑blog.git/hooks下新建post-receive文件，内容如下<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/sh</span></div><div class="line">git --work-tree=/usr/nginx/html/myblog --git-dir=/home/git-blog/blog.git checkout <span class="_">-f</span></div><div class="line"><span class="comment">#这个意思是发布的内容推送到/usr/nginx/html/myblog目录下</span></div><div class="line"><span class="comment">#别忘了 chmod +x post-receive</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h4><ul>
<li><p>本地操作</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git new <span class="string">"test"</span></div><div class="line">git g <span class="_">-d</span></div></pre></td></tr></table></figure>
</li>
<li><p>参考文档<br><a href="http://www.swiftyper.com/2016/04/17/deploy-hexo-with-git-hook/" target="_blank" rel="external">swiftyper的blog</a><br><a href="http://www.imys.net/20160303/hexo-nginx-auto-deploy.html" target="_blank" rel="external">imys的blog</a></p>
</li>
<li>之前关于hexo的文章<br><a href="http://arvon.top/2015/07/23/Linux%E4%B8%8Bhexo%E9%85%8D%E7%BD%AE/">linux下hexo配置</a><br><a href="http://arvon.top/2015/07/20/Hexo%E7%AE%80%E6%98%8E/">hexo简明</a><br><a href="http://arvon.top/2015/07/17/%E4%BD%BF%E7%94%A8Hexo%E5%92%8CGithub%E6%90%AD%E5%BB%BABlog/">使用Hexo和Github搭建Blog</a></li>
</ul>
<hr>
<p>ok,以上，以后还会补充git的东西</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Tmux源码安装]]></title>
      <url>http://arvon.top/2016/08/12/Tmux%E6%BA%90%E7%A0%81%E5%AE%89%E8%A3%85/</url>
      <content type="html"><![CDATA[<p><strong>简述：</strong>之前其实有写过<a href="http://arvon.top/2015/07/22/Tmux-%E4%BD%BF%E7%94%A8%E7%AE%80%E8%AE%B0/">一篇tmux的简单使用绍</a>,但是不够详尽，而且当时也并没有出现几个问题，当yum不好使的时候，就要上源码了。</p>
<a id="more"></a>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>tmux依赖于ncurses-devel和libevent。所以要先安装ncurses-devel，然后libevent，然后tmux</p>
<h4 id="关于libevent库"><a href="#关于libevent库" class="headerlink" title="关于libevent库"></a>关于libevent库</h4><ul>
<li><p>先装开发库</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install gcc kernel-devel make ncurses-devel</div></pre></td></tr></table></figure>
</li>
<li><p>安装libevent库</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">wget https://github.com/downloads/libevent/libevent/libevent-2.0.21-stable.tar.gz</div><div class="line">tar xvf libevent-2.0.21-stable.tar.gz</div><div class="line">cd libevent-2.0.21-stable</div><div class="line">./configure</div><div class="line">make &amp;&amp; make install</div><div class="line"><span class="meta">#</span><span class="bash">注意了，有个坑，这时libevent并咩有安装在默认路径，所以会报错的，因此需要做个软链或者直接cp一份到默认路径，我的环境是CentOS6.7—x64的，所以就放到/usr/lib64下面</span></div><div class="line">cp libevent-2.0.21-stable/.libs/libevent-2.0.so.5 /usr/lib64/</div><div class="line"><span class="meta">#</span><span class="bash">顺便贴一句报错--&gt;tmux: error <span class="keyword">while</span> loading shared libraries: libevent-2.0.so.5: cannot open shared object file: No such file or directory</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="关于tmux源码"><a href="#关于tmux源码" class="headerlink" title="关于tmux源码"></a>关于tmux源码</h4><p>现在装tmux就比较顺滑了</p>
<ul>
<li>下载tmux源码，方式有多种（tmux、curl、git均可）<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#这里我使用了2.0版本</span></div><div class="line">wget https://github.com/tmux/tmux/releases/download/2.0/tmux-2.0.tar.gz</div><div class="line"><span class="comment">#curl -OL http://downloads.sourceforge.net/tmux/tmux-1.9a.tar.gz</span></div><div class="line"><span class="comment">#git clone git://git.code.sf.net/p/tmux/tmux-code</span></div><div class="line"><span class="comment">#根据下载源码具体情况安装</span></div><div class="line">tar xvf tmux-2.0.tar.gz</div><div class="line"><span class="built_in">cd</span> tmux-2.0</div><div class="line">./configure</div><div class="line">make &amp;&amp; make install</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p>ok, 开始愉快的使用吧,简单使用命令参照我之前的那一篇就可以<br><a href="https://tmux.github.io/" target="_blank" rel="external">Tmux官方</a><br><a href="http://cenalulu.github.io/linux/tmux/" target="_blank" rel="external">很好的普及文章</a><br><a href="https://gist.github.com/rothgar/cecfbd74597cc35a6018" target="_blank" rel="external">本篇参考</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[sort小插曲]]></title>
      <url>http://arvon.top/2016/08/11/sort%E5%B0%8F%E6%8F%92%E6%9B%B2/</url>
      <content type="html"><![CDATA[<p><strong>Tips:</strong>遇见一个有趣的sort命令问题，很有意思，这里记录一下，顺便也再复习一下sort命令。</p>
<a id="more"></a>
<h4 id="有意思的例子"><a href="#有意思的例子" class="headerlink" title="有意思的例子"></a>有意思的例子</h4><ul>
<li><p>要求：将以下文本_按字母排序，_和-之间的按数字升序，-之后的按数字降序排列,不能破坏原本每行的数据，只对上下顺序排列.</p>
<ul>
<li>文本sort.txt如下<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">def_99-55</div><div class="line">def_99-11</div><div class="line">def_123-100</div><div class="line">abc_456-100</div><div class="line">abc_123-100</div><div class="line">def_123-10</div><div class="line">abc_456-10</div><div class="line">abc_123-1</div><div class="line">xzy_789-0</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>解答</p>
<ul>
<li>脚本如下<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">cat sort.txt |sed s/_/-/ |sort -t<span class="string">"-"</span> -k1,1 -k2,2n -k3,3nr |sed s/-/_/</div><div class="line"><span class="comment">#说明：先将分隔符替换为统一，然后以-为分割符对第一字段按基础排序，第二字段按数字排序，第三字段按数字降序排序</span></div><div class="line"><span class="comment">#-k1,1这种表达方式是只对本域进行排序是最准确的表达,类似还有-k1.2,1.2表示仅对第一列第二个字符排序，1,1这种表达表示的是一个完整域，如果直接写-k1那就表示从1到最后一个域，这样表述的是不准确的</span></div><div class="line"><span class="comment">#输出如下</span></div><div class="line">abc_123-100</div><div class="line">abc_123-1</div><div class="line">abc_456-100</div><div class="line">abc_456-10</div><div class="line">def_99-55</div><div class="line">def_99-11</div><div class="line">def_123-100</div><div class="line">def_123-10</div><div class="line">xzy_789-0</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h4 id="sort命令回顾"><a href="#sort命令回顾" class="headerlink" title="sort命令回顾"></a>sort命令回顾</h4><ul>
<li><p>基础选项</p>
<ul>
<li>常规选项(参考:<a href="http://man.linuxde.net/sort" target="_blank" rel="external">http://man.linuxde.net/sort</a>)<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#usage: sort [选项] [参数]</span></div><div class="line">-b：忽略每行前面开始出的空格字符；</div><div class="line">-c：检查文件是否已经按照顺序排序；</div><div class="line"><span class="_">-d</span>：排序时，处理英文字母、数字及空格字符外，忽略其他的字符；</div><div class="line"><span class="_">-f</span>：排序时，将小写字母视为大写字母；</div><div class="line">-i：排序时，除了040至176之间的ASCII字符外，忽略其他的字符；</div><div class="line">-m：将几个排序号的文件进行合并；</div><div class="line">-M：将前面3个字母依照月份的缩写进行排序；</div><div class="line">-n：依照数值的大小排序；</div><div class="line">-o&lt;输出文件&gt;：将排序后的结果存入制定的文件；</div><div class="line">-r：以相反的顺序来排序；</div><div class="line">-t&lt;分隔字符&gt;：指定排序时所用的栏位分隔字符；</div><div class="line">+&lt;起始栏位&gt;-&lt;结束栏位&gt;：以指定的栏位来排序，范围由起始栏位到结束栏位的前一栏位</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>关于古老的+-选定域的说明<br>sort官方有如下说明(摘自<a href="http://www.cnblogs.com/51linux/archive/2012/05/23/2515299.html" target="_blank" rel="external">孙愚的博客</a>)</p>
<blockquote>
<p>On older systems, <code>sort’ supports an obsolete origin-zero syntax</code>+POS1 [-POS2]‘ for specifying sort keys.    POSIX 1003.1-2001 (*note Standards conformance::) does not allow this; use `-k’ instead.<br>原来，这种古老的表示方式已经被淘汰了，以后可以理直气壮的鄙视使用这种表示方法的脚本喽！<br>（为了防止古老脚本的存在，在这再说一下这种表示方法，加号表示Start部分，减号表示End部分。最最重要的一点是，这种方式方法是从0开始计数的，  以前所说的第一个域，在此被表示为第0个域。以前的第2个字符，在此表示为第1个字符</p>
</blockquote>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ssh无交互批量认证]]></title>
      <url>http://arvon.top/2016/08/08/ssh%E6%97%A0%E4%BA%A4%E4%BA%92%E6%89%B9%E9%87%8F%E8%AE%A4%E8%AF%81/</url>
      <content type="html"><![CDATA[<p><strong><em>Tips:</em></strong>在使用ansible部署服务器的时候，部署机需要先做好和其他服务器的免密码登陆，如果一台一台手动执行那就太low了，所以就需要脚本来批量完成这些繁琐的工作，下面是我写的脚本，主要使用了expect这个工具。</p>
<a id="more"></a>
<h3 id="expect介绍"><a href="#expect介绍" class="headerlink" title="expect介绍"></a>expect介绍</h3><ul>
<li>expect是用于提供自动交互的工具，它可以控制处理输入和输出流，然后提供自动填写数据等功能（主要就是替代原本需要人机交互需要做的事情）</li>
<li>expect采用tcl(Tool Command Language)的脚本语言</li>
</ul>
<h3 id="脚本实例（自用脚本可随意参考）"><a href="#脚本实例（自用脚本可随意参考）" class="headerlink" title="脚本实例（自用脚本可随意参考）"></a>脚本实例（自用脚本可随意参考）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/usr/bin/sh</span></div><div class="line"><span class="comment">###############################################################################</span></div><div class="line"><span class="comment">#Author: arvon</span></div><div class="line"><span class="comment">#Email: yafeng2011@126.com</span></div><div class="line"><span class="comment">#Blog: http://arvon.top/</span></div><div class="line"><span class="comment">#Date: 2016/08/08</span></div><div class="line"><span class="comment">#Filename: write_authorized_keys.sh</span></div><div class="line"><span class="comment">#Revision: 1.0</span></div><div class="line"><span class="comment">#License: GPL</span></div><div class="line"><span class="comment">#Description: auto write authorized to other server</span></div><div class="line"><span class="comment">#Notes:</span></div><div class="line"><span class="comment">###############################################################################</span></div><div class="line"><span class="comment">#vars</span></div><div class="line">username=<span class="string">'root'</span></div><div class="line">server_passwd=<span class="string">'arvon2014'</span></div><div class="line">IP_list=<span class="string">"</span></div><div class="line">172.17.18.61</div><div class="line">172.17.18.62</div><div class="line">172.17.18.63</div><div class="line">"</div><div class="line"><span class="comment">#functions</span></div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">Main</span></span>()&#123;</div><div class="line"><span class="comment">#install_expect_package</span></div><div class="line"><span class="comment">#create_ras_pub</span></div><div class="line">write_authorized_file</div><div class="line">&#125;</div><div class="line"><span class="comment">#install expect package</span></div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">install_expect_package</span></span>()&#123;</div><div class="line">yum install -y expect expect-devel</div><div class="line">&#125;</div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">create_rsa_pub</span></span>()&#123;</div><div class="line">expect -c <span class="string">"</span></div><div class="line">spawn ssh-keygen -t rsa</div><div class="line">  expect &#123;</div><div class="line">    \"*y/n*\" &#123;send \"y\r\"; exp_continue&#125;</div><div class="line">    \"*key*\" &#123;send \"\r\"; exp_continue&#125;</div><div class="line">    \"*passphrase*\" &#123;send \"\r\"; exp_continue&#125;</div><div class="line">    \"*again*\" &#123;send \"\r\";&#125;</div><div class="line">  &#125;"</div><div class="line">&#125;</div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">write_authorized_file</span></span>()&#123;</div><div class="line"><span class="keyword">for</span> each_ip <span class="keyword">in</span> <span class="variable">$&#123;IP_list&#125;</span>;<span class="keyword">do</span></div><div class="line">    expect -c <span class="string">"  </span></div><div class="line">    spawn ssh-copy-id <span class="variable">$&#123;username&#125;</span>@<span class="variable">$&#123;each_ip&#125;</span>  </div><div class="line">      expect &#123;  </div><div class="line">        \"*yes/no*\" &#123;send \"yes\r\"; exp_continue&#125;  </div><div class="line">        \"*password*\" &#123;send \"<span class="variable">$&#123;server_passwd&#125;</span>\r\"; exp_continue&#125;  </div><div class="line">        \"*Password*\" &#123;send \"<span class="variable">$&#123;server_passwd&#125;</span>\r\";&#125;  </div><div class="line">      &#125;  </div><div class="line">    "  </div><div class="line"><span class="keyword">done</span></div><div class="line">&#125;</div><div class="line"><span class="comment">#Main</span></div><div class="line">Main</div></pre></td></tr></table></figure>
<h3 id="参考地址"><a href="#参考地址" class="headerlink" title="参考地址"></a>参考地址</h3><p><a href="http://www.nist.gov/el/msid/expect.cfm" target="_blank" rel="external">1. Expect官方文档</a><br><a href="http://www.pythonclub.org/linux/expect" target="_blank" rel="external">2. python俱乐部</a><br><a href="http://blog.csdn.net/Beckham008/article/details/17258117" target="_blank" rel="external">3. Beckham008的blog</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Cassandra简单使用记录]]></title>
      <url>http://arvon.top/2016/08/06/Cassandra%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<p><strong>简述：</strong>在现在公司接触这个比较多，但是之前并不熟悉，所以需要简单记录下基础增删改查，以及简单介绍。我目前的理解就是这个nosql非常适合做集群，在吞吐量上应该远高于传统数据库。需要再以后工作学习中再深入了解，先简单记录一下吧。</p>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Apache Cassandra最初由Facebook创建，集Google BigTable的数据模型与Amazon Dynamo的完全分布式的架构于一身,是一个大规模可伸缩的开源NoSQL数据库。Cassandra完美地支持管理大量的结构化，半结构化和非结构化数据，且能够跨多个数据中心和云。Cassandra提供了持续可用性，线性扩展，操作简单，跨多个服务器而没有单点故障。且提供了一个有力的动态数据模型，支持最大的灵活性和快速响应。</p>
<a id="more"></a>
<h3 id="cql交互命令（类似sql）"><a href="#cql交互命令（类似sql）" class="headerlink" title="cql交互命令（类似sql）"></a>cql交互命令（类似sql）</h3><ol>
<li><p>运行cqlsh</p>
<ul>
<li>直接键入cqlsh命令即可，登陆后可使用help查看帮助<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/data/apps/opt/cassandra/bin/cqlsh ssy-db1</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>创建keyspace（秘钥空间）</p>
<ul>
<li><p>主要包括复制策略和durable_writes</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">cqlsh&gt;</span><span class="bash"> CREATE KEYSPACE <span class="string">"Test"</span></span></div><div class="line"><span class="meta">cqlsh&gt;</span><span class="bash"> WITH replication = &#123;<span class="string">'class'</span>:<span class="string">'SimpleStrategy'</span>, <span class="string">'replication_factor'</span> : 3&#125;;</span></div><div class="line"><span class="meta">#</span><span class="bash">创建名为Test的keyspace(默认创建时不区分大小写的，加上双引号就区分大小写了),采用simple存储策略，factor为存储策略的选项</span></div></pre></td></tr></table></figure>
</li>
<li><p>复制策略介绍</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">org.apache.cassandra.locator.SimpleStrategy</div><div class="line"><span class="meta">#</span><span class="bash">SimpleStrategy针对是一个data center中的多个存储节点(node)的存储，strategy_options表示数据存储所有存储节点(node)的复本数量，选择node的规则是在data center中按照顺时针的方向进行选择；</span></div><div class="line">org.apache.cassandra.locator.NetworkTopologyStrategy</div><div class="line"><span class="meta">#</span><span class="bash">NetworkTopologyStrategy是针对多个data center的情况进行处理，这个是以防同一个data center中的所以节点同时出现问题，如掉电；</span></div><div class="line">org.apache.cassandra.locator.OldNetworkTopologyStrategy</div><div class="line"><span class="meta">#</span><span class="bash">OldNetworkT opologyStrategy，这个可能会很少用上了，对data center的个数及复本的数量支持的有限，有了NetworkTopologyStrategy就不需要OldNetworkTopologyStrategy了。</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>删除keyspace</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">cqlsh&gt;</span><span class="bash"> drop keyspace <span class="string">"Test"</span></span></div></pre></td></tr></table></figure>
</li>
<li><p>修改keyspace参数信息</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">cqlsh&gt;</span><span class="bash"> ALTER KEYSPACE <span class="string">"Test"</span> WITH REPLICATION = &#123; <span class="string">'class'</span> : <span class="string">'SimpleStrategy'</span>, <span class="string">'replication_factor'</span> : 1 &#125;;</span></div><div class="line"><span class="meta">#</span><span class="bash">修改factor为1</span></div></pre></td></tr></table></figure>
</li>
<li><p>进入keyspace</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">cqlsh&gt;</span><span class="bash"> use <span class="string">"keyspace_name"</span>;</span></div></pre></td></tr></table></figure>
</li>
<li><p>查看</p>
<ul>
<li><p>查看keyspace</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">cqlsh&gt;</span><span class="bash"> SELECT * from system.schema_keyspaces;</span></div><div class="line"><span class="meta">cqlsh&gt;</span><span class="bash"> describe keyspaces;</span></div></pre></td></tr></table></figure>
</li>
<li><p>查看已有表</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">sqlsh&gt;</span><span class="bash"> describe tables;</span></div></pre></td></tr></table></figure>
</li>
<li><p>查看表结构</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">sqlsh&gt;</span><span class="bash"> use <span class="string">"keyspace_name"</span></span></div><div class="line"><span class="meta">sqlsh&gt;</span><span class="bash"> describe table <span class="string">"table_name"</span>;</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Zabbix添加自定义监控项]]></title>
      <url>http://arvon.top/2016/08/05/Zabbix%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9B%91%E6%8E%A7%E9%A1%B9/</url>
      <content type="html"><![CDATA[<p><em>Intorduction:</em> 最近一直有使用zabbix，根据需求需要自己手动监控一些服务，这时就需要自己动手自己写一些小脚本了，我这里写了一个比较简单的小脚本，主要用来监控monit监控的服务状态，听起来有些拗口，不过就是这样的。 这里尽可以详细的记录一下，哪里有不对欢迎指正</p>
<a id="more"></a>
<h3 id="部署思路"><a href="#部署思路" class="headerlink" title="部署思路"></a>部署思路</h3><ul>
<li>zabbix的server端我是直接写脚本安装的。先前blog有记录过。</li>
<li>zabbix的client端和监控脚本采用ansible直接推送和安装。（ansible的配置随后再记录）  <h3 id="配置调试"><a href="#配置调试" class="headerlink" title="配置调试"></a>配置调试</h3><h4 id="自定义脚本"><a href="#自定义脚本" class="headerlink" title="自定义脚本"></a>自定义脚本</h4></li>
<li><p>脚本如下</p>
  <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment">#########################################################################</span></div><div class="line"><span class="comment">#Author: arvon</span></div><div class="line"><span class="comment">#Email: guoyf@easemob.com</span></div><div class="line"><span class="comment">#Blog: arvon.top</span></div><div class="line"><span class="comment">#Date: 16/07/06</span></div><div class="line"><span class="comment">#Version: 1.0</span></div><div class="line"><span class="comment">#Todo: collect the monit summary process status send to zabbix server</span></div><div class="line"><span class="comment">##########################################################################</span></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> commands</div><div class="line">my_parameter = sys.argv[<span class="number">1</span>]</div><div class="line">total_msg = commands.getoutput(<span class="string">'monit summary'</span>)</div><div class="line">msg_list = total_msg.split(<span class="string">'\n'</span>)</div><div class="line">a = <span class="number">0</span></div><div class="line"><span class="keyword">for</span> each_line <span class="keyword">in</span> msg_list:</div><div class="line">    <span class="keyword">if</span> my_parameter <span class="keyword">in</span> each_line <span class="keyword">and</span> <span class="string">'Process'</span> <span class="keyword">in</span> each_line:</div><div class="line">        <span class="keyword">if</span> <span class="string">'Running'</span> <span class="keyword">in</span> each_line:</div><div class="line">            a = <span class="number">1</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            a = <span class="number">0</span></div><div class="line"><span class="keyword">print</span> a</div></pre></td></tr></table></figure>
</li>
<li><p>开启client端自定义脚本选项</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Include=/etc/zabbix/zabbix_agentd.d/  #在这个路径下可以放自己的配置文件</div><div class="line">UnsafeUserParameters=1 #就是这个参数1为打开，没有脚本的话打开这个会报错的</div></pre></td></tr></table></figure>
</li>
<li><p>配置文件说明<br>自定义在/etc/zabbix/zabbix_agentd.d/下的配置文件<br>里面主要有两个关键因素</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">UserParameter=process.msg.web #这个就是定义key名称的地方，但最好定义的规整一点，还有就是别和zabbix自带的key重复</div><div class="line">sudo python /etc/zabbix/scripts/get_monit_status.py "'nginx'"  #这个是Value，可以是脚本也可以是个命令什么，这里返回的值就是zabbixServer得到的值</div></pre></td></tr></table></figure>
</li>
<li><p>zabbix-get测试说明<br>zabbix-get是zabbix的排错工具，在server上安装执行最好，-s是指定主机，-k是指定要获取哪个key对应的值，这里返回的是1，是我想用1和0在web上方便使用布尔值对服务状态做判断</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Ansible根据excel自动生成inventory文件]]></title>
      <url>http://arvon.top/2016/08/05/Ansible%E6%A0%B9%E6%8D%AEexcel%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90inventory%E6%96%87%E4%BB%B6/</url>
      <content type="html"><![CDATA[<p>Tip: 根据excel表格手动写入inventory文件是个费时费力还容易出错的事情，这种事情本就应该使用脚本完成，刚好最近需要，然后就查阅文档，本来是想用shell的，毕竟相比python我还是对shell比较熟悉，奈何python的xlrd模块实在太合适所以就用python写了脚本（需要先安装xlrd模块）。<br>Update:现在不推荐使用xlrd模块了，原因是现在python3.0趋向于使用新模块openpyx，而且xlrd模块只是读取excel还需xlwd模块进行写入操作，不过现在这个模块已经支持不是很好了，我用pip没装上，所以现在使用openpyx模块，在<a href="http://arvon.top/2017/05/24/Jumpserver%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/">我博客Jumpserver</a>这篇文章里记录有这个模块的用法<br><a id="more"></a></p>
<h3 id="安装xlrd模块"><a href="#安装xlrd模块" class="headerlink" title="安装xlrd模块"></a>安装xlrd模块</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pip install xlrd</div><div class="line"><span class="meta">#</span><span class="bash">想源码安装参照https://pypi.python.org/pypi/xlrd/</span></div></pre></td></tr></table></figure>
<h3 id="Python脚本"><a href="#Python脚本" class="headerlink" title="Python脚本"></a>Python脚本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment"># -*- coding:utf-8 -*-</span></div><div class="line"><span class="comment">###############################################################################</span></div><div class="line"><span class="comment">#Author: arvon</span></div><div class="line"><span class="comment">#Email: yafeng2011@126.com</span></div><div class="line"><span class="comment">#Blog: http://arvon.top/</span></div><div class="line"><span class="comment">#Date: 2016/08/04</span></div><div class="line"><span class="comment">#Filename: excel_write_inventory.py</span></div><div class="line"><span class="comment">#Revision: 1.1</span></div><div class="line"><span class="comment">#License: GPL</span></div><div class="line"><span class="comment">#Description: use xlrd module auto create vars and file for ansible</span></div><div class="line"><span class="comment">#Notes:</span></div><div class="line"><span class="comment">###############################################################################</span></div><div class="line"><span class="keyword">from</span> xlrd <span class="keyword">import</span> open_workbook</div><div class="line"></div><div class="line"><span class="comment">#input vars</span></div><div class="line">excel_file = <span class="string">'test.xlsx'</span></div><div class="line"><span class="comment">#input the excel file path</span></div><div class="line">inventory_path = <span class="string">'./'</span></div><div class="line"><span class="comment">#input the inventory file dir path</span></div><div class="line">ops_dir_path = <span class="string">'you/ansible/path'</span></div><div class="line"><span class="comment">#input the ops-repo dir path</span></div><div class="line">inventory_file = <span class="string">'inventory.yml'</span></div><div class="line"><span class="comment">#input the ansible's inventory filename</span></div><div class="line">inventory_name = <span class="string">'ssy'</span></div><div class="line"></div><div class="line"><span class="comment">#define vars</span></div><div class="line">data = open_workbook(excel_file)</div><div class="line">table = data.sheets()[<span class="number">0</span>]</div><div class="line"><span class="comment">#open the excel first sheets</span></div><div class="line">nrows = table.nrows</div><div class="line"><span class="comment">#nrows is the tables line numbers</span></div><div class="line"></div><div class="line"><span class="comment">#functions</span></div><div class="line"><span class="comment">#write title to inventory file</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_title</span><span class="params">()</span>:</span></div><div class="line">    f = open(inventory_path + inventory_file, <span class="string">'w'</span>)</div><div class="line">    input_msg = \</div><div class="line"><span class="string">'''\</span></div><div class="line">hosts_ops_path: /data/ops-repo/</div><div class="line">inventory:</div><div class="line">  name: ssy</div><div class="line">  hosts:</div><div class="line">'''</div><div class="line">    f.write(<span class="string">'host_ops_path: '</span> + ops_dir_path + <span class="string">'\n'</span>)</div><div class="line">    f.write(<span class="string">'inventory:'</span> + <span class="string">'\n'</span>)</div><div class="line">    f.write(<span class="string">'  name: '</span> + inventory_name + <span class="string">'\n'</span>)</div><div class="line">    f.write(<span class="string">'  hosts:'</span> + <span class="string">'\n'</span>)</div><div class="line">    f.close</div><div class="line"><span class="comment">#write all hosts</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_hosts</span><span class="params">(row_num,host_name,group_name,host_num = <span class="number">1</span>)</span>:</span></div><div class="line">    <span class="keyword">for</span> each_line_num <span class="keyword">in</span> range(nrows):</div><div class="line">        each_line = table.row_values(each_line_num)</div><div class="line">        <span class="keyword">if</span> each_line[row_num] == <span class="number">1</span>:</div><div class="line">            f = open(inventory_path + inventory_file, <span class="string">'a'</span>)</div><div class="line">            f.write(<span class="string">'  - name: '</span>+ host_name + str(host_num) + <span class="string">'\n'</span>)</div><div class="line">            host_num = host_num + <span class="number">1</span></div><div class="line">            f.write(<span class="string">'    ip: '</span> + str(each_line[<span class="number">1</span>]) + <span class="string">'\n'</span>)</div><div class="line">            f.write(<span class="string">'    group: '</span>+ group_name + <span class="string">'\n'</span>)</div><div class="line">            f.write(<span class="string">"\n"</span>)</div><div class="line">            f.close</div><div class="line"><span class="comment">#use functions</span></div><div class="line">write_title()</div><div class="line">write_hosts(<span class="number">4</span>,<span class="string">'db'</span>,<span class="string">'dbserver'</span>)</div><div class="line">write_hosts(<span class="number">5</span>,<span class="string">'redis'</span>,<span class="string">'redis'</span>)</div><div class="line">write_hosts(<span class="number">6</span>,<span class="string">'zk'</span>,<span class="string">'zookeeper'</span>)</div><div class="line">write_hosts(<span class="number">7</span>,<span class="string">'kafka'</span>,<span class="string">'kafka'</span>)</div><div class="line">write_hosts(<span class="number">8</span>,<span class="string">'mysql'</span>,<span class="string">'mysql'</span>)</div><div class="line">write_hosts(<span class="number">9</span>,<span class="string">'rest'</span>,<span class="string">'rest'</span>)</div><div class="line">write_hosts(<span class="number">10</span>,<span class="string">'thrift'</span>,<span class="string">'thrift'</span>)</div><div class="line">write_hosts(<span class="number">11</span>,<span class="string">'push'</span>,<span class="string">'push'</span>)</div><div class="line">write_hosts(<span class="number">12</span>,<span class="string">'db-ejabberd'</span>,<span class="string">'ejabberd-db'</span>)</div><div class="line">write_hosts(<span class="number">13</span>,<span class="string">'conn-ejabberd'</span>,<span class="string">'ejabberd-conn'</span>)</div><div class="line">write_hosts(<span class="number">14</span>,<span class="string">'nginx'</span>,<span class="string">'nginx'</span>)</div><div class="line">write_hosts(<span class="number">15</span>,<span class="string">'web'</span>,<span class="string">'web'</span>)</div><div class="line">write_hosts(<span class="number">16</span>,<span class="string">'turn'</span>,<span class="string">'turn'</span>)</div><div class="line">write_hosts(<span class="number">17</span>,<span class="string">'media'</span>,<span class="string">'media'</span>)</div><div class="line">write_hosts(<span class="number">18</span>,<span class="string">'coference'</span>,<span class="string">'coference'</span>)</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[zabbix3.0配置文档]]></title>
      <url>http://arvon.top/2016/07/30/zabbix3.0%E9%85%8D%E7%BD%AE%E6%96%87%E6%A1%A3/</url>
      <content type="html"><![CDATA[<p> zabbix安装配置记录</p>
 <a id="more"></a>
<h3 id="Command-record"><a href="#Command-record" class="headerlink" title="Command record"></a>Command record</h3><ul>
<li><p>Yum Repo Install</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">The system Version is CentOS7.2</span></div><div class="line">wget http://repo.zabbix.com/zabbix/3.0/rhel/7/x86_64/zabbix-release-3.0-1.el7.noarch.rpm</div><div class="line">rpm -ivh  zabbix-release-3.0-1.el6.noarch.rpm</div></pre></td></tr></table></figure>
</li>
<li><p>LAMP Environment</p>
</li>
<li>Warning<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">iptables</span></div><div class="line">systemctl stop iptables</div><div class="line"><span class="meta">#</span><span class="bash">selinux</span></div><div class="line">setenforce 0</div><div class="line"><span class="meta">#</span><span class="bash">install lamp package</span></div><div class="line">yum install mysql mysql mysql-server php php-mysql httpd</div><div class="line"><span class="meta">#</span><span class="bash">Installed:</span></div><div class="line"><span class="meta">#</span><span class="bash">  mysql-community-client.x86_64 0:5.6.30-2.el6       mysql-community-libs.x86_64 0:5.6.30-2.el6         mysql-community-server.x86_64 0:5.6.30-2.el6       nginx.x86_64 1:1.6.3-8.el7       php.x86_64   0:5.4.16-36.1.el7_2.1       php-mysql.x86_64 0:5.4.16-36.1.el7_2.1      </span></div><div class="line">/etc/init.d/mysqld start</div><div class="line">mysqladmin password</div><div class="line">mysql -uroot -padmin -e "create database zabbix character set utf8;"</div><div class="line">mysql -uroot -padmin -e "grant all privileges on zabbix.* to zabbix@localhost identified by 'zabbix';"</div><div class="line">mysql -uroot -padmin -e "flush privileges;"</div><div class="line"><span class="meta">#</span><span class="bash">mysql -h<span class="variable">$zabbixIP</span> -uzabbix -pzabbix</span></div><div class="line">systemctl start httpd</div><div class="line">systemctl status httpd</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="Zabbix-Server"><a href="#Zabbix-Server" class="headerlink" title="Zabbix Server"></a>Zabbix Server</h4><ul>
<li><p>Zabbix Server Install</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">yum -y install zabbix-server-mysql zabbix-web-mysql zabbix-get</div><div class="line"><span class="meta">#</span><span class="bash">Installed:</span></div><div class="line"><span class="meta">#</span><span class="bash">  zabbix-get.x86_64 0:3.0.3-1.el7                                                       zabbix-server-mysql.x86_64 0:3.0.3-1.el7                                                       zabbix-web-mysql.noarch 0:3.0.3-1.el7                </span></div><div class="line">cd /usr/share/doc/zabbix-server-mysql-3.0.3/</div><div class="line">zcat create.sql.gz | mysql -uroot -padmin zabbix</div></pre></td></tr></table></figure>
</li>
<li><p>Zabbix Modify config</p>
</li>
<li><p>zabbix_server.conf</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">cat /etc/zabbix/zabbix_server.conf | egrep -v <span class="string">"^#|^$"</span></span></div><div class="line">LogFile=/var/log/zabbix/zabbix_server.log</div><div class="line">LogFileSize=0</div><div class="line">PidFile=/var/run/zabbix/zabbix_server.pid</div><div class="line">DBHost=localhost</div><div class="line">DBName=zabbix</div><div class="line">DBUser=zabbix</div><div class="line">DBPassword=zabbix</div><div class="line">SNMPTrapperFile=/var/log/snmptrap/snmptrap.log</div><div class="line">Timeout=4</div><div class="line">AlertScriptsPath=/usr/lib/zabbix/alertscripts</div><div class="line">ExternalScripts=/usr/lib/zabbix/externalscripts</div><div class="line">LogSlowQueries=3000</div></pre></td></tr></table></figure>
</li>
<li><p>zabbix_config</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">vim /etc/httpd/conf.d/zabbix.conf</span></div><div class="line">  &lt;IfModule mod_php5.c&gt;</div><div class="line">      php_value max_execution_time 300</div><div class="line">      php_value memory_limit 128M</div><div class="line">      php_value post_max_size 16M</div><div class="line">      php_value upload_max_filesize 2M</div><div class="line">      php_value max_input_time 300</div><div class="line">      php_value always_populate_raw_post_data -1</div><div class="line">      php_value date.timezone Asia/Chongqing</div><div class="line">  &lt;/IfModule&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>Start Zabbix</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">systemctl enable zabbix-server</div><div class="line">systemctl start zabbix-server</div></pre></td></tr></table></figure>
</li>
<li><p>Zabbix Web Install</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">Use Web Access: http://<span class="variable">$IPADDRESS</span>/zabbix/setup.php</span></div><div class="line"><span class="meta">#</span><span class="bash">Mdodify Parameter Base： https://www.zabbix.com/documentation/3.0/manual/installation/install_from_packages</span></div><div class="line"><span class="meta">#</span><span class="bash">The web Default Name/Password is Admin/zabbix</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="Zabbix-Agent"><a href="#Zabbix-Agent" class="headerlink" title="Zabbix Agent"></a>Zabbix Agent</h4><ul>
<li><p>Install</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install zabbix zabbix-agent</div></pre></td></tr></table></figure>
</li>
<li><p>Modify config</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">PidFile=/var/run/zabbix/zabbix_agentd.pid</div><div class="line">LogFile=/var/log/zabbix/zabbix_agentd.log</div><div class="line">LogFileSize=0</div><div class="line">Server=127.0.0.1,172.17.18.64   #Add the agent IP</div><div class="line">ServerActive=172.17.18.64   #Modify</div><div class="line">Hostname=Zabbix server</div><div class="line">Include=/etc/zabbix/zabbix_agentd.d/</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[grep命令]]></title>
      <url>http://arvon.top/2016/07/15/grep%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<p>Tips：很有用的几个选项</p>
<h3 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h3><ul>
<li>定向匹配&amp;忽略大小写<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">-B</span></div><div class="line">grep -B 5 part filename #显示filename中匹配part的前5行</div><div class="line"><span class="meta">#</span><span class="bash">-A</span></div><div class="line">grep -A 5 part filename #显示filename中匹配part的后5行</div><div class="line"><span class="meta">#</span><span class="bash">-C</span></div><div class="line">grep -C 5 part filename #显示filename中匹配part的前后5行</div><div class="line"><span class="meta">#</span><span class="bash">-i</span></div><div class="line">grep -i part filename #匹配filename中的part不区分大小写</div></pre></td></tr></table></figure>
</li>
</ul>
<a id="more"></a>
<ul>
<li><p>反选匹配</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">-v</span></div><div class="line">egrep -v "^#|^$" filename #不显示filename中的空行和开头#的注释行，显示其余内容</div></pre></td></tr></table></figure>
</li>
<li><p>计数匹配</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">grep -c part filename #显示匹配到part的行数</div></pre></td></tr></table></figure>
</li>
<li><p>显示文件名匹配</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">-H</span></div><div class="line">grep part -H somefile #显示一群文件中含有part的文件名并显示匹配项相关</div><div class="line"><span class="meta">#</span><span class="bash"><span class="_">-l</span></span></div><div class="line">grep part -l somefile #只显示含有匹配项的文件名</div></pre></td></tr></table></figure>
</li>
<li><p>其他选项</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">-s或--no-messages   不显示错误信息。</div><div class="line">-w或--word-regexp   只显示全字符合的列。</div><div class="line">-x或--line-regexp   只显示全列符合的列。</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="帮助"><a href="#帮助" class="headerlink" title="帮助"></a>帮助</h3><ul>
<li>其他遗漏选项参考帮助文档 –help</li>
<li>参考<a href="http://vbird.dic.ksu.edu.tw/linux_basic/0330regularex_2.php" target="_blank" rel="external">鸟哥文档</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CentOS搭建rsync服务]]></title>
      <url>http://arvon.top/2016/04/11/CentOS%E6%90%AD%E5%BB%BArsync%E6%9C%8D%E5%8A%A1/</url>
      <content type="html"><![CDATA[<p>更新：本篇选择独立启动模式</p>
<blockquote>
<p>选择rsync服务器启动方式</p>
<ul>
<li>rsync服务器负载比较高，则使用独立启动模式</li>
<li>rsync服务器负责较低，使用xinetd运行方式</li>
</ul>
</blockquote>
<p>Tips：由于需要将线上大量数据迁移至本地，直接使用ftp或scp会很不方便，使用rsync可以有断点续传功能，而且搭建起来十分快捷方便。</p>
<h4 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h4><ul>
<li>本地CentOS release 6.7</li>
<li>线上CentOS release 6.5</li>
<li>这里是将线上数据拉至本地，本地主机在局域网中 ，并没有单独的公网IP，故线上服务器做rsync的服务端，本地PC做rsync的客户端</li>
</ul>
<a id="more"></a>
<h4 id="服务端配置"><a href="#服务端配置" class="headerlink" title="服务端配置"></a>服务端配置</h4><ul>
<li><p>Install packge</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install rsync -y</div></pre></td></tr></table></figure>
</li>
<li><p>Command</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">mkdir /etc/rsyncd</div><div class="line">touch /etc/rsyncd/rsyncd.conf    <span class="comment">#主配置文件</span></div><div class="line">touch /etc/rsyncd/rsyncd.secrets  <span class="comment">#客户端连接时使用的用户和密码</span></div><div class="line">touch /etc/rsyncd/rsyncd.motd    <span class="comment">#服务端提示信息文件</span></div><div class="line">chmod 600 /etc/rsyncd/rsyncd.secrets</div><div class="line">chown root:root /etc/rsyncd/rsyncd.secrets</div></pre></td></tr></table></figure>
</li>
<li><p>Main_config</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">uid = root</div><div class="line">gid = root</div><div class="line">use chroot = no</div><div class="line"><span class="built_in">read</span> only = yes          <span class="comment">#只读，不让客户端上传文件到服务器</span></div><div class="line">address = 203.66.131.14  <span class="comment">#服务端的IP，写错将无法启动进程</span></div><div class="line">port = 873</div><div class="line"><span class="comment">#hosts allow = 192.168.1.0/24 172.16.0.0/255.255.0.0</span></div><div class="line">hosts allow = 0.0.0.0/0.0.0.0</div><div class="line">hosts deny = *</div><div class="line">max connections = 5</div><div class="line">pid file = /var/run/rsyncd.pid</div><div class="line">motd file = /etc/rsyncd/rsyncd.motd</div><div class="line">secrets file = /etc/rsyncd/rsyncd.secrets</div><div class="line"><span class="built_in">log</span> file = /var/<span class="built_in">log</span>/rsync.log</div><div class="line">transfer logging = yes</div><div class="line"><span class="built_in">log</span> format = %t %a %m %f %b</div><div class="line">syslog facility = <span class="built_in">local</span>3</div><div class="line">timeout = 300</div><div class="line">[mytmp]</div><div class="line">path = /data/nfsd/backup/arvon_backup</div><div class="line">list = yes</div><div class="line">ignore errors</div><div class="line">auth users = rsync  <span class="comment">#只有rsyncd.secrets文件中的zhang3用户可以同步此目录</span></div><div class="line">[townhome]</div><div class="line">path = /home/town</div><div class="line">list = no           <span class="comment">#服务器上同步数据的目录在服务器模块上列出来</span></div><div class="line">ignore errors       <span class="comment">#忽略IO错误</span></div><div class="line">auth users = rsync   <span class="comment">#只有rsyncd.secrets文件中的town用户可以同步此目录</span></div><div class="line">comment = hitown    <span class="comment">#客户端连接时的提示</span></div></pre></td></tr></table></figure>
</li>
<li><p>Password_config</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[hello@host]$ sudo cat /etc/rsyncd/rsyncd.secrets</div><div class="line">rsync:123456</div></pre></td></tr></table></figure>
</li>
<li><p>Look_config</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> vi /etc/rsyncd/rsyncd.motd</span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">###############################</span></span></div><div class="line"><span class="meta">#</span><span class="bash">            Go !!!</span></div><div class="line"><span class="meta">#</span><span class="bash">欢迎信息，并无卵用</span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">###############################</span></span></div></pre></td></tr></table></figure>
</li>
<li><p>Start_service</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/usr/bin/rsync --daemon --config=/etc/rsyncd/rsyncd.conf    #启动服务</div><div class="line">echo '/usr/bin/rsync --daemon --config=/etc/rsyncd/rsyncd.conf' &gt;&gt; /etc/rc.local    #设置开机启动</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="客户端配置"><a href="#客户端配置" class="headerlink" title="客户端配置"></a>客户端配置</h4><ul>
<li><p>Install</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install rsync -y</div></pre></td></tr></table></figure>
</li>
<li><p>Config</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">echo 123456 &gt; /etc/rsync.password  #将rsync的密码写入本地</div><div class="line"><span class="meta">#</span><span class="bash">这个rsync.password文件可随意放，不过建议放在etc下</span></div><div class="line">chmod 600 /etc/rsync.password #重要，rsync会检查权限，如果不是600会报出错误</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="测试-amp-使用"><a href="#测试-amp-使用" class="headerlink" title="测试&amp;使用"></a>测试&amp;使用</h4><ul>
<li><p>列出文件</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">rsync --list-only --password-file=/etc/rsync.password rsync@rsync_server_ip::mytmp</div><div class="line"><span class="meta">#</span><span class="bash">这个mytmp是体现在主配置 文件的，也就是/etc/rsyncd/rsyncd.conf</span></div></pre></td></tr></table></figure>
</li>
<li><p>同步文件到本地的目录</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">rsync -auvzP --delete --password-file=/etc/rsync.password rsync@rsync_server_ip::mytmp /your/want/path</span></div><div class="line"><span class="meta">#</span><span class="bash">由于这里只是需要将线上数据拉到本地，并不需要完全一致，所以可以不用--delete参数，能不用则不用，删除总归是危险操作</span></div><div class="line">rsync -auvzP  --password-file=/etc/rsync.password rsync@rsync_server_ip::mytmp /your/want/path</div></pre></td></tr></table></figure>
</li>
<li><p>参数说明</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="_">-a</span> 相当于-rlptgoD</div><div class="line">-r是递归</div><div class="line"><span class="_">-l</span>是链接文件，意思是拷贝链接文件；</div><div class="line">-p表示保持文件原有权限；</div><div class="line">-t保持文件原有时间；</div><div class="line">-g保持文件原有用户组；</div><div class="line">-o 保持文件原有属主；</div><div class="line">-D 相当于块设备文件；</div><div class="line">-u, --update 仅仅进行更新，也就是跳过所有已经存在于DST，并且文件时间晚于要备份的文件。(不覆盖更新的文件)</div><div class="line">-z 传输时压缩；</div><div class="line">-P 传输进度；</div><div class="line">-v 传输时的进度等信息，和-P有点关系，自己试试。</div><div class="line">--delete 表示客户端的数据要与服务器端完全一致，如果客户端目录里有服务器上不存在的文件，则删除。</div><div class="line"><span class="comment">#执行rsync同步时，慎用-z参数！一旦启用了-z参数，则数据在传输前会先经过压缩，如果文件比较大的话，压缩会很慢！进而出现，明明网速很快，却同步缓慢的情况。</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="排错"><a href="#排错" class="headerlink" title="排错"></a>排错</h4><ul>
<li><p>连接不上<br>直接都不出欢迎 界面，查看防火墙，发现问题<br><code>解决:</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo iptables -nvL --line-number</div><div class="line">sudo iptables -I INPUT 17 -p tcp -m tcp --dport 873 -j ACCEPT -m comment --comment <span class="string">"added by arvonfor rsync"</span></div></pre></td></tr></table></figure>
</li>
<li><p>连接上，有报错<br>权限问题，反正我的是，来了个狠的，已ok，报错如下<br>@ERROR: auth failed on module xxx<br>rsync error: error starting client-server protocol (code 5) at main.c(1530) [sender=3.0.6]<br><code>解决:</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod 600 -R /etc/rsyncd/</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<p>以上</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[4月读书计划]]></title>
      <url>http://arvon.top/2016/04/03/4%E6%9C%88%E8%AF%BB%E4%B9%A6%E8%AE%A1%E5%88%92/</url>
      <content type="html"><![CDATA[<p><img src="http://oqfz9mxmq.bkt.clouddn.com/20160403-aprilread-1.jpg" alt="20160403-aprilread-1"><br>PS：学习其实是一件蛮幸福的事情，学的越多感觉不会的越多，不过心里很踏实，最近学习ansibel和git。</p>
<h3 id="关于最近的学习方向"><a href="#关于最近的学习方向" class="headerlink" title="关于最近的学习方向"></a>关于最近的学习方向</h3><ul>
<li>ansibel<ul>
<li>最近购买了4本图书，买了就不能白买不是，而且也是机遇不错，现阶段也在使用ansibel，配置管理和版本控制对于运维确实是挺重要的，【奔跑吧ansible】预计花费4周左右时间来学习。</li>
<li>由于最近需要使用AWS，所需需要研究下ec2模块</li>
<li>需要进行学习变量和遍历循环<a id="more"></a></li>
</ul>
</li>
<li>git<ul>
<li>这个是版本控制，以前只是用hexo和git做过一段时间bolg，充其量只能算是了解，需要系统的学习一下，购买了蝙蝠书，这个估计会有些晦涩，进度可能会有问题，预计也是4周，根据实际情况再调整。</li>
<li>需要了解gitlab搭建及配置</li>
</ul>
</li>
<li>wireshark<ul>
<li>这个网络分析工具，现阶段只能说是知道有这么个东西，做运维的网络分析也是必备技能之一，所以买了本比较肤浅的书籍，【wireshark分析的艺术】，预计学习时间也是一个月。</li>
<li>tcp协议学习</li>
<li>wireshark表达式学习，及tcpdump学习使用</li>
</ul>
</li>
</ul>
<h3 id="关于技术博客"><a href="#关于技术博客" class="headerlink" title="关于技术博客"></a>关于技术博客</h3><ul>
<li>持之以恒<br>老是想着自己买个云主机，其实现阶段踏踏实实把技术学了，把博客写了就可以了，买主机最起码现在还是不必要的，该把精力主要投入到学习中去，保持博客的更新频率</li>
<li>想法和思路<br>逐渐开始学习思路整理分析，不仅仅记录技术点和写脚本命令，逐步提升博客的质量</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CentOS搭建支持ftp的cdn服务]]></title>
      <url>http://arvon.top/2016/03/25/CentOS%E6%90%AD%E5%BB%BA%E6%94%AF%E6%8C%81ftp%E7%9A%84cdn%E6%9C%8D%E5%8A%A1/</url>
      <content type="html"><![CDATA[<p><strong>摘要：</strong>由于测试需要，需用nginx搭建cdn服务器，并要求可以使用ftp上传。送个之前nginx搭建cdn的<a href="http://blog.arvon.top/2016/03/03/Nginx%E6%90%AD%E5%BB%BACDN%E6%BA%90%E7%AB%99/" target="_blank" rel="external">–&gt;飞机票</a>,下面是主要vsftp的配置，nginx配置cdn参照飞机票那篇即可。<br><a id="more"></a></p>
<h3 id="搭建nginx-cdn服务器"><a href="#搭建nginx-cdn服务器" class="headerlink" title="搭建nginx cdn服务器"></a>搭建nginx cdn服务器</h3><ul>
<li>具体参照使用nginx作cdn源站</li>
<li>nginx默认不开启文件目录显示，需要自行手动修改开启,在nginx.conf文件(/usr/local/nginx/conf/)里的http{}里面加入如下代码：</li>
<li>如显示不正常需删除多余index页面<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">autoindex on;</div><div class="line"><span class="comment">#PS:另外两个参数最好也加上去</span></div><div class="line">autoindex_exact_size off;</div><div class="line"><span class="comment">#默认为on，显示出文件的确切大小，单位是bytes。</span></div><div class="line"><span class="comment">#改为off后，显示出文件的大概大小，单位是kB或者MB或者GB</span></div><div class="line">autoindex_localtime on;</div><div class="line"><span class="comment">#默认为off，显示的文件时间为GMT时间。</span></div><div class="line"><span class="comment">#改为on后，显示的文件时间为文件的服务器时间</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="搭建ftp服务器（来源：参照Johnny整理的步骤整合）"><a href="#搭建ftp服务器（来源：参照Johnny整理的步骤整合）" class="headerlink" title="搭建ftp服务器（来源：参照Johnny整理的步骤整合）"></a>搭建ftp服务器（来源：参照Johnny整理的步骤整合）</h3><ul>
<li><p>安装软件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install vsftpd -y</div></pre></td></tr></table></figure>
</li>
<li><p>修改配置文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#[root@stag-gw-cnd conf.d]# cat /etc/vsftpd/vsftpd.conf | egrep -v "^$|^#"</span></div><div class="line">anonymous_enable=NO</div><div class="line">local_enable=YES</div><div class="line">write_enable=YES</div><div class="line">local_umask=022</div><div class="line">dirmessage_enable=YES</div><div class="line">xferlog_enable=YES</div><div class="line">connect_from_port_20=YES</div><div class="line">xferlog_std_format=YES</div><div class="line">listen=YES</div><div class="line">chroot_local_user=YES</div><div class="line">local_root=/usr/share/nginx/cdn/Test</div><div class="line">pasv_promiscuous=YES</div><div class="line">pasv_enable=YES</div><div class="line">pasv_max_port=10100</div><div class="line">pasv_min_port=10090</div><div class="line">pam_service_name=vsftpd</div><div class="line">userlist_enable=YES</div><div class="line">tcp_wrappers=YES</div></pre></td></tr></table></figure>
</li>
<li><p>防火墙配置</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">vim /etc/sysconfig/iptables</div><div class="line">iptables -I INPUT -p tcp -m state --state NEW -m tcp --dport 21 -j ACCEPT</div><div class="line">iptables -I INPUT -p tcp --destination-port 10090:10100 -j ACCEPT</div><div class="line">/etc/init.d/iptables save</div></pre></td></tr></table></figure>
</li>
<li><p>服务配置</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">service vsftpd restart</div><div class="line">iptables -nvL</div></pre></td></tr></table></figure>
</li>
<li><p>用户配置</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">adduser ftptest</div><div class="line">passwd ftptest</div><div class="line">usermod -s /sbin/nologin ftptest</div><div class="line">usermod -d /usr/share/nginx/cdn/Test ftptest</div><div class="line">chown dcxjftp:ftp -R /usr/share/nginx/cdn/Test</div></pre></td></tr></table></figure>
</li>
<li><p>安全配置</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">vim /etc/pam.d/vsftpd</div><div class="line"><span class="meta">#</span><span class="bash">注释下面这行</span></div><div class="line"><span class="meta">#</span><span class="bash">auth       required  pam_shells.so</span></div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<p>以上</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Nginx搭建CDN源站记录]]></title>
      <url>http://arvon.top/2016/03/03/Nginx%E6%90%AD%E5%BB%BACDN%E6%BA%90%E7%AB%99/</url>
      <content type="html"><![CDATA[<p><strong>摘要：</strong>nginx有很多很强大的功能，可以做web，可以做代理、可以做SLB、还可以做缓存CDN等等，这里记录以下做缓存时的配置。<br><a id="more"></a></p>
<h3 id="Install-package"><a href="#Install-package" class="headerlink" title="Install package"></a>Install package</h3><ul>
<li><p>yum.repo</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget http://mirrors.opencas.cn/epel/6/i386/epel-release-6-8.noarch.rpm</div></pre></td></tr></table></figure>
</li>
<li><p>Install</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install nginx-1.0.15-12.el6.x86_64</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Service-config"><a href="#Service-config" class="headerlink" title="Service config"></a>Service config</h3><ul>
<li><p>配置：example one<br>创建cdn源站其端口为12345<br>在/etc/nginx/conf.d这个目录下添加一个cdn.conf的文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># The default server</span></div><div class="line">server &#123;</div><div class="line">    listen       12345 default_server;</div><div class="line">    server_name  _;</div><div class="line">    <span class="comment">#charset koi8-r;</span></div><div class="line">    <span class="comment">#access_log  logs/host.access.log  main;</span></div><div class="line">    <span class="comment"># Load configuration files for the default server block.</span></div><div class="line">    include /etc/nginx/default.d/*.conf;</div><div class="line">    location / &#123;</div><div class="line">        root   /usr/share/nginx/cdn;</div><div class="line">        index  index.html index.htm;</div><div class="line">    &#125;</div><div class="line">    error_page  404              /404.html;</div><div class="line">    location = /404.html &#123;</div><div class="line">        root   /usr/share/nginx/cdn;</div><div class="line">    &#125;</div><div class="line">    <span class="comment"># redirect server error pages to the static page /50x.html</span></div><div class="line">    <span class="comment">#</span></div><div class="line">    error_page   500 502 503 504  /50x.html;</div><div class="line">    location = /50x.html &#123;</div><div class="line">        root   /usr/share/nginx/cdn;</div><div class="line">    &#125;</div><div class="line">    <span class="comment"># proxy the PHP scripts to Apache listening on 127.0.0.1:80</span></div><div class="line">    <span class="comment">#</span></div><div class="line">    <span class="comment">#location ~ \.php$ &#123;</span></div><div class="line">    <span class="comment">#    proxy_pass   http://127.0.0.1;</span></div><div class="line">    <span class="comment">#&#125;</span></div><div class="line">    <span class="comment"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span></div><div class="line">    <span class="comment">#</span></div><div class="line">    <span class="comment">#location ~ \.php$ &#123;</span></div><div class="line">    <span class="comment">#    root           html;</span></div><div class="line">    <span class="comment">#    fastcgi_pass   127.0.0.1:9000;</span></div><div class="line">    <span class="comment">#    fastcgi_index  index.php;</span></div><div class="line">    <span class="comment">#    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span></div><div class="line">    <span class="comment">#    include        fastcgi_params;</span></div><div class="line">    <span class="comment">#&#125;</span></div><div class="line">    <span class="comment"># deny access to .htaccess files, if Apache's document root</span></div><div class="line">    <span class="comment"># concurs with nginx's one</span></div><div class="line">    <span class="comment">#</span></div><div class="line">    <span class="comment">#location ~ /\.ht &#123;</span></div><div class="line">    <span class="comment">#    deny  all;</span></div><div class="line">    <span class="comment">#&#125;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>start service</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/etc/init.d/nginx start</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="check"><a href="#check" class="headerlink" title="check"></a>check</h3><ul>
<li>在/usr/share/nginx/cdn/下放个文件，for example：test<blockquote>
<p>在浏览器键入：<a href="http://service_ip:12345/test" target="_blank" rel="external">http://service_ip:12345/test</a></p>
</blockquote>
</li>
</ul>
<hr>
<p>ok,以上</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python2.6升级2.7记录]]></title>
      <url>http://arvon.top/2016/02/12/python2-6%E5%8D%87%E7%BA%A72-7%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<p>Tips:由于想自己用Django搭建blog，需要2.7的python环境而centos6.7默认是2.6版本，所以升级了python<br><a id="more"></a></p>
<ol>
<li><p>下载Python-2.7.3</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget http://python.org/ftp/python/2.7.3/Python-2.7.3.tar.bz2</div></pre></td></tr></table></figure>
</li>
<li><p>解压安装</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">tar -jxvf Python-2.7.3.tar.bz2  </div><div class="line">cd Python-2.7.3</div><div class="line">./configure</div><div class="line">make all  </div><div class="line">make install</div><div class="line">make clean</div><div class="line">make distclean</div></pre></td></tr></table></figure>
</li>
<li><p>建立软连接，使系统默认的 python指向 python2.7</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">python -V  </div><div class="line">/usr/local/bin/python2.7 -V</div><div class="line">mv /usr/bin/python /usr/bin/python2.6.6  </div><div class="line">ln -s /usr/local/bin/python2.7 /usr/bin/python  </div><div class="line">python -V</div></pre></td></tr></table></figure>
</li>
<li><p>解决系统 Python 软链接指向 Python2.7 版本后，因为yum是不兼容 Python 2.7的，所以yum不能正常工作，我们需要指定 yum 的Python版本</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">vi /usr/bin/yum  </span></div><div class="line"><span class="meta">#</span><span class="bash">将文件头部的</span></div><div class="line"><span class="meta">#</span><span class="bash">!/usr/bin/python</span></div><div class="line"><span class="meta">#</span><span class="bash">改成</span></div><div class="line"><span class="meta">#</span><span class="bash">!/usr/bin/python2.6.6</span></div></pre></td></tr></table></figure>
</li>
</ol>
<hr>
<p>以上</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[selinux和iptables关闭]]></title>
      <url>http://arvon.top/2016/02/01/selinux%E5%92%8Ciptables%E5%85%B3%E9%97%AD/</url>
      <content type="html"><![CDATA[<h3 id="iptables"><a href="#iptables" class="headerlink" title="iptables"></a>iptables</h3><h4 id="Centos6-x"><a href="#Centos6-x" class="headerlink" title="Centos6.x"></a>Centos6.x</h4><ul>
<li><p>临时关闭</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">service iptables stop</div><div class="line">/etc/init.d/iptabels stop</div></pre></td></tr></table></figure>
</li>
<li><p>永久关闭</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">chkconfig iptables off</div><div class="line">chkconfig iptables on    <span class="comment">#开启</span></div></pre></td></tr></table></figure>
</li>
</ul>
<a id="more"></a>
<h4 id="Centos7-x"><a href="#Centos7-x" class="headerlink" title="Centos7.x"></a>Centos7.x</h4><ul>
<li><p>Centos7默认使用firewall</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">systemctl stop firewalld.service</div><div class="line"><span class="comment">#停止firewall</span></div><div class="line">systemctl <span class="built_in">disable</span> firewalld.service</div><div class="line"><span class="comment">#禁止firewall开机启动</span></div></pre></td></tr></table></figure>
</li>
<li><p>使用iptables管理</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">yum -y install iptables-services</div><div class="line"><span class="comment">#vi /etc/sysconfig/iptables</span></div><div class="line"><span class="comment">#修改iptables这个文件可以写入删除规则</span></div><div class="line"><span class="comment">#-A INPUT -m state --state NEW -m tcp -p tcp --dport 3306 -j ACCEPT</span></div><div class="line">systemctl restart iptables.service</div><div class="line"><span class="comment">#重启防火墙使配置生效</span></div><div class="line">systemctl <span class="built_in">enable</span> iptables.service</div><div class="line"><span class="comment">#设置防火墙开机启动</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="selinux"><a href="#selinux" class="headerlink" title="selinux"></a>selinux</h3><ul>
<li><p>查看状态</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">getenforce</div></pre></td></tr></table></figure>
</li>
<li><p>临时关闭</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">setenforce 0</div></pre></td></tr></table></figure>
</li>
<li><p>永久关闭</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#修改/etc/selinux/config文件中设置SELINUX=disabled ，然后重启服务器。</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<p>以上</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CentOS搭建NTP服务器]]></title>
      <url>http://arvon.top/2016/01/20/centos%E6%90%AD%E5%BB%BANTP%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      <content type="html"><![CDATA[<p><strong>简介：</strong><br>NTP（NetworkTime Protocol，网络时间协议）是用来在分布式时间服务器和客户端之间进行时间同步。<a href="http://blog.arvon.top/2015/12/13/Linux%E4%B8%BB%E6%9C%BA%E6%97%B6%E9%97%B4%E4%B8%8D%E5%87%86%E9%97%AE%E9%A2%98/" target="_blank" rel="external">–&gt;另一篇关于时间的</a></p>
<p>NTP基于UDP报文进行传输，使用的UDP端口号为123。<br>使用NTP的目的是对网络内所有具有时钟的设备进行时钟同步，使网络内所有设备的时钟保持一致，从而使设备能够提供基于统一时间的多种应用。<br>对于时间错误会导致服务器宕机，所以运行NTP的本地系统，既可以接受来自其他时钟源的同步，又可以作为时钟源同步其他的时钟，并且可以和其他设备互相同步。</p>
<a id="more"></a>
<h3 id="NTP服务器搭建"><a href="#NTP服务器搭建" class="headerlink" title="NTP服务器搭建"></a>NTP服务器搭建</h3><p><code>Tips: hadoop对局域网时间同步要求非常高，所以适合搭建使用ntp服务器</code></p>
<ul>
<li>主要包括两个文件<ul>
<li>/etc/ntp/ntpserver.conf</li>
<li>/etc/ntp.conf</li>
</ul>
</li>
</ul>
<h4 id="服务器端（转自搭建ntp服务器）"><a href="#服务器端（转自搭建ntp服务器）" class="headerlink" title="服务器端（转自搭建ntp服务器）"></a>服务器端（转自<a href="http://www.linuxidc.com/Linux/2014-02/97205.htm" target="_blank" rel="external">搭建ntp服务器</a>）</h4><ul>
<li>1.搭建环境<br>环境：CentOS6.4<br>Server192.168.126.1<br>Client192.168.126.2</li>
<li><p>2.安装NTP</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum –y install ntp</div></pre></td></tr></table></figure>
</li>
<li><p>3.修改配置文件添加一行</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#vim /etc/ntp.conf</span></div><div class="line">restrict 192.168.126.0255.255.255.0 nomodify notrap</div></pre></td></tr></table></figure>
</li>
<li><p>4.找到以下两行去掉注释</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#vi /etc/ntp.conf</span></div><div class="line">server127.127.1.0</div><div class="line">fudge127.127.1.0stratum 10</div></pre></td></tr></table></figure>
</li>
<li><p>5.开机启动服务</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chkconfig --level 345 ntpon</div></pre></td></tr></table></figure>
</li>
<li><p>6.启动服务</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/etc/init.d/ntpd start</div></pre></td></tr></table></figure>
</li>
<li><ol>
<li>防火墙需要开123端口或者关闭防火墙<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-A INPUT -m state --state NEW -m tcp -p tcp --dport 123 -jACCEPT</div></pre></td></tr></table></figure>
</li>
</ol>
</li>
</ul>
<h4 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h4><ul>
<li><p>1.与服务端同步时间执行以下命令<br>手工执行或用crontab来执行</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ntpdate 192.168.126.1</div></pre></td></tr></table></figure>
<p>使用crontab –e</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">0 21 * * * ntpdate 192.168.126.1 &gt;&gt; /root/ntpdate.log 2&gt;&amp;1</div></pre></td></tr></table></figure>
</li>
<li><p>2.查看同步状况</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ntpq –p</div></pre></td></tr></table></figure>
</li>
<li><p>3.防火墙需要开123端口或者关闭防火墙</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-A INPUT -m state --state NEW -m tcp -p tcp --dport 123 -jACCEPT</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="手动脚本设置同步"><a href="#手动脚本设置同步" class="headerlink" title="手动脚本设置同步"></a>手动脚本设置同步</h3><ul>
<li>通过crontab设置时间同步<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/usr/sbin/ntpdate ntp.sjtu.edu.cn &gt;&gt; /var/log/ntp.log 2&gt;&amp;1; /sbin/hwclock –w</div><div class="line"><span class="meta">#</span><span class="bash">写入crontab，根据业务需要定制时间同步的频率</span></div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CentOS6.x挂载ntfs和xfs问题]]></title>
      <url>http://arvon.top/2016/01/13/CentOS6-x%E6%8C%82%E8%BD%BDntfs%E5%92%8Cxfs%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p><strong>摘要：</strong> centos6.x默认是ext4的文件系统，而centos7.x是默认xfs的文件系统，所以直接挂载是会出问题的，另外ntfs是windows上的文件系统，挂载也会出问题，这里记录一下如何解决。</p>
<h3 id="挂载xfs"><a href="#挂载xfs" class="headerlink" title="挂载xfs"></a>挂载xfs</h3><ul>
<li>安装支持包<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">wget http://mirrors.opencas.cn/epel/6/i386/epel-release-6-8.noarch.rpm</div><div class="line">yum install xfsprogs kmod-xfs xfsdump xfsprogs-devel</div><div class="line">mount -t xfs /dev/sdc1 /data3/sdc1/</div></pre></td></tr></table></figure>
</li>
</ul>
<a id="more"></a>
<ul>
<li>报错解决<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#需要安装 lvm2:  yum install lvm2</span></div><div class="line"><span class="comment">#然后按一下步骤：</span></div><div class="line"><span class="comment">#1、查看物理卷：pvs</span></div><div class="line">PV       VG       Fmt   Attr PSize PFree</div><div class="line">  /dev/sda2   VolGroup00 lvm2 a- 279.22G 32.00M</div><div class="line"><span class="comment">#2、查看卷组：vgs</span></div><div class="line">VG       <span class="comment">#PV #LV #SN Attr VSize VFree</span></div><div class="line">  VolGroup00 1 4 0 wz--n- 279.22G 32.00M</div><div class="line"><span class="comment">#3、查看逻辑卷：lvdisplay</span></div><div class="line">--- Logical volume ---</div><div class="line">  LV Name             /dev/VolGroup00/LogVol03</div><div class="line">  VG Name             VolGroup00</div><div class="line">  LV UUID             YhG8Fu-ZGPk-qt8D-AxgC-DzOU-dg1F-z71feI</div><div class="line">  LV Write Access        <span class="built_in">read</span>/write</div><div class="line"> LV Status              unenable</div><div class="line">  <span class="comment"># open                 1</span></div><div class="line">  LV Size             245.97 GB</div><div class="line">  Current LE          7871</div><div class="line">  Segments             1</div><div class="line">  Allocation          inherit</div><div class="line">  Read ahead sectors     auto</div><div class="line">  - currently <span class="built_in">set</span> to     256</div><div class="line">  Block device           253:2</div><div class="line"><span class="comment">#4、如未激活，需要激活逻辑卷：vgchange -ay /dev/VolGroup00</span></div><div class="line">LV Status              available</div><div class="line"><span class="comment">#5、挂载逻辑卷：mount   /dev/VolGroup00/LogVol03   /home/lvm</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="挂载ntfs"><a href="#挂载ntfs" class="headerlink" title="挂载ntfs"></a>挂载ntfs</h3><ul>
<li><p>安装支持包</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">wget http://pkgs.repoforge.org/rpmforge-release/rpmforge-release-0.5.3-1.el6.rf.x86_64.rpm</div><div class="line">chmod 755 rpmforge-release-0.5.3-1.el6.rf.x86_64.rpm</div><div class="line">rpm -ivh rpmforge-release-0.5.3-1.el6.rf.x86_64.rpm</div><div class="line">yum install fuse-ntfs-3g -y</div><div class="line">mount /dev/sdd1 /data3/sdd/</div></pre></td></tr></table></figure>
</li>
<li><p>补充<br>此时挂载了ntfs也只是可以实现读取并不能写入，目前没有发现什么有效方法</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux主机时间不准问题]]></title>
      <url>http://arvon.top/2015/12/13/Linux%E4%B8%BB%E6%9C%BA%E6%97%B6%E9%97%B4%E4%B8%8D%E5%87%86%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p><strong>摘要：</strong>linux主机时间过一段时间就会发现时间不对了，查阅资料这个大概是因为硬件时间和服务器时间不一致导致的。</p>
<a id="more"></a>
<h3 id="查看分析"><a href="#查看分析" class="headerlink" title="查看分析"></a>查看分析</h3><ul>
<li><p>查看服务器时间，即系统时间</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">date</div></pre></td></tr></table></figure>
</li>
<li><p>线上修改时区（不重启）</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tzselect    <span class="comment">#使用此命令，然后根据提示更改即可</span></div></pre></td></tr></table></figure>
</li>
<li><p>查看服务器硬件时间</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hwclock  --show</div></pre></td></tr></table></figure>
</li>
<li><p>同步服务器硬件时间和系统时间</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hwclock  --hctosys           //把硬件时间同步到系统时间</div><div class="line">hwclock  --systohc            //系统时间同步到硬件时间</div></pre></td></tr></table></figure>
</li>
<li><p>查看当前使用的时区</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">cat /etc/sysconfig/clock</div><div class="line"><span class="comment"># The timezone of the system is defined by the contents of /etc/localtime.</span></div><div class="line">ZONE=<span class="string">"America/New_York"</span></div><div class="line"><span class="comment">#UTC=true</span></div><div class="line"><span class="comment">#ARC=false</span></div><div class="line"><span class="comment">#这个时区采用的是美国时间，所以即时进行了时间同步，也是同步成美国时区的时间，而不是中国时区的时间。</span></div></pre></td></tr></table></figure>
</li>
<li><p>时间同步操作命令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/usr/sbin/ntpdate cn.pool.ntp.org</div><div class="line">/usr/sbin/ntpdate ntp.api.bz</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="小知识"><a href="#小知识" class="headerlink" title="小知识"></a>小知识</h3><ul>
<li>常用时区介绍<blockquote>
<p>CST：<br>中国标准时间（China Standard Time），这个解释可能是针对RedHat Linux。<br>UTC：<br>协调世界时，又称世界标准时间，简称UTC，从英文国际时间/法文协调时间”Universal Time/Temps Cordonné”而来。中国大陆、香港、澳门、台湾  、蒙古国、新加坡、马来西亚、菲律宾、澳洲西部的时间与UTC的时差均为+8，也就是UTC+8。<br>GMT：<br>格林尼治标准时间（英语：Greenwich Mean Time，GMT）是指位于英国伦敦郊区的皇家格林尼治天文台的标准时间，因为本初子午线被定义在通过那里  的经线。</p>
</blockquote>
</li>
</ul>
<hr>
<p>以上</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[linux解压rar及xshell的rz]]></title>
      <url>http://arvon.top/2015/12/05/linux%E8%A7%A3%E5%8E%8Brar%E5%8F%8Axshell%E7%9A%84rz/</url>
      <content type="html"><![CDATA[<p><strong>摘要：</strong>有时会遇到要在linux下解压rar包，这就很不舒服，毕竟rar是win下不开源的东西，所以建议还是少用，另外rz这个小工具在使用xshell想上传个小东西的时候非常方便，大文件还是建议ftp或者弄个rsync。</p>
<a id="more"></a>
<ul>
<li><p>解压rar<br>需要下载rar软件，yum源中并没有提供。原因为rar并不属于开源软件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#download</span></div><div class="line">wget http://www.rarlab.com/rar/rarlinux-x64-5.3.0.tar.gz</div><div class="line"><span class="comment">#install</span></div><div class="line">tar zxvf rarlinux-x64-5.3.0.tar.gz</div><div class="line">cp rar/rar /bin/</div><div class="line">cp rar/unrar /bin/</div><div class="line"><span class="comment">#usage:</span></div><div class="line">rar e name.rar    <span class="comment">#会解压至当前文件夹</span></div></pre></td></tr></table></figure>
</li>
<li><p>使用lrzsz<br>需要直接向xshell拉小文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">yum search rz</div><div class="line">yum install lrzsz.x86_64 0:0.12.20-27.1.el6</div></pre></td></tr></table></figure>
</li>
<li><p>使用unzip</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">yum install unzip -y</div><div class="line">unzip xxx.zip</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[cp和chown的几个好用选项]]></title>
      <url>http://arvon.top/2015/11/14/cp%E5%92%8Cchown%E7%9A%84%E5%87%A0%E4%B8%AA%E5%A5%BD%E7%94%A8%E9%80%89%E9%A1%B9/</url>
      <content type="html"><![CDATA[<p><strong>摘要：</strong>生产环境中对权限什么的要求是很严格的，而使用root用户进行操作，难免会变更权限信息，修改权限就变得十分有必要，而以下的选线都是很实用的。<br><a id="more"></a></p>
<h3 id="关于copy的几个选项"><a href="#关于copy的几个选项" class="headerlink" title="关于copy的几个选项"></a>关于copy的几个选项</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">-P</div><div class="line"><span class="comment">#-p 或 --preserve    保留源文件或目录的属性，包括所有者、所属组、权限与时间</span></div><div class="line">-R</div><div class="line"><span class="comment">#-R 或 --recursive   递归处理，将指定目录下的文件及子目录一并处理</span></div><div class="line"><span class="_">-a</span></div><div class="line"><span class="comment"># -a 或 --archive     此参数的效果和同时指定"-dpR"参数相同</span></div></pre></td></tr></table></figure>
<h3 id="关于chown和chmod"><a href="#关于chown和chmod" class="headerlink" title="关于chown和chmod"></a>关于chown和chmod</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">--reference=dir_file</div><div class="line"><span class="comment">#修改文件权限与dir_file一致</span></div><div class="line">chmod --reference=xxx yyy</div><div class="line">chown --reference=xxx yyy</div></pre></td></tr></table></figure>
<h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><h4 id="copy命令"><a href="#copy命令" class="headerlink" title="copy命令"></a>copy命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="_">-a</span>：此参数的效果和同时指定<span class="string">"-dpR"</span>参数相同；</div><div class="line"><span class="_">-d</span>：当复制符号连接时，把目标文件或目录也建立为符号连接，并指向与源文件或目录连接的原始文件或目录；</div><div class="line"><span class="_">-f</span>：强行复制文件或目录，不论目标文件或目录是否已存在；</div><div class="line">-i：覆盖既有文件之前先询问用户；</div><div class="line"><span class="_">-l</span>：对源文件建立硬连接，而非复制文件；</div><div class="line">-p：保留源文件或目录的属性；</div><div class="line">-R/r：递归处理，将指定目录下的所有文件与子目录一并处理；</div><div class="line"><span class="_">-s</span>：对源文件建立符号连接，而非复制文件；</div><div class="line">-u：使用这项参数后只会在源文件的更改时间较目标文件更新时或是名称相互对应的目标文件并不存在时，才复制文件；</div><div class="line">-S：在备份文件时，用指定的后缀“SUFFIX”代替文件的默认后缀；</div><div class="line">-b：覆盖已存在的文件目标前将目标文件备份；</div><div class="line">-v：详细显示命令执行的操作。</div></pre></td></tr></table></figure>
<h4 id="chown命令"><a href="#chown命令" class="headerlink" title="chown命令"></a>chown命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#chown -R arvon /usr/arvon</span></div><div class="line">-c或——changes：效果类似“</div><div class="line">-v”参数，但仅回报更改的部分；</div><div class="line"><span class="_">-f</span>或--quite或——silent：不显示错误信息；</div><div class="line">-h或--no-dereference：只对符号连接的文件作修改，而不更改其他任何相关文件；</div><div class="line">-R或——recursive：递归处理，将指定目录下的所有文件及子目录一并处理；</div><div class="line">-v或——version：显示指令执行过程；</div><div class="line">--dereference：效果和“-h”参数相同；</div><div class="line">--help：在线帮助；</div><div class="line">--reference=&lt;参考文件或目录&gt;：把指定文件或目录的拥有者与所属群组全部设成和参考文件或目录的拥有者与所属群组相同；</div><div class="line">--version：显示版本信息。</div></pre></td></tr></table></figure>
<h4 id="chmod命令"><a href="#chmod命令" class="headerlink" title="chmod命令"></a>chmod命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#权限指定说明</span></div><div class="line">u User，即文件或目录的拥有者；</div><div class="line">g Group，即文件或目录的所属群组；</div><div class="line">o Other，除了文件或目录拥有者或所属群组之外，其他用户皆属于这个范围；</div><div class="line">a All，即全部的用户，包含拥有者，所属群组以及其他用户；</div><div class="line">r 读取权限，数字代号为“4”; w 写入权限，数字代号为“2”；</div><div class="line">x 执行或切换权限，数字代号为“1”；</div><div class="line">- 不具任何权限，数字代号为“0”；</div><div class="line">s 特殊功能说明：变更文件或目录的权限。</div><div class="line"><span class="comment">#选项说明</span></div><div class="line">-c或——changes：效果类似“-v”参数，但仅回报更改的部分；</div><div class="line"><span class="_">-f</span>或--quiet或——silent：不显示错误信息；</div><div class="line">-R或——recursive：递归处理，将指令目录下的所有文件及子目录一并处理；</div><div class="line">-v或——verbose：显示指令执行过程；</div><div class="line">--reference=&lt;参考文件或目录&gt;：把指定文件或目录的所属群组全部设成和参考文件或目录的所属群组相同；</div><div class="line">&lt;权限范围&gt;+&lt;权限设置&gt;：开启权限范围的文件或目录的该选项权限设置；</div><div class="line">&lt;权限范围&gt;-&lt;权限设置&gt;：关闭权限范围的文件或目录的该选项权限设置；</div><div class="line">&lt;权限范围&gt;=&lt;权限设置&gt;：指定权限范围的文件或目录的该选项权限设置；</div><div class="line"><span class="comment">#chmod u=rwx,g=rw,o=r hi.txt</span></div></pre></td></tr></table></figure>
<h3 id="参考地址"><a href="#参考地址" class="headerlink" title="参考地址"></a>参考地址</h3><p><a href="http://man.linuxde.net" target="_blank" rel="external">Linux命令大全</a><br><a href="http://www.hi-docs.com/linux/chmod.html" target="_blank" rel="external">Hi doc</a><br><a href="https://www.linuxyw.com/a/wenjianguanli/20130429/148.html" target="_blank" rel="external">儒峰的网站</a></p>
<hr>
<p>以上</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[NFS服务安装部署记录]]></title>
      <url>http://arvon.top/2015/10/20/NFS%E6%9C%8D%E5%8A%A1%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<p><strong>简述：</strong>其实在部署多台服务器时搭建一个nfs服务器是个共享资源非常好的方案，可以实现脚本共享，也可以实现数据集中备份，是个非常好用的网络文件系统。实验环境为多台服务器，其中一台用作NFSserver其余的主机作为client</p>
<a id="more"></a>
<h4 id="安装yum源"><a href="#安装yum源" class="headerlink" title="安装yum源"></a>安装yum源</h4><ul>
<li>安装yum源<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">wget http://mirrors.opencas.cn/epel/6/i386/epel-release-6-8.noarch.rpm</div><div class="line"><span class="comment">#package: nfs-utils.x86_64</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="Server端配置"><a href="#Server端配置" class="headerlink" title="Server端配置"></a>Server端配置</h4><ul>
<li><p>安装包权限</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">yum install nfs-utils.x86_64</div><div class="line">chkconfig rpcbind on</div><div class="line">chkconfig nfs on</div><div class="line">mkdir /data/nfs</div><div class="line">chown -R nfsnobody:nfsnobody /data/nfs</div><div class="line"><span class="comment">#为防止客户端的读取写入可以顺利进行，将共享目录权限设置为nfsnobody</span></div></pre></td></tr></table></figure>
</li>
<li><p>Server端修改配置文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#vim /etc/exports</span></div><div class="line">/data/nfsd/deploy 192.168.1.2/32(rw,root_squash,all_squash)</div><div class="line">/data/nfsd/deploy 192.168.1.4/32(rw,root_squash,all_squash)</div><div class="line">/data/nfsd/deploy 192.168.1.5/32(rw,root_squash,all_squash)</div><div class="line"><span class="comment">#指定哪些机器可以访问共享目录deploy，以及以何种方式访问</span></div></pre></td></tr></table></figure>
</li>
<li><p>启动测试</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">service rpcbind start</div><div class="line">service nfs start</div><div class="line">rpcinfo -p    <span class="comment">#確認nfs服務啟動成功</span></div><div class="line">exportfs    <span class="comment">#检查 NFS 服务器是否输出我们想共享的目录</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="Client端配置"><a href="#Client端配置" class="headerlink" title="Client端配置"></a>Client端配置</h4><ul>
<li>客户端很简单<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">yum install nfs-utils.x86_64</div><div class="line">chkconfig rpcbind on</div><div class="line">service rpcbind start</div><div class="line">showmount <span class="_">-e</span> 192.168.1.3    <span class="comment">#showmount -e nfs服務器的IP,检查 NFS 服务器端是否有目录共享</span></div><div class="line"><span class="comment">#mount -t nfs4 192.168.1.3:/data/nfsd/deploy /mnt/deploy    #默认使用的是udp协议,会存在丢数据问题</span></div><div class="line">mount -t nfs4 192.168.1.3:/data/nfsd/deploy /mnt/deploy -o proto=tcp -o nolock <span class="comment">#使用tcp协议，速度慢</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="自动挂载"><a href="#自动挂载" class="headerlink" title="自动挂载"></a>自动挂载</h4><ul>
<li><p>使用fstab实现启动挂载</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#vim /etc/fstab</span></div><div class="line"><span class="comment">#添加如下字段</span></div><div class="line">192.168.1.3:/data/nfsd/deploy   /mnt/deploy     nfs     defaults        0 0</div><div class="line">192.168.1.3:/data/nfsd/backup   /mnt/backup     nfs     defaults        0 0</div></pre></td></tr></table></figure>
</li>
<li><p>好用命令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">mount <span class="_">-a</span></div><div class="line"><span class="comment">#这个-a参数会读取/etc/fstab文件的内容，对没有挂载的会再次瓜子啊</span></div><div class="line">umount <span class="_">-l</span> mountmoint</div><div class="line"><span class="comment">#强制解除挂载</span></div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<p>以上</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Ansible之HAVE_DECL_MPZ_POWM_SEC报错记录]]></title>
      <url>http://arvon.top/2015/10/12/Ansible%E4%B9%8BHAVE-DECL-MPZ-POWM-SEC%E6%8A%A5%E9%94%99%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<p>简述：在centOS6.5上使用pip安装ansible(version=2.1.1.0)时报错</p>
<h3 id="报错解决"><a href="#报错解决" class="headerlink" title="报错解决"></a>报错解决</h3><ul>
<li>解决如下<br>分析为PyCrypto模块安装有问题，所以就直接卸载重装。。有能力的话我会进一步探究这个报错，不过现在以下方法可以解决，先这样吧<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">pip uninstall python-keyczar pycrypto pyasn1</div><div class="line">yum erase python-keyczar python-crypto pyasn1</div><div class="line">yum install python-keyczar</div></pre></td></tr></table></figure>
</li>
</ul>
<a id="more"></a>
<ul>
<li>报错如下<blockquote>
<p>ERROR! Unexpected Exception: ‘module’ object has no attribute ‘HAVE_DECL_MPZ_POWM_SEC’<br>the full traceback was:<br>Traceback (most recent call last):<br>File “/usr/bin/ansible”, line 81, in <module><br>  from ansible.cli.adhoc import AdHocCLI as mycli<br>File “/usr/lib/python2.6/site-packages/ansible/cli/adhoc.py”, line 28, in <module><br>  from ansible.executor.task_queue_manager import TaskQueueManager<br>File “/usr/lib/python2.6/site-packages/ansible/executor/task_queue_manager.py”, line 29, in <module><br>  from ansible.executor.process.result import ResultProcess<br>File “/usr/lib/python2.6/site-packages/ansible/executor/process/result.py”, line 34, in <module><br>  from Crypto.Random import atfork<br>File “/usr/lib64/python2.6/site-packages/Crypto/Random/<strong>init</strong>.py”, line 29, in <module><br>  from Crypto.Random import _UserFriendlyRNG<br>File “/usr/lib64/python2.6/site-packages/Crypto/Random/_UserFriendlyRNG.py”, line 38, in <module><br>  from Crypto.Random.Fortuna import FortunaAccumulator<br>File “/usr/lib64/python2.6/site-packages/Crypto/Random/Fortuna/FortunaAccumulator.py”, line 39, in <module><br>  import FortunaGenerator<br>File “/usr/lib64/python2.6/site-packages/Crypto/Random/Fortuna/FortunaGenerator.py”, line 34, in <module><br>  from Crypto.Util.number import ceil_shift, exact_log2, exact_div<br>File “/usr/lib64/python2.6/site-packages/Crypto/Util/number.py”, line 56, in <module><br>  if _fastmath is not None and not _fastmath.HAVE_DECL_MPZ_POWM_SEC:<br>AttributeError: ‘module’ object has no attribute ‘HAVE_DECL_MPZ_POWM_SEC’</module></module></module></module></module></module></module></module></module></p>
</blockquote>
</li>
</ul>
<h3 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h3><ul>
<li>命令脚本片段（摘自sam的脚本）<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#安装PIP</span></div><div class="line">yum install python-pip.noarch python-devel libxslt-devel libffi-devel openssl-devel python-devel gcc-c++ gcc PyYAML python-babel python-crypto  python-httplib2 python-jinja2 python-keyczar python-markupsafe python-paramiko python-pyasn1 python-simplejson python-six -y</div><div class="line">mkdir ~/.pip/</div><div class="line"><span class="built_in">echo</span> <span class="string">"</span></div><div class="line">[global]</div><div class="line">index-url = http://mirrors.aliyun.com/pypi/simple/</div><div class="line"></div><div class="line">[install]</div><div class="line">trusted-host=mirrors.aliyun.com" &gt;&gt; ~/.pip/pip.conf</div><div class="line"><span class="comment">#安装ansible</span></div><div class="line">pip install --upgrade pip python-keyczar</div><div class="line">pip install ansible==2.1.1.0</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[crontab简记]]></title>
      <url>http://arvon.top/2015/09/16/crontab%E7%AE%80%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p>今天刚好要备份线上的crontab，就顺便记下来，省得忘了以后还要去上网找。<br><strong>介绍:</strong>crontab命令<br>常见于Unix和类Unix的操作系统之中，用于设置周期性被执行的指令。该命令从标准输入设备读取指令，并将其存放于“crontab”文件中，以供之后读取和执行。该词来源于希腊语 chronos(χρνο)，原意是时间。常，crontab储存的指令被守护进程激活， crond常常在后台运行，每一分钟检查是否有预定的作业需要执行。这类作业一般称为cron jobs。<em>crontab文件</em>包含送交cron守护进程的一系列作业和指令。每个用户可以拥有自己的crontab文件；同时，操作系统保存一个针对整个系统的crontab文件，该文件通常存放于/etc或者/etc之下的子目录中，而这个文件只能由系统管理员来修改。<br>crontab文件的每一行均遵守特定的格式，由空格或tab分隔为数个领域，每个领域可以放置单一或多个数值。(ps:摘自百度百科)</p>
<a id="more"></a>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><ul>
<li>常用命令<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">crontab -e	#编辑，编辑后重启服务生效</div><div class="line">/etc/init.d/crond restart（stop/start）	#重启服务</div><div class="line">crontab -l	#查看</div><div class="line">crontab -l&gt;/home/backup/crontab/crontab\`date '+%Y%m%d'`.bak	#备份crontab</div><div class="line"><span class="meta">#</span><span class="bash">* 每分钟执行以下ls命令</span></div><div class="line">0 * * * * /bin/ls</div><div class="line"><span class="meta">#</span><span class="bash">* 周一到周五每天17点发email给arvon</span></div><div class="line">0 17 * * 1-5 mail -s "hi" alex@domain.name &lt; /tmp/maildata</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="命令介绍"><a href="#命令介绍" class="headerlink" title="命令介绍"></a>命令介绍</h2><ul>
<li>参照man手册<blockquote>
<ul>
<li>f1 f2 f3 f4 f5 cmd/script</li>
<li>其中 f1 是表示分钟，f2 表示小时，f3 表示一个月份中的第几日，f4 表示月份，f5 表示一个星期中的第几天。program 表示要执行的程式。</li>
<li>当 f1 为 <em> 时表示每分钟都要执行 program，f2 为 </em> 时表示每小时都要执行程式，其余类推</li>
<li>当 f1 为 a-b 时表示从第 a 分钟到第 b 分钟这段时间内要执行，f2 为 a-b 时表示从第 a 到第 b 小时都要执行，其余类推</li>
<li>当 f1 为 <em>/n 时表示每 n 分钟个时间间隔执行一次，f2 为 </em>/n 表示每 n 小时个时间间隔执行一次，其余类推</li>
<li>当 f1 为 a, b, c,… 时表示第 a, b, c,… 分钟要执行，f2 为 a, b, c,… 时表示第 a, b, c…个小时要执行，其余类推</li>
<li>使用者也可以将所有的设定先存放在档案 file 中，用 crontab file 的方式来设定时程表。</li>
<li>由于unix版本不一样，所以部分语法有差别，例如在hp unix aix 中设定间隔执行如果采用*/n 方式将出现语法错误，在这类unix中 ，间隔执行只能以列举方式，详请见例子。</li>
<li>使用方法:　　用VI编辑一个文件 cronfile，然后在这个文件中输入格式良好的时程表。编辑完成后，保存并退出。</li>
<li>在命令行输入crontab cronfile这样就将cronfile文件提交给cron进程，同时，新创建cronfile的一个副本已经被放在/var/spoll/cron目录中，文件名就是用户名。</li>
</ul>
</blockquote>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Zabbix使用Percona组件监控Mysql]]></title>
      <url>http://arvon.top/2015/09/14/Zabbix%E4%BD%BF%E7%94%A8Percona%E7%BB%84%E4%BB%B6%E7%9B%91%E6%8E%A7Mysql/</url>
      <content type="html"><![CDATA[<p>上周测试了使用percona Monitoring Plugins 监控mysql，确认可行。<br>Percona Monitoring Plugins是一个高质量的组件，为mysql数据库添加企业级的监控和图表功能。该插件可以和Nagios或者是Cati等监控系统集成，从Percona1.1开始支持zabbix监控。其脚本由php实现，所以需安装php环境</p>
<a id="more"></a>
<h4 id="实现环境"><a href="#实现环境" class="headerlink" title="实现环境"></a>实现环境</h4><ul>
<li>已经完成了zabbix基本环境部署</li>
<li>安装php环境</li>
<li>使用epel源，下载所需组件</li>
</ul>
<h4 id="下载Percona-Monitoring-Plugins"><a href="#下载Percona-Monitoring-Plugins" class="headerlink" title="下载Percona Monitoring Plugins"></a>下载Percona Monitoring Plugins</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">#下载文件</div><div class="line">wget https://www.percona.com/downloads/percona-monitoring-plugins/1.1.1/percona-zabbix-templates-1.1.1-1.noarch.rpm</div><div class="line">#提取下载的rpm文件</div><div class="line">[root@localhost ~]# rpm2cpio percona-zabbix-templates-1.1.1-1.noarch.rpm |cpio -div</div><div class="line">&gt;目录文件说明</div><div class="line">#脚本文件路径</div><div class="line">var/lib/zabbix/percona/scripts/</div><div class="line">#key文件位置</div><div class="line">var/lib/zabbix/percona/templates/userparameter_percona_mysql.conf</div><div class="line">#模板文件位置</div><div class="line">var/lib/zabbix/percona/templates/zabbix_agent_template_percona_mysql_server_ht_2.0.9-sver1.1.1.xml</div><div class="line"># 安装percona monitoring plugins</div><div class="line">[root@localhost ~]# rpm -ivh percona-zabbix-templates-1.1.1-1.noarch.rpm</div></pre></td></tr></table></figure>
<h4 id="安装php环境"><a href="#安装php环境" class="headerlink" title="安装php环境"></a>安装php环境</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# yum install php php-mysql</div></pre></td></tr></table></figure>
<h4 id="复制文件"><a href="#复制文件" class="headerlink" title="复制文件"></a>复制文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">将key的子配置文件复制到/etc/zabbix/zabbix_agentd.d/</div><div class="line">``插曲``由于版本不同，所以实际文件位置也不同，这个位置可以在agent的包里看到</div><div class="line">rpm -ql zabbix22-agent-2.2.1-5.el6.x86_64</div><div class="line">/usr/share/doc/zabbix22-agent-2.2.1/userparameter_mysql.conf</div><div class="line">[root@localhost zabbix]# cp /var/lib/zabbix/percona/templates/userparameter_percona_mysql.conf /etc/zabbix/zabbix_agentd.d/</div></pre></td></tr></table></figure>
<h4 id="重启zabbix-agent服务"><a href="#重启zabbix-agent服务" class="headerlink" title="重启zabbix-agent服务"></a>重启zabbix-agent服务</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/etc/init.d/zabbix-agent restart</div></pre></td></tr></table></figure>
<h4 id="修改脚本"><a href="#修改脚本" class="headerlink" title="修改脚本"></a>修改脚本</h4><p>修改脚本中的用户名和密码,用户名和密码为本机数据库的账户和密码，并不需要特别的权限<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# vim /var/lib/zabbix/percona/scripts/ss_get_mysql_stats.php</div></pre></td></tr></table></figure></p>
<h4 id="没有用户"><a href="#没有用户" class="headerlink" title="没有用户"></a>没有用户</h4><p>添加数据库的用户<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">mysql&gt;</span><span class="bash"> grant process,super,select on *.* to zabbix@localhost identified by <span class="string">'zabbix'</span>;</span></div><div class="line"><span class="meta">mysql&gt;</span><span class="bash"> flush privileges;</span></div></pre></td></tr></table></figure></p>
<h4 id="脚本调试"><a href="#脚本调试" class="headerlink" title="脚本调试"></a>脚本调试</h4><p>运行脚本，只要不报error就是没问题<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@centos-01 percona]# /var/lib/zabbix/percona/scripts/get_mysql_stats_wrapper.sh gg</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CentOS环境搭建zabbix2.2监控]]></title>
      <url>http://arvon.top/2015/09/09/CentOS%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BAzabbix%E7%9B%91%E6%8E%A7/</url>
      <content type="html"><![CDATA[<p>##zabbix server<br>更新：此版本为2.2版本，已更新3.0版本</p>
<a id="more"></a>
<h3 id="配置yum源"><a href="#配置yum源" class="headerlink" title="配置yum源"></a>配置yum源</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">rpm -ivh http://repo.zabbix.com/zabbix/2.2/rhel/6/x86_64/zabbix-release-2.2-1.el6.noarch.rpm</div><div class="line">http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm</div></pre></td></tr></table></figure>
<h3 id="install-zabbix-server"><a href="#install-zabbix-server" class="headerlink" title="install zabbix server"></a>install zabbix server</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">yum install -y zabbix zabbix-get zabbix-server zabbix-web-mysql zabbix-web zabbix-agent	#这个装出来是1.8的版本。所以重来</div><div class="line"><span class="meta">#</span><span class="bash">* 下面是2.2版本的安装包</span></div><div class="line">yum install -y zabbix22 zabbix22-web-mysql zabbix22-server zabbix22-agent zabbix22-web zabbix22-dbfiles-mysql zabbix22-server-mysql</div></pre></td></tr></table></figure>
<h3 id="mysql-config"><a href="#mysql-config" class="headerlink" title="mysql config"></a>mysql config</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install -y mysql-server</div></pre></td></tr></table></figure>
<h4 id="修改mysql配置文件"><a href="#修改mysql配置文件" class="headerlink" title="修改mysql配置文件"></a>修改mysql配置文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">cp /etc/my.cnf /tmp</div><div class="line">egrep -v "(^#|^$)" 	#cat /etc/my.cnf | grep -v ^# | grep -v ^$</div><div class="line"><span class="meta">#</span><span class="bash">vi /etc/my.cnf</span></div><div class="line"><span class="meta">#</span><span class="bash">参照P27[Zabbix企业级分布式监控系统](http://item.jd.com/11522142.html?cu=<span class="literal">true</span>&amp;utm_source=baidu-search&amp;utm_medium=cpc&amp;utm_campaign=t_262767352_baidusearch&amp;utm_term=12777330128_0_0757319b492245849616c53bac31a23e)</span></div><div class="line">[mysqld]</div><div class="line">datadir=/var/lib/mysql</div><div class="line">socket=/var/lib/mysql/mysql.sock</div><div class="line">user=mysql</div><div class="line"><span class="meta">#</span><span class="bash"> Disabling symbolic-links is recommended to prevent assorted security risks</span></div><div class="line">symbolic-links=0</div><div class="line">character-set-server=utf8</div><div class="line">innodb_file_per_table=1</div><div class="line">[mysqld_safe]</div><div class="line">log-error=/var/log/mysqld.log</div><div class="line">pid-file=/var/run/mysqld/mysqld.pid</div></pre></td></tr></table></figure>
<h3 id="启动mysql服务"><a href="#启动mysql服务" class="headerlink" title="启动mysql服务"></a>启动mysql服务</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">yum install mysql-server -y</div><div class="line">service mysqld start</div><div class="line">ps -ef | grep mysql</div><div class="line">netstat -nlput | grep 3306</div></pre></td></tr></table></figure>
<h4 id="mysql设置"><a href="#mysql设置" class="headerlink" title="mysql设置"></a>mysql设置</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">mysqladmin -uroot password admin</div><div class="line">mysql -uroot -padmin</div><div class="line"><span class="meta">mysql&gt;</span><span class="bash"> create database zabbix character <span class="built_in">set</span> utf8;</span></div><div class="line"><span class="meta">mysql&gt;</span><span class="bash"> grant all privileges on zabbix.* to zabbix@localhost identified by <span class="string">'zabbix'</span>;</span></div><div class="line"><span class="meta">mysql&gt;</span><span class="bash"> flush privileges;</span></div></pre></td></tr></table></figure>
<h3 id="创建zabbix的数据库"><a href="#创建zabbix的数据库" class="headerlink" title="创建zabbix的数据库"></a>创建zabbix的数据库</h3><ul>
<li>zabbix连接数据：zabbix/zabbix<h3 id="导入zabbix的数据库"><a href="#导入zabbix的数据库" class="headerlink" title="导入zabbix的数据库"></a>导入zabbix的数据库</h3><h4 id="进入数据库导入"><a href="#进入数据库导入" class="headerlink" title="进入数据库导入"></a>进入数据库导入</h4>mysql&gt;use zabbix<br>###倒入sql一定按顺序<code>一定</code></li>
<li><code>必须多说两句</code>，这个地方卡了我整整一天，报错贴图在最后<br>source /usr/share/zabbix-mysql/schema.sql<br>source /usr/share/zabbix-mysql/images.sql<br>source /usr/share/zabbix-mysql/data.sql<h4 id="在数据库外导入"><a href="#在数据库外导入" class="headerlink" title="在数据库外导入"></a>在数据库外导入</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mysql -uzabbix -pzabbix zabbix &lt; /usr/share/zabbix-mysql/schema.sql</div><div class="line">mysql -uzabbix -p_zabbix_ zabbix &lt; /usr/share/zabbix-mysql/images.sql</div><div class="line">mysql -uzabbix -p_zabbix_ zabbix &lt; /usr/share/zabbix-mysql/data.sql</div></pre></td></tr></table></figure>
</li>
</ul>
<p>###配置zabbix_server.conf</p>
<ul>
<li><p>默认参数：<br>  egrep -v “(^#|^$)” /etc/zabbix/zabbix_server.conf</p>
  <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">LogFile=/var/log/zabbix/zabbix_server.log</div><div class="line">LogFileSize=0</div><div class="line">PidFile=/var/run/zabbix/zabbix.pid</div><div class="line">DBName=zabbix</div><div class="line">DBUser=zabbix</div><div class="line">DBSocket=/var/lib/mysql/mysql.sock</div><div class="line">AlertScriptsPath=/var/lib/zabbix/</div></pre></td></tr></table></figure>
</li>
<li><p>修改后参数：<br>  主要添加字段为：DBpassword=zabbix</p>
</li>
</ul>
<h4 id="iptables-amp-Selinux设置"><a href="#iptables-amp-Selinux设置" class="headerlink" title="iptables&amp;Selinux设置"></a>iptables&amp;Selinux设置</h4><ul>
<li>iptables设置(注意顺序)<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">-A INPUT -m state --state NEW -m tcp -p tcp --dport 80 -j ACCEPT</div><div class="line">-A INPUT -m state --state NEW -m tcp -p tcp --dport 10051 -j ACCEPT</div><div class="line">-A OUTPUT -m state --state NEW -m tcp -p tcp --dport 10050 -j ACCEPT</div><div class="line">-A INPUT -m state --state NEW -m tcp -p tcp --sport 10050 -j ACCEPT</div><div class="line"><span class="meta">#</span><span class="bash">* Selinux关闭</span></div><div class="line">[root@localhost ~]# setenforce 0</div><div class="line">[root@localhost ~]# getenforce</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="启动zabbix服务-amp-http服务"><a href="#启动zabbix服务-amp-http服务" class="headerlink" title="启动zabbix服务&amp;http服务"></a>启动zabbix服务&amp;http服务</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo /etc/init.d/zabbix-server start</div><div class="line">sudo /etc/init.d/httpd start</div></pre></td></tr></table></figure>
<h2 id="zabbix-agent"><a href="#zabbix-agent" class="headerlink" title="zabbix agent"></a>zabbix agent</h2><h3 id="sofaware"><a href="#sofaware" class="headerlink" title="sofaware"></a>sofaware</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">rpm -ivh http://repo.zabbix.com/zabbix/2.2/rhel/6/x86_64/zabbix-release-2.2-1.el6.noarch.rpm</div><div class="line">yum install zabbix zabbix-agent</div></pre></td></tr></table></figure>
<h3 id="configure"><a href="#configure" class="headerlink" title="configure"></a>configure</h3><h4 id="iptables"><a href="#iptables" class="headerlink" title="iptables"></a>iptables</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">-A INPUT -m state --state NEW -m tcp -p tcp --dport 10050 -j ACCEPT</div><div class="line">-A OUTPUT -m state --state NEW -m tcp -p tcp --dport 10051 -j ACCEPT</div></pre></td></tr></table></figure>
<h4 id="zabbix-agentd-conf"><a href="#zabbix-agentd-conf" class="headerlink" title="zabbix_agentd.conf"></a>zabbix_agentd.conf</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# egrep -v "(^#|^$)" /etc/zabbix/zabbix_agentd.conf</div><div class="line">PidFile=/var/run/zabbix/zabbix_agentd.pid</div><div class="line">LogFile=/var/log/zabbix/zabbix_agentd.log</div><div class="line">LogFileSize=0</div><div class="line">Server=192.168.138.133	#server IP</div><div class="line">ServerActive=192.168.138.133	#server IP</div><div class="line">Hostname=Centos-01.hostname</div><div class="line">Include=/etc/zabbix/zabbix_agentd.d/</div></pre></td></tr></table></figure>
<h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# /etc/init.d/zabbix-agent restart</div></pre></td></tr></table></figure>
<h4 id="zabbix添加主机"><a href="#zabbix添加主机" class="headerlink" title="zabbix添加主机"></a>zabbix添加主机</h4><h5 id="手动添加"><a href="#手动添加" class="headerlink" title="手动添加"></a>手动添加</h5><p><img src="http://i1.tietuku.com/29ff780785f8142b.png" alt="看图"><br><img src="http://i1.tietuku.com/a5071fd29e260241.png" alt=""></p>
<h5 id="自动添加"><a href="#自动添加" class="headerlink" title="自动添加"></a>自动添加</h5><p><img src="http://i1.tietuku.com/50818e58957d382a.png" alt=""><br><img src="http://i1.tietuku.com/5c8029d4a5750557.png" alt=""></p>
<p>##报错解决</p>
<h4 id="timezone问题"><a href="#timezone问题" class="headerlink" title="timezone问题"></a>timezone问题</h4><p><img src="http://i1.tietuku.com/6eab8e80bb3eb1f1.png" alt=""><br>php.ini配置文件设置<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cp /etc/php.ini /tmp/</div><div class="line">sudo vim /etc/php.ini</div><div class="line"><span class="meta">#</span><span class="bash">添加字段：date.timezone = Asia/Shanghai</span></div></pre></td></tr></table></figure></p>
<h4 id="web参数不满足要求问题"><a href="#web参数不满足要求问题" class="headerlink" title="web参数不满足要求问题"></a>web参数不满足要求问题</h4><p><img src="http://i1.tietuku.com/0d83e480b0e348c7.png" alt=""><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cp /etc/httpd/conf.d/zabbix.conf /tmp/</div><div class="line">sudo vim /etc/httpd/conf.d/zabbix.conf</div></pre></td></tr></table></figure></p>
<blockquote>
<p>修改其中字段为以下</p>
<p><directory "="" usr="" share="" zabbix"=""><br>    Options FollowSymLinks<br>    AllowOverride None<br>    Order allow,deny<br>    Allow from all<br>    php_value date:timezone Asia/Shanghai<br>    php_value max_execution_time 300<br>    php_value post_max_size 16M<br>    php_value max_input_time 300<br>    php_value memory_limit 128M<br>    php_value upload_max_filesize 2M<br></directory><br>然后重启httpd服务</p>
</blockquote>
<h4 id="默认登陆账号密码"><a href="#默认登陆账号密码" class="headerlink" title="默认登陆账号密码"></a>默认登陆账号密码</h4><p>账户：Admin<br>密码：zabbix</p>
<h4 id="zabbix忘记密码，将旧密码修改为arvon"><a href="#zabbix忘记密码，将旧密码修改为arvon" class="headerlink" title="zabbix忘记密码，将旧密码修改为arvon"></a>zabbix忘记密码，将旧密码修改为arvon</h4><p>登陆部署机数据库，修改数据库中的密码，步骤如下：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">echo -n arvon | openssl md5</div><div class="line">(stdin)= 5c48aaaa95a1797ffb2dc32699b0c6c3</div><div class="line"><span class="meta">&gt;</span><span class="bash">mysql -uname -ppassword</span></div><div class="line"><span class="meta">&gt;</span><span class="bash">use zabbix;</span></div><div class="line"><span class="meta">&gt;</span><span class="bash">select * from users;</span></div><div class="line"><span class="meta">#</span><span class="bash">先在外面生成的md5码该用了</span></div><div class="line"><span class="meta">&gt;</span><span class="bash">update users <span class="built_in">set</span>  passwd=<span class="string">'e2798af12a7a0f4f70b4d69efbc25f4d'</span> <span class="built_in">where</span> userid = <span class="string">'1'</span>;</span></div></pre></td></tr></table></figure></p>
<p><img src="http://i1.tietuku.com/75f80ce9269b455a.png" alt=""></p>
<h4 id="报错贴图“table-not-exist”"><a href="#报错贴图“table-not-exist”" class="headerlink" title="报错贴图“table not exist”"></a>报错贴图“table not exist”</h4><p><img src="http://i1.tietuku.com/3f75b678db942213.png" alt=""><br><img src="http://i1.tietuku.com/b585f7995c14ad19.png" alt=""></p>
<h4 id="epel源错误"><a href="#epel源错误" class="headerlink" title="epel源错误"></a>epel源错误</h4><p><img src="http://i1.tietuku.com/c53075f14306cd61.png" alt=""><br>修改文件“/etc/yum.repos.d/epel.repo”， 第一项epel，将baseurl的注释取消， mirrorlist注释掉。即可</p>
<h4 id="zabbixserver-web-报错“Zabbix-discoverer-processes-more-than-75-busy”"><a href="#zabbixserver-web-报错“Zabbix-discoverer-processes-more-than-75-busy”" class="headerlink" title="zabbixserver web 报错“Zabbix discoverer processes more than 75% busy”"></a>zabbixserver web 报错“Zabbix discoverer processes more than 75% busy”</h4><p><img src="http://i1.tietuku.com/281d34ca6408ac6e.png" alt=""></p>
<blockquote>
<p><a href="Zabbix discoverer processes more than 75% busy">参考</a></p>
</blockquote>
<h4 id="zabbix-server-is-not-running报错"><a href="#zabbix-server-is-not-running报错" class="headerlink" title="zabbix server is not running报错"></a>zabbix server is not running报错</h4><p><img src="http://i1.tietuku.com/21ba7ab71d649b6d.png" alt="错误如图"><br><img src="http://i1.tietuku.com/263e79625c329936.png" alt=""><br>解决：仅限于我个人使用，打死都想不到密码写错了，zabbix_server.conf里面的密码加了两个单引号，真是作死呀，就是看不出来</p>
<p>参考文档：<br><a href="http://zabbix.org/wiki/InstallOnCentOS_RHEL#Database" target="_blank" rel="external">zabbix wike</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[mysql主从]]></title>
      <url>http://arvon.top/2015/09/07/mysql%E4%B8%BB%E4%BB%8E%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<p>这篇题目占了好长时间了，一直说补上也没补上，今天没事，就弄个实验环境来记录一下。正所谓好记性不如烂笔头，那就写一下。</p>
<a id="more"></a>
<h4 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h4><ul>
<li><p>两台服务器</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# cat /etc/redhat-release</div><div class="line">CentOS release 6.7 (Final)</div><div class="line"><span class="meta">#</span><span class="bash">其中62做master，63做salve, 66为VIP</span></div></pre></td></tr></table></figure>
</li>
<li><p>mysql版本<br>mysql版本说明：mysqlAB复制版本都要高于3.2，slave版本可以高于master但不可以低于master</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# mysql -V</div><div class="line">mysql  Ver 14.14 Distrib 5.6.32, for Linux (x86_64) using  EditLine wrapper</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="Master配置"><a href="#Master配置" class="headerlink" title="Master配置"></a>Master配置</h4><ul>
<li><p>初始化mysql</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/etc/init.d/mysql start</div><div class="line">mysqladmin -uroot -parvon.top</div></pre></td></tr></table></figure>
</li>
<li><p>配置文件</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">vim /etc/my.cfg</span></div><div class="line">[mysqld]</div><div class="line">server-id = 1</div><div class="line"><span class="meta">#</span><span class="bash">backup这台设置2,</span></div><div class="line">log-bin = arvon-mysql-bin</div><div class="line"><span class="meta">#</span><span class="bash">binlog文件名称</span></div><div class="line">binlog-ignore-db = mysql,information_schema</div><div class="line"><span class="meta">#</span><span class="bash">忽略写入binlog日志的库</span></div><div class="line">auto-increment-increment = 2</div><div class="line"><span class="meta">#</span><span class="bash">字段变化增量值</span></div><div class="line">auto-increment-offset = 1</div><div class="line"><span class="meta">#</span><span class="bash">初始字段ID为1</span></div><div class="line">slave-skip-errors = all</div><div class="line"><span class="meta">#</span><span class="bash">忽略所有复制产生的错误</span></div></pre></td></tr></table></figure>
</li>
<li><p>添加slave读取master的用户和权限</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">mysql&gt;</span><span class="bash"> grant replication slave on *.* to <span class="string">'slave'</span>@<span class="string">'172.17.18.63'</span> identified by <span class="string">'blog.arvon.top'</span>;</span></div><div class="line"><span class="meta">mysql&gt;</span><span class="bash"> flush privileges;</span></div><div class="line"><span class="meta">#</span><span class="bash">给slave用户读取master的权限密码为blog.arvon.top</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="Slave配置"><a href="#Slave配置" class="headerlink" title="Slave配置"></a>Slave配置</h4><ul>
<li><p>测试salve用户登录是否正常</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql -h172.17.18.62 -uslave -pblog.arvon.top</div></pre></td></tr></table></figure>
</li>
<li><p>配置文件<br>先修改my.cnf文件，主要写入server-id,没有把后面server的主机端口密码信息直接写入配置文件是因为mysql5.5之后直接写会报错，mysql不认识，需要直接在mysql中用后面的命令指出。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">server-id=2</div></pre></td></tr></table></figure>
<p>mysql中要指出的变量,后面MASTER_LOG_FILE和MASTER_LOG_POS就是上面server配置端binglog和post的值</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">mysql&gt;</span><span class="bash"> CHANGE MASTER TO MASTER_HOST=<span class="string">'172.17.18.62'</span>,</span></div><div class="line"><span class="meta">   -&gt;</span><span class="bash"> MASTER_PORT=3306,</span></div><div class="line"><span class="meta">   -&gt;</span><span class="bash"> MASTER_USER=<span class="string">'slave'</span>,</span></div><div class="line"><span class="meta">   -&gt;</span><span class="bash"> MASTER_PASSWORD=<span class="string">'blog.arvon.top'</span>,</span></div><div class="line"><span class="meta">   -&gt;</span><span class="bash"> MASTER_LOG_FILE=<span class="string">'arvon-mysql-bin.000001'</span>,</span></div><div class="line"><span class="meta">   -&gt;</span><span class="bash"> MASTER_LOG_POS=120;</span></div><div class="line"><span class="meta">#</span><span class="bash">启动slave进程</span></div><div class="line"><span class="meta">mysql&gt;</span><span class="bash"> slave start;</span></div></pre></td></tr></table></figure>
</li>
<li><p>查看slave状态<br>共有两个线程一个为IO线程，一个为SQL进程,如图都为yes说明成功</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">mysql&gt;</span><span class="bash"> show slave status\G;</span></div></pre></td></tr></table></figure>
</li>
<li><p>测试一下<br>在master创建一个database，然后去slave查看一下是否有了，我这反正测试时成功的，哈哈。</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用fio工具测试linux的磁盘性能]]></title>
      <url>http://arvon.top/2015/08/24/%E4%BD%BF%E7%94%A8fio%E5%B7%A5%E5%85%B7%E6%B5%8B%E8%AF%95linux%E7%9A%84%E7%A3%81%E7%9B%98%E6%80%A7%E8%83%BD/</url>
      <content type="html"><![CDATA[<p>很多时候我们需要对服务器的性能进行评估，这就少不了运用合适的工具。其中fio是测试iops的一款很好用的工具，用来对硬件进行压力测试和验证，支持13中不同的I/O引擎，包括：sync、mmap、libaio、posixaio、SG v3、splice、null、network、syslet、guasi、solarisaio等等</p>
<h3 id="简单测试写性能"><a href="#简单测试写性能" class="headerlink" title="简单测试写性能"></a>简单测试写性能</h3><ul>
<li>使用dd简单测试<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">dd <span class="keyword">if</span>=<span class="regexp">/dev/zero</span> of=testfile bs=<span class="number">1</span>M count=<span class="number">1024</span> oflag=dsync</div><div class="line"><span class="comment">#采用dd创建一个1G的文件的磁盘写速度，IO引擎为dsync</span></div></pre></td></tr></table></figure>
</li>
</ul>
<a id="more"></a>
<h3 id="准备-amp-安装"><a href="#准备-amp-安装" class="headerlink" title="准备&amp;安装"></a>准备&amp;安装</h3><ul>
<li><a href="http://freecode.com/projects/fio/" target="_blank" rel="external">FIO官网</a></li>
<li>安装系统<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">wget http:<span class="regexp">//brick</span>.kernel.dk/snaps/fio-<span class="number">2.0</span>.<span class="number">7</span>.tar.gz</div><div class="line"><span class="comment">#download the software</span></div><div class="line">yum install libaio-devel</div><div class="line"><span class="comment">#安装依赖包</span></div><div class="line">tar -xvf fio-<span class="number">2.0</span>.<span class="number">7</span>.tar.gz</div><div class="line"><span class="comment">#decompression</span></div><div class="line">cd fio-<span class="number">2.0</span>.<span class="number">7</span></div><div class="line"><span class="comment">#进入解压目录</span></div><div class="line">make</div><div class="line">make install</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h3><ul>
<li>fio选项说明<blockquote>
<p>filename=/dev/sdb1       测试文件名称，通常选择需要测试的盘的data目录。<br>direct=1                 测试过程绕过机器自带的buffer。使测试结果更真实。<br>rw=randwrite             测试随机写的I/O<br>rw=randrw                测试随机写和读的I/O<br>bs=16k                   单次io的块文件大小为16k<br>bsrange=512-2048         同上，提定数据块的大小范围<br>size=5g    本次的测试文件大小为5g，以每次4k的io进行测试。<br>numjobs=30               本次的测试线程为30.<br>runtime=1000             测试时间为1000秒，如果不写则一直将5g文件分4k每次写完为止。<br>ioengine=psync           io引擎使用pync方式<br>rwmixwrite=30            在混合读写的模式下，写占30%<br>group_reporting          关于显示结果的，汇总每个进程的信息。<br>此外<br>lockmem=1g               只使用1g内存进行测试。<br>zero_buffers             用0初始化系统buffer。<br>nrfiles=8                每个进程生成文件的数量。</p>
</blockquote>
</li>
<li>例子<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#随机读</span></div><div class="line">fio -filename=<span class="regexp">/root/filename</span> -direct=<span class="number">1</span> -iodepth <span class="number">1</span> -thread -rw=randread -ioengine=psync -bs=<span class="number">16</span>k -size=<span class="number">2</span>G -numjobs=<span class="number">10</span> -runtime=<span class="number">1000</span> -group_reporting -name=mytest</div><div class="line"><span class="comment">#顺序读</span></div><div class="line">fio -filename=filename -direct=<span class="number">1</span> -iodepth <span class="number">1</span> -thread -rw=<span class="keyword">read</span> -ioengine=psync -bs=<span class="number">16</span>k -size=<span class="number">2</span>G -numjobs=<span class="number">30</span> -runtime=<span class="number">1000</span> -group_reporting -name=mytest</div><div class="line"><span class="comment">#随机写</span></div><div class="line">fio -filename=filename -direct=<span class="number">1</span> -iodepth <span class="number">1</span> -thread -rw=randwrite -ioengine=psync -bs=<span class="number">16</span>k -size=<span class="number">2</span>G -numjobs=<span class="number">30</span> -runtime=<span class="number">1000</span> -group_reporting -name=mytest</div><div class="line"><span class="comment">#顺序写</span></div><div class="line">fio -filename=filename -direct=<span class="number">1</span> -iodepth <span class="number">1</span> -thread -rw=<span class="keyword">write</span> -ioengine=psync -bs=<span class="number">16</span>k -size=<span class="number">2</span>G -numjobs=<span class="number">30</span> -runtime=<span class="number">1000</span> -group_reporting -name=mytest</div><div class="line"><span class="comment">#混合随机读写</span></div><div class="line">fio -filename=filename -direct=<span class="number">1</span> -iodepth <span class="number">1</span> -thread -rw=randrw -rwmixread=<span class="number">70</span> -ioengine=psync -bs=<span class="number">16</span>k -size=<span class="number">2</span>G -numjobs=<span class="number">30</span> -runtime=<span class="number">100</span> -group_reporting -name=mytest -ioscheduler=noop</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[yum源配置手册]]></title>
      <url>http://arvon.top/2015/08/21/yum%E6%BA%90%E9%85%8D%E7%BD%AE%E6%89%8B%E5%86%8C/</url>
      <content type="html"><![CDATA[<p>yum（yellow dog updater， modified）是一个在Fedora和RedHat以及SUSE中的Shell前端软件包管理器，能够从指定的服务器自动下载RPM包并安装，可以自动处理依赖关系，并且一次安装所有的依赖关系软件包。系统管理过程中，难免要找软件装软件，如果定制性不高的话，使用yum安装不失为一个好办法，废话少说，开始介绍</p>
<a id="more"></a>
<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">1. 升级系统</span></div><div class="line">yum update</div><div class="line">yum -y update mysql	#升级特定的软件</div><div class="line"><span class="meta">#</span><span class="bash">2. 安装指定的软件包</span></div><div class="line">yum -y install vsftpd</div><div class="line"><span class="meta">#</span><span class="bash">3. 卸载指定的软件包</span></div><div class="line">yum -y remore vsftpd mysql</div><div class="line"><span class="meta">#</span><span class="bash">4. 查看系统中已经安装的和可用的软件组，对于可用的软件组，你可以选择安装</span></div><div class="line">yum grouplist</div><div class="line"><span class="meta">#</span><span class="bash">5. 清除缓存中的rpm 头文件和包文件</span></div><div class="line">yum clean all</div><div class="line"><span class="meta">#</span><span class="bash">6. 搜索相关的软件包</span></div><div class="line">yum -y search Emacs</div><div class="line"><span class="meta">#</span><span class="bash">显示指定软件包的信息</span></div><div class="line">yum info Emacs</div><div class="line"><span class="meta">#</span><span class="bash">查询指定软件包的依赖信息，emacs依赖的模块不少啊</span></div><div class="line">yum deplist emacs</div><div class="line"><span class="meta">#</span><span class="bash">列出所有以 yum 开头的软件包</span></div><div class="line">yum list yum\*</div><div class="line"><span class="meta">#</span><span class="bash">10. 列出已经安装的但是不包含在资源库中的rpm 包</span></div><div class="line">yum list extras</div></pre></td></tr></table></figure>
<h3 id="Repo配置文件"><a href="#Repo配置文件" class="headerlink" title="Repo配置文件"></a>Repo配置文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">配置文件位于``/etc/yum.repos.d/*.repo``,扩展名都为Repo，要想不生效，可直接修改后缀，如改为*.reop_bak</span></div><div class="line"><span class="meta">#</span><span class="bash">配置文件解释</span></div><div class="line">arvon@Mo:~/arvon_work&gt; cat CentOS6-Base-163.repo | grep -v '^#'</div><div class="line">[base]</div><div class="line"><span class="meta">#</span><span class="bash">表示标识名称</span></div><div class="line">name=CentOS-$releasever - Base - 163.com</div><div class="line"><span class="meta">#</span><span class="bash">名字，其实可以随便起</span></div><div class="line">faliovermethod=priority</div><div class="line"><span class="meta">#</span><span class="bash">priority是默认值表示从列出的baseurl中顺序选择镜像服务器地址，roundrobin表示随机选择</span></div><div class="line">exclude=compiz**compiz*fusion-icon*</div><div class="line"><span class="meta">#</span><span class="bash">用来禁止这个仓库某些软件包的安装，可使用通配符，并以空格分隔。视情况添加</span></div><div class="line">baseurl=http://mirrors.163.com/centos/$releasever/os/$basearch/</div><div class="line"><span class="meta">#</span><span class="bash">引用的地址,http://网站  file://本地		ftp://文件服务器</span></div><div class="line">mirrorlist=http://mirrors.fedoraproject.org/mirrorlist?repo=fedora-$releasever$arch=$basearch</div><div class="line"><span class="meta">#</span><span class="bash">是指一个镜像服务器地址列表，通常是开启的，在浏览器打开据说可以看到可用的镜像服务器列表</span></div><div class="line">enabled=1</div><div class="line"><span class="meta">#</span><span class="bash">enabled=1为启用这个源，0为不启用这个源</span></div><div class="line">gpgcheck=1</div><div class="line"><span class="meta">#</span><span class="bash">表示这个repo中下载的rpm将惊醒gpg校验，以确定rpm包的来源是有效和安全的</span></div><div class="line">gpgkey=http://mirror.centos.org/centos/RPM-GPG-KEY-CentOS-6</div><div class="line"><span class="meta">#</span><span class="bash">定义用于校验的gpg密匙</span></div></pre></td></tr></table></figure>
<ul>
<li>粘贴可用的epel的yum源<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">[epel]</div><div class="line">name=Extra Packages for Enterprise Linux 6 - $basearch</div><div class="line"><span class="meta">#</span><span class="bash">baseurl=http://download.fedoraproject.org/pub/epel/6/<span class="variable">$basearch</span></span></div><div class="line">mirrorlist=https://mirrors.fedoraproject.org/metalink?repo=epel-6&amp;arch=$basearch</div><div class="line">failovermethod=priority</div><div class="line">enabled=1</div><div class="line">gpgcheck=1</div><div class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-6</div><div class="line">[epel-debuginfo]  </div><div class="line">name=Extra Packages for Enterprise Linux 6 - $basearch - Debug</div><div class="line"><span class="meta">#</span><span class="bash">baseurl=http://download.fedoraproject.org/pub/epel/6/<span class="variable">$basearch</span>/debug</span></div><div class="line">mirrorlist=https://mirrors.fedoraproject.org/metalink?repo=epel-debug-6&amp;arch=$basearch</div><div class="line">failovermethod=priority</div><div class="line">enabled=0</div><div class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-6</div><div class="line">gpgcheck=1  </div><div class="line">[epel-source]</div><div class="line">name=Extra Packages for Enterprise Linux 6 - $basearch - Source</div><div class="line"><span class="meta">#</span><span class="bash">baseurl=http://download.fedoraproject.org/pub/epel/6/SRPMS</span></div><div class="line">mirrorlist=https://mirrors.fedoraproject.org/metalink?repo=epel-source-6&amp;arch=$basearch</div><div class="line">failovermethod=priority</div><div class="line">enabled=0</div><div class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-6</div><div class="line">gpgcheck=1</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="常用的yum源站"><a href="#常用的yum源站" class="headerlink" title="常用的yum源站"></a>常用的yum源站</h3><ol>
<li>EPEL源</li>
</ol>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">URL</span></div><div class="line">https://admin.fedoraproject.org/mirrormanager/</div><div class="line"><span class="meta">#</span><span class="bash">EPEL-REPO-RPM</span></div><div class="line">wget https://dl.fedoraproject.org/pub/epel/epel-release-latest-5.noarch.rpm</div><div class="line">wget https://dl.fedoraproject.org/pub/epel/epel-release-latest-6.noarch.rpm</div><div class="line">axel https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm</div></pre></td></tr></table></figure>
<ol>
<li>ALI源</li>
</ol>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">URL</span></div><div class="line">http://mirrors.aliyun.com/repo/</div><div class="line"><span class="meta">#</span><span class="bash">ALI-REPO</span></div><div class="line">wget http://mirrors.aliyun.com/repo/Centos-6.repo</div><div class="line">axel http://mirrors.aliyun.com/repo/Centos-7.repo</div><div class="line"><span class="meta">#</span><span class="bash">ALI-EPLE-REPO</span></div><div class="line">wget http://mirrors.aliyun.com/repo/epel-6.repo</div><div class="line">axel http://mirrors.aliyun.com/repo/epel-7.repo</div><div class="line"><span class="meta">#</span><span class="bash">ALI-FEDORA-REPO</span></div><div class="line">wget http://mirrors.aliyun.com/repo/fedora.repo</div></pre></td></tr></table></figure>
<h3 id="可能错误"><a href="#可能错误" class="headerlink" title="可能错误"></a>可能错误</h3><ul>
<li>错误现象lock<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Loading "installonlyn" plugin</div><div class="line">Existing lock /var/run/yum.pid: another copy is running. Aborting.</div><div class="line"><span class="meta">#</span><span class="bash">解释</span></div><div class="line">这是因为yum在更新， 此时是kill不掉的该进程的， 正确的解决方法是让它停止更新即可。</div><div class="line">可以直接输入 rm -f /var/run/yum.pid</div><div class="line">也可以/etc/init.d/yum-updatesd stop</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[lsof命令]]></title>
      <url>http://arvon.top/2015/08/21/lsof%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<p><strong>简介：</strong>lsof命令既（list open files）Lsof 是遵从Unix 哲学的典范，它只做一件事情，并且做的相当完美——它可以列出某个进程打开的所有文件信息。打开的文件可能是普通的文件，目录，NFS文件，块文件，字符文件，共享库，常规管道，明明管道，符号链接，Socket流，网络Socket，UNIX域Socket，以及其它更多。因为Unix系统中几乎所有东西都是文件，你可以想象lsof该有多有用。</p>
<a id="more"></a>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul>
<li><p>yum安装</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install lsof -y</div></pre></td></tr></table></figure>
</li>
<li><p>源码安装</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">wget http://down1.chinaunix.net/distfiles/lsof_4.76.tar.gz</div><div class="line">tar -zxvf lsof.tar.gz</div><div class="line">cd lsof_4.78</div><div class="line">tar xvf lsof_4.78_srv.tar</div><div class="line">./configure lunux</div><div class="line">make</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><ul>
<li><p>lsof<br>不加参数的输出，是列出所有进程打开的所有文件</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">arvon@Mo:~&gt; lsof</div><div class="line">lsof: WARNING: can't stat() fuse.gvfs-fuse-daemon file system /root/.gvfs</div><div class="line">    Output information may be incomplete.</div><div class="line">COMMAND     PID         USER        FD      	TYPE 		DEVICE 			SIZE/OFF   NODE 	NAME</div><div class="line">进程的名称	进程标识符	进程所有者	文件描述符	文件类型	指定磁盘的名称		文件的大小 索引节点 打开文件的确切名称</div><div class="line">init          1       root  cwd   unknown                        /proc/1/cwd (readlink: Permission denied)</div><div class="line">init          1       root  rtd   unknown                        /proc/1/root (readlink: Permission denied)</div><div class="line">init          1       root  txt   unknown                        /proc/1/exe (readlink: Permission denied)</div><div class="line">init          1       root NOFD                                  /proc/1/fd (opendir: Permission denied)</div></pre></td></tr></table></figure>
</li>
<li><p>lsof /path/to/file /path/to/file2<br>找出谁在使用某个文件,可一次指定多个文件</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">arvon@Mo:~&gt; lsof /home/arvon</div><div class="line">lsof: WARNING: can't stat() fuse.gvfs-fuse-daemon file system /root/.gvfs</div><div class="line">    Output information may be incomplete.</div><div class="line">COMMAND   PID  USER   FD   TYPE DEVICE SIZE/OFF   NODE NAME</div><div class="line">bash    24519 arvon  cwd    DIR    8,2     4096 463289 /home/arvon</div><div class="line">lsof    25011 arvon  cwd    DIR    8,2     4096 463289 /home/arvon</div><div class="line">lsof    25012 arvon  cwd    DIR    8,2     4096 463289 /home/arvon</div></pre></td></tr></table></figure>
</li>
<li><p>lsof +D /usr/lib<br>加上+D参数，lsof会对指定目录进行递归查找，注意这个参数要比grep版本慢</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">arvon@Mo:~&gt; lsof +D /usr/lib</div><div class="line">lsof: WARNING: can't stat() fuse.gvfs-fuse-daemon file system /root/.gvfs</div><div class="line">    Output information may be incomplete.</div><div class="line">COMMAND   PID  USER  FD   TYPE DEVICE SIZE/OFF   NODE NAME</div><div class="line">bash    24519 arvon mem    REG    8,2   256324 445427 /usr/lib/locale/es_VE.utf8/LC_CTYPE</div><div class="line">bash    24519 arvon mem    REG    8,2       54 445420 /usr/lib/locale/om_ET/LC_NUMERIC</div><div class="line">bash    24519 arvon mem    REG    8,2     2454 431855 /usr/lib/locale/en_US.utf8/LC_TIME</div></pre></td></tr></table></figure>
</li>
<li><p>查看文件、设备被哪些进程占用</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> lsof /dev/tty1</span></div><div class="line">COMMAND     PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME</div><div class="line">bash       1770 jian    0u   CHR    4,1      0t0 1045 /dev/tty1</div><div class="line">bash       1770 jian    1u   CHR    4,1      0t0 1045 /dev/tty1</div><div class="line">bash       1770 jian    2u   CHR    4,1      0t0 1045 /dev/tty1</div><div class="line">bash       1770 jian  255u   CHR    4,1      0t0 1045 /dev/tty1</div><div class="line">startx     1845 jian    0u   CHR    4,1      0t0 1045 /dev/tty1</div><div class="line">startx     1845 jian    1u   CHR    4,1      0t0 1045 /dev/tty1</div><div class="line">...</div></pre></td></tr></table></figure>
</li>
<li><p>监控文件系统：指定目录、挂载点，可以看到有哪些进程打开了其下的文件</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> lsof /data/</span></div><div class="line">COMMAND   PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME</div><div class="line">bash    15983 jian  cwd    DIR    8,5     4096 8252 /data/backup</div><div class="line">...</div></pre></td></tr></table></figure>
</li>
<li><p>列出被指定进程名打开的文件</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> lsof -c ssh -c init</span></div><div class="line">COMMAND    PID   USER   FD   TYPE DEVICE SIZE/OFF   NODE NAME</div><div class="line">init         1       root  txt    REG        8,1   124704  917562 /sbin/init</div><div class="line">init         1       root  mem    REG        8,1  1434180 1442625 /lib/i386-linux-gnu/libc-2.13.so</div><div class="line">init         1       root  mem    REG        8,1    30684 1442694 /lib/i386-linux-gnu/librt-2.13.so</div><div class="line">...</div><div class="line">ssh-agent 1528 lakshmanan    1u   CHR        1,3      0t0    4369 /dev/null</div><div class="line">ssh-agent 1528 lakshmanan    2u   CHR        1,3      0t0    4369 /dev/null</div><div class="line">ssh-agent 1528 lakshmanan    3u  unix 0xdf70e240      0t0   10464 /tmp/ssh-sUymKXxw1495/agent.1495</div></pre></td></tr></table></figure>
</li>
<li><p>监控进程：指定进程号，可以查看该进程打开的文件：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> lsof -p 2064</span></div><div class="line">COMMAND  PID USER   FD   TYPE     DEVICE SIZE/OFF    NODE NAME</div><div class="line">firefox 2064 jian  cwd    DIR        8,6     4096 1571780 /home/jian</div><div class="line">firefox 2064 jian  rtd    DIR        8,6     4096       2 /</div><div class="line">firefox 2064 jian  txt    REG        8,6    44224 1985670 /usr/lib/firefox-12.0/firefox</div><div class="line">firefox 2064 jian  mem    REG        8,6 14707012  925361 /usr/share/fonts/chinese/msyhbd.ttf</div><div class="line">firefox 2064 jian  mem    REG        8,6 15067744  925362 /usr/share/fonts/chinese/msyh.ttf</div><div class="line">firefox 2064 jian  mem    REG        8,6 16791251 1701681 /usr/share/fonts/wenquanyi/wqy-zenhei.ttc</div><div class="line">firefox 2064 jian  mem    REG       0,16 67108904   10203 /dev/shm/pulse-shm-3021850167</div><div class="line">...</div></pre></td></tr></table></figure>
</li>
<li><p>当你想要杀掉某个用户所有打开的文件、设备，你可以这样：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">kill -9 `lsof -t -u lakshmanan`</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="监控网络"><a href="#监控网络" class="headerlink" title="监控网络"></a>监控网络</h3><ul>
<li><p>监控网络:查看<code>指定端口有哪些进程在使用</code>（lsof -i 列出所有的打开的网络连接）：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> lsof -i:22</span></div><div class="line">COMMAND  PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME</div><div class="line">sshd    1569 root    3u  IPv4  10303      0t0  TCP *:ssh (LISTEN)</div><div class="line">sshd    1569 root    4u  IPv6  10305      0t0  TCP *:ssh (LISTEN)</div><div class="line">...</div></pre></td></tr></table></figure>
</li>
<li><p>监控网络：列出被某个进程打开所有的网络文件：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">lsof -i -a -p 234</div><div class="line"><span class="meta">#</span><span class="bash">lsof -i <span class="_">-a</span> -c ssh</span></div></pre></td></tr></table></figure>
</li>
<li><p>监控网络：列出所有 tcp、udp 连接：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">lsof -i tcp;</div><div class="line">lsof -i udp;</div></pre></td></tr></table></figure>
</li>
<li><p>列出所有NFS文件</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">lsof -N -u lakshmanan -a</div></pre></td></tr></table></figure>
</li>
<li><p>查看指定网口有哪些进程在使用</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> lsof -i@192.168.1.91</span></div><div class="line">COMMAND     PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME</div><div class="line">skype      1909 jian   54u  IPv4   9116      0t0  TCP 192.168.1.91:40640-&gt;64.4.23.153:40047 (ESTABLISHED)</div><div class="line">pidgin     1973 jian    7u  IPv4   6599      0t0  TCP 192.168.1.91:59311-&gt;hx-in-f125.1e100.net:https   (ESTABLISHED)</div><div class="line">pidgin     1973 jian   13u  IPv4   9260      0t0  TCP 192.168.1.91:54447-&gt;by2msg3010511.phx.gbl:msnp   (ESTABLISHED)</div><div class="line">...</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="监控用户"><a href="#监控用户" class="headerlink" title="监控用户"></a>监控用户</h3><ul>
<li><p>查看指定用戶打开的文件（lsof -u ^lakshmanan 可以排除某用户）：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> lsof -u messagebus</span></div><div class="line">COMMAND    PID       USER   FD   TYPE     DEVICE SIZE/OFF    NODE NAME</div><div class="line">dbus-daem 1805 messagebus  cwd    DIR        8,6     4096       2 /</div><div class="line">dbus-daem 1805 messagebus  rtd    DIR        8,6     4096       2 /</div><div class="line">dbus-daem 1805 messagebus  txt    REG        8,6  1235361 1834948 /usr/bin/dbus-daemon</div><div class="line">dbus-daem 1805 messagebus  mem    REG        8,6   210473 1700647 /lib/libnss_files-2.15.so</div><div class="line">dbus-daem 1805 messagebus  mem    REG        8,6   190145 1700642 /lib/libnss_nis-2.15.so</div><div class="line">dbus-daem 1805 messagebus  mem    REG        8,6   490366 1700636 /lib/libnsl-2.15.so</div><div class="line">...</div></pre></td></tr></table></figure>
</li>
<li><p>查看指定程序打开的文件：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> lsof -c firefox</span></div><div class="line">COMMAND  PID USER   FD   TYPE     DEVICE SIZE/OFF    NODE NAME</div><div class="line">firefox 2064 jian  cwd    DIR        8,6     4096 1571780 /home/jian</div><div class="line">firefox 2064 jian  rtd    DIR        8,6     4096       2 /</div><div class="line">firefox 2064 jian  txt    REG        8,6    44224 1985670 /usr/lib/firefox-12.0/firefox</div><div class="line">firefox 2064 jian  mem    REG        8,6 14707012  925361 /usr/share/fonts/chinese/msyhbd.ttf</div><div class="line">firefox 2064 jian  mem    REG        8,6 15067744  925362 /usr/share/fonts/chinese/msyh.ttf</div><div class="line">firefox 2064 jian  mem    REG        8,6 16791251 1701681 /usr/share/fonts/wenquanyi/wqy-zenhei.ttc</div><div class="line">...</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h3><ul>
<li><p>只有多个查询条件都满足， 用 “-a” 参数，默认是 -o 。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> lsof <span class="_">-a</span> -c bash -u root</span></div><div class="line">COMMAND  PID USER   FD   TYPE DEVICE SIZE/OFF    NODE NAME</div><div class="line">bash    1986 root  cwd    DIR    8,6     4096 1701593 /root/lab</div><div class="line">bash    1986 root  rtd    DIR    8,6     4096       2 /</div><div class="line">bash    1986 root  txt    REG    8,6  1994157 1700632 /bin/bash</div><div class="line">bash    1986 root  mem    REG    8,6  9690800  405214 /usr/lib/locale/locale-archive</div><div class="line">bash    1986 root  mem    REG    8,6   210473 1700647 /lib/libnss_files-2.15.so</div></pre></td></tr></table></figure>
</li>
<li><p><code>关于磁盘空间告警 df -h --max=1 与 du -hx --max=1 显示不一致的问题</code></p>
<blockquote>
<p>最常见的的还是下面这种情况：<br>lsof|grep -i delete<br>看看被删除的文件：有些删了文件，但是进程没 reload，那些空间还是占用的，你可以理解为类似 windows 下的进程句柄没释放的概念吧~ 只是   windows 下如果有文件被进程使用，你一般是删不掉的，而 linux 虽然不做删除限制，但却要等到进程使用完文件才能完全释放，以防止进程奔溃，  这是操作系统对资源的管理差异吧~<br>例如 nginx 会有很多临时文件占用了 /tmp 目录，删掉后，依然占用着空间，<br>此时你可以：<br>pkill -9 nginx &amp;&amp; /etc/init.d/nginx restart</p>
</blockquote>
</li>
</ul>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://www.ibm.com/developerworks/cn/aix/library/au-lsof.html" target="_blank" rel="external">使用lsof查找打开的文件</a><br><a href="http://ylinux.org/blog/article/276" target="_blank" rel="external">实用系统工具lsof</a></p>
<hr>
<p>以上</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[zabbix Too many open files错误]]></title>
      <url>http://arvon.top/2015/08/21/Zabbix_Too_many_open_files%E9%94%99%E8%AF%AF/</url>
      <content type="html"><![CDATA[<h2 id="问题描述：今天看了zabbix监控，又一个agent-unreachable，然后惯例我要去重启agent，but并没有什么卵用。看报错，查log"><a href="#问题描述：今天看了zabbix监控，又一个agent-unreachable，然后惯例我要去重启agent，but并没有什么卵用。看报错，查log" class="headerlink" title="问题描述：今天看了zabbix监控，又一个agent unreachable，然后惯例我要去重启agent，but并没有什么卵用。看报错，查log"></a>问题描述：今天看了zabbix监控，又一个agent unreachable，然后惯例我要去重启agent，but并没有什么卵用。看报错，查log</h2><a id="more"></a>
<p>通过google有了一些眉目,以下摘自<a href="http://www.cnblogs.com/wgkgood/archive/2011/03/02/2066709.html" target="_blank" rel="external">google</a></p>
<blockquote>
<p>linux系统出现Too many open files 错误，这是因为文件描述符大小不够，或者有不正常的网络连接(Socket也是一种特殊的文件)、文件IO没有关闭并释放出文件描述符（文件句柄，File Operator）。<br>使用如下命令查看系统对允许打开最大文件描述符的配置：<br>ulimit -u 查看open files设置<br>ulimit -a 查看所有设置<br>ulimit -u 65535(新的open files 值)修改设置<br>ulimit -n 65536 设置用户可以同时打开的最大文件数（max open files）<br>　<br>如果本参数设置过小，对于并发访问量大的网站，可能会出现too many open files的错误 　<br>使用lsof -p pid [httpd进程的 pid、java的pid]来查看系统中apache进程和java运行时进程当前打开的文件资源，发现两者之和已经接近1024，大于了默认的设置。</p>
<p>修改配置：</p>
<p>修改/etc/security/limits.conf，在文件末加上</p>
<ul>
<li>soft nofile 65536</li>
<li>hard nofile 65536</li>
</ul>
<p>系统级文件描述符极限还可以通过将以下三行添加到 /etc/rc.d/rc.local 启动脚本中来设置：</p>
<ul>
<li>Increase system-wide file descriptor limit.<br>echo 65536 &gt; /proc/sys/fs/file-max<br>echo 65536 &gt; /proc/sys/fs/inode-max</li>
</ul>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[sed 命令实例]]></title>
      <url>http://arvon.top/2015/08/20/sed-%E5%91%BD%E4%BB%A4%E5%AE%9E%E4%BE%8B/</url>
      <content type="html"><![CDATA[<blockquote>
<p>sed命令在很有目的性的针对文本进行操作的时候还是十分有优势的。<br>sed 是一种在线编辑器，它一次处理一行内容。处理时，把当前处理的行存储在临时缓冲区中，称为“模式空间”（pattern space），接着用sed命令处理缓冲区中的内容，处理完成后，把缓冲区的内容送往屏幕。接着处理下一行，这样不断重复，直到文件末尾。文件内容并没有 改变，除非你使用重定向存储输出。Sed主要用来自动编辑一个或多个文件；简化对文件的反复操作；编写转换程序等。</p>
</blockquote>
<a id="more"></a>
<h3 id="sed使用参数"><a href="#sed使用参数" class="headerlink" title="sed使用参数"></a>sed使用参数</h3><ul>
<li>命令概览<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">[root@www ~]# sed [-nefr] [动作]</div><div class="line">选项与参数：</div><div class="line">-n ：使用安静(silent)模式。在一般 sed 的用法中，所有来自 STDIN 的数据一般都会被列出到终端上。但如果加上 -n 参数后，则只有经过sed   特殊处理的那一行(或者动作)才会被列出来。</div><div class="line">-e ：直接在命令列模式上进行 sed 的动作编辑；</div><div class="line">-f ：直接将 sed 的动作写在一个文件内， -f filename 则可以运行 filename 内的 sed 动作；</div><div class="line">-r ：sed 的动作支持的是延伸型正规表示法的语法。(默认是基础正规表示法语法)</div><div class="line">-i ：直接修改读取的文件内容，而不是输出到终端。</div><div class="line">动作说明： [n1[,n2]]function</div><div class="line">n1, n2 ：不见得会存在，一般代表『选择进行动作的行数』，举例来说，如果我的动作是需要在 10 到 20 行之间进行的，则『 10,20[动作行为]   』</div><div class="line">function：</div><div class="line">a ：新增， a 的后面可以接字串，而这些字串会在新的一行出现(目前的下一行)～</div><div class="line">c ：取代， c 的后面可以接字串，这些字串可以取代 n1,n2 之间的行！</div><div class="line">d ：删除，因为是删除啊，所以 d 后面通常不接任何咚咚；</div><div class="line">i ：插入， i 的后面可以接字串，而这些字串会在新的一行出现(目前的上一行)；</div><div class="line">p ：列印，亦即将某个选择的数据印出。通常 p 会与参数 sed -n 一起运行～</div><div class="line">s ：取代，可以直接进行取代的工作哩！通常这个 s 的动作可以搭配正规表示法！例如 1,20s/old/new/g 就是啦！</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><ul>
<li><p>将/etc/passwd内容列出，同事，将2-5行<code>删除</code></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">arvon@Mo:~&gt; nl /etc/passwd | sed '2, 5d'</div><div class="line">   1	at:x:25:25:Batch jobs daemon:/var/spool/atjobs:/bin/bash</div><div class="line">   6	gdm:x:107:112:Gnome Display Manager daemon:/var/lib/gdm:/bin/false</div><div class="line">   7	haldaemon:x:101:102:User for haldaemon:/var/run/hald:/bin/false</div><div class="line">   8	lp:x:4:7:Printing daemon:/var/spool/lpd:/bin/bash</div><div class="line"><span class="meta">#</span><span class="bash">只要删除第 2 行</span></div><div class="line">nl /etc/passwd | sed '2d'</div><div class="line"><span class="meta">#</span><span class="bash">删除3至最后一行</span></div><div class="line">nl /etc/passwd | sed '3,$d'</div></pre></td></tr></table></figure>
</li>
<li><p>在第二行后(亦即是加在第三行)<code>加上</code>『drink tea?』字样！</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">arvon@Mo:~&gt;  nl /etc/passwd | sed '2a drink tea'</div><div class="line">   1	at:x:25:25:Batch jobs daemon:/var/spool/atjobs:/bin/bash</div><div class="line">   2	bin:x:1:1:bin:/bin:/bin/bash</div><div class="line">drink tea</div><div class="line">   3	daemon:x:2:2:Daemon:/sbin:/bin/bash</div><div class="line"><span class="meta">#</span><span class="bash">那如果是要在第二行前</span></div><div class="line">nl /etc/passwd | sed '2i drink tea'</div></pre></td></tr></table></figure>
</li>
<li><p>如果是要<code>增加两行</code>以上，在第二行后面加入两行字，例如『Drink tea or …..』与『drink beer?』</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[root@www ~]# nl /etc/passwd | sed '2a Drink tea or ......\</div><div class="line"><span class="meta">&gt;</span><span class="bash"> drink beer ?<span class="string">'</span></span></div><div class="line">1 root:x:0:0:root:/root:/bin/bash</div><div class="line">2 bin:x:1:1:bin:/bin:/sbin/nologin</div><div class="line">Drink tea or ......</div><div class="line">drink beer ?</div><div class="line">3 daemon:x:2:2:daemon:/sbin:/sbin/nologin</div><div class="line">.....(后面省略).....</div></pre></td></tr></table></figure>
</li>
<li><p>将第2-5行的内容<code>取代</code>成为『No 2-5 number』呢？</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">arvon@Mo:~&gt; nl /etc/passwd | sed '2,5c No 2-5 number'</div><div class="line">   1	at:x:25:25:Batch jobs daemon:/var/spool/atjobs:/bin/bash</div><div class="line">No 2-5 number</div><div class="line">   6	gdm:x:107:112:Gnome Display Manager daemon:/var/lib/</div><div class="line">	 ...</div></pre></td></tr></table></figure>
</li>
<li><p>仅<code>列出</code> /etc/passwd 文件内的第 5-7 行</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">arvon@Mo:~&gt; cat /etc/passwd | sed -n '5,7p'</div><div class="line">games:x:12:100:Games account:/var/games:/bin/bash</div><div class="line">gdm:x:107:112:Gnome Display Manager daemon:/var/lib/gdm:/bin/false</div><div class="line">haldaemon:x:101:102:User for haldaemon:/var/run/hald:/bin/false</div></pre></td></tr></table></figure>
</li>
<li><p><code>搜索</code> /etc/passwd有root关键字的行</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">arvon@Mo:~&gt; nl /etc/passwd | sed '/root/p'</div><div class="line">   1	at:x:25:25:Batch jobs daemon:/var/spool/atjobs:/bin/bash</div><div class="line">   2	bin:x:1:1:bin:/bin:/bin/bash</div><div class="line">   3	daemon:x:2:2:Daemon:/sbin:/bin/bash</div><div class="line">   4	ftp:x:40:49:FTP account:/srv/ftp:/bin/bash</div><div class="line">   5	games:x:12:100:Games account:/var/games:/bin/bash</div><div class="line">   6	gdm:x:107:112:Gnome Display Manager daemon:/var/lib/gdm:/bin/false</div><div class="line">   7	haldaemon:x:101:102:User for haldaemon:/var/run/hald:/bin/false</div><div class="line">   8	lp:x:4:7:Printing daemon:/var/spool/lpd:/bin/bash</div><div class="line">   9	mail:x:8:12:Mailer daemon:/var/spool/clientmqueue:/bin/false</div><div class="line">   ...</div><div class="line"><span class="meta">#</span><span class="bash">如果root找到，除了输出所有行，还会输出匹配行。</span></div></pre></td></tr></table></figure>
</li>
<li><p>使用-n的时候将<code>只打印包含模板的行</code>。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">arvon@Mo:~&gt; nl /etc/passwd | sed -n '/root/p'</div><div class="line">  19	root:x:0:0:root:/root:/bin/bash</div></pre></td></tr></table></figure>
</li>
<li><p><code>删除</code>/etc/passwd所有包含root的行，其他行输出</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">arvon@Mo:~&gt; nl /etc/passwd | sed '/root/d'</div><div class="line">   1	at:x:25:25:Batch jobs daemon:/var/spool/atjobs:/bin/bash</div><div class="line">   2	bin:x:1:1:bin:/bin:/bin/bash</div><div class="line">   3	daemon:x:2:2:Daemon:/sbin:/bin/bash</div><div class="line">   4	ftp:x:40:49:FTP account:/srv/ftp:/bin/bash</div><div class="line">   5	games:x:12:100:Games account:/var/games:/bin/bash</div><div class="line">   ...</div></pre></td></tr></table></figure>
</li>
<li><p>搜索/etc/passwd,找到root对应的行，执行后面花括号中的一组命令，<code>每个命令之间用分号分隔，这里把bash替换为blueshell</code>，再输出这行：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">arvon@Mo:~&gt; nl /etc/passwd | sed -n '/root/&#123;s/bash/blueshell/;p&#125;'</div><div class="line">  19	root:x:0:0:root:/root:/bin/blueshell</div></pre></td></tr></table></figure>
</li>
<li><p>如果只<code>替换</code>/etc/passwd的第一个bash关键字为blueshell，就<code>退出</code></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">arvon@Mo:~&gt; nl /etc/passwd | sed -n '/bash/&#123;s/bash/blueshell/;p;q&#125;'</div><div class="line">   1	at:x:25:25:Batch jobs daemon:/var/spool/atjobs:/bin/blueshell</div></pre></td></tr></table></figure>
</li>
<li><p><code>获取主机ip</code></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">arvon@Mo:~&gt; /sbin/ifconfig eth0 | grep 'inet addr' | sed 's/^.*addr://g' | sed 's/Bcast.*$//g'</div><div class="line">192.168.138.130</div></pre></td></tr></table></figure>
</li>
<li><p>一条sed命令，删除/etc/passwd第三行到末尾的数据，并把bash替换为blueshell</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">arvon@Mo:~&gt; nl /etc/passwd | sed -e '3,$d' -e 's/bash/blueshell/'</div><div class="line">   1	at:x:25:25:Batch jobs daemon:/var/spool/atjobs:/bin/blueshell</div><div class="line">   2	bin:x:1:1:bin:/bin:/bin/blueshell</div></pre></td></tr></table></figure>
</li>
<li><p><code>直接修改</code>文件内容</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">利用 sed 将 regular_express.txt 内每一行结尾若为 . 则换成 !</span></div><div class="line">[root@www ~]# sed -i 's/\.$/\!/g' regular_express.txt</div></pre></td></tr></table></figure>
</li>
<li><p>利用 sed <code>直接</code>在 regular_express.txt 最后一行加入『# This is a test』</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">arvon@Mo:~/arvon_work&gt; sed -i '$a # THis is a test' hello</div><div class="line">arvon@Mo:~/arvon_work&gt; cat hello</div><div class="line">echo</div><div class="line">arvon</div><div class="line">is</div><div class="line">a</div><div class="line">good</div><div class="line">nor</div><div class="line">and</div><div class="line">or</div><div class="line"><span class="meta">#</span><span class="bash"> THis is a <span class="built_in">test</span></span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="参考地址"><a href="#参考地址" class="headerlink" title="参考地址"></a>参考地址</h3><p><a href="http://www.cnblogs.com/ggjucheng/archive/2013/01/13/2856901.html" target="_blank" rel="external">看的博客</a><br><a href="http://vbird.dic.ksu.edu.tw/linux_basic/0330regularex_2.php#sed" target="_blank" rel="external">鸟哥私房菜</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Perl语言入门]]></title>
      <url>http://arvon.top/2015/08/17/Perl%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A82/</url>
      <content type="html"><![CDATA[<p><strong>更新记录</strong><br>2015/08/17    拆开来记，start with foreach<br>2015/09/01 更新到子程序，最近有点懒惰了</p>
<a id="more"></a>
<p>##结构</p>
<p>###foreach控制结构</p>
<ul>
<li>Example one<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/perl</span></div><div class="line"><span class="keyword">use</span> <span class="number">5.010</span>;</div><div class="line"><span class="keyword">foreach</span> $rock (<span class="keyword">qw</span>/ <span class="keyword">my</span> girlfriend is Mo /)&#123;</div><div class="line">    <span class="keyword">print</span> <span class="string">"One word is named $rock\n"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>arvon@Mo:~/arvon_perl&gt; perl foreach_one.pl<br>One word is named my<br>One word is named girlfriend<br>One word is named is<br>One word is named Mo</p>
</blockquote>
<ul>
<li>Example two<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/perl</span></div><div class="line"><span class="keyword">use</span> <span class="number">5.010</span>;</div><div class="line">@rocks = <span class="keyword">qw</span>/ hello world Mo /;</div><div class="line"><span class="keyword">foreach</span> $rock(@rocks)&#123;</div><div class="line">    $rock = <span class="string">"\t$rock"</span>;</div><div class="line">    $rock .= <span class="string">"\n"</span>;</div><div class="line">    <span class="keyword">print</span> <span class="string">"\$rock now is $rock"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>arvon@Mo:~/arvon_perl&gt; perl foreach_two.pl<br>$rock now is     hello<br>$rock now is     world<br>$rock now is     Mo</p>
</blockquote>
<p>###Perl的默认变量$</p>
<ul>
<li>Example one<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/perl</span></div><div class="line"><span class="keyword">use</span> <span class="number">5.010</span>;</div><div class="line"><span class="keyword">foreach</span> (<span class="number">1</span>..<span class="number">10</span>)&#123;    <span class="comment">#使用了默认变量$_</span></div><div class="line">    <span class="keyword">print</span> <span class="string">"I can count to $_!\n"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>arvon@Mo:~/arvon_perl&gt; perl variable_one.pl<br>I can count to 1!<br>I can count to 2!<br>I can count to 3!<br>I can count to 4!<br>I can count to 5!<br>I can count to 6!<br>I can count to 7!<br>I can count to 8!<br>I can count to 9!<br>I can count to 10!</p>
</blockquote>
<p>###reverse操作符</p>
<ul>
<li>reverse操作符会读取列表的值，并按相反的次序返回该列表。<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/perl</span></div><div class="line"><span class="keyword">use</span> <span class="number">5.010</span>;</div><div class="line">@fred = <span class="number">6</span>..<span class="number">10</span>;</div><div class="line">@barney = <span class="keyword">reverse</span>(@fred);</div><div class="line">@wilma = <span class="keyword">reverse</span> <span class="number">6</span>..<span class="number">10</span>;</div><div class="line">@fred = <span class="keyword">reverse</span> @fred;</div><div class="line"><span class="keyword">print</span> <span class="string">"@fred, @barney, @wilma, \n"</span>;</div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>arvon@Mo:~/arvon_perl&gt; perl reverse_array.pl<br>10 9 8 7 6, 10 9 8 7 6, 10 9 8 7 6,</p>
</blockquote>
<p>###sort操作符</p>
<ul>
<li>其实啊，就是排序<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/perl</span></div><div class="line"><span class="keyword">use</span> <span class="number">5.010</span>;</div><div class="line">@rocks = <span class="keyword">qw</span>/ happy birthday to Mo /;</div><div class="line">@sorted = <span class="keyword">sort</span>(@rocks);</div><div class="line">@back = <span class="keyword">reverse</span> <span class="keyword">sort</span> @rocks;</div><div class="line">@rocks = <span class="keyword">sort</span> @rocks;</div><div class="line">@numbers = <span class="keyword">sort</span> <span class="number">97</span>..<span class="number">102</span>;</div><div class="line"><span class="keyword">print</span> <span class="string">"</span></div><div class="line">       @rocks \</div><div class="line">       @sorted\</div><div class="line">       @back\</div><div class="line">       @rocks\</div><div class="line">       @numbers";</div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>arvon@Mo:~/arvon_perl&gt; perl sort_string.pl</p>
</blockquote>
<pre><code>Mo birthday happy to
Mo birthday happy to
to happy birthday Mo
Mo birthday happy to
100 101 102 97 98 99
</code></pre><p>###each操作符</p>
<ul>
<li>每次对数组调用each，会返回数组中下一个元素所对应的两个值–该元素的索引以及该元素的值<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/perl</span></div><div class="line"><span class="keyword">use</span> <span class="number">5.012</span>;</div><div class="line"><span class="keyword">my</span> @rocks = <span class="keyword">qw</span>/ bedrock slate rubble granite /;</div><div class="line"><span class="keyword">while</span>( <span class="keyword">my</span>( $index, $value ) = <span class="keyword">each</span> @rocks)&#123;</div><div class="line">    <span class="keyword">say</span> <span class="string">"$index: $value"</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">foreach</span> $index(<span class="number">0</span> .. $#rocks )&#123;</div><div class="line">    <span class="keyword">print</span> <span class="string">"$index: $rocks[$index]\n"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="子程序"><a href="#子程序" class="headerlink" title="子程序"></a>子程序</h2><ul>
<li>子程序名称<br>子程序名称以字母、数字、下划线组成，不能以数字开头，子程序名称属于独立的名字空间</li>
</ul>
<h3 id="定义子程序"><a href="#定义子程序" class="headerlink" title="定义子程序"></a>定义子程序</h3><ul>
<li>定义子程序用sub、子程序名以及花括号封闭起来的代码块，for example：<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">sub</span> <span class="title">marine</span> </span>&#123;</div><div class="line">    $n += <span class="number">1</span>; <span class="comment">#全局变量$n</span></div><div class="line">    <span class="keyword">print</span> <span class="string">"Hello, sailor number $n!\n"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="调用子程序"><a href="#调用子程序" class="headerlink" title="调用子程序"></a>调用子程序</h3><ul>
<li>在任意表达式中使用程序名（前面加上与号）来调用它<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/perl</span></div><div class="line"><span class="function"><span class="keyword">sub</span> <span class="title">marine</span></span>&#123;</div><div class="line">    $n += <span class="number">1</span>;</div><div class="line">    <span class="keyword">print</span> <span class="string">"Hello, sailor number $n!\n"</span>;</div><div class="line">&#125;</div><div class="line">&amp;marine;    <span class="comment">#打印hello，sailor number 1！</span></div><div class="line">&amp;marine;    <span class="comment">#打印hello，sailor number 2！</span></div><div class="line">&amp;marine;    <span class="comment">#打印hello，sailor number 3！</span></div><div class="line">&amp;marine;    <span class="comment">#打印hello，sailor number 4！</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><ul>
<li>任何的perl子程序都有返回值，但不是所有的返回值都是有用的，Larry将之简化，在子程序的执行过程中，它会不断进行运算，而最后一次运算的结果（不管是什么）都会被自动当成子程序的返回值。<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/perl</span></div><div class="line">$fred = <span class="number">2</span>;</div><div class="line">$barney = <span class="number">3</span>;</div><div class="line">$wilma = &amp;sum_of_fred_and_barney;</div><div class="line"><span class="function"><span class="keyword">sub</span> <span class="title">sum_of_fred_and_barney</span></span>&#123;</div><div class="line">    <span class="keyword">print</span> <span class="string">"Hey, you called the sum_of_fred_and_barney subroutine!\n"</span>;</div><div class="line">    $fred + $barney;</div><div class="line">&#125;</div><div class="line"><span class="comment">#&amp;sum_of_fred_and_barney;</span></div><div class="line">$betty = <span class="number">3</span> * &amp;sum_of_fred_and_barney;</div><div class="line"><span class="keyword">print</span> <span class="string">"\$wilma is $wilma.\n"</span>;</div><div class="line"><span class="keyword">print</span> <span class="string">"\$betty is $betty.\n"</span>;</div></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/perl</span></div><div class="line">$fred = <span class="number">2</span>;</div><div class="line">$barney = <span class="number">3</span>;</div><div class="line"><span class="function"><span class="keyword">sub</span> <span class="title">larger_of_fred_or_barney</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> ($fred &gt; $barney)&#123;</div><div class="line">        $fred;</div><div class="line">        <span class="keyword">print</span> <span class="string">"\$fred is $fred\n"</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        $barney;</div><div class="line">        <span class="keyword">print</span> <span class="string">"\$barney is $barney\n"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">&amp;larger_of_fred_or_barney;</div></pre></td></tr></table></figure>
<h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><ul>
<li>要传递参数列表到子程序里，只要在子程序调用的后面加上被括号圈引得列表表达式就可以了，for example：<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$n = &amp;max(<span class="number">10</span>, <span class="number">15</span>);</div></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/perl</span></div><div class="line"><span class="function"><span class="keyword">sub</span> <span class="title">max</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> ($_[<span class="number">0</span>] &gt; $_[<span class="number">1</span>])&#123;</div><div class="line">        $_[<span class="number">0</span>];</div><div class="line">        <span class="keyword">print</span> <span class="string">"\$_[0] is $_[0]\n"</span>;</div><div class="line">    &#125;<span class="keyword">else</span> &#123;</div><div class="line">        $_[<span class="number">1</span>];</div><div class="line">        <span class="keyword">print</span> <span class="string">"\$_[1] is $_[1]\n"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">$n = &amp;max(<span class="number">3</span>, <span class="number">4</span>);</div></pre></td></tr></table></figure>
<h4 id="子程序中的私有变量"><a href="#子程序中的私有变量" class="headerlink" title="子程序中的私有变量"></a>子程序中的私有变量</h4><ul>
<li>默认情况下，perl里的所有变量都是全局变量，即在程序的任何地方都可以访问他们。随时可以借助my操作符来创建私有变量（lexical variable）<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/perl</span></div><div class="line"><span class="function"><span class="keyword">sub</span> <span class="title">max</span> </span>&#123;</div><div class="line">    <span class="keyword">my</span>($m, $n);</div><div class="line">    ($m, $n_) = @_;</div><div class="line">    <span class="keyword">if</span> ($m &gt; $n)&#123; $m &#125; <span class="keyword">else</span> &#123; $n &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="变长的参数列表"><a href="#变长的参数列表" class="headerlink" title="变长的参数列表"></a>变长的参数列表</h4><ul>
<li>打印最大值，“高水线（high-watermark）”算法<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/perl</span></div><div class="line">$maximum = &amp;max(<span class="number">3</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">4</span>, <span class="number">6</span>);</div><div class="line"><span class="function"><span class="keyword">sub</span> <span class="title">max</span></span>&#123;</div><div class="line">    <span class="keyword">my</span>($max_so_far) = <span class="keyword">shift</span> @_;</div><div class="line">    <span class="keyword">foreach</span> (@_)&#123;</div><div class="line">        <span class="keyword">if</span> ($_ &gt; $max_so_far)&#123;</div><div class="line">            $max_so_far = $_;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    $max_so_far;</div><div class="line">    <span class="keyword">print</span> <span class="string">"Max is $max_so_far\n"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="空参数列表"><a href="#空参数列表" class="headerlink" title="空参数列表"></a>空参数列表</h4><h4 id="关于词法（my）变量"><a href="#关于词法（my）变量" class="headerlink" title="关于词法（my）变量"></a>关于词法（my）变量</h4><ul>
<li>词法变量可以用在任何语句块内，而不仅限于子程序语句块。比如说，它可以在if、while或foreach的语句块里使用</li>
<li><p>求次方</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/perl</span></div><div class="line"><span class="keyword">foreach</span> (<span class="number">1</span>..<span class="number">10</span>)&#123;</div><div class="line">    <span class="keyword">my</span>($square) = $_ * $_;</div><div class="line">    <span class="keyword">print</span> <span class="string">"$_ squared is $square.\n"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>my操作符不加括号时，只能用来声明单个词法变量</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">my</span> $fred, $barney;  <span class="comment">#只声明了fred这一个变量</span></div><div class="line"><span class="keyword">my</span>（$fred, $barney); <span class="comment">#两个都声明了</span></div></pre></td></tr></table></figure>
</li>
<li><p>在日常perl编程中，你最好对每个新变量都使用my声明，最好对每个新变量都使用my声明，让它保持在自己所在的词法作用域内。</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/perl</span></div><div class="line"><span class="keyword">foreach</span> <span class="keyword">my</span> $rock (<span class="keyword">qw</span>/bedrock slate lava /)&#123;</div><div class="line">    <span class="keyword">print</span> <span class="string">"One rock is $rock.\n"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="use-strict编译指令（pragma）"><a href="#use-strict编译指令（pragma）" class="headerlink" title="use strict编译指令（pragma）"></a>use strict编译指令（pragma）</h3><ul>
<li><p>告诉perl我愿意接受更严格的限制使用use strict这个编译指令放在程序开头</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">use</span> strict;</div></pre></td></tr></table></figure>
</li>
<li><p>自perl5.12开始，如果使用编译指令指定最低perl版本号的话，就相当于隐式打开了约束指令</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">use</span> <span class="number">5.012</span>;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="return操作符"><a href="#return操作符" class="headerlink" title="return操作符"></a>return操作符</h3><ul>
<li>return操作符可以让子程序执行到一半的时候停止执行<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/perl</span></div><div class="line"><span class="keyword">use</span> strict;</div><div class="line"><span class="keyword">my</span> @names = <span class="keyword">qw</span>/ fred barney betty dino wilma pebbles bamm-bam /;</div><div class="line"><span class="keyword">my</span> $result = &amp;which_element_is(<span class="string">"dino"</span>, @names);</div><div class="line"><span class="function"><span class="keyword">sub</span> <span class="title">which_element_is</span></span>&#123;</div><div class="line">    <span class="keyword">my</span>($what, @array) = @_;</div><div class="line">    <span class="keyword">foreach</span> (<span class="number">0</span>..$#array)&#123;</div><div class="line">        <span class="keyword">if</span> ($what eq $array[$_])&#123;</div><div class="line">            <span class="keyword">return</span> $_;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    -<span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Perl语言入门（6th）课后习题]]></title>
      <url>http://arvon.top/2015/08/12/Perl%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%EF%BC%886th%EF%BC%89%E8%AF%BE%E5%90%8E%E4%B9%A0%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>个人感觉课后习题单独分出来比较方便，这里有可能的话会多放些例子，ok，go</p>
<a id="more"></a>
<p>###Chapter one</p>
<ol>
<li>计算半径为12.5的园的周长，可自行输入，小于0输出为0<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/perl</span></div><div class="line"><span class="keyword">print</span> <span class="string">"Please input a number: "</span>;</div><div class="line">$inputNumber = &lt;STDIN&gt;;</div><div class="line">$perimeter = $inputNumber * <span class="number">2</span> * <span class="number">3.14</span>;</div><div class="line"><span class="keyword">print</span> <span class="string">"The perimeter is $perimeter\n"</span>;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>###Chapter two</p>
<ol>
<li><p>半径12.5圆，求周长</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/perl</span></div><div class="line"><span class="keyword">use</span> <span class="number">5.010</span>;</div><div class="line">$pi = <span class="number">3.141592654</span>;</div><div class="line">$circ = <span class="number">2</span> * $pi * <span class="number">12.5</span>;</div><div class="line"><span class="keyword">print</span> <span class="string">"The circumference of a circle of radius 12.5 is $circ.\n"</span>;</div></pre></td></tr></table></figure>
</li>
<li><p>交互算周长</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/perl -w</span></div><div class="line">$pi = <span class="number">3.141592654</span>;</div><div class="line"><span class="keyword">print</span> <span class="string">"What is the radius?\n"</span>;</div><div class="line"><span class="keyword">chomp</span>($radius = &lt;STDIN&gt;);</div><div class="line">$circ = <span class="number">2</span> * $pi * $radius;</div><div class="line"><span class="keyword">print</span> <span class="string">"The circumference of a circlee of radius $radius is $circ.\n"</span>;</div></pre></td></tr></table></figure>
</li>
<li><p>加验证的交互算周长</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/perl</span></div><div class="line">$pi = <span class="number">3.1415926</span>;</div><div class="line"><span class="keyword">print</span> <span class="string">"What is the radius?"</span>;</div><div class="line"><span class="keyword">chomp</span>($radius = &lt;STDIN&gt;);</div><div class="line">$circ = <span class="number">2</span> * $pi * $radius;</div><div class="line"><span class="keyword">if</span> ($radius &lt; <span class="number">0</span>)&#123;</div><div class="line">    $circ = <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">print</span> <span class="string">"The circumference of a circle of radius $radius is $circ.\n"</span>;</div></pre></td></tr></table></figure>
</li>
<li><p>交互求和</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/perl</span></div><div class="line"><span class="keyword">print</span> <span class="string">"Enter first number: "</span>;</div><div class="line"><span class="keyword">chomp</span>($one = &lt;STDIN&gt;);</div><div class="line"><span class="keyword">print</span> <span class="string">"Enter second number: "</span>;</div><div class="line"><span class="keyword">chomp</span>($two = &lt;STDIN&gt;);</div><div class="line">$result = $one + $two;</div><div class="line"><span class="keyword">print</span> <span class="string">"The result is $result.\n"</span></div></pre></td></tr></table></figure>
</li>
<li><p>字符串重复术，中间的是小写字母x</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/perl</span></div><div class="line"><span class="keyword">print</span> <span class="string">"Enter a string: "</span>;</div><div class="line">$str = &lt;STDIN&gt;;</div><div class="line"><span class="keyword">print</span> <span class="string">"Enter a number of times: "</span>;</div><div class="line"><span class="keyword">chomp</span>($num = &lt;STDIN&gt;);</div><div class="line">$result = $str <span class="keyword">x</span> $num;</div><div class="line"><span class="keyword">print</span> <span class="string">"The result is:\n$result"</span>;</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="Chapter-three"><a href="#Chapter-three" class="headerlink" title="Chapter three"></a>Chapter three</h3><ol>
<li><p>将输入的字符串倒序打印</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/binj/perl</span></div><div class="line"><span class="keyword">use</span> <span class="number">5.010</span>;</div><div class="line"><span class="keyword">print</span> <span class="string">"Enter some lines, then press Ctrl-D:\n"</span>;<span class="comment">#or try Ctrl-Z</span></div><div class="line">@lines = &lt;STDIN&gt;;</div><div class="line">@reverse_lines = <span class="keyword">reverse</span> @lines;</div><div class="line"><span class="keyword">print</span> <span class="string">"@reverse_lines"</span>;</div></pre></td></tr></table></figure>
</li>
<li><p>键入数字，输出对应的name</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/perl</span></div><div class="line">@names = <span class="keyword">qw</span>/ guo qiu arvon mo love /;</div><div class="line"><span class="keyword">print</span> <span class="string">"Enter some number from 1 to 5, one per line, then press Ctrl-D:\n"</span>;</div><div class="line"><span class="comment">#print @names;</span></div><div class="line"><span class="keyword">chomp</span>(@number = &lt;STDIN&gt;);</div><div class="line"><span class="comment">#print "\@number is @number\n";</span></div><div class="line"><span class="keyword">foreach</span> $num (@number)&#123;</div><div class="line"><span class="comment">#    print "now \$num is $num";</span></div><div class="line">    <span class="keyword">print</span> <span class="string">"$names[ $num -1 ]\n"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>注释的是在一行输入输入的，没注释的分行显示</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/perl</span></div><div class="line"><span class="comment">#chomp(@lines = &lt;STDIN&gt;);</span></div><div class="line"><span class="comment">#@sorted = sort @lines;</span></div><div class="line"><span class="comment">#print "@sorted\n";</span></div><div class="line"><span class="keyword">print</span> <span class="keyword">sort</span> &lt;STDIN&gt;;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>###小代码块</p>
<ul>
<li>检查参数个数是否正确<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">sub</span> <span class="title">max</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (@_ != <span class="number">2</span>)&#123;</div><div class="line">        <span class="keyword">print</span> <span class="string">"WAENING! &amp;max should get exactly two argumnets!\n"</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment"># follow</span></div><div class="line">    <span class="comment">#...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Perl语言入门（一）]]></title>
      <url>http://arvon.top/2015/08/10/Prel%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p><strong>更新记录：</strong></p>
<ul>
<li>2015/08/10 DonePage45</li>
<li>2015/08/11 DonePage68</li>
<li>2015/08/17 Read list and array, do a new one.</li>
</ul>
<a id="more"></a>
<p>##前言杂记</p>
<ul>
<li>适合管理员使用的语言</li>
<li>Arvon’s读书笔记</li>
<li><p>sixth edtion for learning perl</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">use</span> <span class="number">5.014</span>;<span class="comment">#该脚本需要在Perl 5.14或更高版本才能正常运行</span></div><div class="line">perl -v<span class="comment">#查看perl的版本</span></div></pre></td></tr></table></figure>
</li>
<li><p>Hello，World</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/perl</span></div><div class="line"><span class="keyword">printf</span> <span class="string">"Hello, world!\n"</span>;</div><div class="line"><span class="keyword">use</span> <span class="number">5.010</span>;</div><div class="line"><span class="keyword">say</span> <span class="string">"Hello, world!"</span>;</div></pre></td></tr></table></figure>
</li>
<li><p>替换字符演示</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/perl</span></div><div class="line">@lines = <span class="string">`perldoc -u -fatan2`</span>;</div><div class="line"><span class="keyword">foreach</span> (@lines)&#123;</div><div class="line">    <span class="regexp">s/\w&lt;([^&gt;]+)&gt;/\U$1/g</span>;</div><div class="line">        <span class="keyword">print</span>;</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>##标量数据</p>
<ul>
<li>标量数据是Perl里面最简单的一种数据类型。对大部分标量来说，它要么是数字（如123或3.25e23），要<br>么是由字符组成的序列（如hello）。对Perl来说，数字和字符串大多情况下是可以在内部转换的。可以用操<br>作符对标量进行操作（如加法或字符串连接），产生的结果通常也是一个标量。标量可以存储在标量变量里，<br>也可以从文件和设备读取或写入这些位置。</li>
</ul>
<p>###数字</p>
<p>####所有数字的内部格式都相同</p>
<ul>
<li>Perl内部，总是按“双精度浮点数（double-precision floating-point）”的要求来保存数字并进行运算<br>的。也就是说，Perl内部并不存在整数值–程序中用到的整数型常量会被转换成等效的浮点数值。</li>
</ul>
<p>####浮点数直接量</p>
<ul>
<li>直接量（literal）是指某个数字在Perl源代码中的写法。直接量并非运算结果，也不是I/O（输入/输出）<br>操作的结果，它只是直接键入源程序代码中的数据。</li>
<li>Perl浮点数直接量的写法，小数点与前置的正负号都是可选的，数字后面也可以加上用“e”表示的10的次方<br>表示符（即指数表示法）。</li>
<li>如下列写法<blockquote>
<p>1.25<br>255.000<br>255.0<br>7.25e45    #7.25乘以10的45次方，其中e可以大写<br>-6.5e123</p>
</blockquote>
</li>
</ul>
<p>####整数直接量</p>
<ul>
<li>整数直接量：<blockquote>
<p>0<br>1234<br>-4321<br>41023789873    #可以写成41_023_789_873,Perl允许在整数直接量插入下划线，方便辨认</p>
</blockquote>
</li>
</ul>
<p>####非十进制的整数直接量</p>
<ul>
<li>Perl语言和其他许多程序语言一样，允许使用十进制（decimal）意外的其他进制表示数字。八进制（octal）<br>直接量以0开头，十六进制（hexadecimal）直接量以ox开头，二进制（binary）直接量以ob开头。十六进制的<br>A到F（可以写成小写的a到f，来代表十进制的10到15）。例如<blockquote>
<p>o377    #八进制的377，等于十进制的255<br>0xff    #十六进制的FF，等于十进制的255<br>ob11111111    #二进制的，等于十进制的255</p>
</blockquote>
</li>
<li>这三个数字虽然看起来不同，但对Perl来说都是同一个数字</li>
</ul>
<p>####数字操作符</p>
<ul>
<li>Perl提供了各种常见的数字操作符，如加、减、乘、除、取模、次方。例如：<blockquote>
<p>2+3<br>5.1-2.4<br>3<em>12<br>14/2<br>10.2/0.3<br>10/3<br>10%3    #取模，结果为1<br>2*</em>3    #次方，结果为8</p>
</blockquote>
</li>
</ul>
<p>###字符串</p>
<ul>
<li>字符串就是一个字符序列，如hello。字符串可以各种字符任意组合而成。最短的字符串不包含任何字符，也<br>叫做空字符串。最长的字符串的长度没有限制。这符合Perl遵守的“无内置限制（nobuilt-inlimits）”的原则。<br>字符串通常是由可输出地字母、数字及标点符号组成，其范围介于ASCII编码的32到126之间。由于字符串可以<br>包含任何字符，所以可用它来创建、扫描或操控二进制数据，这是许多其他工具语言望尘莫及的。例如：你可以<br>将一个图形文件或编译过的可执行文件读进Perl的字符串变变量，修改它的内容再写回去。</li>
<li><p>Perl完全支持Unicode，所以在字符串中可以使用任意一个合法的Unicode字符。不过由于Perl的历史原因<br>它不会自动将程序源代码当做Unicode编码的文本读入，所以如果你想要在源代码中使用Unicode书写直接量<br>的话，需手工加上utf8编译指令：</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">use</span> utf8;</div></pre></td></tr></table></figure>
</li>
<li><p>和数字一样，字符串也有直接量记法，也就是Perl程序中字符串的书写方式。包括单引号内的字符串和双引号<br>内的字符串。</p>
</li>
</ul>
<p>####单引号内的字符串直接量</p>
<ul>
<li>除了单引号和反斜线之外，单引号内所有的字符串都代表他们自己。<blockquote>
<p>‘fred’<br>‘hello’<br>‘’<br>‘#$@%’<br>‘Don\’t let me go!’<br>‘the last character is a backslash:\‘<br>‘\’\‘    #单引号后面紧接着反斜线<br>‘hi\n’    #单引号内的\n并不是换行符，而是表示字面上的两个字符</p>
</blockquote>
</li>
</ul>
<p>####双引号内的字符串直接量</p>
<ul>
<li>双引号中的反斜线更为强大<blockquote>
<p>“hi\n”        #换行符<br>“love\tyou”        #水平制表符<br>“\r”    #回车<br>“\f”    #换页符<br>“\b”    #退格<br>“\e”    #Esc（ASCII编码的转义字符）<br>“\cC”    #控制符，就是COntrol键的代码（此例表示同时按下Ctrl和c键的返回码）<br>“\l”    #将下个字母转换为小写<br>“\L”    #将它后面的所有字母都转换为小写的，直到\E为止<br>“\u”    #将下个字符转换为大写<br>“\U”    #将它后面所有的字母都转换为大写，直到\E为止<br>“\E”    #结束\L、\U和\Q开始的作用范围</p>
</blockquote>
</li>
</ul>
<p>####字符串操作符</p>
<ul>
<li>字符串可以用.操作符链接起来<blockquote>
<p>“hello”.”world”    #等同于”helloworld”<br>“hello” . ‘ ‘ . “world”    #等同于’hello world’<br>‘hello world’ . “\n”    #等同于”hello world\n”</p>
</blockquote>
</li>
<li><code>注意</code>：链接运算符必须显示使用连接操作符（concatenation operator），而不是像其他一些语言<br>只需要把两个字符串放在一起就行。</li>
<li><code>特殊的重复操作符，小写字母x</code>，此操作符会将其左边的操作数与它本身重复连接，重复次数由右边的<br>操作数（某个数字）指定。例子：<blockquote>
<p>“fred” x 3    #得到“fredfredfred”<br>“barney” x (4+1)    #得到“barneybarneybarneybarneybarney”<br>5 x 4.8    #相当于5乘以4，它会把4.8当做4，因为这里是小写字母x而不是*</p>
</blockquote>
</li>
</ul>
<p>####数字与字符串之间的自动转换</p>
<ul>
<li>Perl根据操作符来确定你需要的是数字还是字符串。如操作符（比如+号）需要的是数字，Perl会将操作<br>数视为数字；在操作符（比如.）需要字符串时，Perl便会将数视为字符串。<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/perl</span></div><div class="line"><span class="comment">#Todo: concatenation operator</span></div><div class="line"><span class="keyword">use</span> <span class="number">5.010</span>;</div><div class="line"><span class="keyword">printf</span> <span class="string">"5*4.8\n"</span>;</div><div class="line"><span class="keyword">printf</span> <span class="number">5</span> * <span class="number">4.8</span> . <span class="string">"\n"</span>;</div><div class="line"><span class="keyword">printf</span> <span class="number">5</span> <span class="keyword">x</span> <span class="number">4.8</span> . <span class="string">"\n"</span>;</div><div class="line"><span class="keyword">printf</span> <span class="string">"z"</span> . <span class="number">5</span>*<span class="number">7</span> . <span class="string">"\n"</span>;</div><div class="line"></div><div class="line"><span class="comment">###Output</span></div><div class="line">[root@Mo arvon_perl]<span class="comment"># perl string_repetition</span></div><div class="line"><span class="number">5</span>*<span class="number">4.8</span></div><div class="line"><span class="number">24</span></div><div class="line"><span class="number">5555</span></div><div class="line">z35</div></pre></td></tr></table></figure>
</li>
</ul>
<p>###Perl的内置警告信息</p>
<ul>
<li><p>从Perl的5.6版本开始，可以通过编译指令开启警告功能</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/perl</span></div><div class="line"><span class="keyword">use</span> warnings;</div></pre></td></tr></table></figure>
</li>
<li><p>也可以在命令行上使用-w选项对要运行的程序开启警告功能</p>
<blockquote>
<p>$ perl -w program.pl</p>
</blockquote>
</li>
<li><p>还可以在shebang行上指定命令行选项</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/perl -w</span></div></pre></td></tr></table></figure>
</li>
<li><p>如果看不懂某个警告信息，可以利用diagnostics这个编译命令报告更为详尽的问题描述。在perdiag文档<br>中列有简要警告信息和详细诊断说明，该文档时理解diagnostics输出信息的最佳参考：</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/perl</span></div><div class="line"><span class="keyword">use</span> diagnostics;	<span class="comment">#会使程序变慢，如果熟悉，尽量不使用</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>###标量变量</p>
<ul>
<li>变量（variable）就是存储一个或多个值的容器的名称。而标量变量就是单单存储一个值的变量。变量的<br>名称在整个程序中保持不变，但它所持有的值是可以在程序运行时不断修改变化的。</li>
<li>标量变量存储的是单个标量值。标量变量的名称是以$开头的，这个符号也称为魔符（sigil），然后是变<br>量Perl的标识符：由一个字母或下划线开头，后接多个字母、数字、下划线。标识符是区分大小写的：$Fred<br>和$fred是完全不同的变量。<blockquote>
<p>$name<br>$Name<br>$NAME<br>$a_very_long_variable_that_ends_in_i</p>
</blockquote>
</li>
<li>Perl通过变量标识符的魔符来区分它是什么类型的变量。所以不管取什么名字，都不会和Perl自带的函数<br>或操作符的写法相冲突。$的确切意思是“取单个东西”或者“取标量”。</li>
<li>给变量取个好名字，例如：$my_name or $myName</li>
</ul>
<p>###标量的赋值（assignment）</p>
<ul>
<li>和其他程序语言差不多，Perl的赋值操作符为等号，等号的左边是变量名称，右边为某个表达式。<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$fred = <span class="number">17</span>;</div><div class="line">$barney = <span class="string">'hello'</span>;</div><div class="line">$barney = $fred+<span class="number">3</span>;</div><div class="line">$barney = $barney*<span class="number">2</span>;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>####双目赋值的操作符</p>
<ul>
<li><p>例子一</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$fred = $fred + <span class="number">5</span>;	<span class="comment">#相当于$fred += 5;</span></div><div class="line">$barney = $barney * <span class="number">3</span>;	<span class="comment">#相当于$barney *= 3;</span></div><div class="line">$str = $str. <span class="string">" "</span>;	<span class="comment">#相当于$str .= "";</span></div></pre></td></tr></table></figure>
</li>
<li><p>例子二</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/perl</span></div><div class="line">$fred = <span class="number">1</span>;</div><div class="line">$fred = $fred + <span class="number">5</span>;</div><div class="line"><span class="keyword">printf</span> <span class="string">"now + 5 fred is "</span> . $fred . <span class="string">"\n"</span>;</div><div class="line">$fred += <span class="number">2</span>;</div><div class="line"><span class="keyword">printf</span> <span class="string">"then + 2 fred is "</span> . $fred . <span class="string">"\n"</span>;</div><div class="line">$str = <span class="string">'hello'</span>;</div><div class="line">$str = $str . <span class="string">" "</span>;</div><div class="line"><span class="keyword">print</span> <span class="string">"the string \$str is "</span> . $str . <span class="string">"\n"</span>;</div><div class="line"></div><div class="line"><span class="comment">###Output</span></div><div class="line">root@Mo arvon_perl]<span class="comment"># perl double.pl</span></div><div class="line">now + <span class="number">5</span> fred is <span class="number">6</span></div><div class="line">then + <span class="number">2</span> fred is <span class="number">8</span></div></pre></td></tr></table></figure>
</li>
<li><p>字符串中的标量变量内插</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/perl</span></div><div class="line">$meal = <span class="string">"love"</span>;</div><div class="line">$things = <span class="string">"arvon $meal mo"</span>;</div><div class="line"><span class="keyword">print</span> <span class="string">"$things\n"</span>;</div><div class="line">$newThings = <span class="string">' arvon '</span> . $meal . <span class="string">' mo'</span>;</div><div class="line"><span class="keyword">print</span> <span class="string">'now the $newThings is'</span> . $newThings . <span class="string">"\n"</span>;</div><div class="line"></div><div class="line"><span class="comment">###Output[root@Mo arvon_perl]# perl varInsert.pl</span></div><div class="line">arvon love mo</div><div class="line">now the $newThings is arvon love mo</div></pre></td></tr></table></figure>
</li>
<li><p>如果变量从未被赋值过，就会用空字符串来替换</p>
</li>
<li><p>如果只是打印这个变量值，则不必使用变量内插的方式：</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">print</span> <span class="string">"$fred"</span>；</div><div class="line"><span class="keyword">print</span> $fred；	<span class="comment">#用这个比较好</span></div></pre></td></tr></table></figure>
</li>
<li><p>可以直接键入一些字符的代码点(code point)，再通过chr（）函数转换成对应字符,反过来我们可以通过<br>ord（）函数把字符转换为代码点</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$alef = <span class="keyword">chr</span>( <span class="number">0x05D</span>o ）；</div><div class="line">$codePoint = <span class="keyword">ord</span>(<span class="string">'?'</span>);</div></pre></td></tr></table></figure>
</li>
</ul>
<p>###操作符的优先级与结合性</p>
<ul>
<li>在复杂的表达式里，先执行哪个操作再执行哪个操作，取决于操作符的优先级。在Perl里乘法的优先级高于<br>加法，可以使用括号改变执行的优先级</li>
<li>当两个优先级相同的操作符抢着使用三个操作数时，优先级便交由结合性解决：<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="number">4</span> ** <span class="number">3</span> ** <span class="number">2</span> <span class="comment">#4 ** (3 ** 2),得4 ** 9，向右结合</span></div><div class="line"><span class="number">72</span> / <span class="number">12</span> / <span class="number">3</span><span class="comment">#(72 / 12） / 3,得6 / 3，向左结合</span></div><div class="line"><span class="number">36</span> / <span class="number">6</span> * <span class="number">3</span>	<span class="comment">#(36 / 6) * 3</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>###比较操作符</p>
<ul>
<li>perl的比较操作符类似于代数系统：&lt;,&lt;=,==,&gt;=,&gt;,!=。这些操作符的返回值要么是true要么是false。</li>
<li>字符串比较时，使用lt、le、eq、ge、gt、ne。<code>注意:</code>字符在ASCII编码中的顺序并不总是对应于字<br>符本身意义上的顺序。</li>
</ul>
<p>##控制结构</p>
<p>###if控制结构</p>
<p>####例子<br><figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/perl</span></div><div class="line"><span class="comment">#$name = 'fred';</span></div><div class="line">$name = <span class="string">'Nfred'</span>;</div><div class="line"><span class="keyword">if</span> ($name eq <span class="string">"fred"</span>)&#123;</div><div class="line">    <span class="keyword">print</span> <span class="string">"'$name' is 'fred' in\n"</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span>&#123;</div><div class="line">    <span class="keyword">print</span> <span class="string">"'$name' is not 'fred' is $name\n"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>####布尔值</p>
<ul>
<li><p>任何标量值都可以成为if控制结构里的判断条件。如果把表达式返回的真假值保存到变量中，那在判断时可以<br>直接检查该变量的值，读起来也方便：</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/perl</span></div><div class="line"><span class="comment">#$name = 'fred';</span></div><div class="line">$name = <span class="string">'Nfred'</span>;</div><div class="line"><span class="keyword">if</span> ($name eq <span class="string">"fred"</span>)&#123;</div><div class="line">    <span class="keyword">print</span> <span class="string">"'$name' is 'fred' in\n"</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span>&#123;</div><div class="line">    <span class="keyword">print</span> <span class="string">"'$name' is not 'fred' is $name\n"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">###Output</span></div><div class="line">[root@Mo arvon_perl]<span class="comment"># perl Boolean_value.pl</span></div><div class="line">hello, world</div></pre></td></tr></table></figure>
</li>
<li><p>Perl和其他语言不同，Perl并没有专用的“布尔（boolean）”数据类型，它是靠一些简单的规则来判断的：</p>
<blockquote>
<ul>
<li>如果是数字，0为假，所有其他数字都为真</li>
<li>如果是字符串，空字符串（’’)为假；所有其他字符串为真。</li>
<li>如果既不是数字也不是字符串，那就先转换成数字或字符串再进行判断。</li>
</ul>
</blockquote>
</li>
</ul>
<p>###获取用户输入</p>
<ul>
<li>用户输入的例子<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/perl</span></div><div class="line"><span class="keyword">print</span> <span class="string">"Input something please: "</span>;</div><div class="line">$line = &lt;STDIN&gt;;</div><div class="line"><span class="keyword">if</span> ($line eq <span class="string">"\n"</span>)&#123;</div><div class="line">    <span class="keyword">print</span> <span class="string">"That was just a blank line!\n"</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span>&#123;</div><div class="line">    <span class="keyword">print</span> <span class="string">"That line of input was: $line"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">###Output</span></div><div class="line">[root@Mo arvon_perl]<span class="comment"># perl stdin01.pl</span></div><div class="line">Input something please:</div><div class="line">That was just a blank line!</div><div class="line">[root@Mo arvon_perl]<span class="comment"># perl stdin01.pl ]</span></div><div class="line">Input something please: hello</div><div class="line">That line of input was: hello</div></pre></td></tr></table></figure>
</li>
</ul>
<p>###chomp操作符</p>
<ul>
<li><p>chomp（）操作符只能用于单个变量，且该变量的内容必须为字符串，如果该字符串的末尾是换行符，chomp（）<br>的任务就是去掉它。</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/perl</span></div><div class="line">$text = <span class="string">"a line of text\n"</span>;     <span class="comment">#or input by &lt;STDIN&gt;</span></div><div class="line"><span class="keyword">chomp</span>($text);   <span class="comment">#remove the \n</span></div><div class="line"><span class="keyword">print</span> $text;</div><div class="line"></div><div class="line"><span class="comment">###Output</span></div><div class="line">[root@Mo arvon_perl]<span class="comment"># perl chompTraining.pl</span></div><div class="line">a line of text[root@Mo arvon_perl]<span class="comment">#</span></div></pre></td></tr></table></figure>
</li>
<li><p>处理字符串变量</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/perl</span></div><div class="line"><span class="keyword">chomp</span>($text = &lt;STDIN&gt;); <span class="comment">#读入文字，略过最后的换行符</span></div><div class="line"><span class="comment">#$text = &lt;STDIN&gt;;       #等同于上面的写法</span></div><div class="line"><span class="comment">#chomp($text):</span></div><div class="line"><span class="keyword">print</span> $text;</div><div class="line"></div><div class="line"><span class="comment">###Output</span></div><div class="line">[root@Mo arvon_perl]<span class="comment"># perl chompTraining02.pl</span></div><div class="line">hello,world</div><div class="line">hello,world[root@Mo arvon_perl]<span class="comment">#</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>###while控制结构<br><figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/perl</span></div><div class="line">$count = <span class="number">0</span>;</div><div class="line"><span class="keyword">while</span> ($count &lt;  <span class="number">10</span>)&#123;</div><div class="line">    $count += <span class="number">2</span>;</div><div class="line">    <span class="keyword">print</span> <span class="string">"Now the number is $count\n"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">###Output</span></div><div class="line">[root@Mo arvon_perl]<span class="comment"># perl whileCount.pl</span></div><div class="line">Now the number is <span class="number">2</span></div><div class="line">Now the number is <span class="number">4</span></div><div class="line">Now the number is <span class="number">6</span></div><div class="line">Now the number is <span class="number">8</span></div><div class="line">Now the number is <span class="number">10</span></div></pre></td></tr></table></figure></p>
<p>###undef值</p>
<ul>
<li>我们未赋值时就用到了某个不存在标量变量，并不会让程序停止运行，当成数字使用，它会表现的像0；当<br>做字符串使用，它会表现的像空字符串。<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/perl</span></div><div class="line"><span class="comment">#累加奇数</span></div><div class="line">$n = <span class="number">1</span>;</div><div class="line"><span class="keyword">while</span> ($n &lt; <span class="number">10</span>)&#123;</div><div class="line">    $sum += $n;</div><div class="line">    $n += <span class="number">2</span>;<span class="comment">#准备奇数</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">print</span> <span class="string">"The total was $sum.\n"</span></div><div class="line"></div><div class="line"><span class="comment">###Output</span></div><div class="line">[root@Mo arvon_perl]<span class="comment"># perl accumulation.pl</span></div><div class="line">The total was <span class="number">25</span>.</div></pre></td></tr></table></figure>
</li>
</ul>
<p>###definded函数</p>
<ul>
<li>行输入操作符<stdin>有时候会返回undef。要判断某个字符串是undef而不是空字符串，可以使用defined<br>函数。如果是undef，该函数返回假，否则返回真：<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/perl</span></div><div class="line">$madonna = &lt;STDIN&gt;;</div><div class="line"><span class="keyword">if</span> (<span class="keyword">defined</span>($madonna))&#123;</div><div class="line">    <span class="keyword">print</span> <span class="string">"The input was $madonna"</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span>&#123;</div><div class="line">    <span class="keyword">print</span> <span class="string">"No input available\n"</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">#$madonna = undef;</span></div><div class="line"></div><div class="line"><span class="comment">###Output</span></div><div class="line">[root@Mo arvon_perl]<span class="comment"># perl undef01.pl</span></div><div class="line">No input available</div><div class="line">[root@Mo arvon_perl]<span class="comment"># perl undef01.pl</span></div><div class="line">Mo</div><div class="line">The input was Mo</div><div class="line">[root@Mo arvon_perl]<span class="comment"># perl undef01.pl</span></div><div class="line"></div><div class="line">The input was</div></pre></td></tr></table></figure>
</stdin></li>
</ul>
<p>##列表和数组</p>
<ul>
<li>如果Perl的标量代表单数（singular），那么列表和数组就表示复数（plural）。</li>
<li>列表（list）是标量的有序集合，而数组（array）则是存储列表的变量。列表指的是数据，而数组指的是变<br>量。列表里的值不一定放在数组里，但每个数组变量都包含一个列表（即便是不含任何元素的空列表。</li>
<li>数组或列表中的每个元素 （element）都是单独的标量变量，拥有独立的标量值。这些值是有序的，从开始到<br>终止元素的先后次序是固定的。</li>
</ul>
<p>###访问数组中的元素</p>
<ul>
<li>Example one<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/perl</span></div><div class="line"><span class="keyword">use</span> <span class="number">5.010</span>;</div><div class="line"><span class="comment">#print "Hello world\n";</span></div><div class="line">$fred[<span class="number">0</span>] = <span class="string">"Hello"</span>;</div><div class="line">$fred[<span class="number">1</span>] = <span class="string">"My"</span>;</div><div class="line">$fred[<span class="number">2</span>] = <span class="string">"Name"</span>;</div><div class="line"><span class="keyword">print</span> <span class="string">"$fred[0]\n"</span>;</div><div class="line"></div><div class="line"><span class="comment">###Output</span></div><div class="line">&gt;arvon@Mo:~<span class="regexp">/arvon_perl&gt; perl array.pl</span></div><div class="line">Hello</div></pre></td></tr></table></figure>
</li>
</ul>
<p>###特殊的数字索引</p>
<ul>
<li>Example two<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/perl</span></div><div class="line"><span class="keyword">use</span> <span class="number">5.010</span>;</div><div class="line">$rocks[<span class="number">0</span>] = <span class="string">'hello'</span>;</div><div class="line">$rocks[<span class="number">1</span>] = <span class="string">'list'</span>;</div><div class="line">$rocks[<span class="number">2</span>] = <span class="string">'array'</span>;</div><div class="line">$rocks[<span class="number">3</span>] = <span class="string">'element'</span>;</div><div class="line">$rocks[<span class="number">4</span>] = <span class="string">'four'</span>;</div><div class="line">$rocks[<span class="number">9</span>] = <span class="string">'nine'</span>;</div><div class="line"><span class="comment">#</span></div><div class="line">$end = $#rocks;</div><div class="line"><span class="keyword">print</span> <span class="string">"\$end is $end\n"</span>;</div><div class="line"><span class="comment">#</span></div><div class="line">$number_of_rocks = $end + <span class="number">1</span>;</div><div class="line"><span class="keyword">print</span> <span class="string">"The number is $number_of_rocks\n"</span>;</div><div class="line"><span class="comment">#</span></div><div class="line">$rocks[ $#rocks ] = <span class="string">'hard rodk'</span>;</div><div class="line"></div><div class="line"><span class="comment">###Output</span></div><div class="line">arvon@Mo:~<span class="regexp">/arvon_perl&gt; perl array_print.pl</span></div><div class="line">$end is 9</div><div class="line">The number is 10</div></pre></td></tr></table></figure>
</li>
</ul>
<p>###列表直接量</p>
<ul>
<li>列表直接量（list literal），可以由圆括号内用逗号隔开的一组数据表示，而这些数据就称为元素。<br>for example<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)  <span class="comment">#(1, 2, 3,)相同的逗号会被忽略</span></div><div class="line">(<span class="string">"fred"</span>, <span class="number">4.5</span>)   <span class="comment">#两个元素，'fred'和4.5</span></div><div class="line">()  <span class="comment">#空列表，0个元素</span></div><div class="line">(<span class="number">1</span>..<span class="number">100</span>)    <span class="comment">#100个整数组成的列表</span></div><div class="line">(<span class="number">1</span>..<span class="number">5</span>)  <span class="comment">#..是范围操作符（range operator）</span></div><div class="line">(<span class="number">1.7</span>..<span class="number">5.7</span>)  <span class="comment">#同上，但两个数字的小数部分会被去掉</span></div><div class="line">(<span class="number">5</span>..<span class="number">1</span>)  <span class="comment">#表示空列表，只能正向计数</span></div><div class="line">($m..$n)    <span class="comment">#由$m和$n决定</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>###<code>qw简写</code></p>
<ul>
<li>在perl程序中，经常会需要建立简单的单词列表。使用qw简写，可以省去键入的引号。<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/perl</span></div><div class="line"><span class="keyword">use</span> <span class="number">5.010</span>;</div><div class="line">(<span class="string">"Mo"</span>, <span class="string">"have"</span>, <span class="string">"rose"</span>, <span class="string">"you"</span>, <span class="string">"known"</span>);</div><div class="line"><span class="comment">#</span></div><div class="line"><span class="string">qw( Mo have rose you known )</span>;</div><div class="line"><span class="comment">#</span></div><div class="line"><span class="string">qw(Mo</span></div><div class="line">hava    rose</div><div class="line">you known);</div><div class="line"><span class="comment">#</span></div><div class="line"><span class="string">qw(</span></div><div class="line">    Mo</div><div class="line">    have</div><div class="line">    rose</div><div class="line">    you</div><div class="line">    known</div><div class="line">);</div><div class="line"><span class="comment">#</span></div><div class="line"><span class="keyword">qw</span>! Mo have rose you known!;</div><div class="line"><span class="keyword">qw</span>/ Mo have rose you known/;</div><div class="line"><span class="keyword">qw</span><span class="comment"># Mo have rose you known#;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>###列表的赋值</p>
<ul>
<li>和标量赋值一样，列表值可以被赋值给变量<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/perl</span></div><div class="line"><span class="keyword">use</span> <span class="number">5.010</span>;</div><div class="line">($fred, $barney, $dino) = (<span class="string">"flintstone"</span>, <span class="string">"rubble"</span>, <span class="keyword">undef</span>);</div><div class="line"><span class="comment">#左侧列表中的三个变量会依次被赋予右侧列表中对应的值，相当于分别做了三次独立的赋值操作；</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>###pop和push操作符</p>
<ul>
<li>要增加元素到数组尾端时，只要将它存放到更高索引的新位置就可以了。<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/perl</span></div><div class="line">@array = <span class="number">5</span>..<span class="number">9</span>;</div><div class="line">$mo = <span class="keyword">pop</span>(@array);</div><div class="line"><span class="keyword">printf</span> <span class="string">"now \$mo is $mo\n"</span>;</div><div class="line">$arvon = <span class="keyword">pop</span>(@array);</div><div class="line"><span class="keyword">printf</span> <span class="string">"now \$arvon is $arvon\n"</span>;</div><div class="line"><span class="keyword">push</span>(@array, <span class="number">0</span>);</div><div class="line"><span class="keyword">printf</span> <span class="string">"now \@array is @array\n"</span>;</div><div class="line"><span class="keyword">push</span>@array,<span class="number">3</span>;</div><div class="line"><span class="keyword">printf</span> <span class="string">"now \@array is @array\n"</span>;</div><div class="line"><span class="keyword">push</span>@array,<span class="string">"Hello"</span>;</div><div class="line"><span class="keyword">printf</span> <span class="string">"now \@array is @array\n"</span>;</div><div class="line">@newOne = <span class="keyword">qw</span>/ <span class="keyword">my</span> name is arvon /;</div><div class="line"><span class="keyword">print</span> <span class="string">"@newOne\n"</span>;</div><div class="line"><span class="comment">###Output</span></div><div class="line">arvon@Mo:~<span class="regexp">/arvon_perl&gt; perl assignment_array.pl</span></div><div class="line">now $mo is 9</div><div class="line">now $arvon is 8</div><div class="line">now @array is 5 6 7 0</div><div class="line">now @array is 5 6 7 0 3</div><div class="line">now @array is 5 6 7 0 3 Hello</div><div class="line">my name is arvon</div></pre></td></tr></table></figure>
</li>
</ul>
<p>###shift和unshift操作符</p>
<ul>
<li>相反，unshift和shift操作符是对数组的开头进行处理<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/perl</span></div><div class="line"><span class="keyword">use</span> <span class="number">5.010</span>;</div><div class="line">@array = <span class="keyword">qw</span>/ why are you so diao /;</div><div class="line">$one = <span class="keyword">shift</span>@array;<span class="comment">#$one is "why", @array = are you so diao</span></div><div class="line"><span class="keyword">print</span> <span class="string">"$one is not @array\n"</span>;</div><div class="line">$two = <span class="keyword">shift</span>(@array);<span class="comment">#$two is "are", @array = you so diao</span></div><div class="line"><span class="keyword">print</span> <span class="string">"$two is not @array\n"</span>;</div><div class="line">$three = <span class="keyword">shift</span>@array;<span class="comment">#$three is "you", @array= so diao</span></div><div class="line"><span class="keyword">print</span> <span class="string">"$three is not @array\n"</span>;</div><div class="line"><span class="comment">##</span></div><div class="line"><span class="keyword">unshift</span>(@array, <span class="number">4</span>);</div><div class="line"><span class="keyword">print</span> <span class="string">"Now \@array is @array\n"</span>;</div><div class="line"><span class="keyword">unshift</span>(@array, <span class="number">5</span>);</div><div class="line"><span class="keyword">print</span> <span class="string">"Now \@array is @array\n"</span>;</div><div class="line">@others = <span class="number">1</span>..<span class="number">3</span>;</div><div class="line"><span class="keyword">unshift</span> @array, @others; <span class="comment">#@array变成了(1, 2, 3, 4, 5, )</span></div><div class="line"><span class="keyword">print</span> <span class="string">"\@others is @others, But now \@array is already @array"</span>;</div><div class="line"></div><div class="line"><span class="comment">###Output</span></div><div class="line">arvon@Mo:~<span class="regexp">/arvon_perl&gt; perl unshift_str.pl</span></div><div class="line">why is not are you so diao</div><div class="line">are is not you so diao</div><div class="line">you is not so diao</div><div class="line">Now @array is 4 so diao</div><div class="line">Now @array is 5 4 so diao</div><div class="line">@others is 1 2 3, But now @array is already 1 2 3 5 4 so diao</div></pre></td></tr></table></figure>
</li>
</ul>
<p>###splice操作符</p>
<ul>
<li>push-pop和shift-unshift操作符都是对数组首尾进行操作的，中间的话就用splice</li>
<li><p>Example one</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/perl</span></div><div class="line"><span class="keyword">use</span> <span class="number">5.010</span>;</div><div class="line">@array = <span class="string">qw( pebbles dino fred barney betty )</span>;</div><div class="line">@removed = <span class="keyword">splice</span> @array, <span class="number">2</span>;<span class="comment">#在原来的数组中删掉fred及其后的元素</span></div><div class="line"><span class="comment">#@removed变成qw（fred barney betty）</span></div><div class="line"><span class="comment">#而原来的@array则变成qw（pebbles dino）</span></div><div class="line"><span class="keyword">print</span> <span class="string">"\@array now is @array\n"</span>;</div><div class="line"><span class="keyword">print</span> <span class="string">"\@removed is @removed\n"</span>;</div><div class="line"></div><div class="line"><span class="comment">###Output</span></div><div class="line">arvon@Mo:~<span class="regexp">/arvon_perl&gt; perl splice_string.pl</span></div><div class="line">@array now is pebbles dino</div><div class="line">@removed is fred barney betty</div></pre></td></tr></table></figure>
</li>
<li><p>Example two</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/perl</span></div><div class="line"><span class="keyword">use</span> <span class="number">5.010</span>;</div><div class="line">@array = <span class="string">qw( pebbles dino fred barney betty )</span>;</div><div class="line"><span class="comment">#@removed = splice @array, 2;#在原来的数组中删掉fred及其后的元素</span></div><div class="line"><span class="comment">##@removed变成qw（fred barney betty）</span></div><div class="line"><span class="comment">##而原来的@array则变成qw（pebbles dino）</span></div><div class="line"><span class="comment">#print "\@array now is @array\n";</span></div><div class="line"><span class="comment">#print "\@removed is @removed\n";</span></div><div class="line"><span class="comment">#@removed = splice @array, 1, 2;</span></div><div class="line"><span class="comment">##This time @removed is (pebbles, barney, betty )</span></div><div class="line">@removed = <span class="keyword">splice</span> @array, <span class="number">1</span>, <span class="number">0</span>, <span class="string">qw(wilema)</span>;</div><div class="line"><span class="comment">##Just known @array is became (pebbles wilema dino fred barney betty)</span></div><div class="line"><span class="keyword">print</span> <span class="string">"now \@removed is @removed, and \@array is @array.\n"</span></div><div class="line"></div><div class="line"><span class="comment">###Output</span></div><div class="line">arvon@Mo:~<span class="regexp">/arvon_perl&gt; perl splice_string.pl</span></div><div class="line">now @removed is , and @array is pebbles wilema dino fred barney betty.</div></pre></td></tr></table></figure>
</li>
</ul>
<p>###字符串的内插</p>
<ul>
<li><p>和标量一样，数组的内容同样可以被内插到双引号中。内插时，会在数组的各个元素之间自动添加分隔用的空格</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/perl</span></div><div class="line"><span class="keyword">use</span> <span class="number">5.010</span>;</div><div class="line">@rocks = <span class="keyword">qw</span>/ flintstone slate rubble /;</div><div class="line"><span class="keyword">print</span> <span class="string">"Quartz @rocks limestone\n"</span></div><div class="line"></div><div class="line"><span class="comment">###Output</span></div><div class="line">arvon@Mo:~<span class="regexp">/arvon_perl&gt; perl array_one.pl</span></div><div class="line">Quartz flintstone slate rubble limestone</div></pre></td></tr></table></figure>
</li>
<li><p>Example for index_expression</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/perl</span></div><div class="line"><span class="keyword">use</span> <span class="number">5.010</span>;</div><div class="line">@fred = <span class="string">qw(eating rocks is wrong)</span>;</div><div class="line">$fred = <span class="string">"right"</span>;</div><div class="line"><span class="keyword">print</span> <span class="string">"This is $fred[3]\n"</span>;     <span class="comment">#just right</span></div><div class="line"><span class="keyword">print</span> <span class="string">"This is <span class="subst">$&#123;fred&#125;</span>[3]\n"</span>;   <span class="comment">#wrong</span></div><div class="line"><span class="keyword">print</span> <span class="string">"This is $fred"</span>.<span class="string">"[3]\n"</span>;  <span class="comment">#wrong</span></div><div class="line"><span class="keyword">print</span> <span class="string">"This is $fred\[3]\n"</span>;    <span class="comment">#still wrong</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>##后续下一篇，太长了不方便查阅</p>
<ul>
<li>So， Let’s go</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux挂载LVM分区]]></title>
      <url>http://arvon.top/2015/08/07/Linux%E6%8C%82%E8%BD%BDLVM%E5%88%86%E5%8C%BA/</url>
      <content type="html"><![CDATA[<p><strong>简介：</strong>LVM是 Logical Volume Manager（逻辑卷管理）的简写，它是Linux环境下对磁盘分区进行管理的一种机制，它由Heinz Mauelshagen在Linux 2.4内核上实现，目前最新版本为：稳定版1.0.5，开发版 1.1.0-rc2，以及LVM2开发版。Linux用户安装Linux操作系统时遇到的一个常见的难以决定的问题就是如何正确地评估各分区大小，以分配合适的硬盘空间。普通的磁盘分区管理方式在逻辑分区划分好之后就无法改变其大小，当一个逻辑分区存放不下某个文件时，这个文件因为受上层文件系统的限制，也不能跨越多个分区来存放，所以也不能同时放到别的磁盘上。而遇到出现某个分区空间耗尽时，解决的方法通常是使用符号链接，或者使用调整分区大小的工具，但这只是暂时解决办法，没有从根本上解决问题。随着Linux的逻辑卷管理功能的出现，这些问题都迎刃而解，用户在无需停机的情况下可以方便地调整各个分区大小。</p>
<a id="more"></a>
<h2 id="手动将LVM挂载至linux系统"><a href="#手动将LVM挂载至linux系统" class="headerlink" title="手动将LVM挂载至linux系统"></a>手动将LVM挂载至linux系统</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">rpm -qa lvm2</div><div class="line"><span class="comment">#查看是否安装了lvm</span></div><div class="line">yum install lvm2</div><div class="line"><span class="comment">#安装lvm软件</span></div><div class="line">vgscan</div><div class="line"><span class="comment">#查找并显示系统中存在的LVN卷组</span></div><div class="line">lvscan</div><div class="line"><span class="comment">#查看系统中存在哪些卷组以及它们的激活状态（注意：如果有两个卷组名一样，其中一个是无法挂载的，要想挂载，需要重命名一个卷组）</span></div><div class="line">vgdisplay LVMname | more</div><div class="line"><span class="comment">#显示所有名为LVMname卷组的详细信息，请记住你将要挂载卷组的 VG UUID。</span></div><div class="line">	vgrename o236o6-MGAQ-erKG-k6cH<span class="number">-12</span>Zs<span class="number">-8</span>NwX-CCqPG3 vgNewName</div><div class="line"><span class="comment">#卷组重新命名为vgNewName</span></div><div class="line">vgchange -ay /dev/vgNewName</div><div class="line"><span class="comment">#激活卷组vsNewName，此时你也并不能使用，需要挂载</span></div><div class="line">lvscan</div><div class="line"><span class="comment">#查看现在的激活状态</span></div><div class="line">mount /dev/vgNewName /somePoint</div><div class="line"><span class="comment">#挂载LVM到挂载点，这样就可以访问了</span></div><div class="line">umount /dev/vgNewName<span class="comment"># or usr 'umount /somePoint'</span></div><div class="line"><span class="comment">#卸载LVM卷组</span></div><div class="line">vgchange -an /dev/vgNewName</div><div class="line"><span class="comment">#将卷组修改成不激活状态</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[nc命令]]></title>
      <url>http://arvon.top/2015/07/30/nc%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<p>由于telnet不能测试udp端口联通性，nc命令可以检测udp端口连接状态，这里记录一下用法<br><code>nc命令介绍:</code>可以检测tcp/udp端口连通性、端口扫描、远程传输文件、克隆硬盘或分区、保存web页面、模拟http Headers、简单聊天等等</p>
<a id="more"></a>
<h3 id="参数介绍"><a href="#参数介绍" class="headerlink" title="参数介绍"></a>参数介绍</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">-g&lt;网关&gt; 设置路由器跃程通信网关，最多可设置8个。</div><div class="line">-G&lt;指向器数目&gt; 设置来源路由指向器，其数值为4的倍数。</div><div class="line">-h 在线帮助。</div><div class="line">-i&lt;延迟秒数&gt; 设置时间间隔，以便传送信息及扫描通信端口。</div><div class="line">-l 使用监听模式，管控传入的资料。</div><div class="line">-n 直接使用IP地址，而不通过域名服务器。</div><div class="line">-o&lt;输出文件&gt; 指定文件名称，把往来传输的数据以16进制字码倾倒成该文件保存。</div><div class="line">-p&lt;通信端口&gt; 设置本地主机使用的通信端口。</div><div class="line">-r 乱数指定本地与远端主机的通信端口。</div><div class="line">-s&lt;来源位址&gt; 设置本地主机送出数据包的IP地址。</div><div class="line">-u 使用UDP传输协议。</div><div class="line">-v 显示指令执行过程。</div><div class="line">-w&lt;超时秒数&gt; 设置等待连线的时间。</div><div class="line">-z 使用0输入/输出模式，只在扫描通信端口时使用。</div></pre></td></tr></table></figure>
<h3 id="检测端口连通性"><a href="#检测端口连通性" class="headerlink" title="检测端口连通性"></a>检测端口连通性</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">TCP</span></div><div class="line"><span class="meta">#</span><span class="bash">TCP单个端口或范围扫描</span></div><div class="line">nc -vz -w2 192.168.20.133 1870</div><div class="line">nc -vz -w2 192.168.20.133 1-1870</div><div class="line"><span class="meta">#</span><span class="bash">UDP</span></div><div class="line"><span class="meta">#</span><span class="bash">UDP单个端口或范围扫描</span></div><div class="line">nc -uz -w2 192.168.20.133 5000</div><div class="line">nc -uz -w2 192.168.20.133 4990-5000</div></pre></td></tr></table></figure>
<h3 id="传输文件"><a href="#传输文件" class="headerlink" title="传输文件"></a>传输文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">目标文件主机命令，这个需要在文件传输之前执行，file.txt为文件传输过来后的文件名</span></div><div class="line">nc -l 1234 &gt; file.txt</div><div class="line"><span class="meta">#</span><span class="bash">源文件主机命令，hello.txt为传输文件，63为目标主机</span></div><div class="line">nc 172.17.18.63 1234 &lt; hello.txt</div></pre></td></tr></table></figure>
<h3 id="聊天与传输文件基本一样"><a href="#聊天与传输文件基本一样" class="headerlink" title="聊天与传输文件基本一样"></a>聊天与传输文件基本一样</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">nc -l 1234    #主机1</div><div class="line">nc 192.168.2.34 1234    #主机2</div></pre></td></tr></table></figure>
<h3 id="操作memcache"><a href="#操作memcache" class="headerlink" title="操作memcache"></a>操作memcache</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">存储数据</span></div><div class="line">printf “set key 0 10 6rnresultrn” |nc 192.168.2.34 11211</div><div class="line"><span class="meta">#</span><span class="bash">获取数据</span></div><div class="line">printf “get keyrn” |nc 192.168.2.34 11211</div><div class="line"><span class="meta">#</span><span class="bash">删除数据</span></div><div class="line">printf “delete keyrn” |nc 192.168.2.34 11211</div><div class="line"><span class="meta">#</span><span class="bash">查看状态</span></div><div class="line">printf “statsrn” |nc 192.168.2.34 11211</div><div class="line"><span class="meta">#</span><span class="bash">模拟top命令查看状态</span></div><div class="line">watch “echo stats” |nc 192.168.2.34 11211</div><div class="line"><span class="meta">#</span><span class="bash">清空缓存</span></div><div class="line">printf “flush_allrn” |nc 192.168.2.34 11211</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[简明Python读书笔记]]></title>
      <url>http://arvon.top/2015/07/30/%E7%AE%80%E6%98%8EPython%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p><img src="http://oqfz9mxmq.bkt.clouddn.com/20150730-pythonnote-1.jpeg" alt="20150730-pythonnote-1"></p>
<h1 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h1><ul>
<li>20150730 总结介绍</li>
<li>20150731 控制流</li>
<li>20150804 module</li>
<li>20150806 脚本练手</li>
<li>20150807 模块方法</li>
<li>20150810 是时候结束了<a id="more"></a>
<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1></li>
</ul>
<h2 id="简记"><a href="#简记" class="headerlink" title="简记"></a>简记</h2><ul>
<li>这里使用的是CentOS release 6.6 (Final)</li>
</ul>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[root@Mo ~]# python -V		#查看python的版本</div><div class="line">Python 2.6.6</div><div class="line"></div><div class="line">[root@Mo arvon_python]# which python	#查看python命令的安装的位置</div><div class="line">/usr/bin/python</div><div class="line"></div><div class="line">[root@Mo arvon_python]# echo $PATH		#查看$PATH变量，可以通过which命令查看一个命令的位置</div><div class="line">/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin</div><div class="line"><span class="meta"></span></div><div class="line">	#<span class="bash">缩进可以使用Tab、2个空格、4个空格，选择一个长期用下去</span></div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment">#-*- coding: utf-8 -*-</span></div><div class="line"><span class="comment">#the script is about expression</span></div><div class="line">length = float(raw_input(<span class="string">"Enter the length:"</span>))</div><div class="line">breadth = float(raw_input(<span class="string">"Enter the breadth:"</span>))</div><div class="line">area = length * breadth</div><div class="line"><span class="keyword">print</span> <span class="string">'Area is'</span>, area</div><div class="line"><span class="keyword">print</span> <span class="string">'Perimeter is'</span>, <span class="number">2</span>* (length + breadth)</div></pre></td></tr></table></figure>
<h2 id="控制流"><a href="#控制流" class="headerlink" title="控制流"></a>控制流</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><ul>
<li>在python中有三种控制流语句if、for、while</li>
</ul>
<h4 id="if语句实例"><a href="#if语句实例" class="headerlink" title="if语句实例"></a>if语句实例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment">#-*- coding: utf-8 -*-</span></div><div class="line"><span class="comment">#Todo: show how to use if</span></div><div class="line"><span class="comment">#number = int(raw_input("Input a number:"))</span></div><div class="line">number = <span class="number">25</span></div><div class="line">guess = int(input(<span class="string">"Enter a number which you are think:"</span>))</div><div class="line"><span class="keyword">print</span> guess</div><div class="line"><span class="keyword">print</span> number</div><div class="line"><span class="keyword">if</span> guess == number:</div><div class="line">    <span class="keyword">print</span> <span class="string">"Your number is right"</span></div><div class="line"><span class="keyword">elif</span> guess &gt; <span class="number">25</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">"Your number is:"</span>, guess, <span class="string">"It,s too big"</span></div><div class="line"><span class="keyword">elif</span> guess &lt; <span class="number">25</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">"You number is:"</span>, guess, <span class="string">"is small"</span></div></pre></td></tr></table></figure>
<h4 id="while语句实例"><a href="#while语句实例" class="headerlink" title="while语句实例"></a>while语句实例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment">#-*- coding: utf-8 -*-</span></div><div class="line"><span class="comment">#Todo: while</span></div><div class="line">number=<span class="number">23</span></div><div class="line">running=<span class="keyword">True</span></div><div class="line"><span class="keyword">while</span> running:</div><div class="line">    guess=int(raw_input(<span class="string">'Enteraninteger:'</span>))</div><div class="line">    <span class="keyword">if</span> guess == number:</div><div class="line">        <span class="keyword">print</span> <span class="string">'Congratulations, you guessed it.'</span></div><div class="line">        running = <span class="keyword">False</span> <span class="comment">#this causes the while loop to stop</span></div><div class="line">    <span class="keyword">elif</span> guess &lt; number:</div><div class="line">        <span class="keyword">print</span> <span class="string">'No, it is a litte higher than that'</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">'No, it is a little lower than that'</span></div><div class="line"><span class="keyword">else</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">'The while loop is over.'</span></div><div class="line">    <span class="comment">#Do anything else you want to do here</span></div><div class="line"><span class="keyword">print</span> <span class="string">'done'</span></div></pre></td></tr></table></figure>
<h4 id="for语句"><a href="#for语句" class="headerlink" title="for语句"></a>for语句</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment">#-*- coding: utf-8 -*-</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">15</span>, <span class="number">2</span>):</div><div class="line">    <span class="keyword">print</span> i</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">'THe for loop is over'</span></div></pre></td></tr></table></figure>
<h4 id="break语句"><a href="#break语句" class="headerlink" title="break语句"></a>break语句</h4><ul>
<li>break语句是用来终止循环语句的，哪怕循环条件没有称为False或序列还没有被完全递归，也停止执行循环语句。</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment">#-*- coding: utf-8 -*-</span></div><div class="line"><span class="comment">#Todo: break.py</span></div><div class="line">runing = <span class="string">'True'</span></div><div class="line"><span class="keyword">while</span> runing:</div><div class="line">    s = raw_input(<span class="string">'Enter your name:'</span>)</div><div class="line">    <span class="keyword">if</span> s == <span class="string">'quit'</span>:</div><div class="line">        <span class="keyword">break</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'Length of the string is'</span>, len(s)</div><div class="line"><span class="keyword">print</span> <span class="string">'Done'</span></div></pre></td></tr></table></figure>
<h4 id="continue语句"><a href="#continue语句" class="headerlink" title="continue语句"></a>continue语句</h4><ul>
<li>跳过当前循环块中的剩余语句，然后进行下一轮循环。</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment">#-*- coding: utf-8 -*-</span></div><div class="line">runing = <span class="keyword">True</span></div><div class="line"><span class="keyword">while</span> runing:</div><div class="line">    s = raw_input(<span class="string">'Enter something:'</span>)</div><div class="line">    <span class="keyword">if</span> s == <span class="string">'quit'</span>:</div><div class="line">        <span class="keyword">break</span></div><div class="line">    <span class="keyword">if</span> len(s) &lt; <span class="number">3</span>:</div><div class="line">        <span class="keyword">continue</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'Input is of sufficient length'</span></div></pre></td></tr></table></figure>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><ul>
<li>函数是重用的程序段。它们允许你给一块语句一个名称，然后你可以在你的程序的任何地方使用这个名称任意多次<br>地运行这个语句块，这称为调用函数。函数通过def关键字定义。def关键字后跟一个函数的标识符名称，然后跟一对<br>圆括号。圆括号可以包括一些变量名，该行以冒号结尾，接下来的是一块语句，它们是函数体。</li>
</ul>
<h3 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment">#-*- coding: utf-8 -*-</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sayHello</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'Hello World！'</span><span class="comment">#block belonging to the function</span></div><div class="line">sayHello()<span class="comment">#call the function</span></div></pre></td></tr></table></figure>
<h3 id="使用函数形参"><a href="#使用函数形参" class="headerlink" title="使用函数形参"></a>使用函数形参</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment">#-*- coding: utf-8 -*-</span></div><div class="line"><span class="comment">#Filename:func_param.py</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">printMax</span><span class="params">(a,b)</span>:</span></div><div class="line">    <span class="keyword">if</span> a&gt;b:</div><div class="line">        <span class="keyword">print</span> a, <span class="string">'is max number'</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">print</span> b, <span class="string">'is max number'</span></div><div class="line">printMax(<span class="number">3</span>,<span class="number">4</span>)<span class="comment">#directly give litter values</span></div><div class="line">x = <span class="number">5</span></div><div class="line">y = <span class="number">7</span></div><div class="line">printMax(x,y)<span class="comment">#give variables as arguments</span></div></pre></td></tr></table></figure>
<h3 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment">#Filename: func_local.py</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(x)</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'x is'</span>, x</div><div class="line">    x = <span class="number">2</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'Changed local x to'</span>, x</div><div class="line">x = <span class="number">50</span></div><div class="line">func(x)</div><div class="line"><span class="keyword">print</span> <span class="string">'x is still'</span>, x</div></pre></td></tr></table></figure>
<h3 id="global语句"><a href="#global语句" class="headerlink" title="global语句"></a>global语句</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment">#-*- coding: utf-8 -*-</span></div><div class="line"><span class="comment">#Todo: func_global.py</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">global</span> x</div><div class="line">    <span class="keyword">print</span> <span class="string">'x is'</span>, x</div><div class="line">    x = <span class="number">2</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'Changed local x to'</span>, x</div><div class="line">x = <span class="number">50</span></div><div class="line">func()</div><div class="line"><span class="keyword">print</span> <span class="string">'Value of x is'</span>, x</div></pre></td></tr></table></figure>
<h3 id="使用默认参数值"><a href="#使用默认参数值" class="headerlink" title="使用默认参数值"></a>使用默认参数值</h3><ul>
<li>默认参数值是一个参数，默认参数值应该是不可变的，只有在形参表末尾的那些参数可以有默认参数值，即<br>你不能在声明函数形参的时候，先声明有默认值的形参而后声明没有默认值的形参，例如：def func（a，b=5）<br>是有效地，但是def func（a=5， b）是无效的</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment">#-*- coding: utf-8</span></div><div class="line"><span class="comment">#Todo: func_default.py</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">say</span> <span class="params">(message, times=<span class="number">1</span>)</span>:</span></div><div class="line">    <span class="keyword">print</span> message*times</div><div class="line">say(<span class="string">'Hello'</span>)</div><div class="line">say(<span class="string">'World'</span>,<span class="number">5</span>)</div></pre></td></tr></table></figure>
<h3 id="关键参数"><a href="#关键参数" class="headerlink" title="关键参数"></a>关键参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment">#-*- coding: utf-8 -*-</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(a,b = <span class="number">5</span>, c=<span class="number">10</span>)</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'a is'</span>, a, <span class="string">'and b is'</span>, b, <span class="string">'and c is'</span>, c</div><div class="line">func(<span class="number">3</span>, <span class="number">7</span>)</div><div class="line">func(<span class="number">25</span>, c=<span class="number">24</span>)</div><div class="line">func(c= <span class="number">50</span>, a= <span class="number">100</span>)</div><div class="line"><span class="comment">###Output</span></div><div class="line">[root@Mo arvon_python]<span class="comment"># python func_key.py</span></div><div class="line">a <span class="keyword">is</span> <span class="number">3</span> <span class="keyword">and</span> b <span class="keyword">is</span> <span class="number">7</span> <span class="keyword">and</span> c <span class="keyword">is</span> <span class="number">10</span></div><div class="line">a <span class="keyword">is</span> <span class="number">25</span> <span class="keyword">and</span> b <span class="keyword">is</span> <span class="number">5</span> <span class="keyword">and</span> c <span class="keyword">is</span> <span class="number">24</span></div><div class="line">a <span class="keyword">is</span> <span class="number">100</span> <span class="keyword">and</span> b <span class="keyword">is</span> <span class="number">5</span> <span class="keyword">and</span> c <span class="keyword">is</span> <span class="number">50</span></div></pre></td></tr></table></figure>
<h3 id="return语句"><a href="#return语句" class="headerlink" title="return语句"></a>return语句</h3><ul>
<li>return语句用来从一个函数返回即跳出函数。也可选函数返回一个值</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment">#-*- coding: utf-8 -*-</span></div><div class="line"><span class="comment">#Todo: func_return.py</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">maximum</span><span class="params">(x, y)</span>:</span></div><div class="line">    <span class="keyword">if</span> x&gt;y:</div><div class="line">        <span class="keyword">return</span> x</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> y</div><div class="line"><span class="keyword">print</span> maximum(<span class="number">2</span>, <span class="number">3</span>)</div><div class="line"><span class="comment">###Output</span></div><div class="line">[root@Mo arvon_python]<span class="comment"># python func_return.py</span></div><div class="line"><span class="number">3</span></div></pre></td></tr></table></figure>
<h3 id="文档字符串（DocStrings）"><a href="#文档字符串（DocStrings）" class="headerlink" title="文档字符串（DocStrings）"></a>文档字符串（DocStrings）</h3><ul>
<li>在函数的第一个逻辑行的字符串是这个函数的文档那个字符串</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment">#-*- coding: utf-8 -*-</span></div><div class="line"><span class="comment">#Todo: func_doc.py</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">printMax</span><span class="params">(x, y)</span>:</span></div><div class="line">    <span class="string">'''Prints the max num of tow numbers.</span></div><div class="line">    The two values must be in tetgers.'''</div><div class="line">    x = int(x)<span class="comment">#convert to in tegers, if possible</span></div><div class="line">    y = int(y)</div><div class="line">    <span class="keyword">if</span> x&gt;y:</div><div class="line">        <span class="keyword">print</span> x, <span class="string">'is max num'</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">print</span> y, <span class="string">'is max num'</span></div><div class="line">printMax(<span class="number">3</span>, <span class="number">5</span>)</div><div class="line"><span class="keyword">print</span> printMax.__doc__</div><div class="line"><span class="comment">###Out put</span></div><div class="line">[root@Mo arvon_python]<span class="comment"># python func_doc.py</span></div><div class="line"><span class="number">5</span> <span class="keyword">is</span> max num</div><div class="line">Prints the max num of tow numbers.</div><div class="line">    The two values must be <span class="keyword">in</span> tetgers.</div></pre></td></tr></table></figure>
<h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><h3 id="模块概述"><a href="#模块概述" class="headerlink" title="模块概述"></a>模块概述</h3><ul>
<li>模块的用处在于它能为你在别的程序中重用它提供的服务和功能。Python附带的标准库就是这<br>样一组模块的例子。</li>
</ul>
<h3 id="使用sys模块"><a href="#使用sys模块" class="headerlink" title="使用sys模块"></a>使用sys模块</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment">#-*- coding: utf-8 -*-</span></div><div class="line"><span class="comment">#Todo: using_sys.py</span></div><div class="line"><span class="keyword">import</span> sys  <span class="comment">#sys是system的缩写</span></div><div class="line"><span class="keyword">print</span> <span class="string">'The command line arguments are:'</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> sys.argv:</div><div class="line"><span class="comment">#脚本的名称总是sys.argv列表的第一个参数</span></div><div class="line">    <span class="keyword">print</span> i</div><div class="line"><span class="keyword">print</span> <span class="string">'\n\nThe PYTHON PATH is'</span>, sys.path, <span class="string">'\n'</span></div><div class="line"><span class="comment">###Output</span></div><div class="line">[root@Mo arvon_python]<span class="comment"># python using_sys.py</span></div><div class="line">The command line arguments are:</div><div class="line">using_sys.py</div><div class="line"></div><div class="line"></div><div class="line">The PYTHON PATH <span class="keyword">is</span> [<span class="string">'/root/arvon_python'</span>, <span class="string">'/usr/lib64/python26.zip'</span>, <span class="string">'/usr/lib64/python2.6'</span>, <span class="string">'/usr/lib64/python2.6/plat-linux2'</span>, <span class="string">'/usr/lib64/python2.6/lib-tk'</span>, <span class="string">'/usr/lib64/python2.6/lib-old'</span>, <span class="string">'/usr/lib64/python2.6/lib-dynload'</span>, <span class="string">'/usr/lib64/python2.6/site-packages'</span>, <span class="string">'/usr/lib/python2.6/site-packages'</span>]</div></pre></td></tr></table></figure>
<h3 id="字节编译的-pyc文件"><a href="#字节编译的-pyc文件" class="headerlink" title="字节编译的.pyc文件"></a>字节编译的.pyc文件</h3><ul>
<li>输入一个模块相对来说是一个比较费时的事情，所以Python做了一些技巧，以便使输入模块更<br>加快一些。一种方法是创建 字节编译的文件 ，这些文件以.pyc作为扩展名。字节编译的文件与<br>Python变换程序的中间状态有关（是否还记得Python如何工作的介绍？）。当你在下次从别的<br>程序输入这个模块的时候，.pyc文件是十分有用的——它会快得多，因为一部分输入模块所需<br>的处理已经完成了。另外，这些字节编译的文件也是与平台无关的。所以，现在你知道了那<br>些.pyc文件事实上是什么了。</li>
</ul>
<h3 id="from-import语句"><a href="#from-import语句" class="headerlink" title="from..import语句"></a>from..import语句</h3><ul>
<li>如果你想要直接输入argv变量到你的程序中（避免在每次使用它时打sys.），那么你可以使用<br>from sys import argv语句。如果你想要输入所有sys模块使用的名字，那么你可以使用from sys<br>import *语句。这对于所有模块都适用。一般说来，应该避免使用from..import而使用import语<br>句，因为这样可以使你的程序更加易读，也可以避免名称的冲突。</li>
<li>不建议使用，尽量使用sys.argv这样的</li>
</ul>
<h3 id="模块的name-这里左右都是两个下划线"><a href="#模块的name-这里左右都是两个下划线" class="headerlink" title="模块的name(这里左右都是两个下划线)"></a>模块的<strong>name</strong>(这里左右都是两个下划线)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment">#-*- coding: utf-8 -*-</span></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">' __main__ '</span>:</div><div class="line"><span class="comment">#模块是对象，并且所有的模块都有一个内置属性 __name__。一个模块的 __name__ 的值取决于您如何应用模块。如果 import 一个模块，那么模块__name__ 的值通常为模块文件名，不带路径或者文件扩展名。但是您也可以像一个标准的程序样直接运行模块，在这 种情况下, __name__ 的值将是一个特别缺省"__main__"</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'This program is being run by itself'</span></div><div class="line"><span class="keyword">else</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">'I am being imorted form another module'</span></div></pre></td></tr></table></figure>
<h3 id="创造自己的module"><a href="#创造自己的module" class="headerlink" title="创造自己的module"></a>创造自己的module</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment">#-*- coding: utf-8 -*-</span></div><div class="line"><span class="comment">#Todo: creat own module.py</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sayHi</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'Hi, this is my wife pikachu.'</span></div><div class="line">version = <span class="string">'0.1'</span></div><div class="line"><span class="comment">#End of  my module.py</span></div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python   #使用自己创建的模块</span></div><div class="line"><span class="comment">#-*- coding: utf-8 -*-</span></div><div class="line"><span class="comment">#Todo: use my own module</span></div><div class="line"><span class="keyword">import</span> myModule</div><div class="line">myModule.sayHi()</div><div class="line"><span class="keyword">print</span> <span class="string">'Version'</span>,myModule.version</div><div class="line"></div><div class="line"><span class="comment">### Output</span></div><div class="line"></div><div class="line">[root@Mo arvon_python]<span class="comment"># python usemyModule.py</span></div><div class="line">Hi, this <span class="keyword">is</span> my wife pikachu.</div><div class="line">Version <span class="number">0.1</span></div></pre></td></tr></table></figure>
<h3 id="使用dir函数"><a href="#使用dir函数" class="headerlink" title="使用dir函数"></a>使用dir函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> sys</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dir(sys)</div><div class="line">[<span class="string">'__displayhook__'</span>, <span class="string">'__doc__'</span>, <span class="string">'__excepthook__'</span>, <span class="string">'__name__'</span>, <span class="string">'__package__'</span>, <span class="string">'__stderr__'</span>, <span class="string">'__stdin__'</span>, <span class="string">'__stdout__'</span>, <span class="string">'_clear_type_cache'</span>, <span class="string">'_current_frames'</span>, <span class="string">'_getframe'</span>, <span class="string">'api_version'</span>, <span class="string">'argv'</span>, <span class="string">'builtin_module_names'</span>, <span class="string">'byteorder'</span>, <span class="string">'call_tracing'</span>, <span class="string">'callstats'</span>, <span class="string">'copyright'</span>, <span class="string">'displayhook'</span>, <span class="string">'dont_write_bytecode'</span>, <span class="string">'exc_clear'</span>, <span class="string">'exc_info'</span>, <span class="string">'exc_type'</span>, <span class="string">'excepthook'</span>, <span class="string">'exec_prefix'</span>, <span class="string">'executable'</span>, <span class="string">'exit'</span>, <span class="string">'flags'</span>, <span class="string">'float_info'</span>, <span class="string">'getcheckinterval'</span>, <span class="string">'getdefaultencoding'</span>, <span class="string">'getdlopenflags'</span>, <span class="string">'getfilesystemencoding'</span>, <span class="string">'getprofile'</span>, <span class="string">'getrecursionlimit'</span>, <span class="string">'getrefcount'</span>, <span class="string">'getsizeof'</span>, <span class="string">'gettrace'</span>, <span class="string">'hexversion'</span>, <span class="string">'maxint'</span>, <span class="string">'maxsize'</span>, <span class="string">'maxunicode'</span>, <span class="string">'meta_path'</span>, <span class="string">'modules'</span>, <span class="string">'path'</span>, <span class="string">'path_hooks'</span>, <span class="string">'path_importer_cache'</span>, <span class="string">'platform'</span>, <span class="string">'prefix'</span>, <span class="string">'ps1'</span>, <span class="string">'ps2'</span>, <span class="string">'py3kwarning'</span>, <span class="string">'setcheckinterval'</span>, <span class="string">'setdlopenflags'</span>, <span class="string">'setprofile'</span>, <span class="string">'setrecursionlimit'</span>, <span class="string">'settrace'</span>, <span class="string">'stderr'</span>, <span class="string">'stdin'</span>, <span class="string">'stdout'</span>, <span class="string">'subversion'</span>, <span class="string">'version'</span>, <span class="string">'version_info'</span>, <span class="string">'warnoptions'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dir()</div><div class="line">[<span class="string">'__builtins__'</span>, <span class="string">'__doc__'</span>, <span class="string">'__name__'</span>, <span class="string">'__package__'</span>, <span class="string">'sys'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dir()</div><div class="line">[<span class="string">'__builtins__'</span>, <span class="string">'__doc__'</span>, <span class="string">'__name__'</span>, <span class="string">'__package__'</span>, <span class="string">'a'</span>, <span class="string">'sys'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dela</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">NameError: name <span class="string">'dela'</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dir()</div><div class="line">[<span class="string">'__builtins__'</span>, <span class="string">'__doc__'</span>, <span class="string">'__name__'</span>, <span class="string">'__package__'</span>, <span class="string">'a'</span>, <span class="string">'sys'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> a</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dir ()</div><div class="line">[<span class="string">'__builtins__'</span>, <span class="string">'__doc__'</span>, <span class="string">'__name__'</span>, <span class="string">'__package__'</span>, <span class="string">'sys'</span>]</div><div class="line"><span class="comment">###说明</span></div><div class="line"><span class="comment">#首先，我们来看一下在输入的sys模块上使用dir。我们看到它包含一个庞大的属性列表。</span></div><div class="line"><span class="comment">#接下来，我们不给dir函数传递参数而使用它——默认地，它返回当前模块的属性列表。注</span></div><div class="line"><span class="comment">#意，输入的模块同样是列表的一部分。</span></div><div class="line"><span class="comment">#为了观察dir的作用，我们定义一个新的变量a并且给它赋一个值，然后检验dir，我们观察到在</span></div><div class="line"><span class="comment">#列表中增加了以上相同的值。我们使用del语句删除当前模块中的变量/属性，这个变化再一次</span></div><div class="line"><span class="comment">#反映在dir的输出中。</span></div><div class="line"><span class="comment">#关于del的一点注释——这个语句在运行后被用来 删除 一个变量/名称。在这个例子中，del a，</span></div><div class="line"><span class="comment">#你将无法再使用变量a——它就好像从来没有存在过一样。</span></div></pre></td></tr></table></figure>
<h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><ul>
<li>数据结构基本上就是它们可以处理一些数据的结构，或说，它们是用来存储一组相关数据的。<br>在Python中有三种内建的数据结构——列表、元组和字典。</li>
</ul>
<h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><ul>
<li>list是处理一组有序项目的数据结构，即你可以在一个列表中存储一个 序列 的项目。假想你有<br>一个购物列表，上面记载着你要买的东西，你就容易理解列表了。只不过在你的购物表上，可<br>能每样东西都独自占有一行，而在Python中，你在每个项目之间用逗号分割。<br>列表中的项目应该包括在方括号中，这样Python就知道你是在指明一个列表。一旦你创建了一<br>个列表，你可以添加、删除或是搜索列表中的项目。由于你可以增加或删除项目，我们说列表<br>是 可变的 数据类型，即这种类型是可以被改变的。</li>
<li>eggs:<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment">#-*- coding: utf-8 -*-</span></div><div class="line"><span class="comment">#Todo: using_list.py</span></div><div class="line">likelist = [<span class="string">'apple'</span>, <span class="string">'mango'</span>, <span class="string">'pikachu'</span>, <span class="string">'mo'</span>]</div><div class="line"><span class="keyword">print</span> <span class="string">'I have'</span>, len(likelist), <span class="string">'Just do.'</span></div><div class="line"><span class="keyword">print</span> <span class="string">'These things include:'</span>,</div><div class="line"><span class="keyword">for</span> eachone <span class="keyword">in</span> likelist:</div><div class="line">    <span class="keyword">print</span> eachone,</div><div class="line"><span class="keyword">print</span> <span class="string">'\nI just like live with her.'</span></div><div class="line">likelist.append(<span class="string">'Arvon'</span>)</div><div class="line"><span class="keyword">print</span> <span class="string">'My life now is include:'</span>, likelist</div><div class="line"><span class="keyword">print</span> <span class="string">'I want sort mylist now'</span></div><div class="line">likelist.sort()</div><div class="line"><span class="keyword">print</span> <span class="string">'Have done, Now the list is:'</span>, likelist</div><div class="line"><span class="keyword">print</span> <span class="string">'The first item now is'</span>, likelist[<span class="number">0</span>]</div><div class="line">oldlist = likelist[<span class="number">0</span>]</div><div class="line"><span class="keyword">del</span> likelist[<span class="number">0</span>]</div><div class="line"><span class="keyword">print</span> <span class="string">'I am'</span>, oldlist</div><div class="line"><span class="keyword">print</span> <span class="string">'My list now is:'</span>, likelist</div><div class="line"><span class="comment">##[root@Mo arvon_python]# python useing_list.py</span></div><div class="line">I have <span class="number">4</span> Just do.</div><div class="line">These things include: apple mango pikachu mo</div><div class="line">I just like live <span class="keyword">with</span> her.</div><div class="line">My life now <span class="keyword">is</span> include: [<span class="string">'apple'</span>, <span class="string">'mango'</span>, <span class="string">'pikachu'</span>, <span class="string">'mo'</span>, <span class="string">'Arvon'</span>]</div><div class="line">I want sort mylist now</div><div class="line">Have done, Now the list <span class="keyword">is</span>: [<span class="string">'Arvon'</span>, <span class="string">'apple'</span>, <span class="string">'mango'</span>, <span class="string">'mo'</span>, <span class="string">'pikachu'</span>]</div><div class="line">The first item now <span class="keyword">is</span> Arvon</div><div class="line">I am Arvon</div><div class="line">My list now <span class="keyword">is</span>: [<span class="string">'apple'</span>, <span class="string">'mango'</span>, <span class="string">'mo'</span>, <span class="string">'pikachu'</span>]</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="对象和类简介"><a href="#对象和类简介" class="headerlink" title="对象和类简介"></a>对象和类简介</h3><ul>
<li>列表是使用对象和类的一个例子。当你使用变量i并给它赋值的时候，比如赋整数5，你可以认<br>为你创建了一个类（类型）int的对象（实例）i。事实上，你可以看一下help(int)以更好地理解<br>这一点。<br>类也有方法，即仅仅为类而定义地函数。仅仅在你有一个该类的对象的时候，你才可以使用这<br>些功能。例如，Python为list类提供了append方法，这个方法让你在列表尾添加一个项目。例如<br>mylist.append(‘an item’)列表mylist中增加那个字符串。注意，使用点号来使用对象的方法。<br>一个类也有域，它是仅仅为类而定义的变量。仅仅在你有一个该类的对象的时候，你才可以使<br>用这些变量/名称。类也通过点号使用，例如mylist.field。</li>
</ul>
<h3 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h3><ul>
<li>元组和列表十分类似，只不过元组和字符串一样是 不可变的 即你不能修改元组。元组通过圆<br>括号中用逗号分割的项目定义。元组通常用在使语句或用户定义的函数能够安全地采用一组值<br>的时候，即被使用的元组的值不会改变。<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment">#-*- coding: utf-8 -*-</span></div><div class="line">home = (<span class="string">'Mo'</span>, <span class="string">'Arvon'</span>, <span class="string">'Pikachu'</span>)</div><div class="line"><span class="keyword">print</span> <span class="string">'Numble of home is'</span>, len(home)</div><div class="line">ourhome = (<span class="string">'Mo'</span>, <span class="string">'Arvon'</span>, <span class="string">'SmallArvon'</span>)</div><div class="line"><span class="keyword">print</span> <span class="string">'Number of ourhome is'</span>, len(ourhome)</div><div class="line"><span class="keyword">print</span> <span class="string">'All member in ourhome are'</span>, ourhome</div><div class="line"><span class="keyword">print</span> <span class="string">'come here in later'</span>, ourhome[<span class="number">2</span>]</div><div class="line"><span class="keyword">print</span> <span class="string">'Last member is'</span>, ourhome[<span class="number">2</span>][<span class="number">2</span>]</div><div class="line"><span class="comment">### Output</span></div><div class="line">root@Mo arvon_python]<span class="comment"># python using_tuple.py</span></div><div class="line">Numble of home <span class="keyword">is</span> <span class="number">3</span></div><div class="line">Number of ourhome <span class="keyword">is</span> <span class="number">3</span></div><div class="line">All member <span class="keyword">in</span> ourhome are (<span class="string">'Mo'</span>, <span class="string">'Arvon'</span>, <span class="string">'SmallArvon'</span>)</div><div class="line">come here <span class="keyword">in</span> later SmallArvon</div><div class="line">Last member <span class="keyword">is</span> a</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="元组与打印语句"><a href="#元组与打印语句" class="headerlink" title="元组与打印语句"></a>元组与打印语句</h4><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/python</div><div class="line">#-*- coding: utf-8 -*-</div><div class="line">#Todo: print_tuple.py</div><div class="line">age = 23</div><div class="line">name = 'Arvon'</div><div class="line">print '%s is %d years lold' % (name, age)</div><div class="line">#print语句可以使用跟着%符号的项目元组的字符串。这些字符串具备定制的功能。定制让输出</div><div class="line">#满足某种特定的格式。定制可以是%s表示字符串或%d表示整数。元组必须按照相同的顺序来</div><div class="line">#对应这些定制。</div><div class="line">print 'Why is %s playing with that python?' % name</div><div class="line"></div><div class="line">###Output</div><div class="line">[root@Mo arvon_python]# python print_tuple.py</div><div class="line">Arvon is 23 years lold</div><div class="line">Why is Arvon playing with that python?</div></pre></td></tr></table></figure>
<p>###字典</p>
<ul>
<li><p>只能使用不可变的对象（比如字符串）来作为字典的键，但是你可以把不可变或可变<br>的对象作为字典的值。基本说来就是，你应该只使用简单的对象作为键。</p>
</li>
<li><p>键值对在字典中以这样的方式标记：d = {key1 : value1, key2 : value2 }。注意它们的键/值对用冒<br>号分割，而各个对用逗号分割，所有这些都包括在花括号中。</p>
</li>
<li><p>字典中的键/值对是没有顺序的。如果你想要一个特定的顺序，那么你应该在使用前自己<br>对它们排序。</p>
</li>
<li><p>字典是dict类的实例/对象。</p>
</li>
</ul>
<p>####使用字典实例<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment">#-*- coding: utf-8 -*-</span></div><div class="line"><span class="comment">#Todo: script's name is using_dict.py</span></div><div class="line">ad = &#123;<span class="string">'arvon'</span>:<span class="string">'126@126.com'</span>,</div><div class="line">    <span class="string">'Mo'</span>:<span class="string">'Mo@mo.com'</span>,</div><div class="line">    <span class="string">'Pikachu'</span>:<span class="string">'pikachu@love.com'</span>,</div><div class="line">    <span class="string">'marry'</span>:<span class="string">'love@you.com'</span></div><div class="line">    &#125;</div><div class="line"><span class="keyword">print</span> <span class="string">"Arvon's email is %s"</span> % ad[<span class="string">'arvon'</span>]</div><div class="line"><span class="comment">#Adding a key/value pair</span></div><div class="line">ad[<span class="string">'life'</span>] = <span class="string">'travl@world.com'</span></div><div class="line"><span class="comment">#Deleting a key/value pair</span></div><div class="line"><span class="keyword">del</span> ad[<span class="string">'marry'</span>]</div><div class="line"><span class="keyword">print</span> <span class="string">'\n There are %d contacts in the address-book\n'</span> % len(ad)</div><div class="line"><span class="keyword">for</span> name,address <span class="keyword">in</span> ad.items():</div><div class="line">    <span class="keyword">print</span> <span class="string">'Contact %s at %s'</span> % (name, address)</div><div class="line"><span class="keyword">if</span> <span class="string">'life'</span> <span class="keyword">in</span> ad:</div><div class="line">   <span class="keyword">print</span> <span class="string">"\n life's address is %s"</span> % ad[<span class="string">'life'</span>]</div></pre></td></tr></table></figure></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">[root@Mo arvon_python]# python using_dict.py</div><div class="line">Arvon's email is 126@126.com</div><div class="line"></div><div class="line"> There are 4 contacts in the address-book</div><div class="line"></div><div class="line">Contact Mo at Mo@mo.com</div><div class="line">Contact arvon at 126@126.com</div><div class="line">Contact life at travl@world.com</div><div class="line">Contact Pikachu at pikachu@love.com</div><div class="line"></div><div class="line"> life's address is travl@world.com</div></pre></td></tr></table></figure>
<p>###序列<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment">#-*- coding: utf-8 -*-</span></div><div class="line"><span class="comment">#Todo: The script's name is seq.py</span></div><div class="line"><span class="comment">#</span></div><div class="line">shoplist = [<span class="string">'apple'</span>, <span class="string">'mango'</span>, <span class="string">'carrot'</span>, <span class="string">'banana'</span>]</div><div class="line"><span class="comment">#</span></div><div class="line"><span class="keyword">print</span> <span class="string">'Item 0 is'</span>, shoplist[<span class="number">0</span>]</div><div class="line"><span class="keyword">print</span> <span class="string">'Item 1 is'</span>, shoplist[<span class="number">1</span>]</div><div class="line"><span class="keyword">print</span> <span class="string">'Item 2 is'</span>, shoplist[<span class="number">2</span>]</div><div class="line"><span class="keyword">print</span> <span class="string">'Item 3 is'</span>, shoplist[<span class="number">3</span>]</div><div class="line"><span class="keyword">print</span> <span class="string">'Item -1 is'</span>, shoplist[<span class="number">-1</span>]</div><div class="line"><span class="keyword">print</span> <span class="string">'Item -2 is'</span>, shoplist[<span class="number">-2</span>]</div><div class="line"><span class="comment"># Slicing on a list</span></div><div class="line"><span class="keyword">print</span> <span class="string">'Item 1 to 3 is'</span>, shoplist[<span class="number">1</span>:<span class="number">3</span>]</div><div class="line"><span class="keyword">print</span> <span class="string">'Item 2 to end is'</span>, shoplist[<span class="number">2</span>:]</div><div class="line"><span class="keyword">print</span> <span class="string">'Item 1 to -1 is'</span>, shoplist[<span class="number">1</span>:<span class="number">-1</span>]</div><div class="line"><span class="keyword">print</span> <span class="string">'Item start to end is'</span>, shoplist[:]</div><div class="line"><span class="comment"># Slicing on a string</span></div><div class="line">name = <span class="string">'swaroop'</span></div><div class="line"><span class="keyword">print</span> <span class="string">'characters 1 to 3 is'</span>, name[<span class="number">1</span>:<span class="number">3</span>]</div><div class="line"><span class="keyword">print</span> <span class="string">'characters 2 to end is'</span>, name[<span class="number">2</span>:]</div><div class="line"><span class="keyword">print</span> <span class="string">'characters 1 to -1 is'</span>, name[<span class="number">1</span>:<span class="number">-1</span>]</div><div class="line"><span class="keyword">print</span> <span class="string">'characters start to end is'</span>, name[:]</div></pre></td></tr></table></figure></p>
<p><strong>输出：</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">[root@Mo arvon_python]<span class="comment"># python seq.py</span></div><div class="line">Item <span class="number">0</span> <span class="keyword">is</span> apple</div><div class="line">Item <span class="number">1</span> <span class="keyword">is</span> mango</div><div class="line">Item <span class="number">2</span> <span class="keyword">is</span> carrot</div><div class="line">Item <span class="number">3</span> <span class="keyword">is</span> banana</div><div class="line">Item <span class="number">-1</span> <span class="keyword">is</span> banana</div><div class="line">Item <span class="number">-2</span> <span class="keyword">is</span> carrot</div><div class="line">Item <span class="number">1</span> to <span class="number">3</span> <span class="keyword">is</span> [<span class="string">'mango'</span>, <span class="string">'carrot'</span>]</div><div class="line">Item <span class="number">2</span> to end <span class="keyword">is</span> [<span class="string">'carrot'</span>, <span class="string">'banana'</span>]</div><div class="line">Item <span class="number">1</span> to <span class="number">-1</span> <span class="keyword">is</span> [<span class="string">'mango'</span>, <span class="string">'carrot'</span>]</div><div class="line">Item start to end <span class="keyword">is</span> [<span class="string">'apple'</span>, <span class="string">'mango'</span>, <span class="string">'carrot'</span>, <span class="string">'banana'</span>]</div><div class="line">characters <span class="number">1</span> to <span class="number">3</span> <span class="keyword">is</span> wa</div><div class="line">characters <span class="number">2</span> to end <span class="keyword">is</span> aroop</div><div class="line">characters <span class="number">1</span> to <span class="number">-1</span> <span class="keyword">is</span> waroo</div><div class="line">characters start to end <span class="keyword">is</span> swaroop</div></pre></td></tr></table></figure></p>
<p>###引用</p>
<ul>
<li>当你创建一个对象并给它赋一个变量的时候，这个变量仅仅 引用 那个对象，而不是表示这个<br>对象本身！也就是说，变量名指向你计算机中存储那个对象的内存。这被称作名称到对象的绑<br>定。</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment">#-*- coding: utf-8 -*-</span></div><div class="line"><span class="comment">#Todo: refernce.py</span></div><div class="line"><span class="keyword">print</span> <span class="string">'Simple Assignment'</span></div><div class="line">shoplist = [<span class="string">'apple'</span>, <span class="string">'mango'</span>, <span class="string">'carrot'</span>, <span class="string">'banana'</span>]</div><div class="line">mylist = shoplist <span class="comment"># mylist is just another name pointing to the same object!</span></div><div class="line"><span class="keyword">del</span> shoplist[<span class="number">0</span>]</div><div class="line"><span class="keyword">print</span> <span class="string">'shoplist is'</span>, shoplist</div><div class="line"><span class="keyword">print</span> <span class="string">'mylist is'</span>, mylist</div><div class="line"><span class="comment"># notice that both shoplist and mylist both print the same list without</span></div><div class="line"><span class="comment"># the 'apple' confirming that they point to the same object</span></div><div class="line"><span class="keyword">print</span> <span class="string">'Copy by making a full slice'</span></div><div class="line">mylist = shoplist[:] <span class="comment"># make a copy by doing a full slice</span></div><div class="line"><span class="keyword">del</span> mylist[<span class="number">0</span>] <span class="comment"># remove first item</span></div><div class="line"><span class="keyword">print</span> <span class="string">'shoplist is'</span>, shoplist</div><div class="line"><span class="keyword">print</span> <span class="string">'mylist is'</span>, mylist</div><div class="line"><span class="comment"># notice that now the two lists are different</span></div></pre></td></tr></table></figure>
<p><strong>Output:</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[root@Mo arvon_python]<span class="comment"># python referen.py</span></div><div class="line">Simple Assignment</div><div class="line">shoplist <span class="keyword">is</span> [<span class="string">'mango'</span>, <span class="string">'carrot'</span>, <span class="string">'banana'</span>]</div><div class="line">mylist <span class="keyword">is</span> [<span class="string">'mango'</span>, <span class="string">'carrot'</span>, <span class="string">'banana'</span>]</div><div class="line">Copy by making a full slice</div><div class="line">shoplist <span class="keyword">is</span> [<span class="string">'mango'</span>, <span class="string">'carrot'</span>, <span class="string">'banana'</span>]</div><div class="line">mylist <span class="keyword">is</span> [<span class="string">'carrot'</span>, <span class="string">'banana'</span>]</div></pre></td></tr></table></figure></p>
<p>##编写脚本实例</p>
<p>###备份脚本<br><strong>Question：</strong></p>
<ol>
<li>需要备份的文件和目录由一个列表指定。</li>
<li>备份应该保存在主备份目录中。</li>
<li>文件备份成一个zip文件。</li>
<li>zip存档的名称是当前的日期和时间。</li>
<li>我们使用标准的zip命令，它通常默认地随Linux/Unix发行版提供。Windows用户可以使<br>用Info-Zip程序。注意你可以使用任何地存档命令，只要它有命令行界面就可以了，那<br>样的话我们可以从我们的脚本中传递参数给它。</li>
</ol>
<p>####Answer_1<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment">#-*- coding: utf-8 -*-</span></div><div class="line"><span class="comment">#Todo: backup_verl.py</span></div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="comment"># 1. The files and directories to be backed up are specified in a list.</span></div><div class="line"><span class="comment">#source = ['/home/swaroop/byte', '/home/swaroop/bin']</span></div><div class="line">source = [ <span class="string">'/etc'</span>]</div><div class="line"><span class="comment"># If you are using Windows, use source = [r'C:\Documents', r'D:\Work'] or something like that</span></div><div class="line"><span class="comment"># 2. The backup must be stored in a main backup directory</span></div><div class="line">target_dir = <span class="string">'/mnt/e/backup/'</span> <span class="comment"># Remember to change this to what you will be using</span></div><div class="line"><span class="comment"># 3. The files are backed up into a zip file.</span></div><div class="line"><span class="comment"># 4. The name of the zip archive is the current date and time</span></div><div class="line">target = target_dir + time.strftime(<span class="string">'%Y%m%d%H%M%S'</span>) + <span class="string">'.zip'</span></div><div class="line"><span class="comment"># 5. We use the zip command (in Unix/Linux) to put the files in a zip archive</span></div><div class="line">zip_command = <span class="string">"zip -qr '%s' %s"</span> % (target, <span class="string">' '</span>.join(source))</div><div class="line"><span class="comment"># Run the backup</span></div><div class="line"><span class="keyword">if</span> os.system(zip_command) == <span class="number">0</span>:</div><div class="line"> <span class="keyword">print</span> <span class="string">'Successful backup to'</span>, target</div><div class="line"><span class="keyword">else</span>:</div><div class="line"> <span class="keyword">print</span> <span class="string">'Backup FAILED'</span></div></pre></td></tr></table></figure></p>
<p>####Answer_2</p>
<ul>
<li>注意os.sep变量的用法——这会根据你的操作系统给出目录分隔符，即在Linux、Unix下它<br>是’/‘，在Windows下它是’\‘，而在Mac OS下它是’:’。使用os.sep而非直接使用字符，会使我们的<br>程序具有移植性，可以在上述这些系统下工作。<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment">#-*- coding: utf-8 -*-</span></div><div class="line"><span class="comment">#Todo: backup_ver2.py</span></div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="comment">#1.The files and directoryes to be backed up are specified in a list.</span></div><div class="line">source = [<span class="string">'/etc/fstab'</span>, <span class="string">'etc'</span>]</div><div class="line"><span class="comment">#if you are using Windows, use source = [r'C:\Documents',r'D:\work']</span></div><div class="line"><span class="comment">#2.The backup must be stored in a main backup directory</span></div><div class="line">target_dir = <span class="string">'/mnt/'</span></div><div class="line"><span class="comment">#3.The files are backed up into a zip file.</span></div><div class="line"><span class="comment">#4.The current_dir + time.strftime('%Y%m%d')</span></div><div class="line">today = target_dir + time.strftime(<span class="string">'%Y%m%d'</span>)</div><div class="line"><span class="comment">#The current time is the name of the zip archive</span></div><div class="line">now = time.strftime(<span class="string">'%H%M%S'</span>)</div><div class="line"><span class="comment">#Create the subdirectory if it isn't already threre</span></div><div class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(today):</div><div class="line">    os.mkdir(today)</div><div class="line">    <span class="keyword">print</span> <span class="string">'Successfully creatd directory'</span>, today</div><div class="line"><span class="comment">#The name of the zip file</span></div><div class="line">target = today + os.sep + now + <span class="string">'.zip'</span></div><div class="line"><span class="comment">#5.We use the zip command(in Unix/Linux) to put the files in a zip archive</span></div><div class="line">zip_command = <span class="string">"zip -qr '%s' %s"</span> % (target, <span class="string">' '</span>.join(source))</div><div class="line"><span class="comment">#Run the backup</span></div><div class="line"><span class="keyword">if</span> os.system(zip_command) == <span class="number">0</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">'Successful backup to'</span>, target</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">'Backup FAILED'</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>####Answer_3<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment">#-*- coding: utf-8 -*-</span></div><div class="line"><span class="comment">#Todo: backup_ver3.py</span></div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="comment">#1.The files and directories to be backed up are specified in a list.</span></div><div class="line">source = [<span class="string">'/etc/'</span>, <span class="string">'/etc/fstab'</span>]</div><div class="line">target_dir = <span class="string">'/mnt/'</span></div><div class="line">today = target_dir + time.strftime(<span class="string">'%Y%m%d'</span>)</div><div class="line">now = time.strftime(<span class="string">'%H%M%S'</span>)</div><div class="line">comment = raw_input(<span class="string">"Enter a commnet--&gt;"</span>)</div><div class="line"><span class="keyword">if</span> len(comment) == <span class="number">0</span>:<span class="comment">#check if a comment was entered</span></div><div class="line">    target = today + os.sep + now + <span class="string">'.zip'</span></div><div class="line"><span class="keyword">else</span>:</div><div class="line">    target = today + os.sep + now + <span class="string">'_'</span> +\</div><div class="line">    comment.replace(<span class="string">' '</span>, <span class="string">' '</span>) + <span class="string">'.zip'</span></div><div class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(today):</div><div class="line">    os.mkdir(today)</div><div class="line">    <span class="keyword">print</span> <span class="string">'Successfully created directory'</span>, today</div><div class="line">zip_command = <span class="string">"zip -qr '%s' %s"</span> % (target, <span class="string">' '</span>.join(source))</div><div class="line"><span class="keyword">if</span> os.system(zip_command) == <span class="number">0</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">"Successfule backup to"</span>, target</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">'Backup FAILED'</span></div></pre></td></tr></table></figure></p>
<p>##面向对象的编程</p>
<p>###面向对象介绍<br>到目前为止，在我们的程序中，我们都是根据操作数据的函数或语句块来设计程序的。这被称<br>为<code>面向过程的</code>编程。还有一种把数据和功能结合起来，用称为对象的东西包裹起来组织程序<br>的方法。这种方法称为<code>面向对象</code>的编程理念。在大多数时候你可以使用过程性编程，但是有<br>些时候当你想要编写大型程序或是寻求一个更加合适的解决方案的时候，你就得使用面向对象<br>的编程技术。<br>类和对象是面向对象编程的两个主要方面。类创建一个新类型，而对象是这个类的实例 。这类<br>似于你有一个int类型的变量，存储整数的变量是int类的实例（对象）。<br>给C/C++/Java/C#程序员的注释<br>注意，即便是整数也被作为对象（属于int类）。这和C++、Java（1.5版之前）把整数纯粹作为<br>类型是不同的。通过help(int)了解更多这个类的详情。 C#和Java 1.5程序员会熟悉这个概念，因<br>为它类似与 封装与解封装 的概念。<br>对象可以使用普通的 属于 对象的变量存储数据。属于一个对象或类的变量被称为域。对象也<br>可以使用 属于 类的函数来具有功能。这样的函数被称为类的方法。这些术语帮助我们把它们<br>与孤立的函数和变量区分开来。域和方法可以合称为类的属性。<br>域有两种类型——属于每个实例/类的对象或属于类本身。它们分别被称为实例变量和类变量。<br>类使用class关键字创建。类的域和方法被列在一个缩进块中。</p>
<p>###self<br>类的方法与普通的函数只有一个特别的区别——它们必须有一个额外的第一个参数名称，但是<br>在调用这个方法的时候你不为这个参数赋值，Python会提供这个值。这个特别的变量指对象本<br>身，按照惯例它的名称是self。<br>虽然你可以给这个参数任何名称，但是 强烈建议 你使用self这个名称——其他名称都是不赞成<br>你使用的。使用一个标准的名称有很多优点——你的程序读者可以迅速识别它，如果使用self<br>的话，还有些IDE（集成开发环境）也可以帮助你。<br>给C++/Java/C#程序员的注释<br>Python中的self等价于C++中的self指针和Java、C#中的this参考。<br>你一定很奇怪Python如何给self赋值以及为何你不需要给它赋值。举一个例子会使此变得清<br>晰。假如你有一个类称为MyClass和这个类的一个实例MyObject。当你调用这个对象的方法<br>MyObject.method(arg1, arg2)的时候，这会由Python自动转为MyClass.method(MyObject, arg1,<br>arg2)——这就是self的原理了。<br>这也意味着如果你有一个不需要参数的方法，你还是得给这个方法定义一个self参数。</p>
<p>###类</p>
<p>####创建一个类<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment">#-*- coding: utf-8 -*-</span></div><div class="line"><span class="comment">#Todo: simplest_class.py</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></div><div class="line">    <span class="keyword">pass</span><span class="comment">#Anempty block</span></div><div class="line">p = Person()</div><div class="line"><span class="keyword">print</span> p</div><div class="line"></div><div class="line"><span class="comment">#**输出：**</span></div><div class="line">[root@Mo arvon_python]<span class="comment"># python simplestclass.py</span></div><div class="line">&lt;__main__.Person instance at <span class="number">0x7fdec3490d88</span>&gt;</div></pre></td></tr></table></figure></p>
<p><strong>说明：</strong>我们使用class语句后跟类名，创建了一个新的类。这后面跟着一个缩进的语句块形成类体。在<br>这个例子中，我们使用了一个空白块，它由pass语句表示。<br>我们简单地打印了这个变量的类型。它告诉我们我们已经在<strong>main</strong>模块中有了一个Person类的实例。<br>可以注意到存储对象的计算机内存地址也打印了出来。这个地址在你的计算机上会是另外一个<br>值，因为Python可以在任何空位存储对象。</p>
<p>###对象的方法</p>
<p>####使用对象的方法<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/python</div><div class="line">#-*- coding: utf-8 -*-</div><div class="line">#Todo: method.py</div><div class="line">class Person:</div><div class="line">    def sayHi(self):</div><div class="line">        print 'Hello, how are you?'</div><div class="line">p = Person()</div><div class="line">p.sayHi()</div><div class="line">#This short example can also be written as Person().sayHi()</div><div class="line"></div><div class="line">###Output</div><div class="line">[root@Mo arvon_python]# python method.py</div><div class="line">Hello, how are you?</div></pre></td></tr></table></figure></p>
<p>###使用<strong>init</strong>方法</p>
<ul>
<li><strong>init</strong>方法在类的一个对象被建立时，马上运行。这个方法可以用来对你的对象做一些你希<br>望的 初始化 。注意，这个名称的开始和结尾都是双下划线。</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment">#-*- coding: utf-8 -*-</span></div><div class="line"><span class="comment">#Todo: class_init.py</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></div><div class="line">        self.name = name</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sayHi</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'Hello, my name is'</span>, self.name</div><div class="line">p = Person(<span class="string">'Arvon'</span>)</div><div class="line">p.sayHi()</div><div class="line"><span class="comment">#This short example can also be written as Person('Arvon').sayHi()</span></div><div class="line"></div><div class="line"><span class="comment">###Output</span></div><div class="line">[root@Mo arvon_python]<span class="comment"># python class_init.py</span></div><div class="line">Hello, my name <span class="keyword">is</span> Arvon</div></pre></td></tr></table></figure>
<p>###类与对象的方法</p>
<ul>
<li>事实上，类与对象的数据部分只是与类和对象的名称空间<code>绑定</code>的普通变量，即这些名称只<br>在这些类与对象的前提下有效。<br>有两种类型的<code>域</code> ——类的变量和对象的变量，它们根据是类还是对象拥有这个变量而区分。<br><code>类的变量</code>由一个类的所有对象（实例）共享使用。只有一个类变量的拷贝，所以当某个对象<br>对类的变量做了改动的时候，这个改动会反映到所有其他的实例上。<br><code>对象的变量</code>由类的每个对象/实例拥有。因此每个对象有自己对这个域的一份拷贝，即它们不<br>是共享的，在同一个类的不同实例中，虽然对象的变量有相同的名称，但是是互不相关的。通<br>过一个例子会使这个易于理解。</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment">#-*- coding: utf-8 -*-</span></div><div class="line"><span class="comment">#Todo: obj_var.py</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></div><div class="line">    <span class="string">'''Represents a person.'''</span></div><div class="line">    population = <span class="number">0</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></div><div class="line">        <span class="string">'''INitializes the person's data.'''</span></div><div class="line">        self.name = name</div><div class="line">        <span class="keyword">print</span> <span class="string">'(Initializing %s)'</span> % self.name</div><div class="line">        <span class="comment">#When this person is created, he/she</span></div><div class="line">        <span class="comment">#adds to population</span></div><div class="line">        Person.population += <span class="number">1</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">'''I am dying.'''</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'%s says bye.'</span>% self.name</div><div class="line">        Person.population == <span class="number">1</span></div><div class="line">        <span class="keyword">if</span> Person.population == <span class="number">0</span>:</div><div class="line">            <span class="keyword">print</span> <span class="string">'I am the lase one.'</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">print</span> <span class="string">'These are still %d people left.'</span>% Person.population</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sayHi</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">'''Greeting by the person.</span></div><div class="line"></div><div class="line">           Really, that's all it does.'''</div><div class="line">        <span class="keyword">print</span> <span class="string">'Hi, my name is %s.'</span>% self.name</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">howMany</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">'''Prints the curent population.'''</span></div><div class="line">        <span class="keyword">if</span> Person.population == <span class="number">1</span>:</div><div class="line">            <span class="keyword">print</span> <span class="string">'I am the only person here.'</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">print</span> <span class="string">"We have %d persons here."</span>% Person.population</div><div class="line">swaroop = Person(<span class="string">'Arvon'</span>)</div><div class="line">swaroop.sayHi()</div><div class="line">swaroop.howMany()</div><div class="line"></div><div class="line"><span class="comment">###Output</span></div><div class="line">[root@Mo arvon_python]<span class="comment"># python obj_var.py</span></div><div class="line">(Initializing Arvon)</div><div class="line">Hi, my name <span class="keyword">is</span> Arvon.</div><div class="line">I am the only person here.</div><div class="line">Arvon says bye.</div><div class="line">These are still <span class="number">1</span> people left.</div></pre></td></tr></table></figure>
<ul>
<li>How to work:<br>这是一个很长的例子，但是它有助于说明类与对象的变量的本质。这里，population属于Person<br>类，因此是一个类的变量。name变量属于对象（它使用self赋值）因此是对象的变量。<br>观察可以发现<strong>init</strong>方法用一个名字来初始化Person实例。在这个方法中，我们让population<br>增加1，这是因为我们增加了一个人。同样可以发现，self.name的值根据每个对象指定，这表<br>明了它作为对象的变量的本质。<br>记住，你只能使用self变量来参考同一个对象的变量和方法。这被称为 属性参考 。<br>在这个程序中，我们还看到docstring对于类和方法同样有用。我们可以在运行时使用Person.<br><strong>doc</strong>和Person.sayHi.<strong>doc</strong>来分别访问类与方法的文档字符串。<br>就如同<strong>init</strong>方法一样，还有一个特殊的方法<strong>del</strong>，它在对象消逝的时候被调用。对象消<br>逝即对象不再被使用，它所占用的内存将返回给系统作它用。在这个方法里面，我们只是简单<br>地把Person.population减1。<br>当对象不再被使用时，<strong>del</strong>方法运行，但是很难保证这个方法究竟在 什么时候 运行。如果<br>你想要指明它的运行，你就得使用del语句，就如同我们在以前的例子中使用的那样。<br>给C++/Java/C#程序员的注释<br>Python中所有的类成员（包括数据成员）都是 公共的 ，所有的方法都是 有效的 。<br>只有一个例外：如果你使用的数据成员名称以 双下划线前缀 比如<strong>privatevar，Python的名称<br>管理体系会有效地把它作为私有变量。<br>这样就有一个惯例，如果某个变量只想在类或对象中使用，就应该以单下划线前缀。而其他的<br>名称都将作为公共的，可以被其他类/对象使用。记住这只是一个惯例，并不是Python所要求<br>的（与双下划线前缀不同）。<br>同样，注意</strong>del__方法与 destructor 的概念类似。</li>
</ul>
<p>###继承<br>面向对象的编程带来的主要好处之一是代码的重用，实现这种重用的方法之一是通过 继承 机<br>制。继承完全可以理解成类之间的<code>类型和子类型</code>关系。<br>假设你想要写一个程序来记录学校之中的教师和学生情况。他们有一些共同属性，比如姓名、<br>年龄和地址。他们也有专有的属性，比如教师的薪水、课程和假期，学生的成绩和学费。<br>你可以为教师和学生建立两个独立的类来处理它们，但是这样做的话，如果要增加一个新的共<br>有属性，就意味着要在这两个独立的类中都增加这个属性。这很快就会显得不实用。<br>一个比较好的方法是创建一个共同的类称为SchoolMember然后让教师和学生的类 继承 这个共<br>同的类。即它们都是这个类型（类）的子类型，然后我们再为这些子类型添加专有的属性。<br>使用这种方法有很多优点。如果我们增加/改变了SchoolMember中的任何功能，它会自动地反<br>映到子类型之中。例如，你要为教师和学生都增加一个新的身份证域，那么你只需简单地把它<br>加到SchoolMember类中。然而，在一个子类型之中做的改动不会影响到别的子类型。另外一个<br>优点是你可以把教师和学生对象都作为SchoolMember对象来使用，这在某些场合特别有用，比<br>如统计学校成员的人数。一个子类型在任何需要父类型的场合可以被替换成父类型，即对象可<br>以被视作是父类的实例，这种现象被称为多态现象。<br>另外，我们会发现在 重用 父类的代码的时候，我们无需在不同的类中重复它。而如果我们使<br>用独立的类的话，我们就不得不这么做了。<br>在上述的场合中，SchoolMember类被称为 基本类 或 超类 。而Teacher和Student类被称为 导出<br>类 或 子类 。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment">#-*- coding: utf-8 -*-</span></div><div class="line"><span class="comment">#Todo: inherit.py</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SchooMember</span>:</span></div><div class="line">    <span class="string">'''Represents any school member.'''</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age)</span>:</span></div><div class="line">        self.name = name</div><div class="line">        self.age = age</div><div class="line">        <span class="keyword">print</span> <span class="string">'(Initialized SchooMember: %s)'</span>% self.name</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tell</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">'''Tell my details.'''</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'Name: "%s" Age: "%s"'</span>% (self.name, self.age)</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span><span class="params">(SchooMember)</span>:</span></div><div class="line">    <span class="string">'''Represents a teacher.'''</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age, salary)</span>:</span></div><div class="line">        SchooMember.__init__(self, name, age)</div><div class="line">        self.salary = salary</div><div class="line">        <span class="keyword">print</span> <span class="string">'(Initialized Teacher: %s)'</span>% self.name</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tell</span><span class="params">(self)</span>:</span></div><div class="line">        SchooMember.tell(self)</div><div class="line">        <span class="keyword">print</span> <span class="string">'Salary: "%d"'</span>% self.salary</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(SchooMember)</span>:</span></div><div class="line">    <span class="string">'''Represents a student.'''</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age, marks)</span>:</span></div><div class="line">        SchooMember.__init__(self, name, age)</div><div class="line">        self.marks = marks</div><div class="line">        <span class="keyword">print</span> <span class="string">'(Initialized Student: %s)'</span>% self.name</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tell</span><span class="params">(self)</span>:</span></div><div class="line">        SchooMember.tell(self)</div><div class="line">        <span class="keyword">print</span> <span class="string">'Marks: "%d"'</span>% self.marks</div><div class="line">t = Teacher(<span class="string">'Mo'</span>, <span class="number">23</span>, <span class="number">5201314</span>)</div><div class="line">s = Student(<span class="string">'Arvon'</span>, <span class="number">24</span>, <span class="number">75</span>)</div><div class="line"><span class="keyword">print</span><span class="comment">#prints a blank line</span></div><div class="line">members = [t, s]</div><div class="line"><span class="keyword">for</span> member <span class="keyword">in</span> members:</div><div class="line">    member.tell()<span class="comment">#works for both Teachers and Students</span></div><div class="line"></div><div class="line"><span class="comment">###Output</span></div><div class="line">[root@Mo arvon_python]<span class="comment"># python inherit.py</span></div><div class="line">(Initialized SchooMember: Mo)</div><div class="line">(Initialized Teacher: Mo)</div><div class="line">(Initialized SchooMember: Arvon)</div><div class="line">(Initialized Student: Arvon)</div><div class="line"></div><div class="line">Name: <span class="string">"Mo"</span> Age: <span class="string">"23"</span></div><div class="line">Salary: <span class="string">"5201314"</span></div><div class="line">Name: <span class="string">"Arvon"</span> Age: <span class="string">"24"</span></div><div class="line">Marks: <span class="string">"75"</span></div></pre></td></tr></table></figure>
<ul>
<li>How tow work<br>为了使用继承，我们把基本类的名称作为一个元组跟在定义类时的类名称之后。然后，我们注<br>意到基本类的<strong>init</strong>方法专门使用self变量调用，这样我们就可以初始化对象的基本类部分。<br>这一点十分重要——Python不会自动调用基本类的constructor，你得亲自专门调用它。<br>我们还观察到我们在方法调用之前加上类名称前缀，然后把self变量及其他参数传递给它。<br>注意，在我们使用SchoolMember类的tell方法的时候，我们把Teacher和Student的实例仅仅作为<br>SchoolMember的实例。<br>另外，在这个例子中，我们调用了子类型的tell方法，而不是SchoolMember类的tell方法。可以<br>这样来理解，Python总是首先查找对应类型的方法，在这个例子中就是如此。如果它不能在导<br>出类中找到对应的方法，它才开始到基本类中逐个查找。基本类是在类定义的时候，在元组之<br>中指明的。<br>一个术语的注释——如果在继承元组中列了一个以上的类，那么它就被称作 多重继承 。</li>
</ul>
<p>##输入/输出</p>
<p>###文件</p>
<ul>
<li>通过创建一个file类的对象来打开一个文件，分别使用file类的read、readline或write方法来<br>恰当地读写文件。对文件的读写能力依赖于你在打开文件时指定的模式。最后，当你完成对文<br>件的操作的时候，你调用close方法来告诉Python我们完成了对文件的使用。</li>
</ul>
<p>####使用文件<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment">#-*- coding: utf-8 -*-</span></div><div class="line">poem = <span class="string">'''\</span></div><div class="line">Programming is fun</div><div class="line">When the work is done</div><div class="line">if you wanna make your work also fun:</div><div class="line">    use Python!</div><div class="line">'''</div><div class="line">f = file(<span class="string">'poem.txt'</span>, <span class="string">'w'</span>)<span class="comment">#open for 'w'riting</span></div><div class="line">f.write(poem)<span class="comment">#write text to file</span></div><div class="line">f.close()<span class="comment">#close the file</span></div><div class="line">f = file(<span class="string">'poem.txt'</span>)</div><div class="line"><span class="comment">#if no mode is specified, 'r'ead mode is assumed by default</span></div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">    line = f.readline()</div><div class="line">    <span class="keyword">if</span> len(line) == <span class="number">0</span>:<span class="comment">#Zero length indicatesEOF</span></div><div class="line">        <span class="keyword">break</span></div><div class="line">    <span class="keyword">print</span> line,</div><div class="line">    <span class="comment">#Notice comma to avoid automatice new line added by Python</span></div><div class="line">f.close()<span class="comment">#close the file</span></div><div class="line"></div><div class="line"><span class="comment">###Output</span></div><div class="line">[root@Mo arvon_python]<span class="comment"># !p</span></div><div class="line">python using_file.py</div><div class="line">Programming <span class="keyword">is</span> fun</div><div class="line">When the work <span class="keyword">is</span> done</div><div class="line"><span class="keyword">if</span> you wanna make your work also fun:</div><div class="line">    use Python!</div></pre></td></tr></table></figure></p>
<p>###储存器</p>
<ul>
<li>Python提供一个标准的模块，称为pickle。使用它你可以在一个文件中储存任何Python对象，之<br>后你又可以把它完整无缺地取出来。这被称为 持久地 储存对象。<br>还有另一个模块称为cPickle，它的功能和pickle模块完全相同，只不过它是用C语言编写的，因<br>此要快得多（比pickle快1000倍）。你可以使用它们中的任一个，而我们在这里将使用cPickle模<br>块。记住，我们把这两个模块都简称为pickle模块。</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment">#-*- coding: utf-8 -*-</span></div><div class="line"><span class="comment">#Todo: pickling.py</span></div><div class="line"><span class="keyword">import</span> cPickle <span class="keyword">as</span> p</div><div class="line"><span class="comment">#import pickleasp</span></div><div class="line">shoplistfile = <span class="string">'shoplist.data'</span></div><div class="line"><span class="comment">#the name of the file where we will store the object</span></div><div class="line">shoplist = [<span class="string">'apple'</span>, <span class="string">'mango'</span>, <span class="string">'carrot'</span>]</div><div class="line"><span class="comment">#Write to the file</span></div><div class="line">f = file(shoplistfile, <span class="string">'w'</span>)</div><div class="line">p.dump(shoplist, f)<span class="comment">#dump the object to a file</span></div><div class="line">f.close()</div><div class="line"><span class="keyword">del</span> shoplist<span class="comment">#remove the shoplist</span></div><div class="line"><span class="comment">#Read back from the storage</span></div><div class="line">f = file(shoplistfile)</div><div class="line">storedlist = p.load(f)</div><div class="line"><span class="keyword">print</span> storedlist</div><div class="line"></div><div class="line"><span class="comment">###Output</span></div><div class="line">[root@Mo arvon_python]<span class="comment"># python pickling.py</span></div><div class="line">[<span class="string">'apple'</span>, <span class="string">'mango'</span>, <span class="string">'carrot'</span>]</div></pre></td></tr></table></figure>
<ul>
<li>How to work<br>首先，请注意我们使用了import..as语法。这是一种便利方法，以便于我们可以使用更短的模块<br>名称。在这个例子中，它还让我们能够通过简单地改变一行就切换到另一个模块（cPickle或者<br>pickle）！在程序的其余部分的时候，我们简单地把这个模块称为p。<br>为了在文件里储存一个对象，首先以写模式打开一个file对象，然后调用储存器模块的dump函<br>数，把对象储存到打开的文件中。这个过程称为 储存 。<br>接下来，我们使用pickle模块的load函数的返回来取回对象。这个过程称为 取储存 。</li>
</ul>
<p>##异常</p>
<p>###处理异常</p>
<ul>
<li>使用try..except语句来处理异常。我们把通常的语句放在try-块中，而把我们的错误处<br>理语句放在except-块中。</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/python</div><div class="line">#-*- coding: utf-8 -*-</div><div class="line">#Todo: try_except.py</div><div class="line">import sys</div><div class="line">try:</div><div class="line">    s = raw_input("Entersomething --&gt;")</div><div class="line">except EOFError:</div><div class="line">    print '\nWhy did you do an EOF on me?'</div><div class="line">    sys.exit()#exit the program</div><div class="line">except:</div><div class="line">    print '\nSome error/exception occurred.'</div><div class="line">    #here, we are not exiting the program</div><div class="line">print 'Done'</div><div class="line"></div><div class="line">###Output</div><div class="line">[root@Mo arvon_python]# python try_except.py</div><div class="line">Entersomething --&gt;hello</div><div class="line">Done</div><div class="line">[root@Mo arvon_python]# python try_except.py</div><div class="line">Entersomething --&gt;</div><div class="line">Why did you do an EOF on me?</div></pre></td></tr></table></figure>
<ul>
<li>How to work<br>我们把所有可能引发错误的语句放在try块中，然后在except从句/块中处理所有的错误和异常。<br>except从句可以专门处理单一的错误或异常，或者一组包括在圆括号内的错误/异常。如果没有<br>给出错误或异常的名称，它会处理 所有的 错误和异常。对于每个try从句，至少都有一个相关<br>联的except从句。<br>如果某个错误或异常没有被处理，默认的Python处理器就会被调用。它会终止程序的运行，并<br>且打印一个消息，我们已经看到了这样的处理。<br>你还可以让try..catch块关联上一个else从句。当没有异常发生的时候，else从句将被执行。<br>我们还可以得到异常对象，从而获取更多有个这个异常的信息。</li>
</ul>
<p>###引发异常</p>
<ul>
<li>可以使用raise语句 引发 异常。你还得指明错误/异常的名称和伴随异常 触发的 异常对象。你<br>可以引发的错误或异常应该分别是一个Error或Exception类的直接或间接导出类。</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/python</div><div class="line">#-*- coding: utf-8 -*-</div><div class="line">class ShortINputException(Exception):</div><div class="line">    '''A user defined exception class.'''</div><div class="line">    def __init__(self, length, atleast):</div><div class="line">        Exception.__init__(self)</div><div class="line">        self.length = length</div><div class="line">        self.atleast = atleast</div><div class="line">try:</div><div class="line">    s = raw_input('Enter something --&gt;')</div><div class="line">    if len(s) &lt; 3:</div><div class="line">        raise ShortINputException(len(s), 3)</div><div class="line">    #Other work can continue as usual here</div><div class="line">except EOFError:</div><div class="line">    print '\nWhy did you do an EOF on me?'</div><div class="line">except ShortINputException, x:</div><div class="line">    print 'ShortINputException: The Input was of length %d,\</div><div class="line">        was expecting at least %d' % (x.length, x.atleast)</div><div class="line">else:</div><div class="line">    print 'No exception was raised.'</div><div class="line"></div><div class="line">###Output</div><div class="line">[root@Mo arvon_python]# python raising.py</div><div class="line">Enter something --&gt;</div><div class="line">Why did you do an EOF on me?</div><div class="line">[root@Mo arvon_python]# python raising.py</div><div class="line">Enter something --&gt;a</div><div class="line">ShortINputException: The Input was of length 1,        was expecting at least 3</div><div class="line">[root@Mo arvon_python]# python raising.py</div><div class="line">Enter something --&gt;abc</div><div class="line">No exception was raised.</div></pre></td></tr></table></figure>
<p>###Try finally</p>
<ul>
<li>假如你在读一个文件的时候，希望在无论异常发生与否的情况下都关闭文件，该怎么做呢？这<br>可以使用finally块来完成。注意，在一个try块下，你可以同时使用except从句和finally块。如果<br>你要同时使用它们的话，需要把一个嵌入另外一个。</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment">#-*- coding: utf-8 -*-</span></div><div class="line"><span class="comment">#Todo: finally.py</span></div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">try</span>:</div><div class="line">    f = file(<span class="string">'poem.txt'</span>)</div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:<span class="comment">#our usual file-reading idiom(成语、习语、土话)</span></div><div class="line">        line = f.readline()</div><div class="line">        <span class="keyword">if</span> len(line) == <span class="number">0</span>:</div><div class="line">            <span class="keyword">break</span></div><div class="line">        time.sleep(<span class="number">2</span>)</div><div class="line">        <span class="keyword">print</span> line,</div><div class="line"><span class="keyword">finally</span>:</div><div class="line">    f.close()</div><div class="line">    <span class="keyword">print</span> <span class="string">'Cleaning up... closed the file'</span></div><div class="line"></div><div class="line"><span class="comment">###Output</span></div><div class="line">[root@Mo arvon_python]<span class="comment"># python finally.py</span></div><div class="line">Programming <span class="keyword">is</span> fun</div><div class="line">When the work <span class="keyword">is</span> done</div><div class="line"><span class="keyword">if</span> you wanna make your work also fun:</div><div class="line">    use Python!</div><div class="line">Cleaning up... closed the file</div></pre></td></tr></table></figure>
<ul>
<li>How to work<br>我们进行通常的读文件工作，但是我有意在每打印一行之前用time.sleep方法暂停2秒钟。这样<br>做的原因是让程序运行得慢一些（Python由于其本质通常运行得很快）。在程序运行的时候，<br>按Ctrl-c中断/取消程序。<br>我们可以观察到KeyboardInterrupt异常被触发，程序退出。但是在程序退出之前，finally从句仍<br>然被执行，把文件关闭</li>
</ul>
<p>##Python的标准库</p>
<ul>
<li>Python标准库是随Python附带安装的，它包含大量极其有用的模块。熟悉Python标准库是十分<br>重要的，因为如果你熟悉这些库中的模块，那么你的大多数问题都可以简单快捷地使用它们来<br>解决。</li>
</ul>
<p>###sys模块</p>
<ul>
<li>sys模块包含系统对应的功能。<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment">#-*- coding: utf-8 -*-</span></div><div class="line"><span class="comment">#Todo: cat.py</span></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">readfile</span><span class="params">(filename)</span>:</span></div><div class="line">    <span class="string">'''Print a file to the standard output'''</span></div><div class="line">    f = file(filename)</div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        line = f.readline()</div><div class="line">        <span class="keyword">if</span> len(line) == <span class="number">0</span>:</div><div class="line">            <span class="keyword">break</span></div><div class="line">        <span class="keyword">print</span> line,<span class="comment">#notice commma</span></div><div class="line">    f.close()</div><div class="line"><span class="comment">#Script starts from here</span></div><div class="line"><span class="keyword">if</span> len(sys.argv) &lt; <span class="number">2</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">'No action specified.'</span></div><div class="line">    sys.exit()</div><div class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>].startswith(<span class="string">'--'</span>):</div><div class="line">    option = sys.argv[<span class="number">1</span>][<span class="number">2</span>:]</div><div class="line">    <span class="comment">#fetch sys.argv[1] but without the first two characters</span></div><div class="line">    <span class="keyword">if</span> option == <span class="string">'version'</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">'Version 1.2'</span></div><div class="line">    <span class="keyword">elif</span> option == <span class="string">'help'</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">'''\</span></div><div class="line">This program prints files to the standard output.</div><div class="line">Any number of files can be specified.</div><div class="line">Options include:</div><div class="line"> --version : Prints the version number</div><div class="line"> --help : Display this help'''</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">'Unknown option.'</span></div><div class="line">    sys.exit()</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    <span class="keyword">for</span> filename <span class="keyword">in</span> sys.argv[<span class="number">1</span>:]:</div><div class="line">        readfile(filename)</div><div class="line"></div><div class="line"><span class="comment">###Output</span></div><div class="line">[root@Mo arvon_python]<span class="comment"># python cat.py --help</span></div><div class="line">This program prints files to the standard output.</div><div class="line">Any number of files can be specified.</div><div class="line">Options include:</div><div class="line"> --version : Prints the version number</div><div class="line"> --help : Display this help</div><div class="line">[root@Mo arvon_python]<span class="comment"># python cat.py --version</span></div><div class="line">Version <span class="number">1.2</span></div><div class="line">[root@Mo arvon_python]<span class="comment"># python cat.py --love</span></div><div class="line">Unknown option.</div><div class="line">[root@Mo arvon_python]<span class="comment"># python cat.py poem.txt</span></div><div class="line">Programming <span class="keyword">is</span> fun</div><div class="line">When the work <span class="keyword">is</span> done</div><div class="line"><span class="keyword">if</span> you wanna make your work also fun:</div><div class="line">    use Python!</div></pre></td></tr></table></figure>
</li>
</ul>
<p>###OS模块</p>
<ul>
<li>简略<br>● os.name字符串指示你正在使用的平台。比如对于Windows，它是’nt’，而对于Linux/Unix<br>用户，它是’posix’。<br>● os.getcwd()函数得到当前工作目录，即当前Python脚本工作的目录路径。<br>● os.getenv()和os.putenv()函数分别用来读取和设置环境变量。<br>● os.listdir()返回指定目录下的所有文件和目录名。<br>● os.remove()函数用来删除一个文件。<br>● os.system()函数用来运行shell命令。<br>● os.linesep字符串给出当前平台使用的行终止符。例如，Windows使用’\r\n’，Linux使<br>用’\n’而Mac使用’\r’。<br>● os.path.split()函数返回一个路径的目录名和文件名。<br>os.path.split(‘/home/swaroop/byte/code/poem.txt’)<br>(‘/home/swaroop/byte/code’, ‘poem.txt’)<br>● os.path.isfile()和os.path.isdir()函数分别检验给出的路径是一个文件还是目录。类似地，os.<br>path.exists()函数用来检验给出的路径是否真地存在。</li>
</ul>
<p>##参考</p>
<p>###特殊的方法</p>
<ul>
<li><strong>init</strong>(self, …)<br>这个方法在新建对象恰好要被返回使用之前被调用</li>
<li><strong>del</strong>(self)<br>恰好在对象要被删除之前调用</li>
<li><strong>str</strong>(self, other)<br>当使用小于运算符（&lt;）的时候调用。类似地，对于说有的运算符（+， &gt;等等）都有特殊的方法</li>
<li><strong>getitem</strong>(self, key)<br>使用x[key]索引操作符的时候调用</li>
<li><strong>len</strong>(self)<br>对序列对象使用内建的len（）函数的时候调用</li>
</ul>
<p>###参考书籍<br><a href="https://docs.python.org/3/" target="_blank" rel="external">Python标准文档（英文）</a><br><a href="http://code.activestate.com/recipes/langs/python/" target="_blank" rel="external">Python实用大全（英文）</a><br><a href="http://daqinbuyi.iteye.com/blog/1668678" target="_blank" rel="external">Python常用类库（Blog）</a><br><a href="http://wiki.woodpecker.org.cn/moin/PythonStandardLib" target="_blank" rel="external">Python类库手册（中文）</a><br><a href="http://python.usyiyi.cn/" target="_blank" rel="external">Python官方文档（中文）</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[awk用法实例]]></title>
      <url>http://arvon.top/2015/07/29/awk%E7%94%A8%E6%B3%95%E5%AE%9E%E4%BE%8B/</url>
      <content type="html"><![CDATA[<p><strong>简介：</strong>awk一种优秀的文本处理工具，Linux和Unix环境中现有的功能最强大的数据处理引擎之一。这个编程及数据操作语言其名称得自于它的创始人阿尔佛雷德·艾侯、彼得·温伯格和布莱恩·柯林汉姓氏的首个字母。awk的处理文本和数据的方式是这样的，它逐行扫描文件，从第一行到最后一行，寻找匹配的特定模式的行，并在这些行上进行你想要的操作。如果没有指定处理动作，则把匹配的行显示到标准输出(屏幕)，如果没有指定模式，则所有被操作所指定的行都被处理，awk有3个不同版本: awk、nawk和gawk，未作特别说明，一般指gawk，gawk 是 AWK 的 GNU 版本。</p>
<a id="more"></a>
<h3 id="简单使用方法"><a href="#简单使用方法" class="headerlink" title="简单使用方法"></a>简单使用方法</h3><ul>
<li><p>使用方法：</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">awk  <span class="string">'&#123;pattern + action&#125;'</span> <span class="string">&#123;filenames&#125;</span></div></pre></td></tr></table></figure>
<p>尽管操作可能会很复杂，但语法总是这样，其中 pattern 表示 AWK 在数据中查找的内容，而 action 是在找到匹配内容时所执行的一系列命令。花括号（{}）不需要在程序中始终出现，但它们用于根据特定的模式对一系列指令进行分组。 pattern就是要表示的正则表达式，用斜杠括起来。awk语言的最基本功能是在文件或者字符串中基于指定规则浏览和抽取信息，awk抽取信息后，才能进行其他文本操作。完整的awk脚本通常用来格式化文本文件中的信息。通常，awk是以文件的一行为处理单位的。awk每接收文件的一行，然后执行相应的命令，来处理文本。</p>
</li>
<li>三种调用方式<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span>. 命令行方式</div><div class="line"><span class="comment">#tail /etc/fstab |awk '&#123;print $1&#125;'</span></div><div class="line"><span class="comment">#cat /etc/passwd |awk  -F ':'  '&#123;print $1&#125;'</span></div><div class="line"><span class="comment">#cat /etc/passwd |awk  -F ':'  '&#123;print $1"\t"$7&#125;'</span></div><div class="line"><span class="number">2</span>. shell脚本方式</div><div class="line"><span class="number">3</span>. awk命令插入为单独文件的方式</div><div class="line"><span class="comment">#awk -f awk-script-file input-file(s)</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="大实例"><a href="#大实例" class="headerlink" title="大实例"></a>大实例</h3><ul>
<li><p>显示/etc/passwd的账户和账户对应的shell,而账户与shell之间以逗号分割,而且在所有行添加列名name,shell,在最后一行添加”blue,/bin/nosh”。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">cat /etc/passwd |awk  -F ':'  'BEGIN &#123;print "name,shell"&#125;  &#123;print $1","$7&#125; END &#123;print "blue,/bin/nosh"&#125;'</div><div class="line">name,shell</div><div class="line">root,/bin/bash</div><div class="line">daemon,/bin/sh</div><div class="line">bin,/bin/sh</div><div class="line">sys,/bin/sh</div><div class="line">....</div><div class="line">blue,/bin/nosh</div></pre></td></tr></table></figure>
</li>
<li><p>搜索/etc/passwd有root关键字的所有行</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#awk -F: '/root/' /etc/passwd</span></div><div class="line">root:<span class="keyword">x</span>:<span class="number">0</span>:<span class="number">0</span>:root:<span class="regexp">/root:/bin</span><span class="regexp">/bash</span></div><div class="line">```   </div><div class="line">* 统计/etc<span class="regexp">/passwd:文件名，每行的行号，每行的列数，对应的完整行内容:</span></div><div class="line">```perl</div><div class="line">#awk  -F ':'  '&#123;print "filename:" FILENAME ",linenumber:" NR ",columns:" NF ",linecontent:"$0&#125;' /etc<span class="regexp">/passwd</span></div><div class="line">filename:/etc<span class="regexp">/passwd,linenumber:1,columns:7,linecontent:root:x:0:0:root:/root</span>:<span class="regexp">/bin/bash</span></div><div class="line">filename:<span class="regexp">/etc/passwd</span>,linenumber:<span class="number">2</span>,columns:<span class="number">7</span>,linecontent:daemon:<span class="keyword">x</span>:<span class="number">1</span>:<span class="number">1</span>:daemon:<span class="regexp">/usr/sbin</span>:<span class="regexp">/bin/sh</span></div><div class="line">filename:<span class="regexp">/etc/passwd</span>,linenumber:<span class="number">3</span>,columns:<span class="number">7</span>,linecontent:bin:<span class="keyword">x</span>:<span class="number">2</span>:<span class="number">2</span>:bin:<span class="regexp">/bin:/bin</span><span class="regexp">/sh</span></div><div class="line">filename:/etc<span class="regexp">/passwd,linenumber:4,columns:7,linecontent:sys:x:3:3:sys:/dev</span>:<span class="regexp">/bin/sh</span></div></pre></td></tr></table></figure>
</li>
<li><p>使用printf替代print,可以让代码更加简洁，易读</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">awk  -F <span class="string">':'</span>  <span class="string">'&#123;printf("filename:%10s,linenumber:%s,columns:%s,linecontent:%s\n",FILENAME,NR,NF,$0)&#125;'</span> /etc/passwd</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="参考这里"><a href="#参考这里" class="headerlink" title="参考这里"></a>参考这里</h3><p><a href="http://www.gnu.org/software/gawk/manual/gawk.html" title="awk官网" target="_blank" rel="external">awk官网</a><br><a href="http://man.lupaworld.com/content/manage/ringkee/awk.htm" title="awk学习笔记" target="_blank" rel="external">awk学习笔记</a><br><a href="http://www.aslibra.com/doc/awk.htm" title="awk手册" target="_blank" rel="external">awk手册</a><br><a href="http://www.cnblogs.com/ggjucheng/archive/2013/01/13/2858470.html" target="_blank" rel="external">参考博客</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SA运维资源]]></title>
      <url>http://arvon.top/2015/07/28/SA%E8%BF%90%E7%BB%B4%E8%B5%84%E6%BA%90/</url>
      <content type="html"><![CDATA[<p>运维是个杂学呀~~</p>
<a id="more"></a>
<h3 id="需学习技能"><a href="#需学习技能" class="headerlink" title="需学习技能"></a>需学习技能</h3><ol>
<li>系统管理语言<ul>
<li><del>Shell脚本语言</del></li>
<li>perl</li>
<li>python</li>
</ul>
</li>
<li>监控工具<ul>
<li>zabbix</li>
<li>nagios</li>
</ul>
</li>
<li>运维自动化工具<ul>
<li>saltstack</li>
<li>Ansible</li>
<li>puppet</li>
</ul>
</li>
<li>大数据</li>
<li>云计算<ul>
<li>OPenStack</li>
<li>Docker</li>
</ul>
</li>
<li>虚拟化<ul>
<li>KVM</li>
<li>VMware</li>
</ul>
</li>
</ol>
<h3 id="Linux系统技能要求"><a href="#Linux系统技能要求" class="headerlink" title="Linux系统技能要求"></a>Linux系统技能要求</h3><ol>
<li>Keepalived、lvs高可用及负载均衡技术</li>
<li>Mysql</li>
<li>正则表达式<ul>
<li>sed</li>
<li>awk</li>
</ul>
</li>
<li>常用协议（SSH、telnet、rlogin、RDP、VNC）</li>
<li>熟悉Kernel调优</li>
<li>Web服务<ul>
<li>appache</li>
<li>nginx</li>
</ul>
</li>
</ol>
<p>###资源网站<br><a href="http://www.osyunwei.com/" target="_blank" rel="external">系统运维之家</a><br><a href="http://www.lupaworld.com/article-242275-1.html" target="_blank" rel="external">兴趣看看</a><br><a href="http://linux.cn/" target="_blank" rel="external">中文Linux社区</a><br><a href="http://www.linux.com/" target="_blank" rel="external">英文版参考学习主站</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux下搭建VSFTP服务器]]></title>
      <url>http://arvon.top/2015/07/28/Linux%E4%B8%8B%E6%90%AD%E5%BB%BAvsftp%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      <content type="html"><![CDATA[<p><strong>简介：</strong>VSFTP（Very Secure FTP）是一个基于GPL发布的类Unix系统上使用的FTP服务器软件，设计者的初衷是代码的安全，<br>另外速度在使用ASCII代码的模式下在数据时，VSFTP的速度为Wu-FTp的两倍，如果Linux主机使用2.4.x的内核，在千兆以太网的<br>下的下载速度可以达到86MB/S。而且很稳定，在单机上支持4000以上的并发用户同时连接，根据RedHat和Ftp服务器的数据，VSFTP<br>服务器可以支持15000个并发用户</p>
<a id="more"></a>
<h3 id="VSFTP的优点"><a href="#VSFTP的优点" class="headerlink" title="VSFTP的优点"></a>VSFTP的优点</h3><ol>
<li>它是一个安全、高速、稳定的FTP服务器；</li>
<li>它可以做基于多个IP的虚拟FTP主机服务器；</li>
<li>匿名服务设置十分方便；</li>
<li>匿名FTP的根目录不需要任何特殊的目录结构，或系统程序或其它的系统文件；</li>
<li>不执行任何外部程序，从而减少了安全隐患；</li>
<li>支持虚拟用户，并且每个虚拟用户可以具有独立的属性配置；</li>
<li>可以设置从inetd中启动，或者独立的FTP服务器两种运行方式；</li>
<li>支持两种认证方式（PAP或xinetd/ tcp_wrappers）；</li>
<li>支持带宽限制；<br>VSFTP市场应用十分广范，很多国际性的大公司和自由开源组织在使用，如：Red Hat, Suse，Debian，OpenBSD</li>
</ol>
<h3 id="VSFTP的缺点"><a href="#VSFTP的缺点" class="headerlink" title="VSFTP的缺点"></a>VSFTP的缺点</h3><ol>
<li>VSFTP从没有处理文件编码转换的windows客户端访问时有乱码现象</li>
<li>解决方法：<ul>
<li>使用vsftp的补丁</li>
<li>转换服务器目录文件编码</li>
</ul>
</li>
</ol>
<h3 id="安装VSFTP"><a href="#安装VSFTP" class="headerlink" title="安装VSFTP"></a>安装VSFTP</h3><ol>
<li><p>检查是否已安装vsftp服务</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@Mo ~]# rpm -q vsftpd</div><div class="line">package vsftpd is not installed</div></pre></td></tr></table></figure>
</li>
<li><p>安装vsftp服务</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@Mo ~]# yum install -y vsftpd db4-utils	#安装vsftpd服务</div><div class="line">[root@Mo ~]# rpm -q vsftpd 		#vsftpd服务已安装</div><div class="line">vsftpd-2.2.2-13.el6_6.1.x86_64</div><div class="line">[root@Mo vsftp]# yum install lrzsz		#安装后可以把windows的文件直接通过xshell拉到目标主机</div></pre></td></tr></table></figure>
</li>
<li><p>vsftp配置文件</p>
<ul>
<li>官方wiki有处理脚本：<a href="http://wiki.centos.org/HowTos/Chroot_Vsftpd_with_non-system_users" target="_blank" rel="external">脚本地址</a></li>
<li>将脚本放至linux主机，然后执行该脚本</li>
</ul>
</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux查看系统信息命令]]></title>
      <url>http://arvon.top/2015/07/27/Linux%E7%B3%BB%E7%BB%9F%E6%9F%A5%E7%9C%8B%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<p><strong>Command Include：</strong>disk、memory、hostname、find</p>
<a id="more"></a>
<h3 id="查看磁盘空间"><a href="#查看磁盘空间" class="headerlink" title="查看磁盘空间"></a>查看磁盘空间</h3><ul>
<li>常用命令<br>df -hl 查看磁盘剩余空间<br>df -h 查看每个根路径的分区大小<br>du -sh [目录名] 返回该目录的大小<br>du -sm [文件夹] 返回该文件夹总M数</li>
<li>命令演示<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">[root@cloud ~]# cat /proc/cpuinfo	#查看cpu的核心数</div><div class="line">[root@cloud ~]# df -h	#磁盘使用情况</div><div class="line">[root@cloud ~]# df -hl</div><div class="line">Filesystem      Size  Used Avail Use% Mounted on</div><div class="line">/dev/sda1       9.1G  2.2G  6.4G  26% /</div><div class="line">tmpfs           487M     0  487M   0% /dev/shm</div><div class="line">/dev/sdb1       4.5G  1.9M  4.3G   1% /data</div><div class="line">[root@cloud ~]# du --max-depth=1 -h	#查看当前文件夹下的磁盘使用情况</div><div class="line">25M	./.nvm</div><div class="line">8.0K	./.pki</div><div class="line">4.0K	./Blog</div><div class="line">25M		.</div><div class="line">[root@cloud ~]# du -sh	#显示当前目录的大小</div><div class="line">25M	.</div><div class="line">[root@cloud ~]# du -sh /opt/	#显示指定路径的大小</div><div class="line">4.0K	/opt/</div><div class="line">[root@cloud ~]# du -h test.txt	#显示指定文件的大小</div><div class="line">0	test.txt</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="查看内存"><a href="#查看内存" class="headerlink" title="查看内存"></a>查看内存</h3><ul>
<li>常用命令<br>cat /proc/meminfo    #查看内存使用信息</li>
<li>命令实例<br>空闲内存 =free+buffers+cached =total-used<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">[root@cloud ~]# free -m	#查看内存使用状况</div><div class="line">           total       used       free     shared    buffers     cached</div><div class="line">Mem:           972        667        304          0         41        497</div><div class="line">-/+ buffers/cache:        128        843</div><div class="line">Swap:          999          0        999</div><div class="line">说明：	 shared：多个进程共享的内存总额</div><div class="line">		Buffers/cached		</div><div class="line">[root@cloud ~]# cat /proc/meminfo</div><div class="line">MemTotal:         995648 kB</div><div class="line">MemFree:          312228 kB</div><div class="line">Buffers:           42836 kB</div><div class="line">Cached:           509164 kB</div><div class="line">SwapCached:          352 kB</div><div class="line">Active:           413060 kB</div><div class="line">Inactive:         145136 kB		</div><div class="line">[root@cloud ~]# ll -h /proc/kcore	#查看/proc/kcore文件的大小（内存镜像）</div><div class="line">-r-------- 1 root root 4.0K Jul 27 16:31 /proc/kcore</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="查看cpu使用率"><a href="#查看cpu使用率" class="headerlink" title="查看cpu使用率"></a>查看cpu使用率</h3><ul>
<li>使用top命令<br>具体介绍：<a href="http://www.cnblogs.com/xd502djj/archive/2011/03/01/1968041.html" target="_blank" rel="external">top命输出解释</a></li>
<li><p>产看内核信息</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@cloud ~]# uname -a</div><div class="line">Linux cloud 2.6.32-504.1.3.el6.x86_64 #1 SMP Tue Nov 11 17:57:25 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux</div></pre></td></tr></table></figure>
</li>
<li><p>查看发行版信息</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@cloud ~]# cat /etc/issue</div><div class="line">CentOS release 6.6 (Final)</div><div class="line">Kernel \r on an \m</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Find命令"><a href="#Find命令" class="headerlink" title="Find命令"></a>Find命令</h3><ul>
<li><p>命令实例</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">[root@cloud ~]# find / -name fstab</div><div class="line">/etc/fstab</div><div class="line">[root@cloud ~]# find / -name access_log 2&gt;/dev/null		#无错误查找</div><div class="line">[root@cloud ~]# find / etc -name '*fst*'	#模糊查找，支持通配符</div><div class="line">/lib/udev/fstab_import</div><div class="line">/lib/udev/rules.d/79-fstab_import.rules</div><div class="line">/etc/fstab</div><div class="line">/usr/bin/psfstriptable</div><div class="line">find  /home  -size  +512k	#查大于512k的文档</div><div class="line"><span class="meta">$</span><span class="bash"> find logs -type f -mtime +5 -exec  -ok  rm &#123;&#125; \;	<span class="comment">#在/ l o g s目录中查找更改时间在5日以前的文档并删除他们：</span></span></div><div class="line"><span class="meta">#</span><span class="bash"> A=`find ./ -name <span class="string">"*php"</span>` |  ls <span class="_">-l</span> --full-time <span class="variable">$A</span> 2&gt;/dev/null | grep <span class="string">"2004-11-30 16:36:37"</span>		<span class="comment">#查找2004-11-30   16:36:37时更改过的文档</span></span></div></pre></td></tr></table></figure>
</li>
<li><p>参考网址<br><a href="http://linux.chinaunix.net/techdoc/system/2008/07/25/1020339.shtml" target="_blank" rel="external">参考实例</a><br><a href="http://www.chinaz.com/server/2009/0807/85796.shtml" target="_blank" rel="external">与或非的find介绍</a></p>
</li>
</ul>
<h3 id="修改常见配置"><a href="#修改常见配置" class="headerlink" title="修改常见配置"></a>修改常见配置</h3><ul>
<li>修改主机名<br>参考这里:[北南南北的博客，修改Linux主机名]<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@cloud ~]# hostname Mo		#临时修改hostname</div><div class="line">[root@Mo ~]# vim /etc/sysconfig/network		#两个都要改</div><div class="line">[root@Mo ~]# vim /etc/hosts</div><div class="line">[root@linuxsir01 ~]# hostname -i	#显示主机名的IP</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<p>以上</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[mysql自用命令手册]]></title>
      <url>http://arvon.top/2015/07/22/mysql%E8%87%AA%E7%94%A8%E5%91%BD%E4%BB%A4%E6%89%8B%E5%86%8C/</url>
      <content type="html"><![CDATA[<h3 id="连接登录数据库"><a href="#连接登录数据库" class="headerlink" title="连接登录数据库"></a>连接登录数据库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">mysql –u用户名 [–h主机名或者IP地址] –p密码</div><div class="line">eggs: mysql -uusername -hIPaddress -p(password)</div><div class="line"><span class="meta">#</span><span class="bash">1. 连接到本机上的MYSQL。</span></div><div class="line"><span class="meta">#</span><span class="bash">首先打开DOS窗口，然后进入目录mysql\bin，再键入命令mysql -u root -p，回车后提示你输密码.注意用户名前可以有空格也可以没有空格，但是密码前必须没有空格，否则让你重新输入密码.</span></div><div class="line"><span class="meta">#</span><span class="bash">如果刚安装好MYSQL，超级用户root是没有密码的，故直接回车即可进入到MYSQL中了，MYSQL的提示符是： mysql&gt;</span></div><div class="line"><span class="meta">#</span><span class="bash">2. 连接到远程主机上的MYSQL。假设远程主机的IP为：110.110.110.110，用户名为root,密码为abcd123。则键入以下命令：</span></div><div class="line"><span class="meta">#</span><span class="bash">mysql -h110.110.110.110 -u root -p 123;（注:u与root之间可以不用加空格，其它也一样）</span></div><div class="line"><span class="meta">#</span><span class="bash">3. 退出MYSQL命令： <span class="built_in">exit</span> （回车） 或者 \q</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">**格式：**mysqladmin -u用户名 -p旧密码 password 新密码(注：因为开始时root没有密码，所以-p旧密码一项就可以省略)</span></div><div class="line">mysqladmin -u root password ab12</div><div class="line">再将root的密码改为djg345</div><div class="line">mysqladmin -u root -p ab12 password djg345</div></pre></td></tr></table></figure>
<h3 id="查看mysql数据库中所有用户及拥有的权限"><a href="#查看mysql数据库中所有用户及拥有的权限" class="headerlink" title="查看mysql数据库中所有用户及拥有的权限"></a>查看mysql数据库中所有用户及拥有的权限</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SELECT DISTINCT CONCAT('User: ''',user,'''@''',host,''';') AS query FROM mysql.user;</div></pre></td></tr></table></figure>
<h3 id="添加新用户"><a href="#添加新用户" class="headerlink" title="添加新用户"></a>添加新用户</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">**格式：**grant select on 数据库.* to 用户名@登录主机 identified by “密码”</span></div><div class="line"><span class="meta">#</span><span class="bash">1.增加一个用户<span class="built_in">test</span>1密码为abc，让他可以在任何主机上登录，并对所有数据库有查询、插入、修改、删除的权限。首先用root用户连入MYSQL，然后键入以下命令：</span></div><div class="line">grant select,insert,update,delete on *.* to test1@”%” Identified by “abc”;</div><div class="line"><span class="meta">#</span><span class="bash">2.增加一个用户<span class="built_in">test</span>2密码为abc,让他只可以在localhost上登录，并可以对数据库mydb进行查询、插入、修改、删除的操作（localhost指本地主机，即MYSQL数据库所在的那台主机），</span></div><div class="line">这样用户即使用知道test2的密码，他也无法从internet上直接访问数据库，只能通过MYSQL主机上的web页来访问了。</div><div class="line"><span class="meta">#</span><span class="bash">grant select,insert,update,delete on mydb.* to <span class="built_in">test</span>2@localhost identified by “abc”;</span></div><div class="line"><span class="meta">#</span><span class="bash">如果你不想<span class="built_in">test</span>2有密码，可以再打一个命令将密码消掉:</span></div><div class="line">grant select,insert,update,delete on mydb.* to test2@localhost identified by “”;</div></pre></td></tr></table></figure>
<h3 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">mysql&gt;</span><span class="bash">Delete FROM user Where User=<span class="string">'test'</span> and Host=<span class="string">'localhost'</span>;</span></div><div class="line"><span class="meta">mysql&gt;</span><span class="bash">flush privileges;</span></div><div class="line"><span class="meta">mysql&gt;</span><span class="bash">drop database <span class="built_in">test</span>DB; //删除用户的数据库</span></div></pre></td></tr></table></figure>
<h3 id="查看命令"><a href="#查看命令" class="headerlink" title="查看命令"></a>查看命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">mysql&gt;</span><span class="bash"> SHOW DATABASES;	<span class="comment">#显示当前数据库服务器中的数据库列表(注意：mysql库里面有MYSQL的系统信息，我们改密码和新增用户，实际上就是用这个库进行操作。)</span></span></div><div class="line"><span class="meta">mysql&gt;</span><span class="bash"> USE 库名；	<span class="comment">##显示数据库中的数据表</span></span></div><div class="line"><span class="meta">mysql&gt;</span><span class="bash"> SHOW TABLES;</span></div><div class="line"><span class="meta">mysql&gt;</span><span class="bash"> DESCRIBE 表名;	<span class="comment">#显示数据表的结构</span></span></div><div class="line"><span class="meta">mysql&gt;</span><span class="bash"> CREATE DATABASE 库名;	<span class="comment">#建立数据库</span></span></div><div class="line"><span class="meta">mysql&gt;</span><span class="bash"> USE 库名;	<span class="comment">#;建立数据表</span></span></div><div class="line"><span class="meta">mysql&gt;</span><span class="bash"> CREATE TABLE 表名 (字段名 VARCHAR(20), 字段名 CHAR(1))</span></div><div class="line"><span class="meta">mysql&gt;</span><span class="bash"> DROP DATABASE 	<span class="comment">#库名;删除数据库</span></span></div><div class="line"><span class="meta">mysql&gt;</span><span class="bash"> DROP TABLE 表名；	<span class="comment">#删除数据表</span></span></div><div class="line"><span class="meta">mysql&gt;</span><span class="bash"> DELETE FROM 表名;	<span class="comment">#将表中记录清空</span></span></div><div class="line"><span class="meta">mysql&gt;</span><span class="bash"> SELECT * FROM 表名;	<span class="comment">#显示表中的记录</span></span></div><div class="line"><span class="meta">mysql&gt;</span><span class="bash"> INSERT INTO 表名 VALUES (”hyq”,”M”);	<span class="comment">#往表中插入记录</span></span></div><div class="line"><span class="meta">mysql&gt;</span><span class="bash"> UPDATE 表名 SET 字段名1=<span class="string">'a'</span>,字段名2=<span class="string">'b'</span> WHERE 字段名3=<span class="string">'c'</span>;	<span class="comment">#更新表中数据</span></span></div><div class="line"><span class="meta">mysql&gt;</span><span class="bash"> LOAD DATA LOCAL INFILE “D:/mysql.txt” INTO TABLE 表名;	<span class="comment">#用文本方式将数据装入数据表中</span></span></div><div class="line"><span class="meta">mysql&gt;</span><span class="bash"> USE 数据库名;</span></div><div class="line"><span class="meta">mysql&gt;</span><span class="bash"> SOURCE d:/mysql.sql;	<span class="comment">#导入.sql文件命令：</span></span></div><div class="line"><span class="meta">mysql&gt;</span><span class="bash"> UPDATE mysql.user SET password=PASSWORD(<span class="string">'新密码'</span>) WHERE User=<span class="string">'root'</span>;</span></div><div class="line"><span class="meta">mysql&gt;</span><span class="bash"> FLUSH PRIVILEGES;	<span class="comment">#命令行修改root密码</span></span></div><div class="line"><span class="meta">mysql&gt;</span><span class="bash"> SELECT DATABASE();	<span class="comment">#显示use的数据库名</span></span></div><div class="line"><span class="meta">mysql&gt;</span><span class="bash"> SELECT USER();	<span class="comment">#显示当前的user</span></span></div></pre></td></tr></table></figure>
<h4 id="命令实例"><a href="#命令实例" class="headerlink" title="命令实例"></a>命令实例</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">drop database if exists school;	#如果存在SCHOOL则删除</div><div class="line">create database school;	#建立库SCHOOL</div><div class="line">use school;	#打开库SCHOOL</div><div class="line">create table teacher;	#(进入SCHOOL库后)简历表teacher</div><div class="line"> (</div><div class="line"> id int(3) auto_increment not null primary key,</div><div class="line"> name char(10) not null,</div><div class="line"> address varchar(50) default ‘深圳',</div><div class="line"> year date</div><div class="line"> );	#建表结束</div><div class="line">insert into teacher values(”,'allen','大连一中','1976-10-10′);	#插入字段</div><div class="line">insert into teacher values(”,'jack','大连二中','1975-12-23′);</div></pre></td></tr></table></figure>
<h3 id="导出数据库"><a href="#导出数据库" class="headerlink" title="导出数据库"></a>导出数据库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">1. 导出整个数据库（导出文件默认是存在mysql\bin目录下；在linux下为/var/lib/mysql）</span></div><div class="line">mysqldump -u 用户名 -p 数据库名 &gt; 导出的文件名</div><div class="line">mysqldump -u user_name -p123456 database_name &gt; outfile_name.sql</div><div class="line"><span class="meta">#</span><span class="bash">2. 导出一个表</span></div><div class="line">mysqldump -u 用户名 -p 数据库名 表名&gt; 导出的文件名</div><div class="line">mysqldump -u user_name -p database_name table_name &gt; outfile_name.sql</div><div class="line"><span class="meta">#</span><span class="bash">3. 导出一个数据库结构</span></div><div class="line">mysqldump -u user_name -p -d –add-drop-table database_name &gt; outfile_name.sql</div><div class="line"><span class="meta">#</span><span class="bash"><span class="_">-d</span> 没有数据 –add-drop-table 在每个create语句之前增加一个drop table</span></div><div class="line"><span class="meta">#</span><span class="bash">4. 带语言参数导出</span></div><div class="line">mysqldump -uroot -p –default-character-set=latin1 –set-charset=gbk –skip-opt database_name &gt; outfile_name.sql</div></pre></td></tr></table></figure>
<h3 id="备份恢复数据库"><a href="#备份恢复数据库" class="headerlink" title="备份恢复数据库"></a>备份恢复数据库</h3><ol>
<li><p>备份数据库</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">mysqldump -uroot -p test_db &gt; test_db.sql</div><div class="line">mysqldump -h$&#123;ipaddr&#125; -u$&#123;username&#125; -p$&#123;password&#125; --default-character-set=utf8 \</div><div class="line">--comments=FALSE --tables --no-create-info=FALSE --add-drop-table=TRUE --no-data=FALSE \</div><div class="line"><span class="meta">$</span><span class="bash">&#123;area&#125; | sed <span class="string">'s/AUTO_INCREMENT=[0-9]*\s//g'</span> &gt;<span class="variable">$&#123;dest_dir&#125;</span>/<span class="variable">$&#123;area&#125;</span>.sql</span></div></pre></td></tr></table></figure>
</li>
<li><p>恢复数据库</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">mysql -uroot -p test_db &lt; test_db.sql</div><div class="line">mysql -h$&#123;ipaddr&#125; -u$&#123;username&#125; -p$&#123;password&#125; --default-character-set=utf8 --execute="DROP DATABASE IF EXISTS    $&#123;area&#125;";</div><div class="line">mysql -h$&#123;ipaddr&#125; -u$&#123;username&#125; -p$&#123;password&#125; --default-character-set=utf8 --execute="CREATE DATABASE IF NOT   EXISTS  $&#123;area&#125; DEFAULT CHARACTER SET utf8";</div><div class="line">mysql -h$&#123;ipaddr&#125; -u$&#123;username&#125; -p$&#123;password&#125; --default-character-set=utf8 --database= $&#123;area&#125; &lt;$&#123;area&#125;.sql;</div></pre></td></tr></table></figure>
</li>
<li><p>创建权限</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">grant all privileges on test_db.* to test_db@'localhost' identified by '123456';</div><div class="line"><span class="meta">#</span><span class="bash">兼容4.1之前的版本：</span></div><div class="line">update mysql.user set password=old_password('123456') where user='test_db';</div><div class="line"><span class="meta">#</span><span class="bash">4. 忘记密码</span></div><div class="line">在“my.cnf”或“my.ini”文件的“mysqld”配置段添加“skip-grant-tables”，然后重新启动mysql即可登录修改root密码。</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="http://www.jb51.net/article/24345.htm" target="_blank" rel="external">mysql常用命令集锦</a><br><a href="http://www.jb51.net/article/25652.htm" target="_blank" rel="external">Mysql常用命令 详细整理版</a><br><a href="http://www.cnblogs.com/fly1988happy/archive/2011/12/15/2288554.html" target="_blank" rel="external">Mysql 用户权限</a><br><a href="http://www.cnblogs.com/fly1988happy/archive/2011/12/15/2288554.html" target="_blank" rel="external">Mysql 命令大全</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Tmux 使用简记]]></title>
      <url>http://arvon.top/2015/07/22/Tmux-%E4%BD%BF%E7%94%A8%E7%AE%80%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p>简述：tmux是指通过一个终端登录远程主机并运行后，在其中可以开启多个控制台的终端复用软件。tmux是一个优秀的终端复用软件，类似GNU Screen，但来自于OpenBSD，采用BSD授权。使用它最直观的好处就是，通过一个终端登录远程主机并运行tmux后，在其中可以开启多个控制台而无需再“浪费”多余的终端来连接这台远程主机；个人更注重工作环境的连续性，可以进行会话保持(保证可以在网络情况不佳的情况下工作现场不丢失)。</p>
<a id="more"></a>
<h3 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">tmux new-session -s session-name	#创建一个新的tmux对话</div><div class="line">tmux ls	#列出已有的tmux列表，相当于Ctrl-B s</div><div class="line">tmux attach-session -t sessionname = tmux a -t sessionname（支持缩写匹配）	#进入一个tmux会话窗</div><div class="line">使用Ctrl-B d返回主shell界面，tmux仍旧在后台运行，里面的命令也保持运行状态</div><div class="line">tmux kill-session -t session-name	#关闭开启在后台的终端；在终端下也可以使用exit进行退出</div></pre></td></tr></table></figure>
<h3 id="快捷键操作"><a href="#快捷键操作" class="headerlink" title="快捷键操作"></a>快捷键操作</h3><blockquote>
<p>C-b c    #创建一个新的窗口<br>C-b n    #切换到下一个窗口<br>C-b p    #切换到上一个窗口<br>C-b d    #临时断开会话，还可以连上的<br>C-b pageup/pagedown    #向上或向下翻页</p>
</blockquote>
<h3 id="参考教程"><a href="#参考教程" class="headerlink" title="参考教程"></a>参考教程</h3><p><a href="http://my.oschina.net/cshell/blog/135261" target="_blank" rel="external">使用大全（桔子空间）</a><br><a href="http://coolshell.cn/articles/7829.html" target="_blank" rel="external">不明觉厉（命令行神器）</a></p>
<h3 id="Tmux源码安装"><a href="#Tmux源码安装" class="headerlink" title="Tmux源码安装"></a>Tmux源码安装</h3><blockquote>
<p>yum install tmux -y    #<br>wget <a href="http://downloads.sourceforge.net/tmux/tmux-1.6.tar.gz" target="_blank" rel="external">http://downloads.sourceforge.net/tmux/tmux-1.6.tar.gz</a><br>cd tmux-1.6<br>./configure<br>make<br>make install</p>
</blockquote>
<h3 id="配置手册"><a href="#配置手册" class="headerlink" title="配置手册"></a>配置手册</h3><p><a href="http://www.doc88.com/p-386623377619.html" target="_blank" rel="external">个性配置参考</a><br><a href="http://www.doc88.com/p-386623377619.html" target="_blank" rel="external">配置地址二</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Markdown Introduction]]></title>
      <url>http://arvon.top/2015/07/21/Markdown-Introduction/</url>
      <content type="html"><![CDATA[<p><strong>简介：</strong>Markdown是一个web上使用的文本到HTML的转换工具，目前github、Stackoverflow等网站均支持这种格式，还有简书也是<br>很支持的呦。它存在的宗旨就是实现易读易写，称为适用于网络的书写语言。自我感觉也确实不错，很适合做IT的人记笔记用。</p>
<a id="more"></a>
<h2 id="语法介绍"><a href="#语法介绍" class="headerlink" title="语法介绍"></a>语法介绍</h2><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><ul>
<li>在Markdown中，<em>、-、+3个符号的效果一致，称为Markdown符号，我习惯用\</em>号</li>
<li>空白行表示另起一个段落</li>
<li>-是表示inline代码，tab是用来标记代码段，分别对应html的code、pre标签</li>
</ul>
<h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><ul>
<li>可以用#、-、=一样的效果，个人偏爱#</li>
<li>#    一级标题</li>
<li>##    二级标题        </li>
<li>…    以此类推</li>
<li>######    六级标题</li>
</ul>
<h3 id="文本强调"><a href="#文本强调" class="headerlink" title="文本强调"></a>文本强调</h3><ul>
<li><em>斜体</em> or <em>强调</em></li>
<li><strong>加粗</strong> or <strong>加粗</strong></li>
<li><strong><em>粗斜体</em></strong> or <strong><em>粗斜体</em></strong></li>
</ul>
<h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><ul>
<li>like this<blockquote>
<p>tag: [tag1, tag2]</p>
</blockquote>
</li>
</ul>
<h3 id="List列表"><a href="#List列表" class="headerlink" title="List列表"></a>List列表</h3><ul>
<li>*无序列表（unordered）</li>
</ul>
<ul>
<li>+无序列表</li>
</ul>
<ul>
<li>-无序列表</li>
</ul>
<ol>
<li><ol>
<li>第一行（ordered有序列表）</li>
</ol>
</li>
<li>2.或- 第二行</li>
<li>3.或- 第三行</li>
</ol>
<h3 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h3><p>~~文字~~   效果为   <del>文字</del>  </p>
<h3 id="组合用法"><a href="#组合用法" class="headerlink" title="组合用法"></a>组合用法</h3><ul>
<li>产品介绍（子项目符号）<br>  此时子项，要以一个制表符或者四个空格缩进</li>
</ul>
<ul>
<li>产品特点<ol>
<li>特点1</li>
</ol>
<ul>
<li>特点2</li>
<li>特点3</li>
</ul>
</li>
</ul>
<ul>
<li>产品功能<ol>
<li>功能1</li>
</ol>
<ul>
<li>功能2</li>
<li>功能3</li>
</ul>
</li>
</ul>
<ul>
<li>可能有时会出现这样的情况，首行内容是以日期或数字开头：2013.公司的年度目标，为了避免也转换成有序列表，可以在.前面<br>加上\:2013. 公司的年度目标</li>
</ul>
<h3 id="Links网站链接"><a href="#Links网站链接" class="headerlink" title="Links网站链接"></a>Links网站链接</h3><blockquote>
<p>Inline-style 内嵌方式：<br>[link text](<a href="https://www.google.com" target="_blank" rel="external">https://www.google.com</a> “title text”)</p>
<p>Reference-style 引用方式：<br>[link text][id]<br>[id]: <a href="https://www.mozilla.org" target="_blank" rel="external">https://www.mozilla.org</a> “title text”</p>
<p>Relative reference to a repository file 引用存储文件：<br>[link text](../path/file/readme.text “title text”)</p>
<p>还能这样使用：<br>[link text][]<br>[link text]: <a href="http://www.reddit.com" target="_blank" rel="external">http://www.reddit.com</a></p>
<p>Email 邮件：<br><a href="&#x6d;&#97;&#105;&#108;&#x74;&#x6f;&#58;&#x65;&#120;&#97;&#109;&#x70;&#108;&#x65;&#64;&#x65;&#120;&#97;&#109;&#112;&#108;&#x65;&#x2e;&#99;&#111;&#109;">&#x65;&#120;&#97;&#109;&#x70;&#108;&#x65;&#64;&#x65;&#120;&#97;&#109;&#112;&#108;&#x65;&#x2e;&#99;&#111;&#109;</a></p>
</blockquote>
<h3 id="images图片链接"><a href="#images图片链接" class="headerlink" title="images图片链接"></a>images图片链接</h3><p><code>图片外链</code>必须记着，很好用<a href="http://i2.tietuku.com/" target="_blank" rel="external">贴图</a></p>
<blockquote>
<p>Inline-style 内嵌方式：<br>![alt text](<a href="https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png" target="_blank" rel="external">https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png</a> “title text”)</p>
<p>Reference-style 引用方式：<br>![alt text][logo]<br>[logo]: <a href="https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png" target="_blank" rel="external">https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png</a> “title text”<br>Inline-style 内嵌方式：<br><img src="https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png" alt="alt text" title="title text"></p>
<p>Reference-style 引用方式：<br>![alt text][logo]</p>
<p>[logo]: <a href="https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png" target="_blank" rel="external">https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png</a> “title text”</p>
<p>###code and Syntax HIghlighting 代码语法高亮：</p>
<ul>
<li>使用`` 包裹起来 ``效果为： <code>包裹起来</code></li>
</ul>
</blockquote>
<ul>
<li>语法高亮</li>
<li><p>例如：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">s = <span class="string">"Python syntax highlighting"</span></div><div class="line"><span class="keyword">print</span> s</div></pre></td></tr></table></figure>
</li>
<li><p>Block Code代码分组（代码区块）：<br>在该行开头缩进4个空格或一个制表符(tab)</p>
</li>
</ul>
<p><strong>Blockquotes 引用：</strong></p>
<blockquote>
<p>Email-style angle brackets<br>are used for blockquotes.</p>
<blockquote>
<p>And, they can be nested.</p>
<h4 id="Headers-in-blockquotes"><a href="#Headers-in-blockquotes" class="headerlink" title="Headers in blockquotes"></a>Headers in blockquotes</h4><ul>
<li>You can quote a list.</li>
<li>Etc.</li>
</ul>
</blockquote>
</blockquote>
<h3 id="Hard-LIne-Breaks换行："><a href="#Hard-LIne-Breaks换行：" class="headerlink" title="Hard LIne Breaks换行："></a>Hard LIne Breaks换行：</h3><p>在一行的结尾处加上2个或2个以上的空格，也可以使用标签<br>第一行文字，<br>第二行文字</p>
<p>###水平分割线：<br>*<em>*<br>\</em> <em> </em><br>- - -</p>
<h3 id="Escape-charecter转义符（反斜杠）："><a href="#Escape-charecter转义符（反斜杠）：" class="headerlink" title="Escape charecter转义符（反斜杠）："></a>Escape charecter转义符（反斜杠）：</h3><p>Markdown 可以利用反斜杠来插入一些在语法中有其它意义的符号，例如：如果你想要用星号加在文字旁边的方式来做出强调效果，你可以在星号的前面加上反斜杠：<br>*literal asterisks*<br>Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：<br>\反斜杠  `反引号  *星号  _下划线  {}花括号  []方括号  ()括弧  #井字号  +加号  -减号  .英文句 !感叹号</p>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="http://daringfireball.net/projects/markdown/" target="_blank" rel="external">Markdown官网</a><br><a href="http://www.markdown.cn/" target="_blank" rel="external">Markdown语法说明</a><br><a href="http://www.bluesdream.com/blog/markdown-cheatsheet-syntax-manual.html" target="_blank" rel="external">参照地址</a><br><a href="http://blog.maxwi.com/2014/03/20/learn-mardown-in-5-minutes/" target="_blank" rel="external">good</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hexo简明]]></title>
      <url>http://arvon.top/2015/07/20/Hexo%E7%AE%80%E6%98%8E/</url>
      <content type="html"><![CDATA[<p><strong>简介</strong>：出自台湾某大学生之手，说是叫tommy351，感觉是叼了个扎天。是一个基于Node.js的静态博客程序，其<br>编译上百篇文字只需要几秒。hexo生成静态网页可以直接放到Github Pages，BAE，SAE等平台上。</p>
<p>###常用的命令</p>
<ul>
<li>hexo n “我的博客” == hexo new “我的博客”    #新建文章</li>
<li>hexo p == hexo publish    #将_drafts下的文件放到_post下，也就是发布草稿</li>
<li>hexo g == hexo generate    #生成静态网页</li>
<li>hexo d == hexo deploy    #发布到远程服务器，开启–generate选项可以在deploy前自动generate</li>
</ul>
<a id="more"></a>
<p>###服务器命令</p>
<ul>
<li>hexo server #Hexo 会监视文件变动并自动更新，您无须重启服务器。</li>
<li>hexo server -s #静态模式</li>
<li>hexo server -p 5000 #更改端口</li>
<li>hexo server -i 192.168.1.1 #自定义 IP</li>
<li>hexo clean #清除缓存 网页正常情况下可以忽略此条命令</li>
<li>hexo g #生成静态网页</li>
<li>hexo d #开始部署</li>
</ul>
<p>###监视文件是否变动</p>
<ul>
<li>hexo generate    #使hexo生成静态文件快速而且简单</li>
<li>hexo generate –watch    #监视文件变动</li>
</ul>
<p>###完成后部署</p>
<ul>
<li>hexo deploy -g 或hexo server -g</li>
<li>hexo henerate –deploy 或hexo deploy –generate</li>
</ul>
<p>###草稿</p>
<ul>
<li>hexo publish [layout]<title></title></li>
</ul>
<p>###模板</p>
<ul>
<li>hexo new “postName” #新建文章</li>
<li>hexo new page “pageName” #新建页面</li>
<li>hexo generate #生成静态页面至public目录</li>
<li>hexo server #开启预览访问端口（默认端口4000，’ctrl + c’关闭server）</li>
<li>hexo deploy #将.deploy目录部署到GitHub</li>
<li>hexo new [layout] <title></title></li>
<li>hexo new photo “My Gallery”</li>
<li>hexo new “Hello World” –lang tw</li>
</ul>
<h3 id="问题记录"><a href="#问题记录" class="headerlink" title="问题记录"></a>问题记录</h3><ol>
<li><strong>Question：</strong>如何设置首页的卡片摘要效果<br><code>Answer:</code>将_config.yml文件中的index：下的expand设置为false，然后在文中添加&lt;!–more–&gt;字段来截取摘要</li>
<li><strong>Question:</strong>出现了很大的问题，描述：本人准备做一个看起来很厉害的简历，but我按教程做的结果是hexo反复报错报错如下<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">FATAL Something<span class="string">'s wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.html</span></div><div class="line">Error: expected end of comment, got end of file</div><div class="line">    at Tokenizer.nextToken (/home/fenghao/blog/node_modules/hexo/node_modules/nunjucks/src/lexer.js:282:23)</div><div class="line">    at Object.extend.nextToken (/home/fenghao/blog/node_modules/hexo/node_modules/nunjucks/src/parser.js:32:27)</div><div class="line">    at Object.extend.peekToken (/home/fenghao/blog/node_modules/hexo/node_modules/nunjucks/src/parser.js:44:43)</div><div class="line">    at Object.extend.parseNodes (/home/fenghao/blog/node_modules/hexo/node_modules/nunjucks/src/parser.js:1124:38)</div><div class="line">    at Object.extend.parseAsRoot (/home/fenghao/blog/node_modules/hexo/node_modules/nunjucks/src/parser.js:1177:42)</div><div class="line">    at Object.module.exports.parse (/home/fenghao/blog/node_modules/hexo/node_modules/nunjucks/src/parser.js:1199:18)</div><div class="line">    at Object.module.exports.compile (/home/fenghao/blog/node_modules/hexo/node_modules/nunjucks/src/compiler.js:1118:48)</div><div class="line">    at Obj.extend._compile (/home/fenghao/blog/node_modules/hexo/node_modules/nunjucks/src/environment.js:444:35)</div><div class="line">    at Obj.extend.compile (/home/fenghao/blog/node_modules/hexo/node_modules/nunjucks/src/environment.js:433:18)</div><div class="line">    at null.&lt;anonymous&gt; (/home/fenghao/blog/node_modules/hexo/node_modules/nunjucks/src/environment.js:378:22)</div><div class="line">    at Object.exports.withPrettyErrors (/home/fenghao/blog/node_modules/hexo/node_modules/nunjucks/src/lib.js:24:16)</div><div class="line">    at Obj.extend.render (/home/fenghao/blog/node_modules/hexo/node_modules/nunjucks/src/environment.js:374:20)</div><div class="line">    at Obj.extend.renderString (/home/fenghao/blog/node_modules/hexo/node_modules/nunjucks/src/environment.js:261:21)</div><div class="line">    at /home/fenghao/blog/node_modules/hexo/lib/extend/tag.js:56:9</div><div class="line">    at tryCatcher (/home/fenghao/blog/node_modules/hexo/node_modules/bluebird/js/main/util.js:24:31)</div><div class="line">    at Promise._resolveFromResolver (/home/fenghao/blog/node_modules/hexo/node_modules/bluebird/js/main/promise.js:427:31)</div><div class="line">    at new Promise (/home/fenghao/blog/node_modules/hexo/node_modules/bluebird/js/main/promise.js:53:37)</div><div class="line">    at Tag.render (/home/fenghao/blog/node_modules/hexo/lib/extend/tag.js:55:10)</div></pre></td></tr></table></figure>
</li>
</ol>
<p>诸如此类报错，还原之前备份后再倒入md文件，问题依旧，也怪自己没想法，本该料到是markdown文件出错了的，ba~la~ba~la,最后还是google拯救了我，不得不吐槽一下某度，真不是东西，屁都查不出来、、、<br><code>解决方法</code>只要将一个markdown文件中的内容去掉以后就好了，好像是#的问题，真是邪了门了，我都打不出来，只能嵌在代码里了。他们讲版本2.8.3没有这个问题。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">“Error $&#123;<span class="comment">#v0&#125; $&#123;#v1&#125;”</span></div></pre></td></tr></table></figure></p>
<p>###摘抄地址</p>
<ul>
<li>地址一：<a href="https://segmentfault.com/a/1190000002632530" title="hexo命令详解" target="_blank" rel="external">Hexo命令详解</a></li>
<li>地址二：<a href="http://c4fun.cn/blog/2014/03/03/use-hexo-blog/" title="##可以不加的嘿嘿##" target="_blank" rel="external">Hexo搭建博客</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用Hexo和Github搭建Blog]]></title>
      <url>http://arvon.top/2015/07/17/%E4%BD%BF%E7%94%A8Hexo%E5%92%8CGithub%E6%90%AD%E5%BB%BABlog/</url>
      <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=25706279&auto=1&height=66"></iframe>

<p><strong>Update</strong>:添加了云音乐外链，方法非常简单粗暴，直接在网易云音乐上生成外链然后放进文章里就行了，如图<br><img src="http://oqfz9mxmq.bkt.clouddn.com/20150717-hexoblog-1.jpeg" alt="20150717-hexoblog-1"><br><img src="http://oqfz9mxmq.bkt.clouddn.com/20150717-hexoblog-2.jpeg" alt="20150717-hexoblog-2"><br>Tips：最近几天都在折腾这个东西，网上有很多的教程，但终究还是有点费劲，在这里总结一下。我是在win7上做的，我尽可能把我出问题的地方着重描述，希望让有兴趣玩这个伙伴们可以顺利点，嘻嘻。特别鸣谢陈素封的博客，帮助很大，话不多说，开始整理。win上多有不便，还会在linux上进行搭建。</p>
<a id="more"></a>
<h1 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h1><p> 2015/07/17第一次记录，因对markdown语法不熟练，Blog功能尚不完善，所以待补充修改</p>
<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><ol>
<li>github账户设置<br>平台为win，需注册<a href="http://www.github.com" title="github account" target="_blank" rel="external">github account</a>登陆github后需要创建一个repository,然后就写个REpositoryname，<strong>注意要和Owner的name一致</strong>（注意），然后勾选那个Initaalize this…什么的选项，然后就这样成了，不然就是像我一样不停的犯错，为何还有待考量，反正现在听话就ok。</li>
<li>软件设置<br>需要的软件有node.js和git，实际最好再来个Visual Studio Code，你会发现有语法高亮就是舒心</li>
<li>待补充昂<br>为了可以清晰一点，决定把Markdown和这个Blog分开记录。恩，就是这样</li>
</ol>
<h1 id="开始搭建"><a href="#开始搭建" class="headerlink" title="开始搭建"></a>开始搭建</h1><h3 id="安装node-js软件"><a href="#安装node-js软件" class="headerlink" title="安装node.js软件"></a>安装node.js软件</h3><ul>
<li>下载地址戳：<a href="http://www.nodejs.org/download/" title="node.js" target="_blank" rel="external">node.js</a>,然后就开始一路下一步吧，然后你的发现带cmd多了一条np</li>
</ul>
<h3 id="安装git软件"><a href="#安装git软件" class="headerlink" title="安装git软件"></a>安装git软件</h3><ul>
<li>下载地址戳：<a href="http://git-scm.com/download/" title="git" target="_blank" rel="external">git</a>,依旧下一步到底。昨天做着的时候没记录，真是一大败笔</li>
</ul>
<h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><ol>
<li><p>进入Git bash,输入命令</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">npm install -g hexo	#hexo表示全局安装hexo</div><div class="line"><span class="meta">#</span><span class="bash">创建hexo文件夹，如/user/arvon/hexo-lxc</span></div><div class="line">hexo init	#初始化hexo</div><div class="line">npm install</div><div class="line">npm generate</div><div class="line">npm server</div></pre></td></tr></table></figure>
</li>
<li><p>然后可以通过访问localhost查看预览http：//localhost:4000/</p>
</li>
</ol>
<h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><ol>
<li>将在github上创建的Repository，找到https那个url将其复制</li>
<li><p>然后编辑位于你创建的文件夹下的文件，例如我就是：/user/arvon/hexo-lxc/_config.yml</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">deploy:</span></div><div class="line">type: git</div><div class="line">repository: https://github.com/arvon2014/arvon2014.github.com</div><div class="line">branch: master</div><div class="line">github上的地址：https://github.com/Arvon2014/arvon2014.github.com.git</div><div class="line"><span class="meta">#</span><span class="bash">web上访问的为：http://arvon2014.github.io</span></div></pre></td></tr></table></figure>
</li>
<li><p>设置ssh免密码访问</p>
<ul>
<li>先查看本地是否已经存在ssh文件，如不存在直接跳过下面第二步</li>
<li>删除已有的ssh的文件</li>
<li><p>输入命令</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -t rsa -C "邮件地址@youremail.com" Generating public/private rsa key pair. Enter file in which to save the key (/Users/your_user_directory/.ssh/id_rsa):</div><div class="line">Enter passphrase (empty for no passphrase):&lt;输入加密串&gt; Enter same passphrase again:&lt;再次输入加密串&gt;</div><div class="line">ssh -T git@github.com	#测试</div><div class="line">The authenticity of host 'github.com (207.97.227.239)' can't be established. RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48. Are you sure you want to continue connecting (yes/no)?	#说明成功</div><div class="line"><span class="meta"> $</span><span class="bash"> git config --global user.name <span class="string">"你的名字"</span> $ git config --global user.email <span class="string">"your_email@youremail.com"</span>	<span class="comment">#设置你的信息</span></span></div></pre></td></tr></table></figure>
</li>
<li><p>现在已经可以顺利将环境搭建完毕</p>
</li>
<li>进入你的Hexo目录，开始试验吧<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hexo generate = hexo g</div><div class="line">hexo server = hexo s	#部署本地预览</div><div class="line">hexo deploy = hexo d	#生成部署</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
<hr>
<p>以上，歌曲为一万次悲伤，推荐使用网易云音乐生成外链</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[安装hexo记录]]></title>
      <url>http://arvon.top/2015/06/13/CentOS%E5%AE%89%E8%A3%85hexo%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<p>简要记录一下在centos上安装hexo的过程<br>记录在CentOS环境下配置hexo博客环境记录</p>
<h2 id="Install-Git"><a href="#Install-Git" class="headerlink" title="Install Git"></a>Install Git</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">yum remove git</div><div class="line">yum install git-core</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="Install-node-js"><a href="#Install-node-js" class="headerlink" title="Install node.js"></a>Install node.js</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh</div><div class="line"><span class="meta">#</span><span class="bash">需要重新加载环境变量</span></div><div class="line">nvm install 0.10</div><div class="line">nvm use 0.10</div></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">mac 下的方法</span></div><div class="line"> curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.31.3/install.sh | bash</div><div class="line"> export NVM_DIR="$HOME/.nvm"[ -s "$NVM_DIR/nvm.sh" ] &amp;&amp; . "$NVM_DIR/nvm.sh" # This loads nvm</div><div class="line"> nvm install stable</div><div class="line"> npm install -g hexo-cli</div></pre></td></tr></table></figure>
<h2 id="Install-hexo"><a href="#Install-hexo" class="headerlink" title="Install hexo"></a>Install hexo</h2> <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"> npm install hexo -g</div><div class="line"></div><div class="line"> hexo init blog</div><div class="line"><span class="meta">#</span><span class="bash">初始化blog目录</span></div><div class="line"> hexo s --debug</div><div class="line"><span class="meta">#</span><span class="bash">测试页面</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux下关于文件属性的三个时间]]></title>
      <url>http://arvon.top/2015/05/13/Linux%E4%B8%8B%E5%85%B3%E4%BA%8E%E6%96%87%E4%BB%B6%E5%B1%9E%E6%80%A7%E7%9A%84%E4%B8%89%E4%B8%AA%E6%97%B6%E9%97%B4/</url>
      <content type="html"><![CDATA[<p>Tips: 主要区分linux下文件的三个时间属性，atime、mtime、ctime</p>
<blockquote>
<ul>
<li>文件的 Access time，atime 是在读取文件或者执行文件时更改的任何对inode的访问都会使此处改变。</li>
<li>文件的Modified time，mtime 是在写入文件时随文件内容的更改而更改的。</li>
<li>文件的 Change time，ctime 是在写入文件、更改所有者、权限或链接设置时随 Inode 的内容更改而更改的。只要stat出来的内容发生改变就会发生改变。mtime的改变必然导致ctime的改变。</li>
</ul>
</blockquote>
<a id="more"></a>
<h3 id="关于directory"><a href="#关于directory" class="headerlink" title="关于directory"></a>关于directory</h3><ul>
<li>文件夹的 Access time，atime 是在读取文件或者执行文件时更改的（只cd进入一个目录然后cd ..不会引起atime的改变，但ls一下就不同了）。</li>
<li>文件夹的 Modified time，mtime 是在文件夹中有文件的新建、删除才会改变（如果只是改变文件内容不会引起mtime的改变，换句话说如果ls -f <directory>的结果发生改变mtime就会被刷新。这里可能有人要争论了：我进入dd这个文件夹vi了一个文件然后退出，前后ls -f <directory>的结果没有改变但是文件夹的mtime发生改变了……这点请主意vi命令在编辑文件时会在本文件夹下产生一 个”.file.swp”临时文件，该文件随着vi的退出而被删除……这就导致了mtime的改变 [Auxten:p]不信你可以用nano修改文件来试验）。</directory></directory></li>
<li>文件夹的 Change time，ctime 基本同文件的ctime，其体现的是inode的change time。</li>
<li>这里还要补充一点：mount -o noatime(mount -o remount,atime / 可以在线重新挂载根目录) 可以选择不记录文件的atime的改变，这意味着什么呢？当你创建了这个文件后这个文件的atime就定格了，除非你用touch或者touch -a强制刷新文件的atime。这样在可以在一定程度上提升文件系统的读写性能，特别是网站这种系统中在fstab里面加上noatime是个好主意</li>
</ul>
<h3 id="关于find"><a href="#关于find" class="headerlink" title="关于find"></a>关于find</h3><ul>
<li>含义：<br>文件的 Access time，atime 是在读取文件或者执行文件时更改的；<br>文件的 Modified time，mtime 是在写入文件时随文件内容的更改而更改的；<br>文件的 Create time，ctime 是在写入文件、更改所有者、权限或链接设置时随 Inode 的内容更改而更改的。</li>
<li>文件各种事件标记的显示方法<br>ls -lc filename         列出文件的 ctime<br>ls -lu filename         列出文件的 atime<br>ls -l filename          列出文件的 mtime</li>
</ul>
<hr>
<p>以上</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux查看主机信息]]></title>
      <url>http://arvon.top/2015/04/13/Linux%E6%9F%A5%E7%9C%8B%E4%B8%BB%E6%9C%BA%E4%BF%A1%E6%81%AF/</url>
      <content type="html"><![CDATA[<p>这篇包括（系统版本、内核信息、核心数、主机名）还有一个关于系统信息查看的，<a href="http://blog.arvon.top/2015/07/27/Linux%E7%B3%BB%E7%BB%9F%E6%9F%A5%E7%9C%8B%E5%91%BD%E4%BB%A4/" target="_blank" rel="external">–&gt;飞机票</a></p>
<a id="more"></a>
<h3 id="查看主机版本信息"><a href="#查看主机版本信息" class="headerlink" title="查看主机版本信息"></a>查看主机版本信息</h3><ul>
<li><p>系统信息</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# cat /etc/redhat-release</div><div class="line">CentOS release 6.7 (Final)</div><div class="line"><span class="meta">#</span><span class="bash">or</span></div><div class="line">[root@localhost ~]# cat /etc/issue</div><div class="line">CentOS release 6.7 (Final)</div><div class="line">Kernel \r on an \m</div><div class="line"><span class="meta">#</span><span class="bash">or</span></div><div class="line">[root@localhost ~]# lsb_release -a</div><div class="line">LSB Version:    :base-4.0-ia32:base-4.0-noarch:core-4.0-ia32:core-4.0-noarch</div><div class="line">Distributor ID:    CentOS</div><div class="line">Description:    CentOS release 6.7 (Final)</div><div class="line">Release:    6.7</div><div class="line">Codename:    Final</div><div class="line"><span class="meta">#</span><span class="bash">yum provides */lsb_release</span></div><div class="line"><span class="meta">#</span><span class="bash">yum install -y redhat-lsb-core-4.0-7.el6.centos.i686</span></div></pre></td></tr></table></figure>
</li>
<li><p>内核信息</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# cat /proc/version</div><div class="line">Linux version 2.6.32-573.el6.x86_64 (mockbuild@c6b9.bsys.dev.centos.org) (gcc version 4.4.7 20120313 (Red Hat 4.4.7-16) (GCC) ) #1 SMP Thu Jul 23 15:44:03 UTC 2015</div><div class="line"><span class="meta">#</span><span class="bash">or</span></div><div class="line">[root@localhost ~]# uname -a</div><div class="line">Linux localhost.localdomain 2.6.32-573.el6.x86_64 #1 SMP Thu Jul 23 15:44:03 UTC 2015 x86_64 x86_64 x86_64 GNU/Linux</div><div class="line"><span class="meta">#</span><span class="bash">or</span></div><div class="line">[root@localhost ~]# uname -r</div><div class="line">2.6.32-573.el6.x86_64</div></pre></td></tr></table></figure>
</li>
<li><p>查看当前运行环境是32还是64，是32也不代表不支持64</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# getconf LONG_BIT</div><div class="line">64</div><div class="line"><span class="meta">#</span><span class="bash">or</span></div><div class="line">[root@localhost ~]# file /sbin/init</div><div class="line">/sbin/init: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.18, stripped</div><div class="line">[root@localhost ~]# file /bin/ls</div><div class="line">/bin/ls: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.18, stripped</div><div class="line"><span class="meta">#</span><span class="bash">or</span></div><div class="line">[root@localhost ~]# uname -a</div><div class="line">Linux localhost.localdomain 2.6.32-573.el6.x86_64 #1 SMP Thu Jul 23 15:44:03 UTC 2015 x86_64 x86_64 x86_64 GNU/Linux</div><div class="line">[root@localhost ~]# uname -m</div><div class="line">x86_64</div><div class="line"><span class="meta">#</span><span class="bash">or</span></div><div class="line">[root@localhost ~]# arch</div><div class="line">x86_64</div><div class="line"><span class="meta">#</span><span class="bash">or</span></div><div class="line">[root@localhost ~]# echo $HOSTTYPE</div><div class="line">x86_64</div><div class="line"><span class="meta">#</span><span class="bash">or</span></div><div class="line">[root@localhost ~]# getconf -a</div><div class="line"><span class="meta">#</span><span class="bash">or</span></div><div class="line">[root@localhost ~]# more /proc/cpuinfo</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="查看其他"><a href="#查看其他" class="headerlink" title="查看其他"></a>查看其他</h3><ul>
<li>查看cpu核心数<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<p>以上</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux下hexo配置]]></title>
      <url>http://arvon.top/2015/03/13/Linux%E4%B8%8Bhexo%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<h3 id="本地环境"><a href="#本地环境" class="headerlink" title="本地环境"></a>本地环境</h3><blockquote>
<ul>
<li>CentOS6</li>
<li>下载nvm（Node.js的版本管理器）软件<br>wget -qO- <a href="https://raw.github.com/creationix/nvm/master/install.sh" target="_blank" rel="external">https://raw.github.com/creationix/nvm/master/install.sh</a> | sh    #下载安装nvm（安装目录在/root/.nvm/）</li>
<li>安装nvm软件<br>nvm install 0.10    #选择Node.js的安装版本<br>nvm ls    #查看node.js的版本</li>
</ul>
</blockquote>
<a id="more"></a>
<h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><ul>
<li><p>安装hexo</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">npm install -g hexo	#使用npm安装hexo(此处安装并未完成)</div><div class="line"><span class="meta">#</span><span class="bash">如果显示<span class="built_in">command</span> not found，就重启终端，然后使用nvm ls检查当前版本，如果没有使用命令</span></div><div class="line">nvm use 0.10	#即使用方才装的版本（使用此命令后安装成功）</div><div class="line"><span class="meta">#</span><span class="bash">或使用一下命令直接设置全局默认的node.js版本</span></div><div class="line">nvm alias default 0.10.26</div></pre></td></tr></table></figure>
</li>
<li><p>安装失败的原因可能是无法连接到官方服务器，或者是GFW（Great Firewall，中国国家防火墙或长城防火墙）的问题。<br>需修改npm镜像源使用config命令</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> npm config <span class="built_in">set</span> registry http://registry.cnpmjs.org  </span></div><div class="line"><span class="meta">$</span><span class="bash"> npm info underscore (如果上面配置成功，使用这个命令会有以下提示)  </span></div><div class="line"><span class="meta">$</span><span class="bash"> npm http GET http://registry.cnpmjs.org/underscore  </span></div><div class="line"><span class="meta">$</span><span class="bash"> npm http 200 http://registry.cnpmjs.org/underscore</span></div></pre></td></tr></table></figure>
</li>
<li><p>命令行指定  </p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> npm --registry http://registry.cnpmjs.org info underscore   </span></div><div class="line">编辑 ~/.npmrc 加入以下内容可以使配置永久生效，就不用每次npm安装时都要运行指定源命令了  </div><div class="line"><span class="meta">$</span><span class="bash"> registry = http://registry.cnpmjs.org</span></div></pre></td></tr></table></figure>
</li>
<li><p>使用以下命令对hexo进行初始化<br>这里我位于~目录，而且我想把我的个人博客放在~/hexo目录，需要放在其他目录直接改一下自己需要的目录就可以了</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> hexo install hexo --save</span></div><div class="line"><span class="meta">$</span><span class="bash"> hexo init hexo</span></div></pre></td></tr></table></figure>
</li>
<li><p>本地环境到此结束，有木有很easy</p>
</li>
</ul>
<h3 id="初步预览"><a href="#初步预览" class="headerlink" title="初步预览"></a>初步预览</h3>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo generate 或 hexo g	#生成静态文件</div><div class="line">hexo server 或 hexo s	#打开本地预览（http:localhost:4000）</div></pre></td></tr></table></figure>
<h3 id="配置git并发布"><a href="#配置git并发布" class="headerlink" title="配置git并发布"></a>配置git并发布</h3><p>配置git并发布基于hexo和github的个人博客<br>首先编辑个人安装目录的_config.yml文件，找到一下内容并修改为git</p>
<blockquote>
<p>deploy:<br>type: git<br>repository: <a href="https://github.com/Arvon2014/arvon2014.github.com.git(直接将github上的https项复制并粘贴" target="_blank" rel="external">https://github.com/Arvon2014/arvon2014.github.com.git(直接将github上的https项复制并粘贴</a>)<br>branch: master<br>运行以下命令设置git全局变量，即设置用户名和邮箱(需要先和github建立免密码登陆)<br>git config –global user.name “Arvon”<br>git config –global user.email “yafeng2011@126.com”</p>
</blockquote>
<h3 id="免密码ssh公钥设置"><a href="#免密码ssh公钥设置" class="headerlink" title="免密码ssh公钥设置"></a>免密码ssh公钥设置</h3><ol>
<li>是否安装了ssh，未装执行<blockquote>
<p>yum install ssh  </p>
</blockquote>
</li>
<li>检查公钥<blockquote>
<p>cd ~/.ssh    #存在就删了  </p>
</blockquote>
</li>
<li>生成公钥私钥对<blockquote>
<p>ssh-keygen -t rsa -C “you_email@youremail.com”<br>cd ~/.ssh    #验证  </p>
</blockquote>
</li>
<li>添加ssh公钥到github<blockquote>
<p>将公钥（pub）的内容复制到Deploykeys里面  </p>
</blockquote>
</li>
<li>测试是否生效<blockquote>
<p>ssh -T git@github.com  </p>
</blockquote>
</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Centos搭建nginx+php环境]]></title>
      <url>http://arvon.top/2015/02/13/Centos%E6%90%AD%E5%BB%BAnginx-php%E7%8E%AF%E5%A2%83/</url>
      <content type="html"><![CDATA[<p>Tips：线上pfsense中添加bandwidthd监控流量的功能存在问题，需要配置一个支持php的web环境来进行支持，这里选择了nginx+php。</p>
<h3 id="Environment"><a href="#Environment" class="headerlink" title="Environment"></a>Environment</h3><ul>
<li><p>yum</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget http://mirrors.opencas.cn/epel/6/i386/epel-release-6-8.noarch.rpm</div></pre></td></tr></table></figure>
</li>
<li><p>CentOS6.3_x64</p>
</li>
</ul>
<a id="more"></a>
<h3 id="Install-software"><a href="#Install-software" class="headerlink" title="Install software"></a>Install software</h3><ul>
<li><p>Install nginx</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">yum install nginx</div><div class="line"><span class="comment">#GeoIP.x86_64 0:1.6.5-1.el6                                         </span></div><div class="line"><span class="comment">#GeoIP-GeoLite-data.noarch 0:2015.04-2.el6                          </span></div><div class="line"><span class="comment">#GeoIP-GeoLite-data-extra.noarch 0:2015.04-2.el6                    </span></div><div class="line"><span class="comment">#geoipupdate.x86_64 0:2.2.1-2.el6                                   </span></div><div class="line"><span class="comment">#libxslt.x86_64 0:1.1.26-2.el6_3.1                                  </span></div><div class="line"><span class="comment">#nginx-filesystem.noarch 0:1.0.15-12.el6</span></div><div class="line">chkconfig nginx on</div><div class="line">/etc/init.d/nginx restart</div></pre></td></tr></table></figure>
</li>
<li><p>Install php-fpm</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">yum install php-fpm</div><div class="line"><span class="comment">#Installing : php-common-5.3.3-46.el6_6.x86_64                  1/2</span></div><div class="line"><span class="comment">#Installing : php-fpm-5.3.3-46.el6_6.x86_64                     2/2</span></div><div class="line"><span class="comment">#Verifying  : php-fpm-5.3.3-46.el6_6.x86_64                     1/2</span></div><div class="line"><span class="comment">#Verifying  : php-common-5.3.3-46.el6_6.x86_64                  2/2</span></div><div class="line">chkconfig php-fpm on</div><div class="line">/etc/init.d/php-fpm restart</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Edit-config"><a href="#Edit-config" class="headerlink" title="Edit config"></a>Edit config</h3><ul>
<li><p>备份配置文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cp /etc/nginx/conf.d/default.conf /tmp/</div></pre></td></tr></table></figure>
</li>
<li><p>修改配置文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#vim /etc/nginx/conf.d/default.conf</span></div><div class="line">server &#123;</div><div class="line">    listen       80;</div><div class="line">    server_name  localhost;</div><div class="line">    autoindex    on;</div><div class="line">    <span class="comment">#charset koi8-r;  </span></div><div class="line">    <span class="comment">#access_log  /var/log/nginx/log/host.access.log  main;  </span></div><div class="line"></div><div class="line">    location / &#123;</div><div class="line">        root   /var/www/html;</div><div class="line">        index  index.html index.htm index.php;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    location ~ \.php$ &#123;</div><div class="line">        root           /var/www/html;</div><div class="line">        fastcgi_pass   127.0.0.1:9000;</div><div class="line">        fastcgi_index  index.php;</div><div class="line">        fastcgi_param  SCRIPT_FILENAME  /var/www/html<span class="variable">$fastcgi_script_name</span>;</div><div class="line">        include        fastcgi_params;</div><div class="line">    &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h3><ul>
<li><p>需确认/var/www/html存在，在此目录下创建测试文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#vim /var/www/html/index.php    #内容如下</span></div><div class="line">&lt;?php</div><div class="line">           phpinfo();</div><div class="line">       ?&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>从浏览器访问查看效果<br>url：IP<br><img src="http://i5.tietuku.com/0c55e4e5fbfb6ca3.png" alt=""></p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[windows批量修改文件后缀]]></title>
      <url>http://arvon.top/2015/01/23/windows%E6%89%B9%E9%87%8F%E4%BF%AE%E6%94%B9%E6%96%87%E4%BB%B6%E5%90%8E%E7%BC%80/</url>
      <content type="html"><![CDATA[<p>Ren命令可用于修改文件的名称，包括后缀名。比如，将D盘中的1.jpg重命名为2.png，只需在命令提示符中输入下面的命令，然后回车即可。<br><a id="more"></a></p>
<blockquote>
<p>ren D:\1.jpg 2.png<br>注意，如果提示权限不足，那么你需要以管理员身份运行命令提示符。<br>如果要批量修改后缀名，可借助通配符来实现。比如将D盘中的所有文件后缀名改为jpg的命令为：</p>
<p>ren D:* *.png<br>如果只想将某一类型文件（具有相同后缀名）修改为另一个类型，比如，将D盘中的所有jpg文件后缀修改为png，其命令为：</p>
<p>ren D:*.jpg *.png<br>如果你经常需要批量修改后缀名，可以把下面两条命令复制到txt文本文档中:</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd /d %~dp0</div><div class="line">ren * *.jpg</div></pre></td></tr></table></figure>
<p>保存后将其后缀txt修改为bat。以后只需要把这个bat文件与需要修改的文件放到同一目录中，然后以管理员身份运行这个bat文件即可将该目录下的所有文件后缀名改为jpg。</p>
<hr>
<p>以上</p>
]]></content>
    </entry>
    
  
  
</search>
